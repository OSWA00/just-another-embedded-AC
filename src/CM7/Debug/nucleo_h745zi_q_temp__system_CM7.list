
nucleo_h745zi_q_temp__system_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006110  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d0  080063b0  080063b0  000163b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006480  08006480  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  08006480  08006480  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006480  08006480  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006480  08006480  00016480  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006484  08006484  00016484  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  24000000  08006488  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004098  24000078  08006500  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24004110  08006500  00024110  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f35f  00000000  00000000  000200a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003bfc  00000000  00000000  0003f405  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f60  00000000  00000000  00043008  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000df8  00000000  00000000  00043f68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00039fb9  00000000  00000000  00044d60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014235  00000000  00000000  0007ed19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0017856a  00000000  00000000  00092f4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0020b4b8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004264  00000000  00000000  0020b50c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000078 	.word	0x24000078
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08006398 	.word	0x08006398

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400007c 	.word	0x2400007c
 80002dc:	08006398 	.word	0x08006398

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000380:	b480      	push	{r7}
 8000382:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000384:	4b3f      	ldr	r3, [pc, #252]	; (8000484 <SystemInit+0x104>)
 8000386:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800038a:	4a3e      	ldr	r2, [pc, #248]	; (8000484 <SystemInit+0x104>)
 800038c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000390:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8000394:	4b3b      	ldr	r3, [pc, #236]	; (8000484 <SystemInit+0x104>)
 8000396:	691b      	ldr	r3, [r3, #16]
 8000398:	4a3a      	ldr	r2, [pc, #232]	; (8000484 <SystemInit+0x104>)
 800039a:	f043 0310 	orr.w	r3, r3, #16
 800039e:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80003a0:	4b39      	ldr	r3, [pc, #228]	; (8000488 <SystemInit+0x108>)
 80003a2:	681b      	ldr	r3, [r3, #0]
 80003a4:	f003 030f 	and.w	r3, r3, #15
 80003a8:	2b06      	cmp	r3, #6
 80003aa:	d807      	bhi.n	80003bc <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80003ac:	4b36      	ldr	r3, [pc, #216]	; (8000488 <SystemInit+0x108>)
 80003ae:	681b      	ldr	r3, [r3, #0]
 80003b0:	f023 030f 	bic.w	r3, r3, #15
 80003b4:	4a34      	ldr	r2, [pc, #208]	; (8000488 <SystemInit+0x108>)
 80003b6:	f043 0307 	orr.w	r3, r3, #7
 80003ba:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80003bc:	4b33      	ldr	r3, [pc, #204]	; (800048c <SystemInit+0x10c>)
 80003be:	681b      	ldr	r3, [r3, #0]
 80003c0:	4a32      	ldr	r2, [pc, #200]	; (800048c <SystemInit+0x10c>)
 80003c2:	f043 0301 	orr.w	r3, r3, #1
 80003c6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80003c8:	4b30      	ldr	r3, [pc, #192]	; (800048c <SystemInit+0x10c>)
 80003ca:	2200      	movs	r2, #0
 80003cc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80003ce:	4b2f      	ldr	r3, [pc, #188]	; (800048c <SystemInit+0x10c>)
 80003d0:	681a      	ldr	r2, [r3, #0]
 80003d2:	492e      	ldr	r1, [pc, #184]	; (800048c <SystemInit+0x10c>)
 80003d4:	4b2e      	ldr	r3, [pc, #184]	; (8000490 <SystemInit+0x110>)
 80003d6:	4013      	ands	r3, r2
 80003d8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80003da:	4b2b      	ldr	r3, [pc, #172]	; (8000488 <SystemInit+0x108>)
 80003dc:	681b      	ldr	r3, [r3, #0]
 80003de:	f003 0308 	and.w	r3, r3, #8
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d007      	beq.n	80003f6 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80003e6:	4b28      	ldr	r3, [pc, #160]	; (8000488 <SystemInit+0x108>)
 80003e8:	681b      	ldr	r3, [r3, #0]
 80003ea:	f023 030f 	bic.w	r3, r3, #15
 80003ee:	4a26      	ldr	r2, [pc, #152]	; (8000488 <SystemInit+0x108>)
 80003f0:	f043 0307 	orr.w	r3, r3, #7
 80003f4:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80003f6:	4b25      	ldr	r3, [pc, #148]	; (800048c <SystemInit+0x10c>)
 80003f8:	2200      	movs	r2, #0
 80003fa:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80003fc:	4b23      	ldr	r3, [pc, #140]	; (800048c <SystemInit+0x10c>)
 80003fe:	2200      	movs	r2, #0
 8000400:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000402:	4b22      	ldr	r3, [pc, #136]	; (800048c <SystemInit+0x10c>)
 8000404:	2200      	movs	r2, #0
 8000406:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000408:	4b20      	ldr	r3, [pc, #128]	; (800048c <SystemInit+0x10c>)
 800040a:	4a22      	ldr	r2, [pc, #136]	; (8000494 <SystemInit+0x114>)
 800040c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800040e:	4b1f      	ldr	r3, [pc, #124]	; (800048c <SystemInit+0x10c>)
 8000410:	4a21      	ldr	r2, [pc, #132]	; (8000498 <SystemInit+0x118>)
 8000412:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000414:	4b1d      	ldr	r3, [pc, #116]	; (800048c <SystemInit+0x10c>)
 8000416:	4a21      	ldr	r2, [pc, #132]	; (800049c <SystemInit+0x11c>)
 8000418:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800041a:	4b1c      	ldr	r3, [pc, #112]	; (800048c <SystemInit+0x10c>)
 800041c:	2200      	movs	r2, #0
 800041e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000420:	4b1a      	ldr	r3, [pc, #104]	; (800048c <SystemInit+0x10c>)
 8000422:	4a1e      	ldr	r2, [pc, #120]	; (800049c <SystemInit+0x11c>)
 8000424:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000426:	4b19      	ldr	r3, [pc, #100]	; (800048c <SystemInit+0x10c>)
 8000428:	2200      	movs	r2, #0
 800042a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800042c:	4b17      	ldr	r3, [pc, #92]	; (800048c <SystemInit+0x10c>)
 800042e:	4a1b      	ldr	r2, [pc, #108]	; (800049c <SystemInit+0x11c>)
 8000430:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000432:	4b16      	ldr	r3, [pc, #88]	; (800048c <SystemInit+0x10c>)
 8000434:	2200      	movs	r2, #0
 8000436:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000438:	4b14      	ldr	r3, [pc, #80]	; (800048c <SystemInit+0x10c>)
 800043a:	681b      	ldr	r3, [r3, #0]
 800043c:	4a13      	ldr	r2, [pc, #76]	; (800048c <SystemInit+0x10c>)
 800043e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000442:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000444:	4b11      	ldr	r3, [pc, #68]	; (800048c <SystemInit+0x10c>)
 8000446:	2200      	movs	r2, #0
 8000448:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800044a:	4b15      	ldr	r3, [pc, #84]	; (80004a0 <SystemInit+0x120>)
 800044c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800044e:	4a14      	ldr	r2, [pc, #80]	; (80004a0 <SystemInit+0x120>)
 8000450:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000454:	6253      	str	r3, [r2, #36]	; 0x24


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000456:	4b13      	ldr	r3, [pc, #76]	; (80004a4 <SystemInit+0x124>)
 8000458:	681a      	ldr	r2, [r3, #0]
 800045a:	4b13      	ldr	r3, [pc, #76]	; (80004a8 <SystemInit+0x128>)
 800045c:	4013      	ands	r3, r2
 800045e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000462:	d202      	bcs.n	800046a <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000464:	4b11      	ldr	r3, [pc, #68]	; (80004ac <SystemInit+0x12c>)
 8000466:	2201      	movs	r2, #1
 8000468:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800046a:	4b11      	ldr	r3, [pc, #68]	; (80004b0 <SystemInit+0x130>)
 800046c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000470:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 8000472:	4b04      	ldr	r3, [pc, #16]	; (8000484 <SystemInit+0x104>)
 8000474:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000478:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 800047a:	bf00      	nop
 800047c:	46bd      	mov	sp, r7
 800047e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000482:	4770      	bx	lr
 8000484:	e000ed00 	.word	0xe000ed00
 8000488:	52002000 	.word	0x52002000
 800048c:	58024400 	.word	0x58024400
 8000490:	eaf6ed7f 	.word	0xeaf6ed7f
 8000494:	02020200 	.word	0x02020200
 8000498:	01ff0000 	.word	0x01ff0000
 800049c:	01010280 	.word	0x01010280
 80004a0:	580000c0 	.word	0x580000c0
 80004a4:	5c001000 	.word	0x5c001000
 80004a8:	ffff0000 	.word	0xffff0000
 80004ac:	51008108 	.word	0x51008108
 80004b0:	52004000 	.word	0x52004000

080004b4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80004b4:	b480      	push	{r7}
 80004b6:	b085      	sub	sp, #20
 80004b8:	af00      	add	r7, sp, #0
 80004ba:	60f8      	str	r0, [r7, #12]
 80004bc:	60b9      	str	r1, [r7, #8]
 80004be:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80004c0:	68fb      	ldr	r3, [r7, #12]
 80004c2:	4a07      	ldr	r2, [pc, #28]	; (80004e0 <vApplicationGetIdleTaskMemory+0x2c>)
 80004c4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80004c6:	68bb      	ldr	r3, [r7, #8]
 80004c8:	4a06      	ldr	r2, [pc, #24]	; (80004e4 <vApplicationGetIdleTaskMemory+0x30>)
 80004ca:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	2280      	movs	r2, #128	; 0x80
 80004d0:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80004d2:	bf00      	nop
 80004d4:	3714      	adds	r7, #20
 80004d6:	46bd      	mov	sp, r7
 80004d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004dc:	4770      	bx	lr
 80004de:	bf00      	nop
 80004e0:	24000094 	.word	0x24000094
 80004e4:	24000148 	.word	0x24000148

080004e8 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b086      	sub	sp, #24
 80004ec:	af02      	add	r7, sp, #8
 80004ee:	4603      	mov	r3, r0
 80004f0:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 80004f2:	79fb      	ldrb	r3, [r7, #7]
 80004f4:	f023 030f 	bic.w	r3, r3, #15
 80004f8:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 80004fa:	79fb      	ldrb	r3, [r7, #7]
 80004fc:	011b      	lsls	r3, r3, #4
 80004fe:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000500:	7bfb      	ldrb	r3, [r7, #15]
 8000502:	f043 030c 	orr.w	r3, r3, #12
 8000506:	b2db      	uxtb	r3, r3
 8000508:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 800050a:	7bfb      	ldrb	r3, [r7, #15]
 800050c:	f043 0308 	orr.w	r3, r3, #8
 8000510:	b2db      	uxtb	r3, r3
 8000512:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8000514:	7bbb      	ldrb	r3, [r7, #14]
 8000516:	f043 030c 	orr.w	r3, r3, #12
 800051a:	b2db      	uxtb	r3, r3
 800051c:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 800051e:	7bbb      	ldrb	r3, [r7, #14]
 8000520:	f043 0308 	orr.w	r3, r3, #8
 8000524:	b2db      	uxtb	r3, r3
 8000526:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000528:	f107 0208 	add.w	r2, r7, #8
 800052c:	2364      	movs	r3, #100	; 0x64
 800052e:	9300      	str	r3, [sp, #0]
 8000530:	2304      	movs	r3, #4
 8000532:	214e      	movs	r1, #78	; 0x4e
 8000534:	4803      	ldr	r0, [pc, #12]	; (8000544 <lcd_send_cmd+0x5c>)
 8000536:	f000 ffb9 	bl	80014ac <HAL_I2C_Master_Transmit>
}
 800053a:	bf00      	nop
 800053c:	3710      	adds	r7, #16
 800053e:	46bd      	mov	sp, r7
 8000540:	bd80      	pop	{r7, pc}
 8000542:	bf00      	nop
 8000544:	240040ac 	.word	0x240040ac

08000548 <lcd_send_data>:

void lcd_send_data (char data)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b086      	sub	sp, #24
 800054c:	af02      	add	r7, sp, #8
 800054e:	4603      	mov	r3, r0
 8000550:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8000552:	79fb      	ldrb	r3, [r7, #7]
 8000554:	f023 030f 	bic.w	r3, r3, #15
 8000558:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 800055a:	79fb      	ldrb	r3, [r7, #7]
 800055c:	011b      	lsls	r3, r3, #4
 800055e:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8000560:	7bfb      	ldrb	r3, [r7, #15]
 8000562:	f043 030d 	orr.w	r3, r3, #13
 8000566:	b2db      	uxtb	r3, r3
 8000568:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 800056a:	7bfb      	ldrb	r3, [r7, #15]
 800056c:	f043 0309 	orr.w	r3, r3, #9
 8000570:	b2db      	uxtb	r3, r3
 8000572:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8000574:	7bbb      	ldrb	r3, [r7, #14]
 8000576:	f043 030d 	orr.w	r3, r3, #13
 800057a:	b2db      	uxtb	r3, r3
 800057c:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 800057e:	7bbb      	ldrb	r3, [r7, #14]
 8000580:	f043 0309 	orr.w	r3, r3, #9
 8000584:	b2db      	uxtb	r3, r3
 8000586:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000588:	f107 0208 	add.w	r2, r7, #8
 800058c:	2364      	movs	r3, #100	; 0x64
 800058e:	9300      	str	r3, [sp, #0]
 8000590:	2304      	movs	r3, #4
 8000592:	214e      	movs	r1, #78	; 0x4e
 8000594:	4803      	ldr	r0, [pc, #12]	; (80005a4 <lcd_send_data+0x5c>)
 8000596:	f000 ff89 	bl	80014ac <HAL_I2C_Master_Transmit>
}
 800059a:	bf00      	nop
 800059c:	3710      	adds	r7, #16
 800059e:	46bd      	mov	sp, r7
 80005a0:	bd80      	pop	{r7, pc}
 80005a2:	bf00      	nop
 80005a4:	240040ac 	.word	0x240040ac

080005a8 <lcd_clear>:

void lcd_clear (void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b082      	sub	sp, #8
 80005ac:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x80);
 80005ae:	2080      	movs	r0, #128	; 0x80
 80005b0:	f7ff ff9a 	bl	80004e8 <lcd_send_cmd>
	for (int i=0; i<70; i++)
 80005b4:	2300      	movs	r3, #0
 80005b6:	607b      	str	r3, [r7, #4]
 80005b8:	e005      	b.n	80005c6 <lcd_clear+0x1e>
	{
		lcd_send_data (' ');
 80005ba:	2020      	movs	r0, #32
 80005bc:	f7ff ffc4 	bl	8000548 <lcd_send_data>
	for (int i=0; i<70; i++)
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	3301      	adds	r3, #1
 80005c4:	607b      	str	r3, [r7, #4]
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	2b45      	cmp	r3, #69	; 0x45
 80005ca:	ddf6      	ble.n	80005ba <lcd_clear+0x12>
	}
}
 80005cc:	bf00      	nop
 80005ce:	bf00      	nop
 80005d0:	3708      	adds	r7, #8
 80005d2:	46bd      	mov	sp, r7
 80005d4:	bd80      	pop	{r7, pc}

080005d6 <lcd_put_cur>:

void lcd_put_cur(int row, int col)
{
 80005d6:	b580      	push	{r7, lr}
 80005d8:	b082      	sub	sp, #8
 80005da:	af00      	add	r7, sp, #0
 80005dc:	6078      	str	r0, [r7, #4]
 80005de:	6039      	str	r1, [r7, #0]
    switch (row)
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d003      	beq.n	80005ee <lcd_put_cur+0x18>
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	2b01      	cmp	r3, #1
 80005ea:	d005      	beq.n	80005f8 <lcd_put_cur+0x22>
 80005ec:	e009      	b.n	8000602 <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 80005ee:	683b      	ldr	r3, [r7, #0]
 80005f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005f4:	603b      	str	r3, [r7, #0]
            break;
 80005f6:	e004      	b.n	8000602 <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 80005f8:	683b      	ldr	r3, [r7, #0]
 80005fa:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80005fe:	603b      	str	r3, [r7, #0]
            break;
 8000600:	bf00      	nop
    }

    lcd_send_cmd (col);
 8000602:	683b      	ldr	r3, [r7, #0]
 8000604:	b2db      	uxtb	r3, r3
 8000606:	4618      	mov	r0, r3
 8000608:	f7ff ff6e 	bl	80004e8 <lcd_send_cmd>
}
 800060c:	bf00      	nop
 800060e:	3708      	adds	r7, #8
 8000610:	46bd      	mov	sp, r7
 8000612:	bd80      	pop	{r7, pc}

08000614 <lcd_init>:


void lcd_init (void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 8000618:	2032      	movs	r0, #50	; 0x32
 800061a:	f000 fbc5 	bl	8000da8 <HAL_Delay>
	lcd_send_cmd (0x30);
 800061e:	2030      	movs	r0, #48	; 0x30
 8000620:	f7ff ff62 	bl	80004e8 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 8000624:	2005      	movs	r0, #5
 8000626:	f000 fbbf 	bl	8000da8 <HAL_Delay>
	lcd_send_cmd (0x30);
 800062a:	2030      	movs	r0, #48	; 0x30
 800062c:	f7ff ff5c 	bl	80004e8 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 8000630:	2001      	movs	r0, #1
 8000632:	f000 fbb9 	bl	8000da8 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000636:	2030      	movs	r0, #48	; 0x30
 8000638:	f7ff ff56 	bl	80004e8 <lcd_send_cmd>
	HAL_Delay(10);
 800063c:	200a      	movs	r0, #10
 800063e:	f000 fbb3 	bl	8000da8 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 8000642:	2020      	movs	r0, #32
 8000644:	f7ff ff50 	bl	80004e8 <lcd_send_cmd>
	HAL_Delay(10);
 8000648:	200a      	movs	r0, #10
 800064a:	f000 fbad 	bl	8000da8 <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 800064e:	2028      	movs	r0, #40	; 0x28
 8000650:	f7ff ff4a 	bl	80004e8 <lcd_send_cmd>
	HAL_Delay(1);
 8000654:	2001      	movs	r0, #1
 8000656:	f000 fba7 	bl	8000da8 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 800065a:	2008      	movs	r0, #8
 800065c:	f7ff ff44 	bl	80004e8 <lcd_send_cmd>
	HAL_Delay(1);
 8000660:	2001      	movs	r0, #1
 8000662:	f000 fba1 	bl	8000da8 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 8000666:	2001      	movs	r0, #1
 8000668:	f7ff ff3e 	bl	80004e8 <lcd_send_cmd>
	HAL_Delay(1);
 800066c:	2001      	movs	r0, #1
 800066e:	f000 fb9b 	bl	8000da8 <HAL_Delay>
	HAL_Delay(1);
 8000672:	2001      	movs	r0, #1
 8000674:	f000 fb98 	bl	8000da8 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8000678:	2006      	movs	r0, #6
 800067a:	f7ff ff35 	bl	80004e8 <lcd_send_cmd>
	HAL_Delay(1);
 800067e:	2001      	movs	r0, #1
 8000680:	f000 fb92 	bl	8000da8 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8000684:	200c      	movs	r0, #12
 8000686:	f7ff ff2f 	bl	80004e8 <lcd_send_cmd>
}
 800068a:	bf00      	nop
 800068c:	bd80      	pop	{r7, pc}

0800068e <lcd_send_string>:

void lcd_send_string (char *str)
{
 800068e:	b580      	push	{r7, lr}
 8000690:	b082      	sub	sp, #8
 8000692:	af00      	add	r7, sp, #0
 8000694:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8000696:	e006      	b.n	80006a6 <lcd_send_string+0x18>
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	1c5a      	adds	r2, r3, #1
 800069c:	607a      	str	r2, [r7, #4]
 800069e:	781b      	ldrb	r3, [r3, #0]
 80006a0:	4618      	mov	r0, r3
 80006a2:	f7ff ff51 	bl	8000548 <lcd_send_data>
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	781b      	ldrb	r3, [r3, #0]
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d1f4      	bne.n	8000698 <lcd_send_string+0xa>
}
 80006ae:	bf00      	nop
 80006b0:	bf00      	nop
 80006b2:	3708      	adds	r7, #8
 80006b4:	46bd      	mov	sp, r7
 80006b6:	bd80      	pop	{r7, pc}

080006b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b084      	sub	sp, #16
 80006bc:	af02      	add	r7, sp, #8
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 80006be:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80006c2:	607b      	str	r3, [r7, #4]
  while ((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0))
 80006c4:	bf00      	nop
 80006c6:	4b33      	ldr	r3, [pc, #204]	; (8000794 <main+0xdc>)
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d004      	beq.n	80006dc <main+0x24>
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	1e5a      	subs	r2, r3, #1
 80006d6:	607a      	str	r2, [r7, #4]
 80006d8:	2b00      	cmp	r3, #0
 80006da:	dcf4      	bgt.n	80006c6 <main+0xe>
    ;
  if (timeout < 0)
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	2b00      	cmp	r3, #0
 80006e0:	da01      	bge.n	80006e6 <main+0x2e>
  {
    Error_Handler();
 80006e2:	f000 f999 	bl	8000a18 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006e6:	f000 facd 	bl	8000c84 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006ea:	f000 f85f 	bl	80007ac <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
  /* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
  /*HW semaphore Clock enable*/
  __HAL_RCC_HSEM_CLK_ENABLE();
 80006ee:	4b29      	ldr	r3, [pc, #164]	; (8000794 <main+0xdc>)
 80006f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006f4:	4a27      	ldr	r2, [pc, #156]	; (8000794 <main+0xdc>)
 80006f6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80006fa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80006fe:	4b25      	ldr	r3, [pc, #148]	; (8000794 <main+0xdc>)
 8000700:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000704:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000708:	603b      	str	r3, [r7, #0]
 800070a:	683b      	ldr	r3, [r7, #0]
  /*Take HSEM */
  HAL_HSEM_FastTake(HSEM_ID_0);
 800070c:	2000      	movs	r0, #0
 800070e:	f000 fe0f 	bl	8001330 <HAL_HSEM_FastTake>
  /*Release HSEM in order to notify the CPU2(CM4)*/
  HAL_HSEM_Release(HSEM_ID_0, 0);
 8000712:	2100      	movs	r1, #0
 8000714:	2000      	movs	r0, #0
 8000716:	f000 fe25 	bl	8001364 <HAL_HSEM_Release>
  /* wait until CPU2 wakes up from stop mode */
  timeout = 0xFFFF;
 800071a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800071e:	607b      	str	r3, [r7, #4]
  while ((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0))
 8000720:	bf00      	nop
 8000722:	4b1c      	ldr	r3, [pc, #112]	; (8000794 <main+0xdc>)
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800072a:	2b00      	cmp	r3, #0
 800072c:	d104      	bne.n	8000738 <main+0x80>
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	1e5a      	subs	r2, r3, #1
 8000732:	607a      	str	r2, [r7, #4]
 8000734:	2b00      	cmp	r3, #0
 8000736:	dcf4      	bgt.n	8000722 <main+0x6a>
    ;
  if (timeout < 0)
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	2b00      	cmp	r3, #0
 800073c:	da01      	bge.n	8000742 <main+0x8a>
  {
    Error_Handler();
 800073e:	f000 f96b 	bl	8000a18 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000742:	f000 f8ed 	bl	8000920 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000746:	f000 f8ab 	bl	80008a0 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  lcd_init();
 800074a:	f7ff ff63 	bl	8000614 <lcd_init>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
  queue1 = xQueueCreate(1, sizeof(uint16_t));
 800074e:	2200      	movs	r2, #0
 8000750:	2102      	movs	r1, #2
 8000752:	2001      	movs	r0, #1
 8000754:	f003 ff00 	bl	8004558 <xQueueGenericCreate>
 8000758:	4603      	mov	r3, r0
 800075a:	4a0f      	ldr	r2, [pc, #60]	; (8000798 <main+0xe0>)
 800075c:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  xTaskCreate(vPrintLCD, "Print LCD", 256, NULL, 1, NULL);
 800075e:	2300      	movs	r3, #0
 8000760:	9301      	str	r3, [sp, #4]
 8000762:	2301      	movs	r3, #1
 8000764:	9300      	str	r3, [sp, #0]
 8000766:	2300      	movs	r3, #0
 8000768:	f44f 7280 	mov.w	r2, #256	; 0x100
 800076c:	490b      	ldr	r1, [pc, #44]	; (800079c <main+0xe4>)
 800076e:	480c      	ldr	r0, [pc, #48]	; (80007a0 <main+0xe8>)
 8000770:	f004 fa97 	bl	8004ca2 <xTaskCreate>
  xTaskCreate(vReadTemp, "Task 2", 256, NULL, 1, NULL);
 8000774:	2300      	movs	r3, #0
 8000776:	9301      	str	r3, [sp, #4]
 8000778:	2301      	movs	r3, #1
 800077a:	9300      	str	r3, [sp, #0]
 800077c:	2300      	movs	r3, #0
 800077e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000782:	4908      	ldr	r1, [pc, #32]	; (80007a4 <main+0xec>)
 8000784:	4808      	ldr	r0, [pc, #32]	; (80007a8 <main+0xf0>)
 8000786:	f004 fa8c 	bl	8004ca2 <xTaskCreate>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  lcd_clear();
 800078a:	f7ff ff0d 	bl	80005a8 <lcd_clear>

  // Start scheduler
  vTaskStartScheduler();
 800078e:	f004 fc09 	bl	8004fa4 <vTaskStartScheduler>

  /* We should never get here as control is now taken by the scheduler */
  while (1)
 8000792:	e7fe      	b.n	8000792 <main+0xda>
 8000794:	58024400 	.word	0x58024400
 8000798:	240040f8 	.word	0x240040f8
 800079c:	080063b0 	.word	0x080063b0
 80007a0:	08000975 	.word	0x08000975
 80007a4:	080063bc 	.word	0x080063bc
 80007a8:	080009dd 	.word	0x080009dd

080007ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b09c      	sub	sp, #112	; 0x70
 80007b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007b6:	224c      	movs	r2, #76	; 0x4c
 80007b8:	2100      	movs	r1, #0
 80007ba:	4618      	mov	r0, r3
 80007bc:	f005 f948 	bl	8005a50 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007c0:	1d3b      	adds	r3, r7, #4
 80007c2:	2220      	movs	r2, #32
 80007c4:	2100      	movs	r1, #0
 80007c6:	4618      	mov	r0, r3
 80007c8:	f005 f942 	bl	8005a50 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80007cc:	2004      	movs	r0, #4
 80007ce:	f001 f96d 	bl	8001aac <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80007d2:	2300      	movs	r3, #0
 80007d4:	603b      	str	r3, [r7, #0]
 80007d6:	4b30      	ldr	r3, [pc, #192]	; (8000898 <SystemClock_Config+0xec>)
 80007d8:	699b      	ldr	r3, [r3, #24]
 80007da:	4a2f      	ldr	r2, [pc, #188]	; (8000898 <SystemClock_Config+0xec>)
 80007dc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80007e0:	6193      	str	r3, [r2, #24]
 80007e2:	4b2d      	ldr	r3, [pc, #180]	; (8000898 <SystemClock_Config+0xec>)
 80007e4:	699b      	ldr	r3, [r3, #24]
 80007e6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007ea:	603b      	str	r3, [r7, #0]
 80007ec:	4b2b      	ldr	r3, [pc, #172]	; (800089c <SystemClock_Config+0xf0>)
 80007ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007f0:	4a2a      	ldr	r2, [pc, #168]	; (800089c <SystemClock_Config+0xf0>)
 80007f2:	f043 0301 	orr.w	r3, r3, #1
 80007f6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80007f8:	4b28      	ldr	r3, [pc, #160]	; (800089c <SystemClock_Config+0xf0>)
 80007fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007fc:	f003 0301 	and.w	r3, r3, #1
 8000800:	603b      	str	r3, [r7, #0]
 8000802:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000804:	bf00      	nop
 8000806:	4b24      	ldr	r3, [pc, #144]	; (8000898 <SystemClock_Config+0xec>)
 8000808:	699b      	ldr	r3, [r3, #24]
 800080a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800080e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000812:	d1f8      	bne.n	8000806 <SystemClock_Config+0x5a>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000814:	2301      	movs	r3, #1
 8000816:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000818:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800081c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800081e:	2302      	movs	r3, #2
 8000820:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000822:	2302      	movs	r3, #2
 8000824:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 5;
 8000826:	2305      	movs	r3, #5
 8000828:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 160;
 800082a:	23a0      	movs	r3, #160	; 0xa0
 800082c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800082e:	2302      	movs	r3, #2
 8000830:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000832:	2302      	movs	r3, #2
 8000834:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000836:	2302      	movs	r3, #2
 8000838:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 800083a:	2308      	movs	r3, #8
 800083c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800083e:	2300      	movs	r3, #0
 8000840:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000842:	2300      	movs	r3, #0
 8000844:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000846:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800084a:	4618      	mov	r0, r3
 800084c:	f001 f988 	bl	8001b60 <HAL_RCC_OscConfig>
 8000850:	4603      	mov	r3, r0
 8000852:	2b00      	cmp	r3, #0
 8000854:	d001      	beq.n	800085a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000856:	f000 f8df 	bl	8000a18 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800085a:	233f      	movs	r3, #63	; 0x3f
 800085c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800085e:	2303      	movs	r3, #3
 8000860:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000862:	2300      	movs	r3, #0
 8000864:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000866:	2308      	movs	r3, #8
 8000868:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800086a:	2340      	movs	r3, #64	; 0x40
 800086c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800086e:	2340      	movs	r3, #64	; 0x40
 8000870:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000872:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000876:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000878:	2340      	movs	r3, #64	; 0x40
 800087a:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800087c:	1d3b      	adds	r3, r7, #4
 800087e:	2102      	movs	r1, #2
 8000880:	4618      	mov	r0, r3
 8000882:	f001 fd7d 	bl	8002380 <HAL_RCC_ClockConfig>
 8000886:	4603      	mov	r3, r0
 8000888:	2b00      	cmp	r3, #0
 800088a:	d001      	beq.n	8000890 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 800088c:	f000 f8c4 	bl	8000a18 <Error_Handler>
  }
}
 8000890:	bf00      	nop
 8000892:	3770      	adds	r7, #112	; 0x70
 8000894:	46bd      	mov	sp, r7
 8000896:	bd80      	pop	{r7, pc}
 8000898:	58024800 	.word	0x58024800
 800089c:	58000400 	.word	0x58000400

080008a0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80008a4:	4b1b      	ldr	r3, [pc, #108]	; (8000914 <MX_I2C1_Init+0x74>)
 80008a6:	4a1c      	ldr	r2, [pc, #112]	; (8000918 <MX_I2C1_Init+0x78>)
 80008a8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10C0ECFF;
 80008aa:	4b1a      	ldr	r3, [pc, #104]	; (8000914 <MX_I2C1_Init+0x74>)
 80008ac:	4a1b      	ldr	r2, [pc, #108]	; (800091c <MX_I2C1_Init+0x7c>)
 80008ae:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80008b0:	4b18      	ldr	r3, [pc, #96]	; (8000914 <MX_I2C1_Init+0x74>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008b6:	4b17      	ldr	r3, [pc, #92]	; (8000914 <MX_I2C1_Init+0x74>)
 80008b8:	2201      	movs	r2, #1
 80008ba:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008bc:	4b15      	ldr	r3, [pc, #84]	; (8000914 <MX_I2C1_Init+0x74>)
 80008be:	2200      	movs	r2, #0
 80008c0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80008c2:	4b14      	ldr	r3, [pc, #80]	; (8000914 <MX_I2C1_Init+0x74>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80008c8:	4b12      	ldr	r3, [pc, #72]	; (8000914 <MX_I2C1_Init+0x74>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008ce:	4b11      	ldr	r3, [pc, #68]	; (8000914 <MX_I2C1_Init+0x74>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008d4:	4b0f      	ldr	r3, [pc, #60]	; (8000914 <MX_I2C1_Init+0x74>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80008da:	480e      	ldr	r0, [pc, #56]	; (8000914 <MX_I2C1_Init+0x74>)
 80008dc:	f000 fd56 	bl	800138c <HAL_I2C_Init>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d001      	beq.n	80008ea <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80008e6:	f000 f897 	bl	8000a18 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80008ea:	2100      	movs	r1, #0
 80008ec:	4809      	ldr	r0, [pc, #36]	; (8000914 <MX_I2C1_Init+0x74>)
 80008ee:	f001 f845 	bl	800197c <HAL_I2CEx_ConfigAnalogFilter>
 80008f2:	4603      	mov	r3, r0
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d001      	beq.n	80008fc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80008f8:	f000 f88e 	bl	8000a18 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80008fc:	2100      	movs	r1, #0
 80008fe:	4805      	ldr	r0, [pc, #20]	; (8000914 <MX_I2C1_Init+0x74>)
 8000900:	f001 f887 	bl	8001a12 <HAL_I2CEx_ConfigDigitalFilter>
 8000904:	4603      	mov	r3, r0
 8000906:	2b00      	cmp	r3, #0
 8000908:	d001      	beq.n	800090e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800090a:	f000 f885 	bl	8000a18 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800090e:	bf00      	nop
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	240040ac 	.word	0x240040ac
 8000918:	40005400 	.word	0x40005400
 800091c:	10c0ecff 	.word	0x10c0ecff

08000920 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000920:	b480      	push	{r7}
 8000922:	b083      	sub	sp, #12
 8000924:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000926:	4b12      	ldr	r3, [pc, #72]	; (8000970 <MX_GPIO_Init+0x50>)
 8000928:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800092c:	4a10      	ldr	r2, [pc, #64]	; (8000970 <MX_GPIO_Init+0x50>)
 800092e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000932:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000936:	4b0e      	ldr	r3, [pc, #56]	; (8000970 <MX_GPIO_Init+0x50>)
 8000938:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800093c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000940:	607b      	str	r3, [r7, #4]
 8000942:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000944:	4b0a      	ldr	r3, [pc, #40]	; (8000970 <MX_GPIO_Init+0x50>)
 8000946:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800094a:	4a09      	ldr	r2, [pc, #36]	; (8000970 <MX_GPIO_Init+0x50>)
 800094c:	f043 0302 	orr.w	r3, r3, #2
 8000950:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000954:	4b06      	ldr	r3, [pc, #24]	; (8000970 <MX_GPIO_Init+0x50>)
 8000956:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800095a:	f003 0302 	and.w	r3, r3, #2
 800095e:	603b      	str	r3, [r7, #0]
 8000960:	683b      	ldr	r3, [r7, #0]

}
 8000962:	bf00      	nop
 8000964:	370c      	adds	r7, #12
 8000966:	46bd      	mov	sp, r7
 8000968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096c:	4770      	bx	lr
 800096e:	bf00      	nop
 8000970:	58024400 	.word	0x58024400

08000974 <vPrintLCD>:

/* USER CODE BEGIN 4 */
void vPrintLCD(void *pvParameters)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b086      	sub	sp, #24
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
  const TickType_t xDelay = 1000 / portTICK_PERIOD_MS;
 800097c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000980:	617b      	str	r3, [r7, #20]
  int received = 0; 
 8000982:	2300      	movs	r3, #0
 8000984:	613b      	str	r3, [r7, #16]
  char buffer[2];
  for (;;)
  {
    xQueueReceive(queue1, &received, portMAX_DELAY);
 8000986:	4b12      	ldr	r3, [pc, #72]	; (80009d0 <vPrintLCD+0x5c>)
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	f107 0110 	add.w	r1, r7, #16
 800098e:	f04f 32ff 	mov.w	r2, #4294967295
 8000992:	4618      	mov	r0, r3
 8000994:	f003 ff38 	bl	8004808 <xQueueReceive>

    lcd_put_cur(0, 0);
 8000998:	2100      	movs	r1, #0
 800099a:	2000      	movs	r0, #0
 800099c:	f7ff fe1b 	bl	80005d6 <lcd_put_cur>
    lcd_send_string("Hello World");
 80009a0:	480c      	ldr	r0, [pc, #48]	; (80009d4 <vPrintLCD+0x60>)
 80009a2:	f7ff fe74 	bl	800068e <lcd_send_string>
    lcd_put_cur(1,0);
 80009a6:	2100      	movs	r1, #0
 80009a8:	2001      	movs	r0, #1
 80009aa:	f7ff fe14 	bl	80005d6 <lcd_put_cur>
    snprintf(buffer, 2, "%d", received);
 80009ae:	693b      	ldr	r3, [r7, #16]
 80009b0:	f107 000c 	add.w	r0, r7, #12
 80009b4:	4a08      	ldr	r2, [pc, #32]	; (80009d8 <vPrintLCD+0x64>)
 80009b6:	2102      	movs	r1, #2
 80009b8:	f005 f926 	bl	8005c08 <sniprintf>
    lcd_send_string(buffer);
 80009bc:	f107 030c 	add.w	r3, r7, #12
 80009c0:	4618      	mov	r0, r3
 80009c2:	f7ff fe64 	bl	800068e <lcd_send_string>
    vTaskDelay( xDelay );
 80009c6:	6978      	ldr	r0, [r7, #20]
 80009c8:	f004 fab8 	bl	8004f3c <vTaskDelay>
    xQueueReceive(queue1, &received, portMAX_DELAY);
 80009cc:	e7db      	b.n	8000986 <vPrintLCD+0x12>
 80009ce:	bf00      	nop
 80009d0:	240040f8 	.word	0x240040f8
 80009d4:	080063c4 	.word	0x080063c4
 80009d8:	080063d0 	.word	0x080063d0

080009dc <vReadTemp>:
  }
}

void vReadTemp(void *pvParameters)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b084      	sub	sp, #16
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
  uint16_t * xfr_data; // pointer to transfer data
  for (;;)
  {
    if (xfr_ptr->sts_4to7 == 1) {
 80009e4:	4b0a      	ldr	r3, [pc, #40]	; (8000a10 <vReadTemp+0x34>)
 80009e6:	781b      	ldrb	r3, [r3, #0]
 80009e8:	b2db      	uxtb	r3, r3
 80009ea:	2b01      	cmp	r3, #1
 80009ec:	d1fa      	bne.n	80009e4 <vReadTemp+0x8>
      xfr_data = get_from_M4(xfr_ptr); // get data sent from M4 to M7
 80009ee:	4b08      	ldr	r3, [pc, #32]	; (8000a10 <vReadTemp+0x34>)
 80009f0:	4618      	mov	r0, r3
 80009f2:	f000 f817 	bl	8000a24 <get_from_M4>
 80009f6:	60f8      	str	r0, [r7, #12]
      xfr_ptr->sts_4to7 = 1; // set xfr_data status to has data
 80009f8:	4b05      	ldr	r3, [pc, #20]	; (8000a10 <vReadTemp+0x34>)
 80009fa:	2201      	movs	r2, #1
 80009fc:	701a      	strb	r2, [r3, #0]
      xQueueSend(queue1, xfr_data, portMAX_DELAY);
 80009fe:	4b05      	ldr	r3, [pc, #20]	; (8000a14 <vReadTemp+0x38>)
 8000a00:	6818      	ldr	r0, [r3, #0]
 8000a02:	2300      	movs	r3, #0
 8000a04:	f04f 32ff 	mov.w	r2, #4294967295
 8000a08:	68f9      	ldr	r1, [r7, #12]
 8000a0a:	f003 fdff 	bl	800460c <xQueueGenericSend>
    if (xfr_ptr->sts_4to7 == 1) {
 8000a0e:	e7e9      	b.n	80009e4 <vReadTemp+0x8>
 8000a10:	38001000 	.word	0x38001000
 8000a14:	240040f8 	.word	0x240040f8

08000a18 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a1c:	b672      	cpsid	i
}
 8000a1e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a20:	e7fe      	b.n	8000a20 <Error_Handler+0x8>
	...

08000a24 <get_from_M4>:
	}
	xfr_ptr->sts_4to7 = 1; // M7 to M4 buffer has data
}

uint16_t *get_from_M4(volatile struct shared_data * const xfr_ptr)
{
 8000a24:	b480      	push	{r7}
 8000a26:	b085      	sub	sp, #20
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
    static uint16_t buffer; // buffer to receive data
	if (xfr_ptr->sts_4to7 == 1) // if M4 to M7 buffer has data
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	781b      	ldrb	r3, [r3, #0]
 8000a30:	b2db      	uxtb	r3, r3
 8000a32:	2b01      	cmp	r3, #1
 8000a34:	d116      	bne.n	8000a64 <get_from_M4+0x40>
	{
		xfr_ptr->sts_4to7 = 2; // lock the M4 to M7 buffer
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	2202      	movs	r2, #2
 8000a3a:	701a      	strb	r2, [r3, #0]
		for(int n = 0; n < 64; n++)
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	60fb      	str	r3, [r7, #12]
 8000a40:	e00a      	b.n	8000a58 <get_from_M4+0x34>
		{
			buffer = xfr_ptr->M4toM7; // transfer data
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	885b      	ldrh	r3, [r3, #2]
 8000a46:	b29a      	uxth	r2, r3
 8000a48:	4b0a      	ldr	r3, [pc, #40]	; (8000a74 <get_from_M4+0x50>)
 8000a4a:	801a      	strh	r2, [r3, #0]
			xfr_ptr->M4toM7 = 0; // clear M4 to M7 buffer
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	2200      	movs	r2, #0
 8000a50:	805a      	strh	r2, [r3, #2]
		for(int n = 0; n < 64; n++)
 8000a52:	68fb      	ldr	r3, [r7, #12]
 8000a54:	3301      	adds	r3, #1
 8000a56:	60fb      	str	r3, [r7, #12]
 8000a58:	68fb      	ldr	r3, [r7, #12]
 8000a5a:	2b3f      	cmp	r3, #63	; 0x3f
 8000a5c:	ddf1      	ble.n	8000a42 <get_from_M4+0x1e>
		}
		xfr_ptr->sts_4to7 = 0; // M4 to M7 buffer is empty
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	2200      	movs	r2, #0
 8000a62:	701a      	strb	r2, [r3, #0]
	}
	return buffer; // return the buffer (pointer)
 8000a64:	4b03      	ldr	r3, [pc, #12]	; (8000a74 <get_from_M4+0x50>)
 8000a66:	881b      	ldrh	r3, [r3, #0]
 8000a68:	4618      	mov	r0, r3
 8000a6a:	3714      	adds	r7, #20
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a72:	4770      	bx	lr
 8000a74:	24000348 	.word	0x24000348

08000a78 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b082      	sub	sp, #8
 8000a7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a7e:	4b0c      	ldr	r3, [pc, #48]	; (8000ab0 <HAL_MspInit+0x38>)
 8000a80:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000a84:	4a0a      	ldr	r2, [pc, #40]	; (8000ab0 <HAL_MspInit+0x38>)
 8000a86:	f043 0302 	orr.w	r3, r3, #2
 8000a8a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000a8e:	4b08      	ldr	r3, [pc, #32]	; (8000ab0 <HAL_MspInit+0x38>)
 8000a90:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000a94:	f003 0302 	and.w	r3, r3, #2
 8000a98:	607b      	str	r3, [r7, #4]
 8000a9a:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	210f      	movs	r1, #15
 8000aa0:	f06f 0001 	mvn.w	r0, #1
 8000aa4:	f000 fa6d 	bl	8000f82 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000aa8:	bf00      	nop
 8000aaa:	3708      	adds	r7, #8
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	58024400 	.word	0x58024400

08000ab4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b0b8      	sub	sp, #224	; 0xe0
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000abc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	601a      	str	r2, [r3, #0]
 8000ac4:	605a      	str	r2, [r3, #4]
 8000ac6:	609a      	str	r2, [r3, #8]
 8000ac8:	60da      	str	r2, [r3, #12]
 8000aca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000acc:	f107 0310 	add.w	r3, r7, #16
 8000ad0:	22bc      	movs	r2, #188	; 0xbc
 8000ad2:	2100      	movs	r1, #0
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	f004 ffbb 	bl	8005a50 <memset>
  if(hi2c->Instance==I2C1)
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	4a24      	ldr	r2, [pc, #144]	; (8000b70 <HAL_I2C_MspInit+0xbc>)
 8000ae0:	4293      	cmp	r3, r2
 8000ae2:	d141      	bne.n	8000b68 <HAL_I2C_MspInit+0xb4>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000ae4:	2308      	movs	r3, #8
 8000ae6:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000aee:	f107 0310 	add.w	r3, r7, #16
 8000af2:	4618      	mov	r0, r3
 8000af4:	f001 ff74 	bl	80029e0 <HAL_RCCEx_PeriphCLKConfig>
 8000af8:	4603      	mov	r3, r0
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d001      	beq.n	8000b02 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000afe:	f7ff ff8b 	bl	8000a18 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b02:	4b1c      	ldr	r3, [pc, #112]	; (8000b74 <HAL_I2C_MspInit+0xc0>)
 8000b04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b08:	4a1a      	ldr	r2, [pc, #104]	; (8000b74 <HAL_I2C_MspInit+0xc0>)
 8000b0a:	f043 0302 	orr.w	r3, r3, #2
 8000b0e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b12:	4b18      	ldr	r3, [pc, #96]	; (8000b74 <HAL_I2C_MspInit+0xc0>)
 8000b14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b18:	f003 0302 	and.w	r3, r3, #2
 8000b1c:	60fb      	str	r3, [r7, #12]
 8000b1e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000b20:	23c0      	movs	r3, #192	; 0xc0
 8000b22:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b26:	2312      	movs	r3, #18
 8000b28:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b32:	2300      	movs	r3, #0
 8000b34:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b38:	2304      	movs	r3, #4
 8000b3a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b3e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000b42:	4619      	mov	r1, r3
 8000b44:	480c      	ldr	r0, [pc, #48]	; (8000b78 <HAL_I2C_MspInit+0xc4>)
 8000b46:	f000 fa43 	bl	8000fd0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b4a:	4b0a      	ldr	r3, [pc, #40]	; (8000b74 <HAL_I2C_MspInit+0xc0>)
 8000b4c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000b50:	4a08      	ldr	r2, [pc, #32]	; (8000b74 <HAL_I2C_MspInit+0xc0>)
 8000b52:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b56:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000b5a:	4b06      	ldr	r3, [pc, #24]	; (8000b74 <HAL_I2C_MspInit+0xc0>)
 8000b5c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000b60:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b64:	60bb      	str	r3, [r7, #8]
 8000b66:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000b68:	bf00      	nop
 8000b6a:	37e0      	adds	r7, #224	; 0xe0
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bd80      	pop	{r7, pc}
 8000b70:	40005400 	.word	0x40005400
 8000b74:	58024400 	.word	0x58024400
 8000b78:	58020400 	.word	0x58020400

08000b7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b80:	e7fe      	b.n	8000b80 <NMI_Handler+0x4>

08000b82 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b82:	b480      	push	{r7}
 8000b84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b86:	e7fe      	b.n	8000b86 <HardFault_Handler+0x4>

08000b88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b8c:	e7fe      	b.n	8000b8c <MemManage_Handler+0x4>

08000b8e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b8e:	b480      	push	{r7}
 8000b90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b92:	e7fe      	b.n	8000b92 <BusFault_Handler+0x4>

08000b94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b94:	b480      	push	{r7}
 8000b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b98:	e7fe      	b.n	8000b98 <UsageFault_Handler+0x4>

08000b9a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b9a:	b480      	push	{r7}
 8000b9c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b9e:	bf00      	nop
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba6:	4770      	bx	lr

08000ba8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bac:	f000 f8dc 	bl	8000d68 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000bb0:	f004 fe0a 	bl	80057c8 <xTaskGetSchedulerState>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	2b01      	cmp	r3, #1
 8000bb8:	d001      	beq.n	8000bbe <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000bba:	f003 fc15 	bl	80043e8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bbe:	bf00      	nop
 8000bc0:	bd80      	pop	{r7, pc}
	...

08000bc4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b086      	sub	sp, #24
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000bcc:	4a14      	ldr	r2, [pc, #80]	; (8000c20 <_sbrk+0x5c>)
 8000bce:	4b15      	ldr	r3, [pc, #84]	; (8000c24 <_sbrk+0x60>)
 8000bd0:	1ad3      	subs	r3, r2, r3
 8000bd2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000bd4:	697b      	ldr	r3, [r7, #20]
 8000bd6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000bd8:	4b13      	ldr	r3, [pc, #76]	; (8000c28 <_sbrk+0x64>)
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d102      	bne.n	8000be6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000be0:	4b11      	ldr	r3, [pc, #68]	; (8000c28 <_sbrk+0x64>)
 8000be2:	4a12      	ldr	r2, [pc, #72]	; (8000c2c <_sbrk+0x68>)
 8000be4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000be6:	4b10      	ldr	r3, [pc, #64]	; (8000c28 <_sbrk+0x64>)
 8000be8:	681a      	ldr	r2, [r3, #0]
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	4413      	add	r3, r2
 8000bee:	693a      	ldr	r2, [r7, #16]
 8000bf0:	429a      	cmp	r2, r3
 8000bf2:	d207      	bcs.n	8000c04 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000bf4:	f004 fef2 	bl	80059dc <__errno>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	220c      	movs	r2, #12
 8000bfc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000bfe:	f04f 33ff 	mov.w	r3, #4294967295
 8000c02:	e009      	b.n	8000c18 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c04:	4b08      	ldr	r3, [pc, #32]	; (8000c28 <_sbrk+0x64>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c0a:	4b07      	ldr	r3, [pc, #28]	; (8000c28 <_sbrk+0x64>)
 8000c0c:	681a      	ldr	r2, [r3, #0]
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	4413      	add	r3, r2
 8000c12:	4a05      	ldr	r2, [pc, #20]	; (8000c28 <_sbrk+0x64>)
 8000c14:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c16:	68fb      	ldr	r3, [r7, #12]
}
 8000c18:	4618      	mov	r0, r3
 8000c1a:	3718      	adds	r7, #24
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	bd80      	pop	{r7, pc}
 8000c20:	24080000 	.word	0x24080000
 8000c24:	00000400 	.word	0x00000400
 8000c28:	2400034c 	.word	0x2400034c
 8000c2c:	24004110 	.word	0x24004110

08000c30 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000c30:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c68 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000c34:	f7ff fba4 	bl	8000380 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c38:	480c      	ldr	r0, [pc, #48]	; (8000c6c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000c3a:	490d      	ldr	r1, [pc, #52]	; (8000c70 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000c3c:	4a0d      	ldr	r2, [pc, #52]	; (8000c74 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000c3e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c40:	e002      	b.n	8000c48 <LoopCopyDataInit>

08000c42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c46:	3304      	adds	r3, #4

08000c48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c4c:	d3f9      	bcc.n	8000c42 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c4e:	4a0a      	ldr	r2, [pc, #40]	; (8000c78 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000c50:	4c0a      	ldr	r4, [pc, #40]	; (8000c7c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000c52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c54:	e001      	b.n	8000c5a <LoopFillZerobss>

08000c56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c58:	3204      	adds	r2, #4

08000c5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c5c:	d3fb      	bcc.n	8000c56 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c5e:	f004 fec3 	bl	80059e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c62:	f7ff fd29 	bl	80006b8 <main>
  bx  lr
 8000c66:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000c68:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000c6c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000c70:	24000078 	.word	0x24000078
  ldr r2, =_sidata
 8000c74:	08006488 	.word	0x08006488
  ldr r2, =_sbss
 8000c78:	24000078 	.word	0x24000078
  ldr r4, =_ebss
 8000c7c:	24004110 	.word	0x24004110

08000c80 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c80:	e7fe      	b.n	8000c80 <ADC3_IRQHandler>
	...

08000c84 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b082      	sub	sp, #8
 8000c88:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c8a:	2003      	movs	r0, #3
 8000c8c:	f000 f96e 	bl	8000f6c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000c90:	f001 fd2c 	bl	80026ec <HAL_RCC_GetSysClockFreq>
 8000c94:	4602      	mov	r2, r0
 8000c96:	4b15      	ldr	r3, [pc, #84]	; (8000cec <HAL_Init+0x68>)
 8000c98:	699b      	ldr	r3, [r3, #24]
 8000c9a:	0a1b      	lsrs	r3, r3, #8
 8000c9c:	f003 030f 	and.w	r3, r3, #15
 8000ca0:	4913      	ldr	r1, [pc, #76]	; (8000cf0 <HAL_Init+0x6c>)
 8000ca2:	5ccb      	ldrb	r3, [r1, r3]
 8000ca4:	f003 031f 	and.w	r3, r3, #31
 8000ca8:	fa22 f303 	lsr.w	r3, r2, r3
 8000cac:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000cae:	4b0f      	ldr	r3, [pc, #60]	; (8000cec <HAL_Init+0x68>)
 8000cb0:	699b      	ldr	r3, [r3, #24]
 8000cb2:	f003 030f 	and.w	r3, r3, #15
 8000cb6:	4a0e      	ldr	r2, [pc, #56]	; (8000cf0 <HAL_Init+0x6c>)
 8000cb8:	5cd3      	ldrb	r3, [r2, r3]
 8000cba:	f003 031f 	and.w	r3, r3, #31
 8000cbe:	687a      	ldr	r2, [r7, #4]
 8000cc0:	fa22 f303 	lsr.w	r3, r2, r3
 8000cc4:	4a0b      	ldr	r2, [pc, #44]	; (8000cf4 <HAL_Init+0x70>)
 8000cc6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000cc8:	4a0b      	ldr	r2, [pc, #44]	; (8000cf8 <HAL_Init+0x74>)
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000cce:	200f      	movs	r0, #15
 8000cd0:	f000 f814 	bl	8000cfc <HAL_InitTick>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d001      	beq.n	8000cde <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000cda:	2301      	movs	r3, #1
 8000cdc:	e002      	b.n	8000ce4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000cde:	f7ff fecb 	bl	8000a78 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ce2:	2300      	movs	r3, #0
}
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	3708      	adds	r7, #8
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bd80      	pop	{r7, pc}
 8000cec:	58024400 	.word	0x58024400
 8000cf0:	080063dc 	.word	0x080063dc
 8000cf4:	24000004 	.word	0x24000004
 8000cf8:	24000000 	.word	0x24000000

08000cfc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b082      	sub	sp, #8
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000d04:	4b15      	ldr	r3, [pc, #84]	; (8000d5c <HAL_InitTick+0x60>)
 8000d06:	781b      	ldrb	r3, [r3, #0]
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d101      	bne.n	8000d10 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000d0c:	2301      	movs	r3, #1
 8000d0e:	e021      	b.n	8000d54 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000d10:	4b13      	ldr	r3, [pc, #76]	; (8000d60 <HAL_InitTick+0x64>)
 8000d12:	681a      	ldr	r2, [r3, #0]
 8000d14:	4b11      	ldr	r3, [pc, #68]	; (8000d5c <HAL_InitTick+0x60>)
 8000d16:	781b      	ldrb	r3, [r3, #0]
 8000d18:	4619      	mov	r1, r3
 8000d1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d1e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d22:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d26:	4618      	mov	r0, r3
 8000d28:	f000 f945 	bl	8000fb6 <HAL_SYSTICK_Config>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d001      	beq.n	8000d36 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000d32:	2301      	movs	r3, #1
 8000d34:	e00e      	b.n	8000d54 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	2b0f      	cmp	r3, #15
 8000d3a:	d80a      	bhi.n	8000d52 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	6879      	ldr	r1, [r7, #4]
 8000d40:	f04f 30ff 	mov.w	r0, #4294967295
 8000d44:	f000 f91d 	bl	8000f82 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d48:	4a06      	ldr	r2, [pc, #24]	; (8000d64 <HAL_InitTick+0x68>)
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	e000      	b.n	8000d54 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000d52:	2301      	movs	r3, #1
}
 8000d54:	4618      	mov	r0, r3
 8000d56:	3708      	adds	r7, #8
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bd80      	pop	{r7, pc}
 8000d5c:	2400000c 	.word	0x2400000c
 8000d60:	24000000 	.word	0x24000000
 8000d64:	24000008 	.word	0x24000008

08000d68 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000d6c:	4b06      	ldr	r3, [pc, #24]	; (8000d88 <HAL_IncTick+0x20>)
 8000d6e:	781b      	ldrb	r3, [r3, #0]
 8000d70:	461a      	mov	r2, r3
 8000d72:	4b06      	ldr	r3, [pc, #24]	; (8000d8c <HAL_IncTick+0x24>)
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	4413      	add	r3, r2
 8000d78:	4a04      	ldr	r2, [pc, #16]	; (8000d8c <HAL_IncTick+0x24>)
 8000d7a:	6013      	str	r3, [r2, #0]
}
 8000d7c:	bf00      	nop
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d84:	4770      	bx	lr
 8000d86:	bf00      	nop
 8000d88:	2400000c 	.word	0x2400000c
 8000d8c:	240040fc 	.word	0x240040fc

08000d90 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d90:	b480      	push	{r7}
 8000d92:	af00      	add	r7, sp, #0
  return uwTick;
 8000d94:	4b03      	ldr	r3, [pc, #12]	; (8000da4 <HAL_GetTick+0x14>)
 8000d96:	681b      	ldr	r3, [r3, #0]
}
 8000d98:	4618      	mov	r0, r3
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da0:	4770      	bx	lr
 8000da2:	bf00      	nop
 8000da4:	240040fc 	.word	0x240040fc

08000da8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b084      	sub	sp, #16
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000db0:	f7ff ffee 	bl	8000d90 <HAL_GetTick>
 8000db4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000dba:	68fb      	ldr	r3, [r7, #12]
 8000dbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000dc0:	d005      	beq.n	8000dce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000dc2:	4b0a      	ldr	r3, [pc, #40]	; (8000dec <HAL_Delay+0x44>)
 8000dc4:	781b      	ldrb	r3, [r3, #0]
 8000dc6:	461a      	mov	r2, r3
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	4413      	add	r3, r2
 8000dcc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000dce:	bf00      	nop
 8000dd0:	f7ff ffde 	bl	8000d90 <HAL_GetTick>
 8000dd4:	4602      	mov	r2, r0
 8000dd6:	68bb      	ldr	r3, [r7, #8]
 8000dd8:	1ad3      	subs	r3, r2, r3
 8000dda:	68fa      	ldr	r2, [r7, #12]
 8000ddc:	429a      	cmp	r2, r3
 8000dde:	d8f7      	bhi.n	8000dd0 <HAL_Delay+0x28>
  {
  }
}
 8000de0:	bf00      	nop
 8000de2:	bf00      	nop
 8000de4:	3710      	adds	r7, #16
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	bf00      	nop
 8000dec:	2400000c 	.word	0x2400000c

08000df0 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000df0:	b480      	push	{r7}
 8000df2:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000df4:	4b03      	ldr	r3, [pc, #12]	; (8000e04 <HAL_GetREVID+0x14>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	0c1b      	lsrs	r3, r3, #16
}
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e02:	4770      	bx	lr
 8000e04:	5c001000 	.word	0x5c001000

08000e08 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	b085      	sub	sp, #20
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	f003 0307 	and.w	r3, r3, #7
 8000e16:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e18:	4b0b      	ldr	r3, [pc, #44]	; (8000e48 <__NVIC_SetPriorityGrouping+0x40>)
 8000e1a:	68db      	ldr	r3, [r3, #12]
 8000e1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e1e:	68ba      	ldr	r2, [r7, #8]
 8000e20:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e24:	4013      	ands	r3, r2
 8000e26:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e28:	68fb      	ldr	r3, [r7, #12]
 8000e2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e2c:	68bb      	ldr	r3, [r7, #8]
 8000e2e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000e30:	4b06      	ldr	r3, [pc, #24]	; (8000e4c <__NVIC_SetPriorityGrouping+0x44>)
 8000e32:	4313      	orrs	r3, r2
 8000e34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e36:	4a04      	ldr	r2, [pc, #16]	; (8000e48 <__NVIC_SetPriorityGrouping+0x40>)
 8000e38:	68bb      	ldr	r3, [r7, #8]
 8000e3a:	60d3      	str	r3, [r2, #12]
}
 8000e3c:	bf00      	nop
 8000e3e:	3714      	adds	r7, #20
 8000e40:	46bd      	mov	sp, r7
 8000e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e46:	4770      	bx	lr
 8000e48:	e000ed00 	.word	0xe000ed00
 8000e4c:	05fa0000 	.word	0x05fa0000

08000e50 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e50:	b480      	push	{r7}
 8000e52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e54:	4b04      	ldr	r3, [pc, #16]	; (8000e68 <__NVIC_GetPriorityGrouping+0x18>)
 8000e56:	68db      	ldr	r3, [r3, #12]
 8000e58:	0a1b      	lsrs	r3, r3, #8
 8000e5a:	f003 0307 	and.w	r3, r3, #7
}
 8000e5e:	4618      	mov	r0, r3
 8000e60:	46bd      	mov	sp, r7
 8000e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e66:	4770      	bx	lr
 8000e68:	e000ed00 	.word	0xe000ed00

08000e6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	b083      	sub	sp, #12
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	4603      	mov	r3, r0
 8000e74:	6039      	str	r1, [r7, #0]
 8000e76:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000e78:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	db0a      	blt.n	8000e96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e80:	683b      	ldr	r3, [r7, #0]
 8000e82:	b2da      	uxtb	r2, r3
 8000e84:	490c      	ldr	r1, [pc, #48]	; (8000eb8 <__NVIC_SetPriority+0x4c>)
 8000e86:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e8a:	0112      	lsls	r2, r2, #4
 8000e8c:	b2d2      	uxtb	r2, r2
 8000e8e:	440b      	add	r3, r1
 8000e90:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e94:	e00a      	b.n	8000eac <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e96:	683b      	ldr	r3, [r7, #0]
 8000e98:	b2da      	uxtb	r2, r3
 8000e9a:	4908      	ldr	r1, [pc, #32]	; (8000ebc <__NVIC_SetPriority+0x50>)
 8000e9c:	88fb      	ldrh	r3, [r7, #6]
 8000e9e:	f003 030f 	and.w	r3, r3, #15
 8000ea2:	3b04      	subs	r3, #4
 8000ea4:	0112      	lsls	r2, r2, #4
 8000ea6:	b2d2      	uxtb	r2, r2
 8000ea8:	440b      	add	r3, r1
 8000eaa:	761a      	strb	r2, [r3, #24]
}
 8000eac:	bf00      	nop
 8000eae:	370c      	adds	r7, #12
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb6:	4770      	bx	lr
 8000eb8:	e000e100 	.word	0xe000e100
 8000ebc:	e000ed00 	.word	0xe000ed00

08000ec0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	b089      	sub	sp, #36	; 0x24
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	60f8      	str	r0, [r7, #12]
 8000ec8:	60b9      	str	r1, [r7, #8]
 8000eca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ecc:	68fb      	ldr	r3, [r7, #12]
 8000ece:	f003 0307 	and.w	r3, r3, #7
 8000ed2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ed4:	69fb      	ldr	r3, [r7, #28]
 8000ed6:	f1c3 0307 	rsb	r3, r3, #7
 8000eda:	2b04      	cmp	r3, #4
 8000edc:	bf28      	it	cs
 8000ede:	2304      	movcs	r3, #4
 8000ee0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ee2:	69fb      	ldr	r3, [r7, #28]
 8000ee4:	3304      	adds	r3, #4
 8000ee6:	2b06      	cmp	r3, #6
 8000ee8:	d902      	bls.n	8000ef0 <NVIC_EncodePriority+0x30>
 8000eea:	69fb      	ldr	r3, [r7, #28]
 8000eec:	3b03      	subs	r3, #3
 8000eee:	e000      	b.n	8000ef2 <NVIC_EncodePriority+0x32>
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ef4:	f04f 32ff 	mov.w	r2, #4294967295
 8000ef8:	69bb      	ldr	r3, [r7, #24]
 8000efa:	fa02 f303 	lsl.w	r3, r2, r3
 8000efe:	43da      	mvns	r2, r3
 8000f00:	68bb      	ldr	r3, [r7, #8]
 8000f02:	401a      	ands	r2, r3
 8000f04:	697b      	ldr	r3, [r7, #20]
 8000f06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f08:	f04f 31ff 	mov.w	r1, #4294967295
 8000f0c:	697b      	ldr	r3, [r7, #20]
 8000f0e:	fa01 f303 	lsl.w	r3, r1, r3
 8000f12:	43d9      	mvns	r1, r3
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f18:	4313      	orrs	r3, r2
         );
}
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	3724      	adds	r7, #36	; 0x24
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f24:	4770      	bx	lr
	...

08000f28 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b082      	sub	sp, #8
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	3b01      	subs	r3, #1
 8000f34:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f38:	d301      	bcc.n	8000f3e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f3a:	2301      	movs	r3, #1
 8000f3c:	e00f      	b.n	8000f5e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f3e:	4a0a      	ldr	r2, [pc, #40]	; (8000f68 <SysTick_Config+0x40>)
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	3b01      	subs	r3, #1
 8000f44:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f46:	210f      	movs	r1, #15
 8000f48:	f04f 30ff 	mov.w	r0, #4294967295
 8000f4c:	f7ff ff8e 	bl	8000e6c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f50:	4b05      	ldr	r3, [pc, #20]	; (8000f68 <SysTick_Config+0x40>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f56:	4b04      	ldr	r3, [pc, #16]	; (8000f68 <SysTick_Config+0x40>)
 8000f58:	2207      	movs	r2, #7
 8000f5a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f5c:	2300      	movs	r3, #0
}
 8000f5e:	4618      	mov	r0, r3
 8000f60:	3708      	adds	r7, #8
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	e000e010 	.word	0xe000e010

08000f6c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b082      	sub	sp, #8
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f74:	6878      	ldr	r0, [r7, #4]
 8000f76:	f7ff ff47 	bl	8000e08 <__NVIC_SetPriorityGrouping>
}
 8000f7a:	bf00      	nop
 8000f7c:	3708      	adds	r7, #8
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}

08000f82 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f82:	b580      	push	{r7, lr}
 8000f84:	b086      	sub	sp, #24
 8000f86:	af00      	add	r7, sp, #0
 8000f88:	4603      	mov	r3, r0
 8000f8a:	60b9      	str	r1, [r7, #8]
 8000f8c:	607a      	str	r2, [r7, #4]
 8000f8e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000f90:	f7ff ff5e 	bl	8000e50 <__NVIC_GetPriorityGrouping>
 8000f94:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f96:	687a      	ldr	r2, [r7, #4]
 8000f98:	68b9      	ldr	r1, [r7, #8]
 8000f9a:	6978      	ldr	r0, [r7, #20]
 8000f9c:	f7ff ff90 	bl	8000ec0 <NVIC_EncodePriority>
 8000fa0:	4602      	mov	r2, r0
 8000fa2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000fa6:	4611      	mov	r1, r2
 8000fa8:	4618      	mov	r0, r3
 8000faa:	f7ff ff5f 	bl	8000e6c <__NVIC_SetPriority>
}
 8000fae:	bf00      	nop
 8000fb0:	3718      	adds	r7, #24
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}

08000fb6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fb6:	b580      	push	{r7, lr}
 8000fb8:	b082      	sub	sp, #8
 8000fba:	af00      	add	r7, sp, #0
 8000fbc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000fbe:	6878      	ldr	r0, [r7, #4]
 8000fc0:	f7ff ffb2 	bl	8000f28 <SysTick_Config>
 8000fc4:	4603      	mov	r3, r0
}
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	3708      	adds	r7, #8
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}
	...

08000fd0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	b089      	sub	sp, #36	; 0x24
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
 8000fd8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8000fde:	4b89      	ldr	r3, [pc, #548]	; (8001204 <HAL_GPIO_Init+0x234>)
 8000fe0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000fe2:	e194      	b.n	800130e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	681a      	ldr	r2, [r3, #0]
 8000fe8:	2101      	movs	r1, #1
 8000fea:	69fb      	ldr	r3, [r7, #28]
 8000fec:	fa01 f303 	lsl.w	r3, r1, r3
 8000ff0:	4013      	ands	r3, r2
 8000ff2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8000ff4:	693b      	ldr	r3, [r7, #16]
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	f000 8186 	beq.w	8001308 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ffc:	683b      	ldr	r3, [r7, #0]
 8000ffe:	685b      	ldr	r3, [r3, #4]
 8001000:	2b01      	cmp	r3, #1
 8001002:	d00b      	beq.n	800101c <HAL_GPIO_Init+0x4c>
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	685b      	ldr	r3, [r3, #4]
 8001008:	2b02      	cmp	r3, #2
 800100a:	d007      	beq.n	800101c <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001010:	2b11      	cmp	r3, #17
 8001012:	d003      	beq.n	800101c <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	685b      	ldr	r3, [r3, #4]
 8001018:	2b12      	cmp	r3, #18
 800101a:	d130      	bne.n	800107e <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	689b      	ldr	r3, [r3, #8]
 8001020:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001022:	69fb      	ldr	r3, [r7, #28]
 8001024:	005b      	lsls	r3, r3, #1
 8001026:	2203      	movs	r2, #3
 8001028:	fa02 f303 	lsl.w	r3, r2, r3
 800102c:	43db      	mvns	r3, r3
 800102e:	69ba      	ldr	r2, [r7, #24]
 8001030:	4013      	ands	r3, r2
 8001032:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	68da      	ldr	r2, [r3, #12]
 8001038:	69fb      	ldr	r3, [r7, #28]
 800103a:	005b      	lsls	r3, r3, #1
 800103c:	fa02 f303 	lsl.w	r3, r2, r3
 8001040:	69ba      	ldr	r2, [r7, #24]
 8001042:	4313      	orrs	r3, r2
 8001044:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	69ba      	ldr	r2, [r7, #24]
 800104a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	685b      	ldr	r3, [r3, #4]
 8001050:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001052:	2201      	movs	r2, #1
 8001054:	69fb      	ldr	r3, [r7, #28]
 8001056:	fa02 f303 	lsl.w	r3, r2, r3
 800105a:	43db      	mvns	r3, r3
 800105c:	69ba      	ldr	r2, [r7, #24]
 800105e:	4013      	ands	r3, r2
 8001060:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	685b      	ldr	r3, [r3, #4]
 8001066:	091b      	lsrs	r3, r3, #4
 8001068:	f003 0201 	and.w	r2, r3, #1
 800106c:	69fb      	ldr	r3, [r7, #28]
 800106e:	fa02 f303 	lsl.w	r3, r2, r3
 8001072:	69ba      	ldr	r2, [r7, #24]
 8001074:	4313      	orrs	r3, r2
 8001076:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	69ba      	ldr	r2, [r7, #24]
 800107c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	68db      	ldr	r3, [r3, #12]
 8001082:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001084:	69fb      	ldr	r3, [r7, #28]
 8001086:	005b      	lsls	r3, r3, #1
 8001088:	2203      	movs	r2, #3
 800108a:	fa02 f303 	lsl.w	r3, r2, r3
 800108e:	43db      	mvns	r3, r3
 8001090:	69ba      	ldr	r2, [r7, #24]
 8001092:	4013      	ands	r3, r2
 8001094:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	689a      	ldr	r2, [r3, #8]
 800109a:	69fb      	ldr	r3, [r7, #28]
 800109c:	005b      	lsls	r3, r3, #1
 800109e:	fa02 f303 	lsl.w	r3, r2, r3
 80010a2:	69ba      	ldr	r2, [r7, #24]
 80010a4:	4313      	orrs	r3, r2
 80010a6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	69ba      	ldr	r2, [r7, #24]
 80010ac:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	685b      	ldr	r3, [r3, #4]
 80010b2:	2b02      	cmp	r3, #2
 80010b4:	d003      	beq.n	80010be <HAL_GPIO_Init+0xee>
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	685b      	ldr	r3, [r3, #4]
 80010ba:	2b12      	cmp	r3, #18
 80010bc:	d123      	bne.n	8001106 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80010be:	69fb      	ldr	r3, [r7, #28]
 80010c0:	08da      	lsrs	r2, r3, #3
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	3208      	adds	r2, #8
 80010c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80010cc:	69fb      	ldr	r3, [r7, #28]
 80010ce:	f003 0307 	and.w	r3, r3, #7
 80010d2:	009b      	lsls	r3, r3, #2
 80010d4:	220f      	movs	r2, #15
 80010d6:	fa02 f303 	lsl.w	r3, r2, r3
 80010da:	43db      	mvns	r3, r3
 80010dc:	69ba      	ldr	r2, [r7, #24]
 80010de:	4013      	ands	r3, r2
 80010e0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	691a      	ldr	r2, [r3, #16]
 80010e6:	69fb      	ldr	r3, [r7, #28]
 80010e8:	f003 0307 	and.w	r3, r3, #7
 80010ec:	009b      	lsls	r3, r3, #2
 80010ee:	fa02 f303 	lsl.w	r3, r2, r3
 80010f2:	69ba      	ldr	r2, [r7, #24]
 80010f4:	4313      	orrs	r3, r2
 80010f6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80010f8:	69fb      	ldr	r3, [r7, #28]
 80010fa:	08da      	lsrs	r2, r3, #3
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	3208      	adds	r2, #8
 8001100:	69b9      	ldr	r1, [r7, #24]
 8001102:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800110c:	69fb      	ldr	r3, [r7, #28]
 800110e:	005b      	lsls	r3, r3, #1
 8001110:	2203      	movs	r2, #3
 8001112:	fa02 f303 	lsl.w	r3, r2, r3
 8001116:	43db      	mvns	r3, r3
 8001118:	69ba      	ldr	r2, [r7, #24]
 800111a:	4013      	ands	r3, r2
 800111c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	685b      	ldr	r3, [r3, #4]
 8001122:	f003 0203 	and.w	r2, r3, #3
 8001126:	69fb      	ldr	r3, [r7, #28]
 8001128:	005b      	lsls	r3, r3, #1
 800112a:	fa02 f303 	lsl.w	r3, r2, r3
 800112e:	69ba      	ldr	r2, [r7, #24]
 8001130:	4313      	orrs	r3, r2
 8001132:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	69ba      	ldr	r2, [r7, #24]
 8001138:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	685b      	ldr	r3, [r3, #4]
 800113e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001142:	2b00      	cmp	r3, #0
 8001144:	f000 80e0 	beq.w	8001308 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001148:	4b2f      	ldr	r3, [pc, #188]	; (8001208 <HAL_GPIO_Init+0x238>)
 800114a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800114e:	4a2e      	ldr	r2, [pc, #184]	; (8001208 <HAL_GPIO_Init+0x238>)
 8001150:	f043 0302 	orr.w	r3, r3, #2
 8001154:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001158:	4b2b      	ldr	r3, [pc, #172]	; (8001208 <HAL_GPIO_Init+0x238>)
 800115a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800115e:	f003 0302 	and.w	r3, r3, #2
 8001162:	60fb      	str	r3, [r7, #12]
 8001164:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001166:	4a29      	ldr	r2, [pc, #164]	; (800120c <HAL_GPIO_Init+0x23c>)
 8001168:	69fb      	ldr	r3, [r7, #28]
 800116a:	089b      	lsrs	r3, r3, #2
 800116c:	3302      	adds	r3, #2
 800116e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001172:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001174:	69fb      	ldr	r3, [r7, #28]
 8001176:	f003 0303 	and.w	r3, r3, #3
 800117a:	009b      	lsls	r3, r3, #2
 800117c:	220f      	movs	r2, #15
 800117e:	fa02 f303 	lsl.w	r3, r2, r3
 8001182:	43db      	mvns	r3, r3
 8001184:	69ba      	ldr	r2, [r7, #24]
 8001186:	4013      	ands	r3, r2
 8001188:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	4a20      	ldr	r2, [pc, #128]	; (8001210 <HAL_GPIO_Init+0x240>)
 800118e:	4293      	cmp	r3, r2
 8001190:	d052      	beq.n	8001238 <HAL_GPIO_Init+0x268>
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	4a1f      	ldr	r2, [pc, #124]	; (8001214 <HAL_GPIO_Init+0x244>)
 8001196:	4293      	cmp	r3, r2
 8001198:	d031      	beq.n	80011fe <HAL_GPIO_Init+0x22e>
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	4a1e      	ldr	r2, [pc, #120]	; (8001218 <HAL_GPIO_Init+0x248>)
 800119e:	4293      	cmp	r3, r2
 80011a0:	d02b      	beq.n	80011fa <HAL_GPIO_Init+0x22a>
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	4a1d      	ldr	r2, [pc, #116]	; (800121c <HAL_GPIO_Init+0x24c>)
 80011a6:	4293      	cmp	r3, r2
 80011a8:	d025      	beq.n	80011f6 <HAL_GPIO_Init+0x226>
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	4a1c      	ldr	r2, [pc, #112]	; (8001220 <HAL_GPIO_Init+0x250>)
 80011ae:	4293      	cmp	r3, r2
 80011b0:	d01f      	beq.n	80011f2 <HAL_GPIO_Init+0x222>
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	4a1b      	ldr	r2, [pc, #108]	; (8001224 <HAL_GPIO_Init+0x254>)
 80011b6:	4293      	cmp	r3, r2
 80011b8:	d019      	beq.n	80011ee <HAL_GPIO_Init+0x21e>
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	4a1a      	ldr	r2, [pc, #104]	; (8001228 <HAL_GPIO_Init+0x258>)
 80011be:	4293      	cmp	r3, r2
 80011c0:	d013      	beq.n	80011ea <HAL_GPIO_Init+0x21a>
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	4a19      	ldr	r2, [pc, #100]	; (800122c <HAL_GPIO_Init+0x25c>)
 80011c6:	4293      	cmp	r3, r2
 80011c8:	d00d      	beq.n	80011e6 <HAL_GPIO_Init+0x216>
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	4a18      	ldr	r2, [pc, #96]	; (8001230 <HAL_GPIO_Init+0x260>)
 80011ce:	4293      	cmp	r3, r2
 80011d0:	d007      	beq.n	80011e2 <HAL_GPIO_Init+0x212>
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	4a17      	ldr	r2, [pc, #92]	; (8001234 <HAL_GPIO_Init+0x264>)
 80011d6:	4293      	cmp	r3, r2
 80011d8:	d101      	bne.n	80011de <HAL_GPIO_Init+0x20e>
 80011da:	2309      	movs	r3, #9
 80011dc:	e02d      	b.n	800123a <HAL_GPIO_Init+0x26a>
 80011de:	230a      	movs	r3, #10
 80011e0:	e02b      	b.n	800123a <HAL_GPIO_Init+0x26a>
 80011e2:	2308      	movs	r3, #8
 80011e4:	e029      	b.n	800123a <HAL_GPIO_Init+0x26a>
 80011e6:	2307      	movs	r3, #7
 80011e8:	e027      	b.n	800123a <HAL_GPIO_Init+0x26a>
 80011ea:	2306      	movs	r3, #6
 80011ec:	e025      	b.n	800123a <HAL_GPIO_Init+0x26a>
 80011ee:	2305      	movs	r3, #5
 80011f0:	e023      	b.n	800123a <HAL_GPIO_Init+0x26a>
 80011f2:	2304      	movs	r3, #4
 80011f4:	e021      	b.n	800123a <HAL_GPIO_Init+0x26a>
 80011f6:	2303      	movs	r3, #3
 80011f8:	e01f      	b.n	800123a <HAL_GPIO_Init+0x26a>
 80011fa:	2302      	movs	r3, #2
 80011fc:	e01d      	b.n	800123a <HAL_GPIO_Init+0x26a>
 80011fe:	2301      	movs	r3, #1
 8001200:	e01b      	b.n	800123a <HAL_GPIO_Init+0x26a>
 8001202:	bf00      	nop
 8001204:	58000080 	.word	0x58000080
 8001208:	58024400 	.word	0x58024400
 800120c:	58000400 	.word	0x58000400
 8001210:	58020000 	.word	0x58020000
 8001214:	58020400 	.word	0x58020400
 8001218:	58020800 	.word	0x58020800
 800121c:	58020c00 	.word	0x58020c00
 8001220:	58021000 	.word	0x58021000
 8001224:	58021400 	.word	0x58021400
 8001228:	58021800 	.word	0x58021800
 800122c:	58021c00 	.word	0x58021c00
 8001230:	58022000 	.word	0x58022000
 8001234:	58022400 	.word	0x58022400
 8001238:	2300      	movs	r3, #0
 800123a:	69fa      	ldr	r2, [r7, #28]
 800123c:	f002 0203 	and.w	r2, r2, #3
 8001240:	0092      	lsls	r2, r2, #2
 8001242:	4093      	lsls	r3, r2
 8001244:	69ba      	ldr	r2, [r7, #24]
 8001246:	4313      	orrs	r3, r2
 8001248:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800124a:	4938      	ldr	r1, [pc, #224]	; (800132c <HAL_GPIO_Init+0x35c>)
 800124c:	69fb      	ldr	r3, [r7, #28]
 800124e:	089b      	lsrs	r3, r3, #2
 8001250:	3302      	adds	r3, #2
 8001252:	69ba      	ldr	r2, [r7, #24]
 8001254:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001258:	697b      	ldr	r3, [r7, #20]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800125e:	693b      	ldr	r3, [r7, #16]
 8001260:	43db      	mvns	r3, r3
 8001262:	69ba      	ldr	r2, [r7, #24]
 8001264:	4013      	ands	r3, r2
 8001266:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001270:	2b00      	cmp	r3, #0
 8001272:	d003      	beq.n	800127c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001274:	69ba      	ldr	r2, [r7, #24]
 8001276:	693b      	ldr	r3, [r7, #16]
 8001278:	4313      	orrs	r3, r2
 800127a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800127c:	697b      	ldr	r3, [r7, #20]
 800127e:	69ba      	ldr	r2, [r7, #24]
 8001280:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8001282:	697b      	ldr	r3, [r7, #20]
 8001284:	685b      	ldr	r3, [r3, #4]
 8001286:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001288:	693b      	ldr	r3, [r7, #16]
 800128a:	43db      	mvns	r3, r3
 800128c:	69ba      	ldr	r2, [r7, #24]
 800128e:	4013      	ands	r3, r2
 8001290:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	685b      	ldr	r3, [r3, #4]
 8001296:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800129a:	2b00      	cmp	r3, #0
 800129c:	d003      	beq.n	80012a6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800129e:	69ba      	ldr	r2, [r7, #24]
 80012a0:	693b      	ldr	r3, [r7, #16]
 80012a2:	4313      	orrs	r3, r2
 80012a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80012a6:	697b      	ldr	r3, [r7, #20]
 80012a8:	69ba      	ldr	r2, [r7, #24]
 80012aa:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80012ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80012b4:	693b      	ldr	r3, [r7, #16]
 80012b6:	43db      	mvns	r3, r3
 80012b8:	69ba      	ldr	r2, [r7, #24]
 80012ba:	4013      	ands	r3, r2
 80012bc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	685b      	ldr	r3, [r3, #4]
 80012c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d003      	beq.n	80012d2 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 80012ca:	69ba      	ldr	r2, [r7, #24]
 80012cc:	693b      	ldr	r3, [r7, #16]
 80012ce:	4313      	orrs	r3, r2
 80012d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80012d2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80012d6:	69bb      	ldr	r3, [r7, #24]
 80012d8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80012da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012de:	685b      	ldr	r3, [r3, #4]
 80012e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80012e2:	693b      	ldr	r3, [r7, #16]
 80012e4:	43db      	mvns	r3, r3
 80012e6:	69ba      	ldr	r2, [r7, #24]
 80012e8:	4013      	ands	r3, r2
 80012ea:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	685b      	ldr	r3, [r3, #4]
 80012f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d003      	beq.n	8001300 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 80012f8:	69ba      	ldr	r2, [r7, #24]
 80012fa:	693b      	ldr	r3, [r7, #16]
 80012fc:	4313      	orrs	r3, r2
 80012fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001300:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001304:	69bb      	ldr	r3, [r7, #24]
 8001306:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8001308:	69fb      	ldr	r3, [r7, #28]
 800130a:	3301      	adds	r3, #1
 800130c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	681a      	ldr	r2, [r3, #0]
 8001312:	69fb      	ldr	r3, [r7, #28]
 8001314:	fa22 f303 	lsr.w	r3, r2, r3
 8001318:	2b00      	cmp	r3, #0
 800131a:	f47f ae63 	bne.w	8000fe4 <HAL_GPIO_Init+0x14>
  }
}
 800131e:	bf00      	nop
 8001320:	bf00      	nop
 8001322:	3724      	adds	r7, #36	; 0x24
 8001324:	46bd      	mov	sp, r7
 8001326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132a:	4770      	bx	lr
 800132c:	58000400 	.word	0x58000400

08001330 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8001330:	b480      	push	{r7}
 8001332:	b083      	sub	sp, #12
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8001338:	4a08      	ldr	r2, [pc, #32]	; (800135c <HAL_HSEM_FastTake+0x2c>)
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	3320      	adds	r3, #32
 800133e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001342:	4a07      	ldr	r2, [pc, #28]	; (8001360 <HAL_HSEM_FastTake+0x30>)
 8001344:	4293      	cmp	r3, r2
 8001346:	d101      	bne.n	800134c <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8001348:	2300      	movs	r3, #0
 800134a:	e000      	b.n	800134e <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 800134c:	2301      	movs	r3, #1
}
 800134e:	4618      	mov	r0, r3
 8001350:	370c      	adds	r7, #12
 8001352:	46bd      	mov	sp, r7
 8001354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001358:	4770      	bx	lr
 800135a:	bf00      	nop
 800135c:	58026400 	.word	0x58026400
 8001360:	80000300 	.word	0x80000300

08001364 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8001364:	b480      	push	{r7}
 8001366:	b083      	sub	sp, #12
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
 800136c:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 800136e:	4906      	ldr	r1, [pc, #24]	; (8001388 <HAL_HSEM_Release+0x24>)
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 800137c:	bf00      	nop
 800137e:	370c      	adds	r7, #12
 8001380:	46bd      	mov	sp, r7
 8001382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001386:	4770      	bx	lr
 8001388:	58026400 	.word	0x58026400

0800138c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b082      	sub	sp, #8
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	2b00      	cmp	r3, #0
 8001398:	d101      	bne.n	800139e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800139a:	2301      	movs	r3, #1
 800139c:	e07f      	b.n	800149e <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80013a4:	b2db      	uxtb	r3, r3
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d106      	bne.n	80013b8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	2200      	movs	r2, #0
 80013ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80013b2:	6878      	ldr	r0, [r7, #4]
 80013b4:	f7ff fb7e 	bl	8000ab4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	2224      	movs	r2, #36	; 0x24
 80013bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	681a      	ldr	r2, [r3, #0]
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f022 0201 	bic.w	r2, r2, #1
 80013ce:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	685a      	ldr	r2, [r3, #4]
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80013dc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	689a      	ldr	r2, [r3, #8]
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80013ec:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	68db      	ldr	r3, [r3, #12]
 80013f2:	2b01      	cmp	r3, #1
 80013f4:	d107      	bne.n	8001406 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	689a      	ldr	r2, [r3, #8]
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001402:	609a      	str	r2, [r3, #8]
 8001404:	e006      	b.n	8001414 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	689a      	ldr	r2, [r3, #8]
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001412:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	68db      	ldr	r3, [r3, #12]
 8001418:	2b02      	cmp	r3, #2
 800141a:	d104      	bne.n	8001426 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001424:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	6859      	ldr	r1, [r3, #4]
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681a      	ldr	r2, [r3, #0]
 8001430:	4b1d      	ldr	r3, [pc, #116]	; (80014a8 <HAL_I2C_Init+0x11c>)
 8001432:	430b      	orrs	r3, r1
 8001434:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	68da      	ldr	r2, [r3, #12]
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001444:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	691a      	ldr	r2, [r3, #16]
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	695b      	ldr	r3, [r3, #20]
 800144e:	ea42 0103 	orr.w	r1, r2, r3
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	699b      	ldr	r3, [r3, #24]
 8001456:	021a      	lsls	r2, r3, #8
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	430a      	orrs	r2, r1
 800145e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	69d9      	ldr	r1, [r3, #28]
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	6a1a      	ldr	r2, [r3, #32]
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	430a      	orrs	r2, r1
 800146e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	681a      	ldr	r2, [r3, #0]
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f042 0201 	orr.w	r2, r2, #1
 800147e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	2200      	movs	r2, #0
 8001484:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	2220      	movs	r2, #32
 800148a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	2200      	movs	r2, #0
 8001492:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	2200      	movs	r2, #0
 8001498:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800149c:	2300      	movs	r3, #0
}
 800149e:	4618      	mov	r0, r3
 80014a0:	3708      	adds	r7, #8
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	02008000 	.word	0x02008000

080014ac <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                          uint32_t Timeout)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b088      	sub	sp, #32
 80014b0:	af02      	add	r7, sp, #8
 80014b2:	60f8      	str	r0, [r7, #12]
 80014b4:	607a      	str	r2, [r7, #4]
 80014b6:	461a      	mov	r2, r3
 80014b8:	460b      	mov	r3, r1
 80014ba:	817b      	strh	r3, [r7, #10]
 80014bc:	4613      	mov	r3, r2
 80014be:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80014c6:	b2db      	uxtb	r3, r3
 80014c8:	2b20      	cmp	r3, #32
 80014ca:	f040 80da 	bne.w	8001682 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80014d4:	2b01      	cmp	r3, #1
 80014d6:	d101      	bne.n	80014dc <HAL_I2C_Master_Transmit+0x30>
 80014d8:	2302      	movs	r3, #2
 80014da:	e0d3      	b.n	8001684 <HAL_I2C_Master_Transmit+0x1d8>
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	2201      	movs	r2, #1
 80014e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80014e4:	f7ff fc54 	bl	8000d90 <HAL_GetTick>
 80014e8:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80014ea:	697b      	ldr	r3, [r7, #20]
 80014ec:	9300      	str	r3, [sp, #0]
 80014ee:	2319      	movs	r3, #25
 80014f0:	2201      	movs	r2, #1
 80014f2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80014f6:	68f8      	ldr	r0, [r7, #12]
 80014f8:	f000 f8f0 	bl	80016dc <I2C_WaitOnFlagUntilTimeout>
 80014fc:	4603      	mov	r3, r0
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d001      	beq.n	8001506 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8001502:	2301      	movs	r3, #1
 8001504:	e0be      	b.n	8001684 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	2221      	movs	r2, #33	; 0x21
 800150a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	2210      	movs	r2, #16
 8001512:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	2200      	movs	r2, #0
 800151a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	687a      	ldr	r2, [r7, #4]
 8001520:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	893a      	ldrh	r2, [r7, #8]
 8001526:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	2200      	movs	r2, #0
 800152c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001532:	b29b      	uxth	r3, r3
 8001534:	2bff      	cmp	r3, #255	; 0xff
 8001536:	d90e      	bls.n	8001556 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	22ff      	movs	r2, #255	; 0xff
 800153c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001542:	b2da      	uxtb	r2, r3
 8001544:	8979      	ldrh	r1, [r7, #10]
 8001546:	4b51      	ldr	r3, [pc, #324]	; (800168c <HAL_I2C_Master_Transmit+0x1e0>)
 8001548:	9300      	str	r3, [sp, #0]
 800154a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800154e:	68f8      	ldr	r0, [r7, #12]
 8001550:	f000 f9e6 	bl	8001920 <I2C_TransferConfig>
 8001554:	e06c      	b.n	8001630 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800155a:	b29a      	uxth	r2, r3
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001564:	b2da      	uxtb	r2, r3
 8001566:	8979      	ldrh	r1, [r7, #10]
 8001568:	4b48      	ldr	r3, [pc, #288]	; (800168c <HAL_I2C_Master_Transmit+0x1e0>)
 800156a:	9300      	str	r3, [sp, #0]
 800156c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001570:	68f8      	ldr	r0, [r7, #12]
 8001572:	f000 f9d5 	bl	8001920 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8001576:	e05b      	b.n	8001630 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001578:	697a      	ldr	r2, [r7, #20]
 800157a:	6a39      	ldr	r1, [r7, #32]
 800157c:	68f8      	ldr	r0, [r7, #12]
 800157e:	f000 f8ed 	bl	800175c <I2C_WaitOnTXISFlagUntilTimeout>
 8001582:	4603      	mov	r3, r0
 8001584:	2b00      	cmp	r3, #0
 8001586:	d001      	beq.n	800158c <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8001588:	2301      	movs	r3, #1
 800158a:	e07b      	b.n	8001684 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001590:	781a      	ldrb	r2, [r3, #0]
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800159c:	1c5a      	adds	r2, r3, #1
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015a6:	b29b      	uxth	r3, r3
 80015a8:	3b01      	subs	r3, #1
 80015aa:	b29a      	uxth	r2, r3
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015b4:	3b01      	subs	r3, #1
 80015b6:	b29a      	uxth	r2, r3
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015c0:	b29b      	uxth	r3, r3
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d034      	beq.n	8001630 <HAL_I2C_Master_Transmit+0x184>
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d130      	bne.n	8001630 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80015ce:	697b      	ldr	r3, [r7, #20]
 80015d0:	9300      	str	r3, [sp, #0]
 80015d2:	6a3b      	ldr	r3, [r7, #32]
 80015d4:	2200      	movs	r2, #0
 80015d6:	2180      	movs	r1, #128	; 0x80
 80015d8:	68f8      	ldr	r0, [r7, #12]
 80015da:	f000 f87f 	bl	80016dc <I2C_WaitOnFlagUntilTimeout>
 80015de:	4603      	mov	r3, r0
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d001      	beq.n	80015e8 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80015e4:	2301      	movs	r3, #1
 80015e6:	e04d      	b.n	8001684 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015ec:	b29b      	uxth	r3, r3
 80015ee:	2bff      	cmp	r3, #255	; 0xff
 80015f0:	d90e      	bls.n	8001610 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	22ff      	movs	r2, #255	; 0xff
 80015f6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015fc:	b2da      	uxtb	r2, r3
 80015fe:	8979      	ldrh	r1, [r7, #10]
 8001600:	2300      	movs	r3, #0
 8001602:	9300      	str	r3, [sp, #0]
 8001604:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001608:	68f8      	ldr	r0, [r7, #12]
 800160a:	f000 f989 	bl	8001920 <I2C_TransferConfig>
 800160e:	e00f      	b.n	8001630 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001614:	b29a      	uxth	r2, r3
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800161e:	b2da      	uxtb	r2, r3
 8001620:	8979      	ldrh	r1, [r7, #10]
 8001622:	2300      	movs	r3, #0
 8001624:	9300      	str	r3, [sp, #0]
 8001626:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800162a:	68f8      	ldr	r0, [r7, #12]
 800162c:	f000 f978 	bl	8001920 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001634:	b29b      	uxth	r3, r3
 8001636:	2b00      	cmp	r3, #0
 8001638:	d19e      	bne.n	8001578 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800163a:	697a      	ldr	r2, [r7, #20]
 800163c:	6a39      	ldr	r1, [r7, #32]
 800163e:	68f8      	ldr	r0, [r7, #12]
 8001640:	f000 f8cc 	bl	80017dc <I2C_WaitOnSTOPFlagUntilTimeout>
 8001644:	4603      	mov	r3, r0
 8001646:	2b00      	cmp	r3, #0
 8001648:	d001      	beq.n	800164e <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800164a:	2301      	movs	r3, #1
 800164c:	e01a      	b.n	8001684 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	2220      	movs	r2, #32
 8001654:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	6859      	ldr	r1, [r3, #4]
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	681a      	ldr	r2, [r3, #0]
 8001660:	4b0b      	ldr	r3, [pc, #44]	; (8001690 <HAL_I2C_Master_Transmit+0x1e4>)
 8001662:	400b      	ands	r3, r1
 8001664:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	2220      	movs	r2, #32
 800166a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	2200      	movs	r2, #0
 8001672:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	2200      	movs	r2, #0
 800167a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800167e:	2300      	movs	r3, #0
 8001680:	e000      	b.n	8001684 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8001682:	2302      	movs	r3, #2
  }
}
 8001684:	4618      	mov	r0, r3
 8001686:	3718      	adds	r7, #24
 8001688:	46bd      	mov	sp, r7
 800168a:	bd80      	pop	{r7, pc}
 800168c:	80002000 	.word	0x80002000
 8001690:	fe00e800 	.word	0xfe00e800

08001694 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001694:	b480      	push	{r7}
 8001696:	b083      	sub	sp, #12
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	699b      	ldr	r3, [r3, #24]
 80016a2:	f003 0302 	and.w	r3, r3, #2
 80016a6:	2b02      	cmp	r3, #2
 80016a8:	d103      	bne.n	80016b2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	2200      	movs	r2, #0
 80016b0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	699b      	ldr	r3, [r3, #24]
 80016b8:	f003 0301 	and.w	r3, r3, #1
 80016bc:	2b01      	cmp	r3, #1
 80016be:	d007      	beq.n	80016d0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	699a      	ldr	r2, [r3, #24]
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f042 0201 	orr.w	r2, r2, #1
 80016ce:	619a      	str	r2, [r3, #24]
  }
}
 80016d0:	bf00      	nop
 80016d2:	370c      	adds	r7, #12
 80016d4:	46bd      	mov	sp, r7
 80016d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016da:	4770      	bx	lr

080016dc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b084      	sub	sp, #16
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	60f8      	str	r0, [r7, #12]
 80016e4:	60b9      	str	r1, [r7, #8]
 80016e6:	603b      	str	r3, [r7, #0]
 80016e8:	4613      	mov	r3, r2
 80016ea:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80016ec:	e022      	b.n	8001734 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80016ee:	683b      	ldr	r3, [r7, #0]
 80016f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016f4:	d01e      	beq.n	8001734 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80016f6:	f7ff fb4b 	bl	8000d90 <HAL_GetTick>
 80016fa:	4602      	mov	r2, r0
 80016fc:	69bb      	ldr	r3, [r7, #24]
 80016fe:	1ad3      	subs	r3, r2, r3
 8001700:	683a      	ldr	r2, [r7, #0]
 8001702:	429a      	cmp	r2, r3
 8001704:	d302      	bcc.n	800170c <I2C_WaitOnFlagUntilTimeout+0x30>
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	2b00      	cmp	r3, #0
 800170a:	d113      	bne.n	8001734 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001710:	f043 0220 	orr.w	r2, r3, #32
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	2220      	movs	r2, #32
 800171c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	2200      	movs	r2, #0
 8001724:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	2200      	movs	r2, #0
 800172c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8001730:	2301      	movs	r3, #1
 8001732:	e00f      	b.n	8001754 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	699a      	ldr	r2, [r3, #24]
 800173a:	68bb      	ldr	r3, [r7, #8]
 800173c:	4013      	ands	r3, r2
 800173e:	68ba      	ldr	r2, [r7, #8]
 8001740:	429a      	cmp	r2, r3
 8001742:	bf0c      	ite	eq
 8001744:	2301      	moveq	r3, #1
 8001746:	2300      	movne	r3, #0
 8001748:	b2db      	uxtb	r3, r3
 800174a:	461a      	mov	r2, r3
 800174c:	79fb      	ldrb	r3, [r7, #7]
 800174e:	429a      	cmp	r2, r3
 8001750:	d0cd      	beq.n	80016ee <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001752:	2300      	movs	r3, #0
}
 8001754:	4618      	mov	r0, r3
 8001756:	3710      	adds	r7, #16
 8001758:	46bd      	mov	sp, r7
 800175a:	bd80      	pop	{r7, pc}

0800175c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b084      	sub	sp, #16
 8001760:	af00      	add	r7, sp, #0
 8001762:	60f8      	str	r0, [r7, #12]
 8001764:	60b9      	str	r1, [r7, #8]
 8001766:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001768:	e02c      	b.n	80017c4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800176a:	687a      	ldr	r2, [r7, #4]
 800176c:	68b9      	ldr	r1, [r7, #8]
 800176e:	68f8      	ldr	r0, [r7, #12]
 8001770:	f000 f870 	bl	8001854 <I2C_IsAcknowledgeFailed>
 8001774:	4603      	mov	r3, r0
 8001776:	2b00      	cmp	r3, #0
 8001778:	d001      	beq.n	800177e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800177a:	2301      	movs	r3, #1
 800177c:	e02a      	b.n	80017d4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800177e:	68bb      	ldr	r3, [r7, #8]
 8001780:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001784:	d01e      	beq.n	80017c4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001786:	f7ff fb03 	bl	8000d90 <HAL_GetTick>
 800178a:	4602      	mov	r2, r0
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	1ad3      	subs	r3, r2, r3
 8001790:	68ba      	ldr	r2, [r7, #8]
 8001792:	429a      	cmp	r2, r3
 8001794:	d302      	bcc.n	800179c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001796:	68bb      	ldr	r3, [r7, #8]
 8001798:	2b00      	cmp	r3, #0
 800179a:	d113      	bne.n	80017c4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017a0:	f043 0220 	orr.w	r2, r3, #32
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	2220      	movs	r2, #32
 80017ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	2200      	movs	r2, #0
 80017b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	2200      	movs	r2, #0
 80017bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80017c0:	2301      	movs	r3, #1
 80017c2:	e007      	b.n	80017d4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	699b      	ldr	r3, [r3, #24]
 80017ca:	f003 0302 	and.w	r3, r3, #2
 80017ce:	2b02      	cmp	r3, #2
 80017d0:	d1cb      	bne.n	800176a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80017d2:	2300      	movs	r3, #0
}
 80017d4:	4618      	mov	r0, r3
 80017d6:	3710      	adds	r7, #16
 80017d8:	46bd      	mov	sp, r7
 80017da:	bd80      	pop	{r7, pc}

080017dc <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b084      	sub	sp, #16
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	60f8      	str	r0, [r7, #12]
 80017e4:	60b9      	str	r1, [r7, #8]
 80017e6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80017e8:	e028      	b.n	800183c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80017ea:	687a      	ldr	r2, [r7, #4]
 80017ec:	68b9      	ldr	r1, [r7, #8]
 80017ee:	68f8      	ldr	r0, [r7, #12]
 80017f0:	f000 f830 	bl	8001854 <I2C_IsAcknowledgeFailed>
 80017f4:	4603      	mov	r3, r0
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d001      	beq.n	80017fe <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80017fa:	2301      	movs	r3, #1
 80017fc:	e026      	b.n	800184c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80017fe:	f7ff fac7 	bl	8000d90 <HAL_GetTick>
 8001802:	4602      	mov	r2, r0
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	1ad3      	subs	r3, r2, r3
 8001808:	68ba      	ldr	r2, [r7, #8]
 800180a:	429a      	cmp	r2, r3
 800180c:	d302      	bcc.n	8001814 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800180e:	68bb      	ldr	r3, [r7, #8]
 8001810:	2b00      	cmp	r3, #0
 8001812:	d113      	bne.n	800183c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001818:	f043 0220 	orr.w	r2, r3, #32
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	2220      	movs	r2, #32
 8001824:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	2200      	movs	r2, #0
 800182c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	2200      	movs	r2, #0
 8001834:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8001838:	2301      	movs	r3, #1
 800183a:	e007      	b.n	800184c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	699b      	ldr	r3, [r3, #24]
 8001842:	f003 0320 	and.w	r3, r3, #32
 8001846:	2b20      	cmp	r3, #32
 8001848:	d1cf      	bne.n	80017ea <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800184a:	2300      	movs	r3, #0
}
 800184c:	4618      	mov	r0, r3
 800184e:	3710      	adds	r7, #16
 8001850:	46bd      	mov	sp, r7
 8001852:	bd80      	pop	{r7, pc}

08001854 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b084      	sub	sp, #16
 8001858:	af00      	add	r7, sp, #0
 800185a:	60f8      	str	r0, [r7, #12]
 800185c:	60b9      	str	r1, [r7, #8]
 800185e:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	699b      	ldr	r3, [r3, #24]
 8001866:	f003 0310 	and.w	r3, r3, #16
 800186a:	2b10      	cmp	r3, #16
 800186c:	d151      	bne.n	8001912 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800186e:	e022      	b.n	80018b6 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001870:	68bb      	ldr	r3, [r7, #8]
 8001872:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001876:	d01e      	beq.n	80018b6 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001878:	f7ff fa8a 	bl	8000d90 <HAL_GetTick>
 800187c:	4602      	mov	r2, r0
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	1ad3      	subs	r3, r2, r3
 8001882:	68ba      	ldr	r2, [r7, #8]
 8001884:	429a      	cmp	r2, r3
 8001886:	d302      	bcc.n	800188e <I2C_IsAcknowledgeFailed+0x3a>
 8001888:	68bb      	ldr	r3, [r7, #8]
 800188a:	2b00      	cmp	r3, #0
 800188c:	d113      	bne.n	80018b6 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001892:	f043 0220 	orr.w	r2, r3, #32
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	2220      	movs	r2, #32
 800189e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	2200      	movs	r2, #0
 80018a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	2200      	movs	r2, #0
 80018ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80018b2:	2301      	movs	r3, #1
 80018b4:	e02e      	b.n	8001914 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	699b      	ldr	r3, [r3, #24]
 80018bc:	f003 0320 	and.w	r3, r3, #32
 80018c0:	2b20      	cmp	r3, #32
 80018c2:	d1d5      	bne.n	8001870 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	2210      	movs	r2, #16
 80018ca:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	2220      	movs	r2, #32
 80018d2:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80018d4:	68f8      	ldr	r0, [r7, #12]
 80018d6:	f7ff fedd 	bl	8001694 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	6859      	ldr	r1, [r3, #4]
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	681a      	ldr	r2, [r3, #0]
 80018e4:	4b0d      	ldr	r3, [pc, #52]	; (800191c <I2C_IsAcknowledgeFailed+0xc8>)
 80018e6:	400b      	ands	r3, r1
 80018e8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ee:	f043 0204 	orr.w	r2, r3, #4
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	2220      	movs	r2, #32
 80018fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	2200      	movs	r2, #0
 8001902:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	2200      	movs	r2, #0
 800190a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800190e:	2301      	movs	r3, #1
 8001910:	e000      	b.n	8001914 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8001912:	2300      	movs	r3, #0
}
 8001914:	4618      	mov	r0, r3
 8001916:	3710      	adds	r7, #16
 8001918:	46bd      	mov	sp, r7
 800191a:	bd80      	pop	{r7, pc}
 800191c:	fe00e800 	.word	0xfe00e800

08001920 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001920:	b480      	push	{r7}
 8001922:	b085      	sub	sp, #20
 8001924:	af00      	add	r7, sp, #0
 8001926:	60f8      	str	r0, [r7, #12]
 8001928:	607b      	str	r3, [r7, #4]
 800192a:	460b      	mov	r3, r1
 800192c:	817b      	strh	r3, [r7, #10]
 800192e:	4613      	mov	r3, r2
 8001930:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	685a      	ldr	r2, [r3, #4]
 8001938:	69bb      	ldr	r3, [r7, #24]
 800193a:	0d5b      	lsrs	r3, r3, #21
 800193c:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8001940:	4b0d      	ldr	r3, [pc, #52]	; (8001978 <I2C_TransferConfig+0x58>)
 8001942:	430b      	orrs	r3, r1
 8001944:	43db      	mvns	r3, r3
 8001946:	ea02 0103 	and.w	r1, r2, r3
 800194a:	897b      	ldrh	r3, [r7, #10]
 800194c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001950:	7a7b      	ldrb	r3, [r7, #9]
 8001952:	041b      	lsls	r3, r3, #16
 8001954:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8001958:	431a      	orrs	r2, r3
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	431a      	orrs	r2, r3
 800195e:	69bb      	ldr	r3, [r7, #24]
 8001960:	431a      	orrs	r2, r3
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	430a      	orrs	r2, r1
 8001968:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800196a:	bf00      	nop
 800196c:	3714      	adds	r7, #20
 800196e:	46bd      	mov	sp, r7
 8001970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001974:	4770      	bx	lr
 8001976:	bf00      	nop
 8001978:	03ff63ff 	.word	0x03ff63ff

0800197c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800197c:	b480      	push	{r7}
 800197e:	b083      	sub	sp, #12
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
 8001984:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800198c:	b2db      	uxtb	r3, r3
 800198e:	2b20      	cmp	r3, #32
 8001990:	d138      	bne.n	8001a04 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001998:	2b01      	cmp	r3, #1
 800199a:	d101      	bne.n	80019a0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800199c:	2302      	movs	r3, #2
 800199e:	e032      	b.n	8001a06 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	2201      	movs	r2, #1
 80019a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	2224      	movs	r2, #36	; 0x24
 80019ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	681a      	ldr	r2, [r3, #0]
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f022 0201 	bic.w	r2, r2, #1
 80019be:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	681a      	ldr	r2, [r3, #0]
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80019ce:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	6819      	ldr	r1, [r3, #0]
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	683a      	ldr	r2, [r7, #0]
 80019dc:	430a      	orrs	r2, r1
 80019de:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	681a      	ldr	r2, [r3, #0]
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f042 0201 	orr.w	r2, r2, #1
 80019ee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	2220      	movs	r2, #32
 80019f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	2200      	movs	r2, #0
 80019fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001a00:	2300      	movs	r3, #0
 8001a02:	e000      	b.n	8001a06 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001a04:	2302      	movs	r3, #2
  }
}
 8001a06:	4618      	mov	r0, r3
 8001a08:	370c      	adds	r7, #12
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a10:	4770      	bx	lr

08001a12 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001a12:	b480      	push	{r7}
 8001a14:	b085      	sub	sp, #20
 8001a16:	af00      	add	r7, sp, #0
 8001a18:	6078      	str	r0, [r7, #4]
 8001a1a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001a22:	b2db      	uxtb	r3, r3
 8001a24:	2b20      	cmp	r3, #32
 8001a26:	d139      	bne.n	8001a9c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001a2e:	2b01      	cmp	r3, #1
 8001a30:	d101      	bne.n	8001a36 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001a32:	2302      	movs	r3, #2
 8001a34:	e033      	b.n	8001a9e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	2201      	movs	r2, #1
 8001a3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	2224      	movs	r2, #36	; 0x24
 8001a42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	681a      	ldr	r2, [r3, #0]
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f022 0201 	bic.w	r2, r2, #1
 8001a54:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001a64:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	021b      	lsls	r3, r3, #8
 8001a6a:	68fa      	ldr	r2, [r7, #12]
 8001a6c:	4313      	orrs	r3, r2
 8001a6e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	68fa      	ldr	r2, [r7, #12]
 8001a76:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	681a      	ldr	r2, [r3, #0]
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f042 0201 	orr.w	r2, r2, #1
 8001a86:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	2220      	movs	r2, #32
 8001a8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	2200      	movs	r2, #0
 8001a94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	e000      	b.n	8001a9e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001a9c:	2302      	movs	r3, #2
  }
}
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	3714      	adds	r7, #20
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa8:	4770      	bx	lr
	...

08001aac <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b084      	sub	sp, #16
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8001ab4:	4b29      	ldr	r3, [pc, #164]	; (8001b5c <HAL_PWREx_ConfigSupply+0xb0>)
 8001ab6:	68db      	ldr	r3, [r3, #12]
 8001ab8:	f003 0307 	and.w	r3, r3, #7
 8001abc:	2b06      	cmp	r3, #6
 8001abe:	d00a      	beq.n	8001ad6 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001ac0:	4b26      	ldr	r3, [pc, #152]	; (8001b5c <HAL_PWREx_ConfigSupply+0xb0>)
 8001ac2:	68db      	ldr	r3, [r3, #12]
 8001ac4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001ac8:	687a      	ldr	r2, [r7, #4]
 8001aca:	429a      	cmp	r2, r3
 8001acc:	d001      	beq.n	8001ad2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001ace:	2301      	movs	r3, #1
 8001ad0:	e040      	b.n	8001b54 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	e03e      	b.n	8001b54 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001ad6:	4b21      	ldr	r3, [pc, #132]	; (8001b5c <HAL_PWREx_ConfigSupply+0xb0>)
 8001ad8:	68db      	ldr	r3, [r3, #12]
 8001ada:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8001ade:	491f      	ldr	r1, [pc, #124]	; (8001b5c <HAL_PWREx_ConfigSupply+0xb0>)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	4313      	orrs	r3, r2
 8001ae4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001ae6:	f7ff f953 	bl	8000d90 <HAL_GetTick>
 8001aea:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001aec:	e009      	b.n	8001b02 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001aee:	f7ff f94f 	bl	8000d90 <HAL_GetTick>
 8001af2:	4602      	mov	r2, r0
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	1ad3      	subs	r3, r2, r3
 8001af8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001afc:	d901      	bls.n	8001b02 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8001afe:	2301      	movs	r3, #1
 8001b00:	e028      	b.n	8001b54 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001b02:	4b16      	ldr	r3, [pc, #88]	; (8001b5c <HAL_PWREx_ConfigSupply+0xb0>)
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001b0a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001b0e:	d1ee      	bne.n	8001aee <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	2b1e      	cmp	r3, #30
 8001b14:	d008      	beq.n	8001b28 <HAL_PWREx_ConfigSupply+0x7c>
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	2b2e      	cmp	r3, #46	; 0x2e
 8001b1a:	d005      	beq.n	8001b28 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2b1d      	cmp	r3, #29
 8001b20:	d002      	beq.n	8001b28 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	2b2d      	cmp	r3, #45	; 0x2d
 8001b26:	d114      	bne.n	8001b52 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8001b28:	f7ff f932 	bl	8000d90 <HAL_GetTick>
 8001b2c:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001b2e:	e009      	b.n	8001b44 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001b30:	f7ff f92e 	bl	8000d90 <HAL_GetTick>
 8001b34:	4602      	mov	r2, r0
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	1ad3      	subs	r3, r2, r3
 8001b3a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001b3e:	d901      	bls.n	8001b44 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8001b40:	2301      	movs	r3, #1
 8001b42:	e007      	b.n	8001b54 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001b44:	4b05      	ldr	r3, [pc, #20]	; (8001b5c <HAL_PWREx_ConfigSupply+0xb0>)
 8001b46:	68db      	ldr	r3, [r3, #12]
 8001b48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b50:	d1ee      	bne.n	8001b30 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001b52:	2300      	movs	r3, #0
}
 8001b54:	4618      	mov	r0, r3
 8001b56:	3710      	adds	r7, #16
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bd80      	pop	{r7, pc}
 8001b5c:	58024800 	.word	0x58024800

08001b60 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b08c      	sub	sp, #48	; 0x30
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d101      	bne.n	8001b72 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b6e:	2301      	movs	r3, #1
 8001b70:	e3ff      	b.n	8002372 <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f003 0301 	and.w	r3, r3, #1
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	f000 8087 	beq.w	8001c8e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b80:	4b99      	ldr	r3, [pc, #612]	; (8001de8 <HAL_RCC_OscConfig+0x288>)
 8001b82:	691b      	ldr	r3, [r3, #16]
 8001b84:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001b88:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001b8a:	4b97      	ldr	r3, [pc, #604]	; (8001de8 <HAL_RCC_OscConfig+0x288>)
 8001b8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b8e:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001b90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b92:	2b10      	cmp	r3, #16
 8001b94:	d007      	beq.n	8001ba6 <HAL_RCC_OscConfig+0x46>
 8001b96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b98:	2b18      	cmp	r3, #24
 8001b9a:	d110      	bne.n	8001bbe <HAL_RCC_OscConfig+0x5e>
 8001b9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b9e:	f003 0303 	and.w	r3, r3, #3
 8001ba2:	2b02      	cmp	r3, #2
 8001ba4:	d10b      	bne.n	8001bbe <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ba6:	4b90      	ldr	r3, [pc, #576]	; (8001de8 <HAL_RCC_OscConfig+0x288>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d06c      	beq.n	8001c8c <HAL_RCC_OscConfig+0x12c>
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	685b      	ldr	r3, [r3, #4]
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d168      	bne.n	8001c8c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001bba:	2301      	movs	r3, #1
 8001bbc:	e3d9      	b.n	8002372 <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	685b      	ldr	r3, [r3, #4]
 8001bc2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001bc6:	d106      	bne.n	8001bd6 <HAL_RCC_OscConfig+0x76>
 8001bc8:	4b87      	ldr	r3, [pc, #540]	; (8001de8 <HAL_RCC_OscConfig+0x288>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4a86      	ldr	r2, [pc, #536]	; (8001de8 <HAL_RCC_OscConfig+0x288>)
 8001bce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bd2:	6013      	str	r3, [r2, #0]
 8001bd4:	e02e      	b.n	8001c34 <HAL_RCC_OscConfig+0xd4>
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	685b      	ldr	r3, [r3, #4]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d10c      	bne.n	8001bf8 <HAL_RCC_OscConfig+0x98>
 8001bde:	4b82      	ldr	r3, [pc, #520]	; (8001de8 <HAL_RCC_OscConfig+0x288>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	4a81      	ldr	r2, [pc, #516]	; (8001de8 <HAL_RCC_OscConfig+0x288>)
 8001be4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001be8:	6013      	str	r3, [r2, #0]
 8001bea:	4b7f      	ldr	r3, [pc, #508]	; (8001de8 <HAL_RCC_OscConfig+0x288>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	4a7e      	ldr	r2, [pc, #504]	; (8001de8 <HAL_RCC_OscConfig+0x288>)
 8001bf0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bf4:	6013      	str	r3, [r2, #0]
 8001bf6:	e01d      	b.n	8001c34 <HAL_RCC_OscConfig+0xd4>
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c00:	d10c      	bne.n	8001c1c <HAL_RCC_OscConfig+0xbc>
 8001c02:	4b79      	ldr	r3, [pc, #484]	; (8001de8 <HAL_RCC_OscConfig+0x288>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	4a78      	ldr	r2, [pc, #480]	; (8001de8 <HAL_RCC_OscConfig+0x288>)
 8001c08:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c0c:	6013      	str	r3, [r2, #0]
 8001c0e:	4b76      	ldr	r3, [pc, #472]	; (8001de8 <HAL_RCC_OscConfig+0x288>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4a75      	ldr	r2, [pc, #468]	; (8001de8 <HAL_RCC_OscConfig+0x288>)
 8001c14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c18:	6013      	str	r3, [r2, #0]
 8001c1a:	e00b      	b.n	8001c34 <HAL_RCC_OscConfig+0xd4>
 8001c1c:	4b72      	ldr	r3, [pc, #456]	; (8001de8 <HAL_RCC_OscConfig+0x288>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4a71      	ldr	r2, [pc, #452]	; (8001de8 <HAL_RCC_OscConfig+0x288>)
 8001c22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c26:	6013      	str	r3, [r2, #0]
 8001c28:	4b6f      	ldr	r3, [pc, #444]	; (8001de8 <HAL_RCC_OscConfig+0x288>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4a6e      	ldr	r2, [pc, #440]	; (8001de8 <HAL_RCC_OscConfig+0x288>)
 8001c2e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c32:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d013      	beq.n	8001c64 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c3c:	f7ff f8a8 	bl	8000d90 <HAL_GetTick>
 8001c40:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001c42:	e008      	b.n	8001c56 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c44:	f7ff f8a4 	bl	8000d90 <HAL_GetTick>
 8001c48:	4602      	mov	r2, r0
 8001c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c4c:	1ad3      	subs	r3, r2, r3
 8001c4e:	2b64      	cmp	r3, #100	; 0x64
 8001c50:	d901      	bls.n	8001c56 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001c52:	2303      	movs	r3, #3
 8001c54:	e38d      	b.n	8002372 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001c56:	4b64      	ldr	r3, [pc, #400]	; (8001de8 <HAL_RCC_OscConfig+0x288>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d0f0      	beq.n	8001c44 <HAL_RCC_OscConfig+0xe4>
 8001c62:	e014      	b.n	8001c8e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c64:	f7ff f894 	bl	8000d90 <HAL_GetTick>
 8001c68:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001c6a:	e008      	b.n	8001c7e <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c6c:	f7ff f890 	bl	8000d90 <HAL_GetTick>
 8001c70:	4602      	mov	r2, r0
 8001c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c74:	1ad3      	subs	r3, r2, r3
 8001c76:	2b64      	cmp	r3, #100	; 0x64
 8001c78:	d901      	bls.n	8001c7e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001c7a:	2303      	movs	r3, #3
 8001c7c:	e379      	b.n	8002372 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001c7e:	4b5a      	ldr	r3, [pc, #360]	; (8001de8 <HAL_RCC_OscConfig+0x288>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d1f0      	bne.n	8001c6c <HAL_RCC_OscConfig+0x10c>
 8001c8a:	e000      	b.n	8001c8e <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f003 0302 	and.w	r3, r3, #2
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	f000 80ae 	beq.w	8001df8 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c9c:	4b52      	ldr	r3, [pc, #328]	; (8001de8 <HAL_RCC_OscConfig+0x288>)
 8001c9e:	691b      	ldr	r3, [r3, #16]
 8001ca0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001ca4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001ca6:	4b50      	ldr	r3, [pc, #320]	; (8001de8 <HAL_RCC_OscConfig+0x288>)
 8001ca8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001caa:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001cac:	6a3b      	ldr	r3, [r7, #32]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d007      	beq.n	8001cc2 <HAL_RCC_OscConfig+0x162>
 8001cb2:	6a3b      	ldr	r3, [r7, #32]
 8001cb4:	2b18      	cmp	r3, #24
 8001cb6:	d13a      	bne.n	8001d2e <HAL_RCC_OscConfig+0x1ce>
 8001cb8:	69fb      	ldr	r3, [r7, #28]
 8001cba:	f003 0303 	and.w	r3, r3, #3
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d135      	bne.n	8001d2e <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001cc2:	4b49      	ldr	r3, [pc, #292]	; (8001de8 <HAL_RCC_OscConfig+0x288>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f003 0304 	and.w	r3, r3, #4
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d005      	beq.n	8001cda <HAL_RCC_OscConfig+0x17a>
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	68db      	ldr	r3, [r3, #12]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d101      	bne.n	8001cda <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	e34b      	b.n	8002372 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cda:	f7ff f889 	bl	8000df0 <HAL_GetREVID>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	f241 0203 	movw	r2, #4099	; 0x1003
 8001ce4:	4293      	cmp	r3, r2
 8001ce6:	d817      	bhi.n	8001d18 <HAL_RCC_OscConfig+0x1b8>
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	691b      	ldr	r3, [r3, #16]
 8001cec:	2b40      	cmp	r3, #64	; 0x40
 8001cee:	d108      	bne.n	8001d02 <HAL_RCC_OscConfig+0x1a2>
 8001cf0:	4b3d      	ldr	r3, [pc, #244]	; (8001de8 <HAL_RCC_OscConfig+0x288>)
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8001cf8:	4a3b      	ldr	r2, [pc, #236]	; (8001de8 <HAL_RCC_OscConfig+0x288>)
 8001cfa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cfe:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001d00:	e07a      	b.n	8001df8 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d02:	4b39      	ldr	r3, [pc, #228]	; (8001de8 <HAL_RCC_OscConfig+0x288>)
 8001d04:	685b      	ldr	r3, [r3, #4]
 8001d06:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	691b      	ldr	r3, [r3, #16]
 8001d0e:	031b      	lsls	r3, r3, #12
 8001d10:	4935      	ldr	r1, [pc, #212]	; (8001de8 <HAL_RCC_OscConfig+0x288>)
 8001d12:	4313      	orrs	r3, r2
 8001d14:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001d16:	e06f      	b.n	8001df8 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d18:	4b33      	ldr	r3, [pc, #204]	; (8001de8 <HAL_RCC_OscConfig+0x288>)
 8001d1a:	685b      	ldr	r3, [r3, #4]
 8001d1c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	691b      	ldr	r3, [r3, #16]
 8001d24:	061b      	lsls	r3, r3, #24
 8001d26:	4930      	ldr	r1, [pc, #192]	; (8001de8 <HAL_RCC_OscConfig+0x288>)
 8001d28:	4313      	orrs	r3, r2
 8001d2a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001d2c:	e064      	b.n	8001df8 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	68db      	ldr	r3, [r3, #12]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d045      	beq.n	8001dc2 <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001d36:	4b2c      	ldr	r3, [pc, #176]	; (8001de8 <HAL_RCC_OscConfig+0x288>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f023 0219 	bic.w	r2, r3, #25
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	68db      	ldr	r3, [r3, #12]
 8001d42:	4929      	ldr	r1, [pc, #164]	; (8001de8 <HAL_RCC_OscConfig+0x288>)
 8001d44:	4313      	orrs	r3, r2
 8001d46:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d48:	f7ff f822 	bl	8000d90 <HAL_GetTick>
 8001d4c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001d4e:	e008      	b.n	8001d62 <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d50:	f7ff f81e 	bl	8000d90 <HAL_GetTick>
 8001d54:	4602      	mov	r2, r0
 8001d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d58:	1ad3      	subs	r3, r2, r3
 8001d5a:	2b02      	cmp	r3, #2
 8001d5c:	d901      	bls.n	8001d62 <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8001d5e:	2303      	movs	r3, #3
 8001d60:	e307      	b.n	8002372 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001d62:	4b21      	ldr	r3, [pc, #132]	; (8001de8 <HAL_RCC_OscConfig+0x288>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f003 0304 	and.w	r3, r3, #4
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d0f0      	beq.n	8001d50 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d6e:	f7ff f83f 	bl	8000df0 <HAL_GetREVID>
 8001d72:	4603      	mov	r3, r0
 8001d74:	f241 0203 	movw	r2, #4099	; 0x1003
 8001d78:	4293      	cmp	r3, r2
 8001d7a:	d817      	bhi.n	8001dac <HAL_RCC_OscConfig+0x24c>
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	691b      	ldr	r3, [r3, #16]
 8001d80:	2b40      	cmp	r3, #64	; 0x40
 8001d82:	d108      	bne.n	8001d96 <HAL_RCC_OscConfig+0x236>
 8001d84:	4b18      	ldr	r3, [pc, #96]	; (8001de8 <HAL_RCC_OscConfig+0x288>)
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8001d8c:	4a16      	ldr	r2, [pc, #88]	; (8001de8 <HAL_RCC_OscConfig+0x288>)
 8001d8e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d92:	6053      	str	r3, [r2, #4]
 8001d94:	e030      	b.n	8001df8 <HAL_RCC_OscConfig+0x298>
 8001d96:	4b14      	ldr	r3, [pc, #80]	; (8001de8 <HAL_RCC_OscConfig+0x288>)
 8001d98:	685b      	ldr	r3, [r3, #4]
 8001d9a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	691b      	ldr	r3, [r3, #16]
 8001da2:	031b      	lsls	r3, r3, #12
 8001da4:	4910      	ldr	r1, [pc, #64]	; (8001de8 <HAL_RCC_OscConfig+0x288>)
 8001da6:	4313      	orrs	r3, r2
 8001da8:	604b      	str	r3, [r1, #4]
 8001daa:	e025      	b.n	8001df8 <HAL_RCC_OscConfig+0x298>
 8001dac:	4b0e      	ldr	r3, [pc, #56]	; (8001de8 <HAL_RCC_OscConfig+0x288>)
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	691b      	ldr	r3, [r3, #16]
 8001db8:	061b      	lsls	r3, r3, #24
 8001dba:	490b      	ldr	r1, [pc, #44]	; (8001de8 <HAL_RCC_OscConfig+0x288>)
 8001dbc:	4313      	orrs	r3, r2
 8001dbe:	604b      	str	r3, [r1, #4]
 8001dc0:	e01a      	b.n	8001df8 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001dc2:	4b09      	ldr	r3, [pc, #36]	; (8001de8 <HAL_RCC_OscConfig+0x288>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4a08      	ldr	r2, [pc, #32]	; (8001de8 <HAL_RCC_OscConfig+0x288>)
 8001dc8:	f023 0301 	bic.w	r3, r3, #1
 8001dcc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dce:	f7fe ffdf 	bl	8000d90 <HAL_GetTick>
 8001dd2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001dd4:	e00a      	b.n	8001dec <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001dd6:	f7fe ffdb 	bl	8000d90 <HAL_GetTick>
 8001dda:	4602      	mov	r2, r0
 8001ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dde:	1ad3      	subs	r3, r2, r3
 8001de0:	2b02      	cmp	r3, #2
 8001de2:	d903      	bls.n	8001dec <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8001de4:	2303      	movs	r3, #3
 8001de6:	e2c4      	b.n	8002372 <HAL_RCC_OscConfig+0x812>
 8001de8:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001dec:	4ba4      	ldr	r3, [pc, #656]	; (8002080 <HAL_RCC_OscConfig+0x520>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f003 0304 	and.w	r3, r3, #4
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d1ee      	bne.n	8001dd6 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f003 0310 	and.w	r3, r3, #16
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	f000 80a9 	beq.w	8001f58 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e06:	4b9e      	ldr	r3, [pc, #632]	; (8002080 <HAL_RCC_OscConfig+0x520>)
 8001e08:	691b      	ldr	r3, [r3, #16]
 8001e0a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001e0e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001e10:	4b9b      	ldr	r3, [pc, #620]	; (8002080 <HAL_RCC_OscConfig+0x520>)
 8001e12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e14:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001e16:	69bb      	ldr	r3, [r7, #24]
 8001e18:	2b08      	cmp	r3, #8
 8001e1a:	d007      	beq.n	8001e2c <HAL_RCC_OscConfig+0x2cc>
 8001e1c:	69bb      	ldr	r3, [r7, #24]
 8001e1e:	2b18      	cmp	r3, #24
 8001e20:	d13a      	bne.n	8001e98 <HAL_RCC_OscConfig+0x338>
 8001e22:	697b      	ldr	r3, [r7, #20]
 8001e24:	f003 0303 	and.w	r3, r3, #3
 8001e28:	2b01      	cmp	r3, #1
 8001e2a:	d135      	bne.n	8001e98 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001e2c:	4b94      	ldr	r3, [pc, #592]	; (8002080 <HAL_RCC_OscConfig+0x520>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d005      	beq.n	8001e44 <HAL_RCC_OscConfig+0x2e4>
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	69db      	ldr	r3, [r3, #28]
 8001e3c:	2b80      	cmp	r3, #128	; 0x80
 8001e3e:	d001      	beq.n	8001e44 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8001e40:	2301      	movs	r3, #1
 8001e42:	e296      	b.n	8002372 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001e44:	f7fe ffd4 	bl	8000df0 <HAL_GetREVID>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	f241 0203 	movw	r2, #4099	; 0x1003
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d817      	bhi.n	8001e82 <HAL_RCC_OscConfig+0x322>
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6a1b      	ldr	r3, [r3, #32]
 8001e56:	2b20      	cmp	r3, #32
 8001e58:	d108      	bne.n	8001e6c <HAL_RCC_OscConfig+0x30c>
 8001e5a:	4b89      	ldr	r3, [pc, #548]	; (8002080 <HAL_RCC_OscConfig+0x520>)
 8001e5c:	685b      	ldr	r3, [r3, #4]
 8001e5e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001e62:	4a87      	ldr	r2, [pc, #540]	; (8002080 <HAL_RCC_OscConfig+0x520>)
 8001e64:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001e68:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001e6a:	e075      	b.n	8001f58 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001e6c:	4b84      	ldr	r3, [pc, #528]	; (8002080 <HAL_RCC_OscConfig+0x520>)
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	6a1b      	ldr	r3, [r3, #32]
 8001e78:	069b      	lsls	r3, r3, #26
 8001e7a:	4981      	ldr	r1, [pc, #516]	; (8002080 <HAL_RCC_OscConfig+0x520>)
 8001e7c:	4313      	orrs	r3, r2
 8001e7e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001e80:	e06a      	b.n	8001f58 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001e82:	4b7f      	ldr	r3, [pc, #508]	; (8002080 <HAL_RCC_OscConfig+0x520>)
 8001e84:	68db      	ldr	r3, [r3, #12]
 8001e86:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6a1b      	ldr	r3, [r3, #32]
 8001e8e:	061b      	lsls	r3, r3, #24
 8001e90:	497b      	ldr	r1, [pc, #492]	; (8002080 <HAL_RCC_OscConfig+0x520>)
 8001e92:	4313      	orrs	r3, r2
 8001e94:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001e96:	e05f      	b.n	8001f58 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	69db      	ldr	r3, [r3, #28]
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d042      	beq.n	8001f26 <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001ea0:	4b77      	ldr	r3, [pc, #476]	; (8002080 <HAL_RCC_OscConfig+0x520>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4a76      	ldr	r2, [pc, #472]	; (8002080 <HAL_RCC_OscConfig+0x520>)
 8001ea6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001eaa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001eac:	f7fe ff70 	bl	8000d90 <HAL_GetTick>
 8001eb0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001eb2:	e008      	b.n	8001ec6 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001eb4:	f7fe ff6c 	bl	8000d90 <HAL_GetTick>
 8001eb8:	4602      	mov	r2, r0
 8001eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ebc:	1ad3      	subs	r3, r2, r3
 8001ebe:	2b02      	cmp	r3, #2
 8001ec0:	d901      	bls.n	8001ec6 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8001ec2:	2303      	movs	r3, #3
 8001ec4:	e255      	b.n	8002372 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001ec6:	4b6e      	ldr	r3, [pc, #440]	; (8002080 <HAL_RCC_OscConfig+0x520>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d0f0      	beq.n	8001eb4 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001ed2:	f7fe ff8d 	bl	8000df0 <HAL_GetREVID>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	f241 0203 	movw	r2, #4099	; 0x1003
 8001edc:	4293      	cmp	r3, r2
 8001ede:	d817      	bhi.n	8001f10 <HAL_RCC_OscConfig+0x3b0>
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6a1b      	ldr	r3, [r3, #32]
 8001ee4:	2b20      	cmp	r3, #32
 8001ee6:	d108      	bne.n	8001efa <HAL_RCC_OscConfig+0x39a>
 8001ee8:	4b65      	ldr	r3, [pc, #404]	; (8002080 <HAL_RCC_OscConfig+0x520>)
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001ef0:	4a63      	ldr	r2, [pc, #396]	; (8002080 <HAL_RCC_OscConfig+0x520>)
 8001ef2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001ef6:	6053      	str	r3, [r2, #4]
 8001ef8:	e02e      	b.n	8001f58 <HAL_RCC_OscConfig+0x3f8>
 8001efa:	4b61      	ldr	r3, [pc, #388]	; (8002080 <HAL_RCC_OscConfig+0x520>)
 8001efc:	685b      	ldr	r3, [r3, #4]
 8001efe:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6a1b      	ldr	r3, [r3, #32]
 8001f06:	069b      	lsls	r3, r3, #26
 8001f08:	495d      	ldr	r1, [pc, #372]	; (8002080 <HAL_RCC_OscConfig+0x520>)
 8001f0a:	4313      	orrs	r3, r2
 8001f0c:	604b      	str	r3, [r1, #4]
 8001f0e:	e023      	b.n	8001f58 <HAL_RCC_OscConfig+0x3f8>
 8001f10:	4b5b      	ldr	r3, [pc, #364]	; (8002080 <HAL_RCC_OscConfig+0x520>)
 8001f12:	68db      	ldr	r3, [r3, #12]
 8001f14:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6a1b      	ldr	r3, [r3, #32]
 8001f1c:	061b      	lsls	r3, r3, #24
 8001f1e:	4958      	ldr	r1, [pc, #352]	; (8002080 <HAL_RCC_OscConfig+0x520>)
 8001f20:	4313      	orrs	r3, r2
 8001f22:	60cb      	str	r3, [r1, #12]
 8001f24:	e018      	b.n	8001f58 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001f26:	4b56      	ldr	r3, [pc, #344]	; (8002080 <HAL_RCC_OscConfig+0x520>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4a55      	ldr	r2, [pc, #340]	; (8002080 <HAL_RCC_OscConfig+0x520>)
 8001f2c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001f30:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f32:	f7fe ff2d 	bl	8000d90 <HAL_GetTick>
 8001f36:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001f38:	e008      	b.n	8001f4c <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001f3a:	f7fe ff29 	bl	8000d90 <HAL_GetTick>
 8001f3e:	4602      	mov	r2, r0
 8001f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f42:	1ad3      	subs	r3, r2, r3
 8001f44:	2b02      	cmp	r3, #2
 8001f46:	d901      	bls.n	8001f4c <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8001f48:	2303      	movs	r3, #3
 8001f4a:	e212      	b.n	8002372 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001f4c:	4b4c      	ldr	r3, [pc, #304]	; (8002080 <HAL_RCC_OscConfig+0x520>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d1f0      	bne.n	8001f3a <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f003 0308 	and.w	r3, r3, #8
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d036      	beq.n	8001fd2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	695b      	ldr	r3, [r3, #20]
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d019      	beq.n	8001fa0 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f6c:	4b44      	ldr	r3, [pc, #272]	; (8002080 <HAL_RCC_OscConfig+0x520>)
 8001f6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f70:	4a43      	ldr	r2, [pc, #268]	; (8002080 <HAL_RCC_OscConfig+0x520>)
 8001f72:	f043 0301 	orr.w	r3, r3, #1
 8001f76:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f78:	f7fe ff0a 	bl	8000d90 <HAL_GetTick>
 8001f7c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001f7e:	e008      	b.n	8001f92 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f80:	f7fe ff06 	bl	8000d90 <HAL_GetTick>
 8001f84:	4602      	mov	r2, r0
 8001f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f88:	1ad3      	subs	r3, r2, r3
 8001f8a:	2b02      	cmp	r3, #2
 8001f8c:	d901      	bls.n	8001f92 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8001f8e:	2303      	movs	r3, #3
 8001f90:	e1ef      	b.n	8002372 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001f92:	4b3b      	ldr	r3, [pc, #236]	; (8002080 <HAL_RCC_OscConfig+0x520>)
 8001f94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f96:	f003 0302 	and.w	r3, r3, #2
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d0f0      	beq.n	8001f80 <HAL_RCC_OscConfig+0x420>
 8001f9e:	e018      	b.n	8001fd2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001fa0:	4b37      	ldr	r3, [pc, #220]	; (8002080 <HAL_RCC_OscConfig+0x520>)
 8001fa2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001fa4:	4a36      	ldr	r2, [pc, #216]	; (8002080 <HAL_RCC_OscConfig+0x520>)
 8001fa6:	f023 0301 	bic.w	r3, r3, #1
 8001faa:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fac:	f7fe fef0 	bl	8000d90 <HAL_GetTick>
 8001fb0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001fb2:	e008      	b.n	8001fc6 <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001fb4:	f7fe feec 	bl	8000d90 <HAL_GetTick>
 8001fb8:	4602      	mov	r2, r0
 8001fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fbc:	1ad3      	subs	r3, r2, r3
 8001fbe:	2b02      	cmp	r3, #2
 8001fc0:	d901      	bls.n	8001fc6 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 8001fc2:	2303      	movs	r3, #3
 8001fc4:	e1d5      	b.n	8002372 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001fc6:	4b2e      	ldr	r3, [pc, #184]	; (8002080 <HAL_RCC_OscConfig+0x520>)
 8001fc8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001fca:	f003 0302 	and.w	r3, r3, #2
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d1f0      	bne.n	8001fb4 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f003 0320 	and.w	r3, r3, #32
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d036      	beq.n	800204c <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	699b      	ldr	r3, [r3, #24]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d019      	beq.n	800201a <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001fe6:	4b26      	ldr	r3, [pc, #152]	; (8002080 <HAL_RCC_OscConfig+0x520>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	4a25      	ldr	r2, [pc, #148]	; (8002080 <HAL_RCC_OscConfig+0x520>)
 8001fec:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001ff0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001ff2:	f7fe fecd 	bl	8000d90 <HAL_GetTick>
 8001ff6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001ff8:	e008      	b.n	800200c <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001ffa:	f7fe fec9 	bl	8000d90 <HAL_GetTick>
 8001ffe:	4602      	mov	r2, r0
 8002000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002002:	1ad3      	subs	r3, r2, r3
 8002004:	2b02      	cmp	r3, #2
 8002006:	d901      	bls.n	800200c <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8002008:	2303      	movs	r3, #3
 800200a:	e1b2      	b.n	8002372 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800200c:	4b1c      	ldr	r3, [pc, #112]	; (8002080 <HAL_RCC_OscConfig+0x520>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002014:	2b00      	cmp	r3, #0
 8002016:	d0f0      	beq.n	8001ffa <HAL_RCC_OscConfig+0x49a>
 8002018:	e018      	b.n	800204c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800201a:	4b19      	ldr	r3, [pc, #100]	; (8002080 <HAL_RCC_OscConfig+0x520>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	4a18      	ldr	r2, [pc, #96]	; (8002080 <HAL_RCC_OscConfig+0x520>)
 8002020:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002024:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002026:	f7fe feb3 	bl	8000d90 <HAL_GetTick>
 800202a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800202c:	e008      	b.n	8002040 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800202e:	f7fe feaf 	bl	8000d90 <HAL_GetTick>
 8002032:	4602      	mov	r2, r0
 8002034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002036:	1ad3      	subs	r3, r2, r3
 8002038:	2b02      	cmp	r3, #2
 800203a:	d901      	bls.n	8002040 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 800203c:	2303      	movs	r3, #3
 800203e:	e198      	b.n	8002372 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002040:	4b0f      	ldr	r3, [pc, #60]	; (8002080 <HAL_RCC_OscConfig+0x520>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002048:	2b00      	cmp	r3, #0
 800204a:	d1f0      	bne.n	800202e <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f003 0304 	and.w	r3, r3, #4
 8002054:	2b00      	cmp	r3, #0
 8002056:	f000 8085 	beq.w	8002164 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800205a:	4b0a      	ldr	r3, [pc, #40]	; (8002084 <HAL_RCC_OscConfig+0x524>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	4a09      	ldr	r2, [pc, #36]	; (8002084 <HAL_RCC_OscConfig+0x524>)
 8002060:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002064:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002066:	f7fe fe93 	bl	8000d90 <HAL_GetTick>
 800206a:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800206c:	e00c      	b.n	8002088 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800206e:	f7fe fe8f 	bl	8000d90 <HAL_GetTick>
 8002072:	4602      	mov	r2, r0
 8002074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002076:	1ad3      	subs	r3, r2, r3
 8002078:	2b64      	cmp	r3, #100	; 0x64
 800207a:	d905      	bls.n	8002088 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 800207c:	2303      	movs	r3, #3
 800207e:	e178      	b.n	8002372 <HAL_RCC_OscConfig+0x812>
 8002080:	58024400 	.word	0x58024400
 8002084:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002088:	4b96      	ldr	r3, [pc, #600]	; (80022e4 <HAL_RCC_OscConfig+0x784>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002090:	2b00      	cmp	r3, #0
 8002092:	d0ec      	beq.n	800206e <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	689b      	ldr	r3, [r3, #8]
 8002098:	2b01      	cmp	r3, #1
 800209a:	d106      	bne.n	80020aa <HAL_RCC_OscConfig+0x54a>
 800209c:	4b92      	ldr	r3, [pc, #584]	; (80022e8 <HAL_RCC_OscConfig+0x788>)
 800209e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020a0:	4a91      	ldr	r2, [pc, #580]	; (80022e8 <HAL_RCC_OscConfig+0x788>)
 80020a2:	f043 0301 	orr.w	r3, r3, #1
 80020a6:	6713      	str	r3, [r2, #112]	; 0x70
 80020a8:	e02d      	b.n	8002106 <HAL_RCC_OscConfig+0x5a6>
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	689b      	ldr	r3, [r3, #8]
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d10c      	bne.n	80020cc <HAL_RCC_OscConfig+0x56c>
 80020b2:	4b8d      	ldr	r3, [pc, #564]	; (80022e8 <HAL_RCC_OscConfig+0x788>)
 80020b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020b6:	4a8c      	ldr	r2, [pc, #560]	; (80022e8 <HAL_RCC_OscConfig+0x788>)
 80020b8:	f023 0301 	bic.w	r3, r3, #1
 80020bc:	6713      	str	r3, [r2, #112]	; 0x70
 80020be:	4b8a      	ldr	r3, [pc, #552]	; (80022e8 <HAL_RCC_OscConfig+0x788>)
 80020c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020c2:	4a89      	ldr	r2, [pc, #548]	; (80022e8 <HAL_RCC_OscConfig+0x788>)
 80020c4:	f023 0304 	bic.w	r3, r3, #4
 80020c8:	6713      	str	r3, [r2, #112]	; 0x70
 80020ca:	e01c      	b.n	8002106 <HAL_RCC_OscConfig+0x5a6>
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	689b      	ldr	r3, [r3, #8]
 80020d0:	2b05      	cmp	r3, #5
 80020d2:	d10c      	bne.n	80020ee <HAL_RCC_OscConfig+0x58e>
 80020d4:	4b84      	ldr	r3, [pc, #528]	; (80022e8 <HAL_RCC_OscConfig+0x788>)
 80020d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020d8:	4a83      	ldr	r2, [pc, #524]	; (80022e8 <HAL_RCC_OscConfig+0x788>)
 80020da:	f043 0304 	orr.w	r3, r3, #4
 80020de:	6713      	str	r3, [r2, #112]	; 0x70
 80020e0:	4b81      	ldr	r3, [pc, #516]	; (80022e8 <HAL_RCC_OscConfig+0x788>)
 80020e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020e4:	4a80      	ldr	r2, [pc, #512]	; (80022e8 <HAL_RCC_OscConfig+0x788>)
 80020e6:	f043 0301 	orr.w	r3, r3, #1
 80020ea:	6713      	str	r3, [r2, #112]	; 0x70
 80020ec:	e00b      	b.n	8002106 <HAL_RCC_OscConfig+0x5a6>
 80020ee:	4b7e      	ldr	r3, [pc, #504]	; (80022e8 <HAL_RCC_OscConfig+0x788>)
 80020f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020f2:	4a7d      	ldr	r2, [pc, #500]	; (80022e8 <HAL_RCC_OscConfig+0x788>)
 80020f4:	f023 0301 	bic.w	r3, r3, #1
 80020f8:	6713      	str	r3, [r2, #112]	; 0x70
 80020fa:	4b7b      	ldr	r3, [pc, #492]	; (80022e8 <HAL_RCC_OscConfig+0x788>)
 80020fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020fe:	4a7a      	ldr	r2, [pc, #488]	; (80022e8 <HAL_RCC_OscConfig+0x788>)
 8002100:	f023 0304 	bic.w	r3, r3, #4
 8002104:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	689b      	ldr	r3, [r3, #8]
 800210a:	2b00      	cmp	r3, #0
 800210c:	d015      	beq.n	800213a <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800210e:	f7fe fe3f 	bl	8000d90 <HAL_GetTick>
 8002112:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002114:	e00a      	b.n	800212c <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002116:	f7fe fe3b 	bl	8000d90 <HAL_GetTick>
 800211a:	4602      	mov	r2, r0
 800211c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800211e:	1ad3      	subs	r3, r2, r3
 8002120:	f241 3288 	movw	r2, #5000	; 0x1388
 8002124:	4293      	cmp	r3, r2
 8002126:	d901      	bls.n	800212c <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8002128:	2303      	movs	r3, #3
 800212a:	e122      	b.n	8002372 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800212c:	4b6e      	ldr	r3, [pc, #440]	; (80022e8 <HAL_RCC_OscConfig+0x788>)
 800212e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002130:	f003 0302 	and.w	r3, r3, #2
 8002134:	2b00      	cmp	r3, #0
 8002136:	d0ee      	beq.n	8002116 <HAL_RCC_OscConfig+0x5b6>
 8002138:	e014      	b.n	8002164 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800213a:	f7fe fe29 	bl	8000d90 <HAL_GetTick>
 800213e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002140:	e00a      	b.n	8002158 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002142:	f7fe fe25 	bl	8000d90 <HAL_GetTick>
 8002146:	4602      	mov	r2, r0
 8002148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800214a:	1ad3      	subs	r3, r2, r3
 800214c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002150:	4293      	cmp	r3, r2
 8002152:	d901      	bls.n	8002158 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8002154:	2303      	movs	r3, #3
 8002156:	e10c      	b.n	8002372 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002158:	4b63      	ldr	r3, [pc, #396]	; (80022e8 <HAL_RCC_OscConfig+0x788>)
 800215a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800215c:	f003 0302 	and.w	r3, r3, #2
 8002160:	2b00      	cmp	r3, #0
 8002162:	d1ee      	bne.n	8002142 <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002168:	2b00      	cmp	r3, #0
 800216a:	f000 8101 	beq.w	8002370 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800216e:	4b5e      	ldr	r3, [pc, #376]	; (80022e8 <HAL_RCC_OscConfig+0x788>)
 8002170:	691b      	ldr	r3, [r3, #16]
 8002172:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002176:	2b18      	cmp	r3, #24
 8002178:	f000 80bc 	beq.w	80022f4 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002180:	2b02      	cmp	r3, #2
 8002182:	f040 8095 	bne.w	80022b0 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002186:	4b58      	ldr	r3, [pc, #352]	; (80022e8 <HAL_RCC_OscConfig+0x788>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	4a57      	ldr	r2, [pc, #348]	; (80022e8 <HAL_RCC_OscConfig+0x788>)
 800218c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002190:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002192:	f7fe fdfd 	bl	8000d90 <HAL_GetTick>
 8002196:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002198:	e008      	b.n	80021ac <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800219a:	f7fe fdf9 	bl	8000d90 <HAL_GetTick>
 800219e:	4602      	mov	r2, r0
 80021a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021a2:	1ad3      	subs	r3, r2, r3
 80021a4:	2b02      	cmp	r3, #2
 80021a6:	d901      	bls.n	80021ac <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 80021a8:	2303      	movs	r3, #3
 80021aa:	e0e2      	b.n	8002372 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80021ac:	4b4e      	ldr	r3, [pc, #312]	; (80022e8 <HAL_RCC_OscConfig+0x788>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d1f0      	bne.n	800219a <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80021b8:	4b4b      	ldr	r3, [pc, #300]	; (80022e8 <HAL_RCC_OscConfig+0x788>)
 80021ba:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80021bc:	4b4b      	ldr	r3, [pc, #300]	; (80022ec <HAL_RCC_OscConfig+0x78c>)
 80021be:	4013      	ands	r3, r2
 80021c0:	687a      	ldr	r2, [r7, #4]
 80021c2:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80021c4:	687a      	ldr	r2, [r7, #4]
 80021c6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80021c8:	0112      	lsls	r2, r2, #4
 80021ca:	430a      	orrs	r2, r1
 80021cc:	4946      	ldr	r1, [pc, #280]	; (80022e8 <HAL_RCC_OscConfig+0x788>)
 80021ce:	4313      	orrs	r3, r2
 80021d0:	628b      	str	r3, [r1, #40]	; 0x28
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021d6:	3b01      	subs	r3, #1
 80021d8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021e0:	3b01      	subs	r3, #1
 80021e2:	025b      	lsls	r3, r3, #9
 80021e4:	b29b      	uxth	r3, r3
 80021e6:	431a      	orrs	r2, r3
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021ec:	3b01      	subs	r3, #1
 80021ee:	041b      	lsls	r3, r3, #16
 80021f0:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80021f4:	431a      	orrs	r2, r3
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021fa:	3b01      	subs	r3, #1
 80021fc:	061b      	lsls	r3, r3, #24
 80021fe:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8002202:	4939      	ldr	r1, [pc, #228]	; (80022e8 <HAL_RCC_OscConfig+0x788>)
 8002204:	4313      	orrs	r3, r2
 8002206:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8002208:	4b37      	ldr	r3, [pc, #220]	; (80022e8 <HAL_RCC_OscConfig+0x788>)
 800220a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800220c:	4a36      	ldr	r2, [pc, #216]	; (80022e8 <HAL_RCC_OscConfig+0x788>)
 800220e:	f023 0301 	bic.w	r3, r3, #1
 8002212:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002214:	4b34      	ldr	r3, [pc, #208]	; (80022e8 <HAL_RCC_OscConfig+0x788>)
 8002216:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002218:	4b35      	ldr	r3, [pc, #212]	; (80022f0 <HAL_RCC_OscConfig+0x790>)
 800221a:	4013      	ands	r3, r2
 800221c:	687a      	ldr	r2, [r7, #4]
 800221e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002220:	00d2      	lsls	r2, r2, #3
 8002222:	4931      	ldr	r1, [pc, #196]	; (80022e8 <HAL_RCC_OscConfig+0x788>)
 8002224:	4313      	orrs	r3, r2
 8002226:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002228:	4b2f      	ldr	r3, [pc, #188]	; (80022e8 <HAL_RCC_OscConfig+0x788>)
 800222a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800222c:	f023 020c 	bic.w	r2, r3, #12
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002234:	492c      	ldr	r1, [pc, #176]	; (80022e8 <HAL_RCC_OscConfig+0x788>)
 8002236:	4313      	orrs	r3, r2
 8002238:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800223a:	4b2b      	ldr	r3, [pc, #172]	; (80022e8 <HAL_RCC_OscConfig+0x788>)
 800223c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800223e:	f023 0202 	bic.w	r2, r3, #2
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002246:	4928      	ldr	r1, [pc, #160]	; (80022e8 <HAL_RCC_OscConfig+0x788>)
 8002248:	4313      	orrs	r3, r2
 800224a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800224c:	4b26      	ldr	r3, [pc, #152]	; (80022e8 <HAL_RCC_OscConfig+0x788>)
 800224e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002250:	4a25      	ldr	r2, [pc, #148]	; (80022e8 <HAL_RCC_OscConfig+0x788>)
 8002252:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002256:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002258:	4b23      	ldr	r3, [pc, #140]	; (80022e8 <HAL_RCC_OscConfig+0x788>)
 800225a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800225c:	4a22      	ldr	r2, [pc, #136]	; (80022e8 <HAL_RCC_OscConfig+0x788>)
 800225e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002262:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002264:	4b20      	ldr	r3, [pc, #128]	; (80022e8 <HAL_RCC_OscConfig+0x788>)
 8002266:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002268:	4a1f      	ldr	r2, [pc, #124]	; (80022e8 <HAL_RCC_OscConfig+0x788>)
 800226a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800226e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8002270:	4b1d      	ldr	r3, [pc, #116]	; (80022e8 <HAL_RCC_OscConfig+0x788>)
 8002272:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002274:	4a1c      	ldr	r2, [pc, #112]	; (80022e8 <HAL_RCC_OscConfig+0x788>)
 8002276:	f043 0301 	orr.w	r3, r3, #1
 800227a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800227c:	4b1a      	ldr	r3, [pc, #104]	; (80022e8 <HAL_RCC_OscConfig+0x788>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4a19      	ldr	r2, [pc, #100]	; (80022e8 <HAL_RCC_OscConfig+0x788>)
 8002282:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002286:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002288:	f7fe fd82 	bl	8000d90 <HAL_GetTick>
 800228c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800228e:	e008      	b.n	80022a2 <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002290:	f7fe fd7e 	bl	8000d90 <HAL_GetTick>
 8002294:	4602      	mov	r2, r0
 8002296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002298:	1ad3      	subs	r3, r2, r3
 800229a:	2b02      	cmp	r3, #2
 800229c:	d901      	bls.n	80022a2 <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 800229e:	2303      	movs	r3, #3
 80022a0:	e067      	b.n	8002372 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80022a2:	4b11      	ldr	r3, [pc, #68]	; (80022e8 <HAL_RCC_OscConfig+0x788>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d0f0      	beq.n	8002290 <HAL_RCC_OscConfig+0x730>
 80022ae:	e05f      	b.n	8002370 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022b0:	4b0d      	ldr	r3, [pc, #52]	; (80022e8 <HAL_RCC_OscConfig+0x788>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	4a0c      	ldr	r2, [pc, #48]	; (80022e8 <HAL_RCC_OscConfig+0x788>)
 80022b6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80022ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022bc:	f7fe fd68 	bl	8000d90 <HAL_GetTick>
 80022c0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80022c2:	e008      	b.n	80022d6 <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022c4:	f7fe fd64 	bl	8000d90 <HAL_GetTick>
 80022c8:	4602      	mov	r2, r0
 80022ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022cc:	1ad3      	subs	r3, r2, r3
 80022ce:	2b02      	cmp	r3, #2
 80022d0:	d901      	bls.n	80022d6 <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 80022d2:	2303      	movs	r3, #3
 80022d4:	e04d      	b.n	8002372 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80022d6:	4b04      	ldr	r3, [pc, #16]	; (80022e8 <HAL_RCC_OscConfig+0x788>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d1f0      	bne.n	80022c4 <HAL_RCC_OscConfig+0x764>
 80022e2:	e045      	b.n	8002370 <HAL_RCC_OscConfig+0x810>
 80022e4:	58024800 	.word	0x58024800
 80022e8:	58024400 	.word	0x58024400
 80022ec:	fffffc0c 	.word	0xfffffc0c
 80022f0:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80022f4:	4b21      	ldr	r3, [pc, #132]	; (800237c <HAL_RCC_OscConfig+0x81c>)
 80022f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022f8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80022fa:	4b20      	ldr	r3, [pc, #128]	; (800237c <HAL_RCC_OscConfig+0x81c>)
 80022fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022fe:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002304:	2b01      	cmp	r3, #1
 8002306:	d031      	beq.n	800236c <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002308:	693b      	ldr	r3, [r7, #16]
 800230a:	f003 0203 	and.w	r2, r3, #3
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002312:	429a      	cmp	r2, r3
 8002314:	d12a      	bne.n	800236c <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002316:	693b      	ldr	r3, [r7, #16]
 8002318:	091b      	lsrs	r3, r3, #4
 800231a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002322:	429a      	cmp	r2, r3
 8002324:	d122      	bne.n	800236c <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002330:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002332:	429a      	cmp	r2, r3
 8002334:	d11a      	bne.n	800236c <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	0a5b      	lsrs	r3, r3, #9
 800233a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002342:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002344:	429a      	cmp	r2, r3
 8002346:	d111      	bne.n	800236c <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	0c1b      	lsrs	r3, r3, #16
 800234c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002354:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002356:	429a      	cmp	r2, r3
 8002358:	d108      	bne.n	800236c <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	0e1b      	lsrs	r3, r3, #24
 800235e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002366:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002368:	429a      	cmp	r2, r3
 800236a:	d001      	beq.n	8002370 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 800236c:	2301      	movs	r3, #1
 800236e:	e000      	b.n	8002372 <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8002370:	2300      	movs	r3, #0
}
 8002372:	4618      	mov	r0, r3
 8002374:	3730      	adds	r7, #48	; 0x30
 8002376:	46bd      	mov	sp, r7
 8002378:	bd80      	pop	{r7, pc}
 800237a:	bf00      	nop
 800237c:	58024400 	.word	0x58024400

08002380 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b086      	sub	sp, #24
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
 8002388:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d101      	bne.n	8002394 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002390:	2301      	movs	r3, #1
 8002392:	e19c      	b.n	80026ce <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002394:	4b8a      	ldr	r3, [pc, #552]	; (80025c0 <HAL_RCC_ClockConfig+0x240>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f003 030f 	and.w	r3, r3, #15
 800239c:	683a      	ldr	r2, [r7, #0]
 800239e:	429a      	cmp	r2, r3
 80023a0:	d910      	bls.n	80023c4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023a2:	4b87      	ldr	r3, [pc, #540]	; (80025c0 <HAL_RCC_ClockConfig+0x240>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f023 020f 	bic.w	r2, r3, #15
 80023aa:	4985      	ldr	r1, [pc, #532]	; (80025c0 <HAL_RCC_ClockConfig+0x240>)
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	4313      	orrs	r3, r2
 80023b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023b2:	4b83      	ldr	r3, [pc, #524]	; (80025c0 <HAL_RCC_ClockConfig+0x240>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f003 030f 	and.w	r3, r3, #15
 80023ba:	683a      	ldr	r2, [r7, #0]
 80023bc:	429a      	cmp	r2, r3
 80023be:	d001      	beq.n	80023c4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80023c0:	2301      	movs	r3, #1
 80023c2:	e184      	b.n	80026ce <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f003 0304 	and.w	r3, r3, #4
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d010      	beq.n	80023f2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	691a      	ldr	r2, [r3, #16]
 80023d4:	4b7b      	ldr	r3, [pc, #492]	; (80025c4 <HAL_RCC_ClockConfig+0x244>)
 80023d6:	699b      	ldr	r3, [r3, #24]
 80023d8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80023dc:	429a      	cmp	r2, r3
 80023de:	d908      	bls.n	80023f2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80023e0:	4b78      	ldr	r3, [pc, #480]	; (80025c4 <HAL_RCC_ClockConfig+0x244>)
 80023e2:	699b      	ldr	r3, [r3, #24]
 80023e4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	691b      	ldr	r3, [r3, #16]
 80023ec:	4975      	ldr	r1, [pc, #468]	; (80025c4 <HAL_RCC_ClockConfig+0x244>)
 80023ee:	4313      	orrs	r3, r2
 80023f0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f003 0308 	and.w	r3, r3, #8
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d010      	beq.n	8002420 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	695a      	ldr	r2, [r3, #20]
 8002402:	4b70      	ldr	r3, [pc, #448]	; (80025c4 <HAL_RCC_ClockConfig+0x244>)
 8002404:	69db      	ldr	r3, [r3, #28]
 8002406:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800240a:	429a      	cmp	r2, r3
 800240c:	d908      	bls.n	8002420 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800240e:	4b6d      	ldr	r3, [pc, #436]	; (80025c4 <HAL_RCC_ClockConfig+0x244>)
 8002410:	69db      	ldr	r3, [r3, #28]
 8002412:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	695b      	ldr	r3, [r3, #20]
 800241a:	496a      	ldr	r1, [pc, #424]	; (80025c4 <HAL_RCC_ClockConfig+0x244>)
 800241c:	4313      	orrs	r3, r2
 800241e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f003 0310 	and.w	r3, r3, #16
 8002428:	2b00      	cmp	r3, #0
 800242a:	d010      	beq.n	800244e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	699a      	ldr	r2, [r3, #24]
 8002430:	4b64      	ldr	r3, [pc, #400]	; (80025c4 <HAL_RCC_ClockConfig+0x244>)
 8002432:	69db      	ldr	r3, [r3, #28]
 8002434:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002438:	429a      	cmp	r2, r3
 800243a:	d908      	bls.n	800244e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800243c:	4b61      	ldr	r3, [pc, #388]	; (80025c4 <HAL_RCC_ClockConfig+0x244>)
 800243e:	69db      	ldr	r3, [r3, #28]
 8002440:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	699b      	ldr	r3, [r3, #24]
 8002448:	495e      	ldr	r1, [pc, #376]	; (80025c4 <HAL_RCC_ClockConfig+0x244>)
 800244a:	4313      	orrs	r3, r2
 800244c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f003 0320 	and.w	r3, r3, #32
 8002456:	2b00      	cmp	r3, #0
 8002458:	d010      	beq.n	800247c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	69da      	ldr	r2, [r3, #28]
 800245e:	4b59      	ldr	r3, [pc, #356]	; (80025c4 <HAL_RCC_ClockConfig+0x244>)
 8002460:	6a1b      	ldr	r3, [r3, #32]
 8002462:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002466:	429a      	cmp	r2, r3
 8002468:	d908      	bls.n	800247c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800246a:	4b56      	ldr	r3, [pc, #344]	; (80025c4 <HAL_RCC_ClockConfig+0x244>)
 800246c:	6a1b      	ldr	r3, [r3, #32]
 800246e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	69db      	ldr	r3, [r3, #28]
 8002476:	4953      	ldr	r1, [pc, #332]	; (80025c4 <HAL_RCC_ClockConfig+0x244>)
 8002478:	4313      	orrs	r3, r2
 800247a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f003 0302 	and.w	r3, r3, #2
 8002484:	2b00      	cmp	r3, #0
 8002486:	d010      	beq.n	80024aa <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	68da      	ldr	r2, [r3, #12]
 800248c:	4b4d      	ldr	r3, [pc, #308]	; (80025c4 <HAL_RCC_ClockConfig+0x244>)
 800248e:	699b      	ldr	r3, [r3, #24]
 8002490:	f003 030f 	and.w	r3, r3, #15
 8002494:	429a      	cmp	r2, r3
 8002496:	d908      	bls.n	80024aa <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002498:	4b4a      	ldr	r3, [pc, #296]	; (80025c4 <HAL_RCC_ClockConfig+0x244>)
 800249a:	699b      	ldr	r3, [r3, #24]
 800249c:	f023 020f 	bic.w	r2, r3, #15
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	68db      	ldr	r3, [r3, #12]
 80024a4:	4947      	ldr	r1, [pc, #284]	; (80025c4 <HAL_RCC_ClockConfig+0x244>)
 80024a6:	4313      	orrs	r3, r2
 80024a8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f003 0301 	and.w	r3, r3, #1
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d055      	beq.n	8002562 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80024b6:	4b43      	ldr	r3, [pc, #268]	; (80025c4 <HAL_RCC_ClockConfig+0x244>)
 80024b8:	699b      	ldr	r3, [r3, #24]
 80024ba:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	689b      	ldr	r3, [r3, #8]
 80024c2:	4940      	ldr	r1, [pc, #256]	; (80025c4 <HAL_RCC_ClockConfig+0x244>)
 80024c4:	4313      	orrs	r3, r2
 80024c6:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	2b02      	cmp	r3, #2
 80024ce:	d107      	bne.n	80024e0 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80024d0:	4b3c      	ldr	r3, [pc, #240]	; (80025c4 <HAL_RCC_ClockConfig+0x244>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d121      	bne.n	8002520 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80024dc:	2301      	movs	r3, #1
 80024de:	e0f6      	b.n	80026ce <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	2b03      	cmp	r3, #3
 80024e6:	d107      	bne.n	80024f8 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80024e8:	4b36      	ldr	r3, [pc, #216]	; (80025c4 <HAL_RCC_ClockConfig+0x244>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d115      	bne.n	8002520 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80024f4:	2301      	movs	r3, #1
 80024f6:	e0ea      	b.n	80026ce <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	2b01      	cmp	r3, #1
 80024fe:	d107      	bne.n	8002510 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002500:	4b30      	ldr	r3, [pc, #192]	; (80025c4 <HAL_RCC_ClockConfig+0x244>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002508:	2b00      	cmp	r3, #0
 800250a:	d109      	bne.n	8002520 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800250c:	2301      	movs	r3, #1
 800250e:	e0de      	b.n	80026ce <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002510:	4b2c      	ldr	r3, [pc, #176]	; (80025c4 <HAL_RCC_ClockConfig+0x244>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f003 0304 	and.w	r3, r3, #4
 8002518:	2b00      	cmp	r3, #0
 800251a:	d101      	bne.n	8002520 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800251c:	2301      	movs	r3, #1
 800251e:	e0d6      	b.n	80026ce <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002520:	4b28      	ldr	r3, [pc, #160]	; (80025c4 <HAL_RCC_ClockConfig+0x244>)
 8002522:	691b      	ldr	r3, [r3, #16]
 8002524:	f023 0207 	bic.w	r2, r3, #7
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	4925      	ldr	r1, [pc, #148]	; (80025c4 <HAL_RCC_ClockConfig+0x244>)
 800252e:	4313      	orrs	r3, r2
 8002530:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002532:	f7fe fc2d 	bl	8000d90 <HAL_GetTick>
 8002536:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002538:	e00a      	b.n	8002550 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800253a:	f7fe fc29 	bl	8000d90 <HAL_GetTick>
 800253e:	4602      	mov	r2, r0
 8002540:	697b      	ldr	r3, [r7, #20]
 8002542:	1ad3      	subs	r3, r2, r3
 8002544:	f241 3288 	movw	r2, #5000	; 0x1388
 8002548:	4293      	cmp	r3, r2
 800254a:	d901      	bls.n	8002550 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800254c:	2303      	movs	r3, #3
 800254e:	e0be      	b.n	80026ce <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002550:	4b1c      	ldr	r3, [pc, #112]	; (80025c4 <HAL_RCC_ClockConfig+0x244>)
 8002552:	691b      	ldr	r3, [r3, #16]
 8002554:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	00db      	lsls	r3, r3, #3
 800255e:	429a      	cmp	r2, r3
 8002560:	d1eb      	bne.n	800253a <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f003 0302 	and.w	r3, r3, #2
 800256a:	2b00      	cmp	r3, #0
 800256c:	d010      	beq.n	8002590 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	68da      	ldr	r2, [r3, #12]
 8002572:	4b14      	ldr	r3, [pc, #80]	; (80025c4 <HAL_RCC_ClockConfig+0x244>)
 8002574:	699b      	ldr	r3, [r3, #24]
 8002576:	f003 030f 	and.w	r3, r3, #15
 800257a:	429a      	cmp	r2, r3
 800257c:	d208      	bcs.n	8002590 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800257e:	4b11      	ldr	r3, [pc, #68]	; (80025c4 <HAL_RCC_ClockConfig+0x244>)
 8002580:	699b      	ldr	r3, [r3, #24]
 8002582:	f023 020f 	bic.w	r2, r3, #15
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	68db      	ldr	r3, [r3, #12]
 800258a:	490e      	ldr	r1, [pc, #56]	; (80025c4 <HAL_RCC_ClockConfig+0x244>)
 800258c:	4313      	orrs	r3, r2
 800258e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002590:	4b0b      	ldr	r3, [pc, #44]	; (80025c0 <HAL_RCC_ClockConfig+0x240>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f003 030f 	and.w	r3, r3, #15
 8002598:	683a      	ldr	r2, [r7, #0]
 800259a:	429a      	cmp	r2, r3
 800259c:	d214      	bcs.n	80025c8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800259e:	4b08      	ldr	r3, [pc, #32]	; (80025c0 <HAL_RCC_ClockConfig+0x240>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f023 020f 	bic.w	r2, r3, #15
 80025a6:	4906      	ldr	r1, [pc, #24]	; (80025c0 <HAL_RCC_ClockConfig+0x240>)
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	4313      	orrs	r3, r2
 80025ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025ae:	4b04      	ldr	r3, [pc, #16]	; (80025c0 <HAL_RCC_ClockConfig+0x240>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f003 030f 	and.w	r3, r3, #15
 80025b6:	683a      	ldr	r2, [r7, #0]
 80025b8:	429a      	cmp	r2, r3
 80025ba:	d005      	beq.n	80025c8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80025bc:	2301      	movs	r3, #1
 80025be:	e086      	b.n	80026ce <HAL_RCC_ClockConfig+0x34e>
 80025c0:	52002000 	.word	0x52002000
 80025c4:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f003 0304 	and.w	r3, r3, #4
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d010      	beq.n	80025f6 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	691a      	ldr	r2, [r3, #16]
 80025d8:	4b3f      	ldr	r3, [pc, #252]	; (80026d8 <HAL_RCC_ClockConfig+0x358>)
 80025da:	699b      	ldr	r3, [r3, #24]
 80025dc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80025e0:	429a      	cmp	r2, r3
 80025e2:	d208      	bcs.n	80025f6 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80025e4:	4b3c      	ldr	r3, [pc, #240]	; (80026d8 <HAL_RCC_ClockConfig+0x358>)
 80025e6:	699b      	ldr	r3, [r3, #24]
 80025e8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	691b      	ldr	r3, [r3, #16]
 80025f0:	4939      	ldr	r1, [pc, #228]	; (80026d8 <HAL_RCC_ClockConfig+0x358>)
 80025f2:	4313      	orrs	r3, r2
 80025f4:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f003 0308 	and.w	r3, r3, #8
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d010      	beq.n	8002624 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	695a      	ldr	r2, [r3, #20]
 8002606:	4b34      	ldr	r3, [pc, #208]	; (80026d8 <HAL_RCC_ClockConfig+0x358>)
 8002608:	69db      	ldr	r3, [r3, #28]
 800260a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800260e:	429a      	cmp	r2, r3
 8002610:	d208      	bcs.n	8002624 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002612:	4b31      	ldr	r3, [pc, #196]	; (80026d8 <HAL_RCC_ClockConfig+0x358>)
 8002614:	69db      	ldr	r3, [r3, #28]
 8002616:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	695b      	ldr	r3, [r3, #20]
 800261e:	492e      	ldr	r1, [pc, #184]	; (80026d8 <HAL_RCC_ClockConfig+0x358>)
 8002620:	4313      	orrs	r3, r2
 8002622:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f003 0310 	and.w	r3, r3, #16
 800262c:	2b00      	cmp	r3, #0
 800262e:	d010      	beq.n	8002652 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	699a      	ldr	r2, [r3, #24]
 8002634:	4b28      	ldr	r3, [pc, #160]	; (80026d8 <HAL_RCC_ClockConfig+0x358>)
 8002636:	69db      	ldr	r3, [r3, #28]
 8002638:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800263c:	429a      	cmp	r2, r3
 800263e:	d208      	bcs.n	8002652 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002640:	4b25      	ldr	r3, [pc, #148]	; (80026d8 <HAL_RCC_ClockConfig+0x358>)
 8002642:	69db      	ldr	r3, [r3, #28]
 8002644:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	699b      	ldr	r3, [r3, #24]
 800264c:	4922      	ldr	r1, [pc, #136]	; (80026d8 <HAL_RCC_ClockConfig+0x358>)
 800264e:	4313      	orrs	r3, r2
 8002650:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f003 0320 	and.w	r3, r3, #32
 800265a:	2b00      	cmp	r3, #0
 800265c:	d010      	beq.n	8002680 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	69da      	ldr	r2, [r3, #28]
 8002662:	4b1d      	ldr	r3, [pc, #116]	; (80026d8 <HAL_RCC_ClockConfig+0x358>)
 8002664:	6a1b      	ldr	r3, [r3, #32]
 8002666:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800266a:	429a      	cmp	r2, r3
 800266c:	d208      	bcs.n	8002680 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800266e:	4b1a      	ldr	r3, [pc, #104]	; (80026d8 <HAL_RCC_ClockConfig+0x358>)
 8002670:	6a1b      	ldr	r3, [r3, #32]
 8002672:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	69db      	ldr	r3, [r3, #28]
 800267a:	4917      	ldr	r1, [pc, #92]	; (80026d8 <HAL_RCC_ClockConfig+0x358>)
 800267c:	4313      	orrs	r3, r2
 800267e:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002680:	f000 f834 	bl	80026ec <HAL_RCC_GetSysClockFreq>
 8002684:	4602      	mov	r2, r0
 8002686:	4b14      	ldr	r3, [pc, #80]	; (80026d8 <HAL_RCC_ClockConfig+0x358>)
 8002688:	699b      	ldr	r3, [r3, #24]
 800268a:	0a1b      	lsrs	r3, r3, #8
 800268c:	f003 030f 	and.w	r3, r3, #15
 8002690:	4912      	ldr	r1, [pc, #72]	; (80026dc <HAL_RCC_ClockConfig+0x35c>)
 8002692:	5ccb      	ldrb	r3, [r1, r3]
 8002694:	f003 031f 	and.w	r3, r3, #31
 8002698:	fa22 f303 	lsr.w	r3, r2, r3
 800269c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800269e:	4b0e      	ldr	r3, [pc, #56]	; (80026d8 <HAL_RCC_ClockConfig+0x358>)
 80026a0:	699b      	ldr	r3, [r3, #24]
 80026a2:	f003 030f 	and.w	r3, r3, #15
 80026a6:	4a0d      	ldr	r2, [pc, #52]	; (80026dc <HAL_RCC_ClockConfig+0x35c>)
 80026a8:	5cd3      	ldrb	r3, [r2, r3]
 80026aa:	f003 031f 	and.w	r3, r3, #31
 80026ae:	693a      	ldr	r2, [r7, #16]
 80026b0:	fa22 f303 	lsr.w	r3, r2, r3
 80026b4:	4a0a      	ldr	r2, [pc, #40]	; (80026e0 <HAL_RCC_ClockConfig+0x360>)
 80026b6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80026b8:	4a0a      	ldr	r2, [pc, #40]	; (80026e4 <HAL_RCC_ClockConfig+0x364>)
 80026ba:	693b      	ldr	r3, [r7, #16]
 80026bc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80026be:	4b0a      	ldr	r3, [pc, #40]	; (80026e8 <HAL_RCC_ClockConfig+0x368>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4618      	mov	r0, r3
 80026c4:	f7fe fb1a 	bl	8000cfc <HAL_InitTick>
 80026c8:	4603      	mov	r3, r0
 80026ca:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80026cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80026ce:	4618      	mov	r0, r3
 80026d0:	3718      	adds	r7, #24
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bd80      	pop	{r7, pc}
 80026d6:	bf00      	nop
 80026d8:	58024400 	.word	0x58024400
 80026dc:	080063dc 	.word	0x080063dc
 80026e0:	24000004 	.word	0x24000004
 80026e4:	24000000 	.word	0x24000000
 80026e8:	24000008 	.word	0x24000008

080026ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026ec:	b480      	push	{r7}
 80026ee:	b089      	sub	sp, #36	; 0x24
 80026f0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80026f2:	4bb3      	ldr	r3, [pc, #716]	; (80029c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80026f4:	691b      	ldr	r3, [r3, #16]
 80026f6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80026fa:	2b18      	cmp	r3, #24
 80026fc:	f200 8155 	bhi.w	80029aa <HAL_RCC_GetSysClockFreq+0x2be>
 8002700:	a201      	add	r2, pc, #4	; (adr r2, 8002708 <HAL_RCC_GetSysClockFreq+0x1c>)
 8002702:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002706:	bf00      	nop
 8002708:	0800276d 	.word	0x0800276d
 800270c:	080029ab 	.word	0x080029ab
 8002710:	080029ab 	.word	0x080029ab
 8002714:	080029ab 	.word	0x080029ab
 8002718:	080029ab 	.word	0x080029ab
 800271c:	080029ab 	.word	0x080029ab
 8002720:	080029ab 	.word	0x080029ab
 8002724:	080029ab 	.word	0x080029ab
 8002728:	08002793 	.word	0x08002793
 800272c:	080029ab 	.word	0x080029ab
 8002730:	080029ab 	.word	0x080029ab
 8002734:	080029ab 	.word	0x080029ab
 8002738:	080029ab 	.word	0x080029ab
 800273c:	080029ab 	.word	0x080029ab
 8002740:	080029ab 	.word	0x080029ab
 8002744:	080029ab 	.word	0x080029ab
 8002748:	08002799 	.word	0x08002799
 800274c:	080029ab 	.word	0x080029ab
 8002750:	080029ab 	.word	0x080029ab
 8002754:	080029ab 	.word	0x080029ab
 8002758:	080029ab 	.word	0x080029ab
 800275c:	080029ab 	.word	0x080029ab
 8002760:	080029ab 	.word	0x080029ab
 8002764:	080029ab 	.word	0x080029ab
 8002768:	0800279f 	.word	0x0800279f
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800276c:	4b94      	ldr	r3, [pc, #592]	; (80029c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f003 0320 	and.w	r3, r3, #32
 8002774:	2b00      	cmp	r3, #0
 8002776:	d009      	beq.n	800278c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002778:	4b91      	ldr	r3, [pc, #580]	; (80029c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	08db      	lsrs	r3, r3, #3
 800277e:	f003 0303 	and.w	r3, r3, #3
 8002782:	4a90      	ldr	r2, [pc, #576]	; (80029c4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002784:	fa22 f303 	lsr.w	r3, r2, r3
 8002788:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800278a:	e111      	b.n	80029b0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800278c:	4b8d      	ldr	r3, [pc, #564]	; (80029c4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800278e:	61bb      	str	r3, [r7, #24]
    break;
 8002790:	e10e      	b.n	80029b0 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8002792:	4b8d      	ldr	r3, [pc, #564]	; (80029c8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002794:	61bb      	str	r3, [r7, #24]
    break;
 8002796:	e10b      	b.n	80029b0 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8002798:	4b8c      	ldr	r3, [pc, #560]	; (80029cc <HAL_RCC_GetSysClockFreq+0x2e0>)
 800279a:	61bb      	str	r3, [r7, #24]
    break;
 800279c:	e108      	b.n	80029b0 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800279e:	4b88      	ldr	r3, [pc, #544]	; (80029c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80027a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027a2:	f003 0303 	and.w	r3, r3, #3
 80027a6:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80027a8:	4b85      	ldr	r3, [pc, #532]	; (80029c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80027aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027ac:	091b      	lsrs	r3, r3, #4
 80027ae:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80027b2:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80027b4:	4b82      	ldr	r3, [pc, #520]	; (80029c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80027b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027b8:	f003 0301 	and.w	r3, r3, #1
 80027bc:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80027be:	4b80      	ldr	r3, [pc, #512]	; (80029c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80027c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027c2:	08db      	lsrs	r3, r3, #3
 80027c4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80027c8:	68fa      	ldr	r2, [r7, #12]
 80027ca:	fb02 f303 	mul.w	r3, r2, r3
 80027ce:	ee07 3a90 	vmov	s15, r3
 80027d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80027d6:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80027da:	693b      	ldr	r3, [r7, #16]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	f000 80e1 	beq.w	80029a4 <HAL_RCC_GetSysClockFreq+0x2b8>
 80027e2:	697b      	ldr	r3, [r7, #20]
 80027e4:	2b02      	cmp	r3, #2
 80027e6:	f000 8083 	beq.w	80028f0 <HAL_RCC_GetSysClockFreq+0x204>
 80027ea:	697b      	ldr	r3, [r7, #20]
 80027ec:	2b02      	cmp	r3, #2
 80027ee:	f200 80a1 	bhi.w	8002934 <HAL_RCC_GetSysClockFreq+0x248>
 80027f2:	697b      	ldr	r3, [r7, #20]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d003      	beq.n	8002800 <HAL_RCC_GetSysClockFreq+0x114>
 80027f8:	697b      	ldr	r3, [r7, #20]
 80027fa:	2b01      	cmp	r3, #1
 80027fc:	d056      	beq.n	80028ac <HAL_RCC_GetSysClockFreq+0x1c0>
 80027fe:	e099      	b.n	8002934 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002800:	4b6f      	ldr	r3, [pc, #444]	; (80029c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f003 0320 	and.w	r3, r3, #32
 8002808:	2b00      	cmp	r3, #0
 800280a:	d02d      	beq.n	8002868 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800280c:	4b6c      	ldr	r3, [pc, #432]	; (80029c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	08db      	lsrs	r3, r3, #3
 8002812:	f003 0303 	and.w	r3, r3, #3
 8002816:	4a6b      	ldr	r2, [pc, #428]	; (80029c4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002818:	fa22 f303 	lsr.w	r3, r2, r3
 800281c:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	ee07 3a90 	vmov	s15, r3
 8002824:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002828:	693b      	ldr	r3, [r7, #16]
 800282a:	ee07 3a90 	vmov	s15, r3
 800282e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002832:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002836:	4b62      	ldr	r3, [pc, #392]	; (80029c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800283a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800283e:	ee07 3a90 	vmov	s15, r3
 8002842:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002846:	ed97 6a02 	vldr	s12, [r7, #8]
 800284a:	eddf 5a61 	vldr	s11, [pc, #388]	; 80029d0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800284e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002852:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002856:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800285a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800285e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002862:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8002866:	e087      	b.n	8002978 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002868:	693b      	ldr	r3, [r7, #16]
 800286a:	ee07 3a90 	vmov	s15, r3
 800286e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002872:	eddf 6a58 	vldr	s13, [pc, #352]	; 80029d4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8002876:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800287a:	4b51      	ldr	r3, [pc, #324]	; (80029c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800287c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800287e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002882:	ee07 3a90 	vmov	s15, r3
 8002886:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800288a:	ed97 6a02 	vldr	s12, [r7, #8]
 800288e:	eddf 5a50 	vldr	s11, [pc, #320]	; 80029d0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002892:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002896:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800289a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800289e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80028a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80028a6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80028aa:	e065      	b.n	8002978 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80028ac:	693b      	ldr	r3, [r7, #16]
 80028ae:	ee07 3a90 	vmov	s15, r3
 80028b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80028b6:	eddf 6a48 	vldr	s13, [pc, #288]	; 80029d8 <HAL_RCC_GetSysClockFreq+0x2ec>
 80028ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80028be:	4b40      	ldr	r3, [pc, #256]	; (80029c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80028c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80028c6:	ee07 3a90 	vmov	s15, r3
 80028ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80028ce:	ed97 6a02 	vldr	s12, [r7, #8]
 80028d2:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80029d0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80028d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80028da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80028de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80028e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80028e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80028ea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80028ee:	e043      	b.n	8002978 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80028f0:	693b      	ldr	r3, [r7, #16]
 80028f2:	ee07 3a90 	vmov	s15, r3
 80028f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80028fa:	eddf 6a38 	vldr	s13, [pc, #224]	; 80029dc <HAL_RCC_GetSysClockFreq+0x2f0>
 80028fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002902:	4b2f      	ldr	r3, [pc, #188]	; (80029c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002906:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800290a:	ee07 3a90 	vmov	s15, r3
 800290e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002912:	ed97 6a02 	vldr	s12, [r7, #8]
 8002916:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80029d0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800291a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800291e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002922:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002926:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800292a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800292e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002932:	e021      	b.n	8002978 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002934:	693b      	ldr	r3, [r7, #16]
 8002936:	ee07 3a90 	vmov	s15, r3
 800293a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800293e:	eddf 6a26 	vldr	s13, [pc, #152]	; 80029d8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002942:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002946:	4b1e      	ldr	r3, [pc, #120]	; (80029c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800294a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800294e:	ee07 3a90 	vmov	s15, r3
 8002952:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002956:	ed97 6a02 	vldr	s12, [r7, #8]
 800295a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80029d0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800295e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002962:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002966:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800296a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800296e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002972:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002976:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8002978:	4b11      	ldr	r3, [pc, #68]	; (80029c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800297a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800297c:	0a5b      	lsrs	r3, r3, #9
 800297e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002982:	3301      	adds	r3, #1
 8002984:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	ee07 3a90 	vmov	s15, r3
 800298c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002990:	edd7 6a07 	vldr	s13, [r7, #28]
 8002994:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002998:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800299c:	ee17 3a90 	vmov	r3, s15
 80029a0:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80029a2:	e005      	b.n	80029b0 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80029a4:	2300      	movs	r3, #0
 80029a6:	61bb      	str	r3, [r7, #24]
    break;
 80029a8:	e002      	b.n	80029b0 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80029aa:	4b07      	ldr	r3, [pc, #28]	; (80029c8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80029ac:	61bb      	str	r3, [r7, #24]
    break;
 80029ae:	bf00      	nop
  }

  return sysclockfreq;
 80029b0:	69bb      	ldr	r3, [r7, #24]
}
 80029b2:	4618      	mov	r0, r3
 80029b4:	3724      	adds	r7, #36	; 0x24
 80029b6:	46bd      	mov	sp, r7
 80029b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029bc:	4770      	bx	lr
 80029be:	bf00      	nop
 80029c0:	58024400 	.word	0x58024400
 80029c4:	03d09000 	.word	0x03d09000
 80029c8:	003d0900 	.word	0x003d0900
 80029cc:	017d7840 	.word	0x017d7840
 80029d0:	46000000 	.word	0x46000000
 80029d4:	4c742400 	.word	0x4c742400
 80029d8:	4a742400 	.word	0x4a742400
 80029dc:	4bbebc20 	.word	0x4bbebc20

080029e0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b086      	sub	sp, #24
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80029e8:	2300      	movs	r3, #0
 80029ea:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80029ec:	2300      	movs	r3, #0
 80029ee:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d03f      	beq.n	8002a7c <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002a00:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002a04:	d02a      	beq.n	8002a5c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002a06:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002a0a:	d824      	bhi.n	8002a56 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002a0c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002a10:	d018      	beq.n	8002a44 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002a12:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002a16:	d81e      	bhi.n	8002a56 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d003      	beq.n	8002a24 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002a1c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002a20:	d007      	beq.n	8002a32 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002a22:	e018      	b.n	8002a56 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002a24:	4bab      	ldr	r3, [pc, #684]	; (8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002a26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a28:	4aaa      	ldr	r2, [pc, #680]	; (8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002a2a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a2e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8002a30:	e015      	b.n	8002a5e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	3304      	adds	r3, #4
 8002a36:	2102      	movs	r1, #2
 8002a38:	4618      	mov	r0, r3
 8002a3a:	f000 ff11 	bl	8003860 <RCCEx_PLL2_Config>
 8002a3e:	4603      	mov	r3, r0
 8002a40:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8002a42:	e00c      	b.n	8002a5e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	3324      	adds	r3, #36	; 0x24
 8002a48:	2102      	movs	r1, #2
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	f000 ffba 	bl	80039c4 <RCCEx_PLL3_Config>
 8002a50:	4603      	mov	r3, r0
 8002a52:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8002a54:	e003      	b.n	8002a5e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002a56:	2301      	movs	r3, #1
 8002a58:	75fb      	strb	r3, [r7, #23]
      break;
 8002a5a:	e000      	b.n	8002a5e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002a5c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002a5e:	7dfb      	ldrb	r3, [r7, #23]
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d109      	bne.n	8002a78 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8002a64:	4b9b      	ldr	r3, [pc, #620]	; (8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002a66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a68:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002a70:	4998      	ldr	r1, [pc, #608]	; (8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002a72:	4313      	orrs	r3, r2
 8002a74:	650b      	str	r3, [r1, #80]	; 0x50
 8002a76:	e001      	b.n	8002a7c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a78:	7dfb      	ldrb	r3, [r7, #23]
 8002a7a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d03d      	beq.n	8002b04 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a8c:	2b04      	cmp	r3, #4
 8002a8e:	d826      	bhi.n	8002ade <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8002a90:	a201      	add	r2, pc, #4	; (adr r2, 8002a98 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8002a92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a96:	bf00      	nop
 8002a98:	08002aad 	.word	0x08002aad
 8002a9c:	08002abb 	.word	0x08002abb
 8002aa0:	08002acd 	.word	0x08002acd
 8002aa4:	08002ae5 	.word	0x08002ae5
 8002aa8:	08002ae5 	.word	0x08002ae5
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002aac:	4b89      	ldr	r3, [pc, #548]	; (8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002aae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ab0:	4a88      	ldr	r2, [pc, #544]	; (8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002ab2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ab6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002ab8:	e015      	b.n	8002ae6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	3304      	adds	r3, #4
 8002abe:	2100      	movs	r1, #0
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	f000 fecd 	bl	8003860 <RCCEx_PLL2_Config>
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002aca:	e00c      	b.n	8002ae6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	3324      	adds	r3, #36	; 0x24
 8002ad0:	2100      	movs	r1, #0
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	f000 ff76 	bl	80039c4 <RCCEx_PLL3_Config>
 8002ad8:	4603      	mov	r3, r0
 8002ada:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002adc:	e003      	b.n	8002ae6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002ade:	2301      	movs	r3, #1
 8002ae0:	75fb      	strb	r3, [r7, #23]
      break;
 8002ae2:	e000      	b.n	8002ae6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8002ae4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002ae6:	7dfb      	ldrb	r3, [r7, #23]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d109      	bne.n	8002b00 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002aec:	4b79      	ldr	r3, [pc, #484]	; (8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002aee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002af0:	f023 0207 	bic.w	r2, r3, #7
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002af8:	4976      	ldr	r1, [pc, #472]	; (8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002afa:	4313      	orrs	r3, r2
 8002afc:	650b      	str	r3, [r1, #80]	; 0x50
 8002afe:	e001      	b.n	8002b04 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b00:	7dfb      	ldrb	r3, [r7, #23]
 8002b02:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d042      	beq.n	8002b96 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b14:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b18:	d02b      	beq.n	8002b72 <HAL_RCCEx_PeriphCLKConfig+0x192>
 8002b1a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b1e:	d825      	bhi.n	8002b6c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8002b20:	2bc0      	cmp	r3, #192	; 0xc0
 8002b22:	d028      	beq.n	8002b76 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8002b24:	2bc0      	cmp	r3, #192	; 0xc0
 8002b26:	d821      	bhi.n	8002b6c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8002b28:	2b80      	cmp	r3, #128	; 0x80
 8002b2a:	d016      	beq.n	8002b5a <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8002b2c:	2b80      	cmp	r3, #128	; 0x80
 8002b2e:	d81d      	bhi.n	8002b6c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d002      	beq.n	8002b3a <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8002b34:	2b40      	cmp	r3, #64	; 0x40
 8002b36:	d007      	beq.n	8002b48 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8002b38:	e018      	b.n	8002b6c <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002b3a:	4b66      	ldr	r3, [pc, #408]	; (8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002b3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b3e:	4a65      	ldr	r2, [pc, #404]	; (8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002b40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b44:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8002b46:	e017      	b.n	8002b78 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	3304      	adds	r3, #4
 8002b4c:	2100      	movs	r1, #0
 8002b4e:	4618      	mov	r0, r3
 8002b50:	f000 fe86 	bl	8003860 <RCCEx_PLL2_Config>
 8002b54:	4603      	mov	r3, r0
 8002b56:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8002b58:	e00e      	b.n	8002b78 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	3324      	adds	r3, #36	; 0x24
 8002b5e:	2100      	movs	r1, #0
 8002b60:	4618      	mov	r0, r3
 8002b62:	f000 ff2f 	bl	80039c4 <RCCEx_PLL3_Config>
 8002b66:	4603      	mov	r3, r0
 8002b68:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8002b6a:	e005      	b.n	8002b78 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	75fb      	strb	r3, [r7, #23]
      break;
 8002b70:	e002      	b.n	8002b78 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8002b72:	bf00      	nop
 8002b74:	e000      	b.n	8002b78 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8002b76:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002b78:	7dfb      	ldrb	r3, [r7, #23]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d109      	bne.n	8002b92 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8002b7e:	4b55      	ldr	r3, [pc, #340]	; (8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002b80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b82:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b8a:	4952      	ldr	r1, [pc, #328]	; (8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002b8c:	4313      	orrs	r3, r2
 8002b8e:	650b      	str	r3, [r1, #80]	; 0x50
 8002b90:	e001      	b.n	8002b96 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b92:	7dfb      	ldrb	r3, [r7, #23]
 8002b94:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d049      	beq.n	8002c36 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002ba8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002bac:	d030      	beq.n	8002c10 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8002bae:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002bb2:	d82a      	bhi.n	8002c0a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8002bb4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8002bb8:	d02c      	beq.n	8002c14 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8002bba:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8002bbe:	d824      	bhi.n	8002c0a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8002bc0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002bc4:	d018      	beq.n	8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8002bc6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002bca:	d81e      	bhi.n	8002c0a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d003      	beq.n	8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8002bd0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002bd4:	d007      	beq.n	8002be6 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8002bd6:	e018      	b.n	8002c0a <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002bd8:	4b3e      	ldr	r3, [pc, #248]	; (8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002bda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bdc:	4a3d      	ldr	r2, [pc, #244]	; (8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002bde:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002be2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002be4:	e017      	b.n	8002c16 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	3304      	adds	r3, #4
 8002bea:	2100      	movs	r1, #0
 8002bec:	4618      	mov	r0, r3
 8002bee:	f000 fe37 	bl	8003860 <RCCEx_PLL2_Config>
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8002bf6:	e00e      	b.n	8002c16 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	3324      	adds	r3, #36	; 0x24
 8002bfc:	2100      	movs	r1, #0
 8002bfe:	4618      	mov	r0, r3
 8002c00:	f000 fee0 	bl	80039c4 <RCCEx_PLL3_Config>
 8002c04:	4603      	mov	r3, r0
 8002c06:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002c08:	e005      	b.n	8002c16 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	75fb      	strb	r3, [r7, #23]
      break;
 8002c0e:	e002      	b.n	8002c16 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8002c10:	bf00      	nop
 8002c12:	e000      	b.n	8002c16 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8002c14:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002c16:	7dfb      	ldrb	r3, [r7, #23]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d10a      	bne.n	8002c32 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8002c1c:	4b2d      	ldr	r3, [pc, #180]	; (8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002c1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c20:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002c2a:	492a      	ldr	r1, [pc, #168]	; (8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002c2c:	4313      	orrs	r3, r2
 8002c2e:	658b      	str	r3, [r1, #88]	; 0x58
 8002c30:	e001      	b.n	8002c36 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c32:	7dfb      	ldrb	r3, [r7, #23]
 8002c34:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d04c      	beq.n	8002cdc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002c48:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002c4c:	d030      	beq.n	8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8002c4e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002c52:	d82a      	bhi.n	8002caa <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8002c54:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002c58:	d02c      	beq.n	8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8002c5a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002c5e:	d824      	bhi.n	8002caa <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8002c60:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002c64:	d018      	beq.n	8002c98 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8002c66:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002c6a:	d81e      	bhi.n	8002caa <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d003      	beq.n	8002c78 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8002c70:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002c74:	d007      	beq.n	8002c86 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8002c76:	e018      	b.n	8002caa <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002c78:	4b16      	ldr	r3, [pc, #88]	; (8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002c7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c7c:	4a15      	ldr	r2, [pc, #84]	; (8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002c7e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c82:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002c84:	e017      	b.n	8002cb6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	3304      	adds	r3, #4
 8002c8a:	2100      	movs	r1, #0
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	f000 fde7 	bl	8003860 <RCCEx_PLL2_Config>
 8002c92:	4603      	mov	r3, r0
 8002c94:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8002c96:	e00e      	b.n	8002cb6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	3324      	adds	r3, #36	; 0x24
 8002c9c:	2100      	movs	r1, #0
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	f000 fe90 	bl	80039c4 <RCCEx_PLL3_Config>
 8002ca4:	4603      	mov	r3, r0
 8002ca6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002ca8:	e005      	b.n	8002cb6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8002caa:	2301      	movs	r3, #1
 8002cac:	75fb      	strb	r3, [r7, #23]
      break;
 8002cae:	e002      	b.n	8002cb6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8002cb0:	bf00      	nop
 8002cb2:	e000      	b.n	8002cb6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8002cb4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002cb6:	7dfb      	ldrb	r3, [r7, #23]
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d10d      	bne.n	8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8002cbc:	4b05      	ldr	r3, [pc, #20]	; (8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002cbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cc0:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002cca:	4902      	ldr	r1, [pc, #8]	; (8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002ccc:	4313      	orrs	r3, r2
 8002cce:	658b      	str	r3, [r1, #88]	; 0x58
 8002cd0:	e004      	b.n	8002cdc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8002cd2:	bf00      	nop
 8002cd4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002cd8:	7dfb      	ldrb	r3, [r7, #23]
 8002cda:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d032      	beq.n	8002d4e <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002cec:	2b30      	cmp	r3, #48	; 0x30
 8002cee:	d01c      	beq.n	8002d2a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8002cf0:	2b30      	cmp	r3, #48	; 0x30
 8002cf2:	d817      	bhi.n	8002d24 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8002cf4:	2b20      	cmp	r3, #32
 8002cf6:	d00c      	beq.n	8002d12 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8002cf8:	2b20      	cmp	r3, #32
 8002cfa:	d813      	bhi.n	8002d24 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d016      	beq.n	8002d2e <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8002d00:	2b10      	cmp	r3, #16
 8002d02:	d10f      	bne.n	8002d24 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002d04:	4baf      	ldr	r3, [pc, #700]	; (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8002d06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d08:	4aae      	ldr	r2, [pc, #696]	; (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8002d0a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d0e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8002d10:	e00e      	b.n	8002d30 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	3304      	adds	r3, #4
 8002d16:	2102      	movs	r1, #2
 8002d18:	4618      	mov	r0, r3
 8002d1a:	f000 fda1 	bl	8003860 <RCCEx_PLL2_Config>
 8002d1e:	4603      	mov	r3, r0
 8002d20:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8002d22:	e005      	b.n	8002d30 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8002d24:	2301      	movs	r3, #1
 8002d26:	75fb      	strb	r3, [r7, #23]
      break;
 8002d28:	e002      	b.n	8002d30 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8002d2a:	bf00      	nop
 8002d2c:	e000      	b.n	8002d30 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8002d2e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002d30:	7dfb      	ldrb	r3, [r7, #23]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d109      	bne.n	8002d4a <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002d36:	4ba3      	ldr	r3, [pc, #652]	; (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8002d38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d3a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d42:	49a0      	ldr	r1, [pc, #640]	; (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8002d44:	4313      	orrs	r3, r2
 8002d46:	64cb      	str	r3, [r1, #76]	; 0x4c
 8002d48:	e001      	b.n	8002d4e <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d4a:	7dfb      	ldrb	r3, [r7, #23]
 8002d4c:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d047      	beq.n	8002dea <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d5e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002d62:	d030      	beq.n	8002dc6 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8002d64:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002d68:	d82a      	bhi.n	8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8002d6a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002d6e:	d02c      	beq.n	8002dca <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8002d70:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002d74:	d824      	bhi.n	8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8002d76:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d7a:	d018      	beq.n	8002dae <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8002d7c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d80:	d81e      	bhi.n	8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d003      	beq.n	8002d8e <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8002d86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d8a:	d007      	beq.n	8002d9c <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8002d8c:	e018      	b.n	8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002d8e:	4b8d      	ldr	r3, [pc, #564]	; (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8002d90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d92:	4a8c      	ldr	r2, [pc, #560]	; (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8002d94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d98:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002d9a:	e017      	b.n	8002dcc <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	3304      	adds	r3, #4
 8002da0:	2100      	movs	r1, #0
 8002da2:	4618      	mov	r0, r3
 8002da4:	f000 fd5c 	bl	8003860 <RCCEx_PLL2_Config>
 8002da8:	4603      	mov	r3, r0
 8002daa:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002dac:	e00e      	b.n	8002dcc <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	3324      	adds	r3, #36	; 0x24
 8002db2:	2100      	movs	r1, #0
 8002db4:	4618      	mov	r0, r3
 8002db6:	f000 fe05 	bl	80039c4 <RCCEx_PLL3_Config>
 8002dba:	4603      	mov	r3, r0
 8002dbc:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002dbe:	e005      	b.n	8002dcc <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	75fb      	strb	r3, [r7, #23]
      break;
 8002dc4:	e002      	b.n	8002dcc <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8002dc6:	bf00      	nop
 8002dc8:	e000      	b.n	8002dcc <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8002dca:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002dcc:	7dfb      	ldrb	r3, [r7, #23]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d109      	bne.n	8002de6 <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8002dd2:	4b7c      	ldr	r3, [pc, #496]	; (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8002dd4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002dd6:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dde:	4979      	ldr	r1, [pc, #484]	; (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8002de0:	4313      	orrs	r3, r2
 8002de2:	650b      	str	r3, [r1, #80]	; 0x50
 8002de4:	e001      	b.n	8002dea <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002de6:	7dfb      	ldrb	r3, [r7, #23]
 8002de8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d049      	beq.n	8002e8a <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002dfa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002dfe:	d02e      	beq.n	8002e5e <HAL_RCCEx_PeriphCLKConfig+0x47e>
 8002e00:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002e04:	d828      	bhi.n	8002e58 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8002e06:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002e0a:	d02a      	beq.n	8002e62 <HAL_RCCEx_PeriphCLKConfig+0x482>
 8002e0c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002e10:	d822      	bhi.n	8002e58 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8002e12:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002e16:	d026      	beq.n	8002e66 <HAL_RCCEx_PeriphCLKConfig+0x486>
 8002e18:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002e1c:	d81c      	bhi.n	8002e58 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8002e1e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002e22:	d010      	beq.n	8002e46 <HAL_RCCEx_PeriphCLKConfig+0x466>
 8002e24:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002e28:	d816      	bhi.n	8002e58 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d01d      	beq.n	8002e6a <HAL_RCCEx_PeriphCLKConfig+0x48a>
 8002e2e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e32:	d111      	bne.n	8002e58 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	3304      	adds	r3, #4
 8002e38:	2101      	movs	r1, #1
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	f000 fd10 	bl	8003860 <RCCEx_PLL2_Config>
 8002e40:	4603      	mov	r3, r0
 8002e42:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8002e44:	e012      	b.n	8002e6c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	3324      	adds	r3, #36	; 0x24
 8002e4a:	2101      	movs	r1, #1
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	f000 fdb9 	bl	80039c4 <RCCEx_PLL3_Config>
 8002e52:	4603      	mov	r3, r0
 8002e54:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8002e56:	e009      	b.n	8002e6c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002e58:	2301      	movs	r3, #1
 8002e5a:	75fb      	strb	r3, [r7, #23]
      break;
 8002e5c:	e006      	b.n	8002e6c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8002e5e:	bf00      	nop
 8002e60:	e004      	b.n	8002e6c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8002e62:	bf00      	nop
 8002e64:	e002      	b.n	8002e6c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8002e66:	bf00      	nop
 8002e68:	e000      	b.n	8002e6c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8002e6a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002e6c:	7dfb      	ldrb	r3, [r7, #23]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d109      	bne.n	8002e86 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8002e72:	4b54      	ldr	r3, [pc, #336]	; (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8002e74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e76:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e7e:	4951      	ldr	r1, [pc, #324]	; (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8002e80:	4313      	orrs	r3, r2
 8002e82:	650b      	str	r3, [r1, #80]	; 0x50
 8002e84:	e001      	b.n	8002e8a <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e86:	7dfb      	ldrb	r3, [r7, #23]
 8002e88:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d04b      	beq.n	8002f2e <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002e9c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002ea0:	d02e      	beq.n	8002f00 <HAL_RCCEx_PeriphCLKConfig+0x520>
 8002ea2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002ea6:	d828      	bhi.n	8002efa <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8002ea8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002eac:	d02a      	beq.n	8002f04 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8002eae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002eb2:	d822      	bhi.n	8002efa <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8002eb4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002eb8:	d026      	beq.n	8002f08 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8002eba:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002ebe:	d81c      	bhi.n	8002efa <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8002ec0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002ec4:	d010      	beq.n	8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x508>
 8002ec6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002eca:	d816      	bhi.n	8002efa <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d01d      	beq.n	8002f0c <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8002ed0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002ed4:	d111      	bne.n	8002efa <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	3304      	adds	r3, #4
 8002eda:	2101      	movs	r1, #1
 8002edc:	4618      	mov	r0, r3
 8002ede:	f000 fcbf 	bl	8003860 <RCCEx_PLL2_Config>
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8002ee6:	e012      	b.n	8002f0e <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	3324      	adds	r3, #36	; 0x24
 8002eec:	2101      	movs	r1, #1
 8002eee:	4618      	mov	r0, r3
 8002ef0:	f000 fd68 	bl	80039c4 <RCCEx_PLL3_Config>
 8002ef4:	4603      	mov	r3, r0
 8002ef6:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8002ef8:	e009      	b.n	8002f0e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8002efa:	2301      	movs	r3, #1
 8002efc:	75fb      	strb	r3, [r7, #23]
      break;
 8002efe:	e006      	b.n	8002f0e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8002f00:	bf00      	nop
 8002f02:	e004      	b.n	8002f0e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8002f04:	bf00      	nop
 8002f06:	e002      	b.n	8002f0e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8002f08:	bf00      	nop
 8002f0a:	e000      	b.n	8002f0e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8002f0c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002f0e:	7dfb      	ldrb	r3, [r7, #23]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d10a      	bne.n	8002f2a <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8002f14:	4b2b      	ldr	r3, [pc, #172]	; (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8002f16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f18:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002f22:	4928      	ldr	r1, [pc, #160]	; (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8002f24:	4313      	orrs	r3, r2
 8002f26:	658b      	str	r3, [r1, #88]	; 0x58
 8002f28:	e001      	b.n	8002f2e <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f2a:	7dfb      	ldrb	r3, [r7, #23]
 8002f2c:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d02f      	beq.n	8002f9a <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002f3e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002f42:	d00e      	beq.n	8002f62 <HAL_RCCEx_PeriphCLKConfig+0x582>
 8002f44:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002f48:	d814      	bhi.n	8002f74 <HAL_RCCEx_PeriphCLKConfig+0x594>
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d015      	beq.n	8002f7a <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8002f4e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002f52:	d10f      	bne.n	8002f74 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002f54:	4b1b      	ldr	r3, [pc, #108]	; (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8002f56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f58:	4a1a      	ldr	r2, [pc, #104]	; (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8002f5a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f5e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8002f60:	e00c      	b.n	8002f7c <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	3304      	adds	r3, #4
 8002f66:	2101      	movs	r1, #1
 8002f68:	4618      	mov	r0, r3
 8002f6a:	f000 fc79 	bl	8003860 <RCCEx_PLL2_Config>
 8002f6e:	4603      	mov	r3, r0
 8002f70:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8002f72:	e003      	b.n	8002f7c <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002f74:	2301      	movs	r3, #1
 8002f76:	75fb      	strb	r3, [r7, #23]
      break;
 8002f78:	e000      	b.n	8002f7c <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8002f7a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002f7c:	7dfb      	ldrb	r3, [r7, #23]
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d109      	bne.n	8002f96 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002f82:	4b10      	ldr	r3, [pc, #64]	; (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8002f84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f86:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002f8e:	490d      	ldr	r1, [pc, #52]	; (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8002f90:	4313      	orrs	r3, r2
 8002f92:	650b      	str	r3, [r1, #80]	; 0x50
 8002f94:	e001      	b.n	8002f9a <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f96:	7dfb      	ldrb	r3, [r7, #23]
 8002f98:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d033      	beq.n	800300e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002faa:	2b03      	cmp	r3, #3
 8002fac:	d81c      	bhi.n	8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8002fae:	a201      	add	r2, pc, #4	; (adr r2, 8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 8002fb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fb4:	08002fef 	.word	0x08002fef
 8002fb8:	08002fc9 	.word	0x08002fc9
 8002fbc:	08002fd7 	.word	0x08002fd7
 8002fc0:	08002fef 	.word	0x08002fef
 8002fc4:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002fc8:	4bb8      	ldr	r3, [pc, #736]	; (80032ac <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002fca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fcc:	4ab7      	ldr	r2, [pc, #732]	; (80032ac <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002fce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002fd2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8002fd4:	e00c      	b.n	8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	3304      	adds	r3, #4
 8002fda:	2102      	movs	r1, #2
 8002fdc:	4618      	mov	r0, r3
 8002fde:	f000 fc3f 	bl	8003860 <RCCEx_PLL2_Config>
 8002fe2:	4603      	mov	r3, r0
 8002fe4:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8002fe6:	e003      	b.n	8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8002fe8:	2301      	movs	r3, #1
 8002fea:	75fb      	strb	r3, [r7, #23]
      break;
 8002fec:	e000      	b.n	8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8002fee:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002ff0:	7dfb      	ldrb	r3, [r7, #23]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d109      	bne.n	800300a <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8002ff6:	4bad      	ldr	r3, [pc, #692]	; (80032ac <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002ff8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ffa:	f023 0203 	bic.w	r2, r3, #3
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003002:	49aa      	ldr	r1, [pc, #680]	; (80032ac <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003004:	4313      	orrs	r3, r2
 8003006:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003008:	e001      	b.n	800300e <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800300a:	7dfb      	ldrb	r3, [r7, #23]
 800300c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003016:	2b00      	cmp	r3, #0
 8003018:	f000 8086 	beq.w	8003128 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800301c:	4ba4      	ldr	r3, [pc, #656]	; (80032b0 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4aa3      	ldr	r2, [pc, #652]	; (80032b0 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8003022:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003026:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003028:	f7fd feb2 	bl	8000d90 <HAL_GetTick>
 800302c:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800302e:	e009      	b.n	8003044 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003030:	f7fd feae 	bl	8000d90 <HAL_GetTick>
 8003034:	4602      	mov	r2, r0
 8003036:	693b      	ldr	r3, [r7, #16]
 8003038:	1ad3      	subs	r3, r2, r3
 800303a:	2b64      	cmp	r3, #100	; 0x64
 800303c:	d902      	bls.n	8003044 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 800303e:	2303      	movs	r3, #3
 8003040:	75fb      	strb	r3, [r7, #23]
        break;
 8003042:	e005      	b.n	8003050 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003044:	4b9a      	ldr	r3, [pc, #616]	; (80032b0 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800304c:	2b00      	cmp	r3, #0
 800304e:	d0ef      	beq.n	8003030 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8003050:	7dfb      	ldrb	r3, [r7, #23]
 8003052:	2b00      	cmp	r3, #0
 8003054:	d166      	bne.n	8003124 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003056:	4b95      	ldr	r3, [pc, #596]	; (80032ac <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003058:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003060:	4053      	eors	r3, r2
 8003062:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003066:	2b00      	cmp	r3, #0
 8003068:	d013      	beq.n	8003092 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800306a:	4b90      	ldr	r3, [pc, #576]	; (80032ac <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800306c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800306e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003072:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003074:	4b8d      	ldr	r3, [pc, #564]	; (80032ac <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003076:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003078:	4a8c      	ldr	r2, [pc, #560]	; (80032ac <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800307a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800307e:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003080:	4b8a      	ldr	r3, [pc, #552]	; (80032ac <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003082:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003084:	4a89      	ldr	r2, [pc, #548]	; (80032ac <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003086:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800308a:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800308c:	4a87      	ldr	r2, [pc, #540]	; (80032ac <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003098:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800309c:	d115      	bne.n	80030ca <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800309e:	f7fd fe77 	bl	8000d90 <HAL_GetTick>
 80030a2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80030a4:	e00b      	b.n	80030be <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030a6:	f7fd fe73 	bl	8000d90 <HAL_GetTick>
 80030aa:	4602      	mov	r2, r0
 80030ac:	693b      	ldr	r3, [r7, #16]
 80030ae:	1ad3      	subs	r3, r2, r3
 80030b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80030b4:	4293      	cmp	r3, r2
 80030b6:	d902      	bls.n	80030be <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 80030b8:	2303      	movs	r3, #3
 80030ba:	75fb      	strb	r3, [r7, #23]
            break;
 80030bc:	e005      	b.n	80030ca <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80030be:	4b7b      	ldr	r3, [pc, #492]	; (80032ac <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80030c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030c2:	f003 0302 	and.w	r3, r3, #2
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d0ed      	beq.n	80030a6 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 80030ca:	7dfb      	ldrb	r3, [r7, #23]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d126      	bne.n	800311e <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80030d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030da:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80030de:	d10d      	bne.n	80030fc <HAL_RCCEx_PeriphCLKConfig+0x71c>
 80030e0:	4b72      	ldr	r3, [pc, #456]	; (80032ac <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80030e2:	691b      	ldr	r3, [r3, #16]
 80030e4:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80030ee:	0919      	lsrs	r1, r3, #4
 80030f0:	4b70      	ldr	r3, [pc, #448]	; (80032b4 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 80030f2:	400b      	ands	r3, r1
 80030f4:	496d      	ldr	r1, [pc, #436]	; (80032ac <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80030f6:	4313      	orrs	r3, r2
 80030f8:	610b      	str	r3, [r1, #16]
 80030fa:	e005      	b.n	8003108 <HAL_RCCEx_PeriphCLKConfig+0x728>
 80030fc:	4b6b      	ldr	r3, [pc, #428]	; (80032ac <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80030fe:	691b      	ldr	r3, [r3, #16]
 8003100:	4a6a      	ldr	r2, [pc, #424]	; (80032ac <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003102:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003106:	6113      	str	r3, [r2, #16]
 8003108:	4b68      	ldr	r3, [pc, #416]	; (80032ac <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800310a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003112:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003116:	4965      	ldr	r1, [pc, #404]	; (80032ac <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003118:	4313      	orrs	r3, r2
 800311a:	670b      	str	r3, [r1, #112]	; 0x70
 800311c:	e004      	b.n	8003128 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800311e:	7dfb      	ldrb	r3, [r7, #23]
 8003120:	75bb      	strb	r3, [r7, #22]
 8003122:	e001      	b.n	8003128 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003124:	7dfb      	ldrb	r3, [r7, #23]
 8003126:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f003 0301 	and.w	r3, r3, #1
 8003130:	2b00      	cmp	r3, #0
 8003132:	d07e      	beq.n	8003232 <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003138:	2b28      	cmp	r3, #40	; 0x28
 800313a:	d867      	bhi.n	800320c <HAL_RCCEx_PeriphCLKConfig+0x82c>
 800313c:	a201      	add	r2, pc, #4	; (adr r2, 8003144 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 800313e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003142:	bf00      	nop
 8003144:	08003213 	.word	0x08003213
 8003148:	0800320d 	.word	0x0800320d
 800314c:	0800320d 	.word	0x0800320d
 8003150:	0800320d 	.word	0x0800320d
 8003154:	0800320d 	.word	0x0800320d
 8003158:	0800320d 	.word	0x0800320d
 800315c:	0800320d 	.word	0x0800320d
 8003160:	0800320d 	.word	0x0800320d
 8003164:	080031e9 	.word	0x080031e9
 8003168:	0800320d 	.word	0x0800320d
 800316c:	0800320d 	.word	0x0800320d
 8003170:	0800320d 	.word	0x0800320d
 8003174:	0800320d 	.word	0x0800320d
 8003178:	0800320d 	.word	0x0800320d
 800317c:	0800320d 	.word	0x0800320d
 8003180:	0800320d 	.word	0x0800320d
 8003184:	080031fb 	.word	0x080031fb
 8003188:	0800320d 	.word	0x0800320d
 800318c:	0800320d 	.word	0x0800320d
 8003190:	0800320d 	.word	0x0800320d
 8003194:	0800320d 	.word	0x0800320d
 8003198:	0800320d 	.word	0x0800320d
 800319c:	0800320d 	.word	0x0800320d
 80031a0:	0800320d 	.word	0x0800320d
 80031a4:	08003213 	.word	0x08003213
 80031a8:	0800320d 	.word	0x0800320d
 80031ac:	0800320d 	.word	0x0800320d
 80031b0:	0800320d 	.word	0x0800320d
 80031b4:	0800320d 	.word	0x0800320d
 80031b8:	0800320d 	.word	0x0800320d
 80031bc:	0800320d 	.word	0x0800320d
 80031c0:	0800320d 	.word	0x0800320d
 80031c4:	08003213 	.word	0x08003213
 80031c8:	0800320d 	.word	0x0800320d
 80031cc:	0800320d 	.word	0x0800320d
 80031d0:	0800320d 	.word	0x0800320d
 80031d4:	0800320d 	.word	0x0800320d
 80031d8:	0800320d 	.word	0x0800320d
 80031dc:	0800320d 	.word	0x0800320d
 80031e0:	0800320d 	.word	0x0800320d
 80031e4:	08003213 	.word	0x08003213
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	3304      	adds	r3, #4
 80031ec:	2101      	movs	r1, #1
 80031ee:	4618      	mov	r0, r3
 80031f0:	f000 fb36 	bl	8003860 <RCCEx_PLL2_Config>
 80031f4:	4603      	mov	r3, r0
 80031f6:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80031f8:	e00c      	b.n	8003214 <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	3324      	adds	r3, #36	; 0x24
 80031fe:	2101      	movs	r1, #1
 8003200:	4618      	mov	r0, r3
 8003202:	f000 fbdf 	bl	80039c4 <RCCEx_PLL3_Config>
 8003206:	4603      	mov	r3, r0
 8003208:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800320a:	e003      	b.n	8003214 <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800320c:	2301      	movs	r3, #1
 800320e:	75fb      	strb	r3, [r7, #23]
      break;
 8003210:	e000      	b.n	8003214 <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 8003212:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003214:	7dfb      	ldrb	r3, [r7, #23]
 8003216:	2b00      	cmp	r3, #0
 8003218:	d109      	bne.n	800322e <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800321a:	4b24      	ldr	r3, [pc, #144]	; (80032ac <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800321c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800321e:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003226:	4921      	ldr	r1, [pc, #132]	; (80032ac <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003228:	4313      	orrs	r3, r2
 800322a:	654b      	str	r3, [r1, #84]	; 0x54
 800322c:	e001      	b.n	8003232 <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800322e:	7dfb      	ldrb	r3, [r7, #23]
 8003230:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f003 0302 	and.w	r3, r3, #2
 800323a:	2b00      	cmp	r3, #0
 800323c:	d03e      	beq.n	80032bc <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003242:	2b05      	cmp	r3, #5
 8003244:	d820      	bhi.n	8003288 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 8003246:	a201      	add	r2, pc, #4	; (adr r2, 800324c <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 8003248:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800324c:	0800328f 	.word	0x0800328f
 8003250:	08003265 	.word	0x08003265
 8003254:	08003277 	.word	0x08003277
 8003258:	0800328f 	.word	0x0800328f
 800325c:	0800328f 	.word	0x0800328f
 8003260:	0800328f 	.word	0x0800328f
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	3304      	adds	r3, #4
 8003268:	2101      	movs	r1, #1
 800326a:	4618      	mov	r0, r3
 800326c:	f000 faf8 	bl	8003860 <RCCEx_PLL2_Config>
 8003270:	4603      	mov	r3, r0
 8003272:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003274:	e00c      	b.n	8003290 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	3324      	adds	r3, #36	; 0x24
 800327a:	2101      	movs	r1, #1
 800327c:	4618      	mov	r0, r3
 800327e:	f000 fba1 	bl	80039c4 <RCCEx_PLL3_Config>
 8003282:	4603      	mov	r3, r0
 8003284:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003286:	e003      	b.n	8003290 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003288:	2301      	movs	r3, #1
 800328a:	75fb      	strb	r3, [r7, #23]
      break;
 800328c:	e000      	b.n	8003290 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 800328e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003290:	7dfb      	ldrb	r3, [r7, #23]
 8003292:	2b00      	cmp	r3, #0
 8003294:	d110      	bne.n	80032b8 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003296:	4b05      	ldr	r3, [pc, #20]	; (80032ac <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003298:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800329a:	f023 0207 	bic.w	r2, r3, #7
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032a2:	4902      	ldr	r1, [pc, #8]	; (80032ac <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80032a4:	4313      	orrs	r3, r2
 80032a6:	654b      	str	r3, [r1, #84]	; 0x54
 80032a8:	e008      	b.n	80032bc <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 80032aa:	bf00      	nop
 80032ac:	58024400 	.word	0x58024400
 80032b0:	58024800 	.word	0x58024800
 80032b4:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032b8:	7dfb      	ldrb	r3, [r7, #23]
 80032ba:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f003 0304 	and.w	r3, r3, #4
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d039      	beq.n	800333c <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032ce:	2b05      	cmp	r3, #5
 80032d0:	d820      	bhi.n	8003314 <HAL_RCCEx_PeriphCLKConfig+0x934>
 80032d2:	a201      	add	r2, pc, #4	; (adr r2, 80032d8 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 80032d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032d8:	0800331b 	.word	0x0800331b
 80032dc:	080032f1 	.word	0x080032f1
 80032e0:	08003303 	.word	0x08003303
 80032e4:	0800331b 	.word	0x0800331b
 80032e8:	0800331b 	.word	0x0800331b
 80032ec:	0800331b 	.word	0x0800331b
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	3304      	adds	r3, #4
 80032f4:	2101      	movs	r1, #1
 80032f6:	4618      	mov	r0, r3
 80032f8:	f000 fab2 	bl	8003860 <RCCEx_PLL2_Config>
 80032fc:	4603      	mov	r3, r0
 80032fe:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003300:	e00c      	b.n	800331c <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	3324      	adds	r3, #36	; 0x24
 8003306:	2101      	movs	r1, #1
 8003308:	4618      	mov	r0, r3
 800330a:	f000 fb5b 	bl	80039c4 <RCCEx_PLL3_Config>
 800330e:	4603      	mov	r3, r0
 8003310:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003312:	e003      	b.n	800331c <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003314:	2301      	movs	r3, #1
 8003316:	75fb      	strb	r3, [r7, #23]
      break;
 8003318:	e000      	b.n	800331c <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 800331a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800331c:	7dfb      	ldrb	r3, [r7, #23]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d10a      	bne.n	8003338 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003322:	4bb7      	ldr	r3, [pc, #732]	; (8003600 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003324:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003326:	f023 0207 	bic.w	r2, r3, #7
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003330:	49b3      	ldr	r1, [pc, #716]	; (8003600 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003332:	4313      	orrs	r3, r2
 8003334:	658b      	str	r3, [r1, #88]	; 0x58
 8003336:	e001      	b.n	800333c <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003338:	7dfb      	ldrb	r3, [r7, #23]
 800333a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f003 0320 	and.w	r3, r3, #32
 8003344:	2b00      	cmp	r3, #0
 8003346:	d04b      	beq.n	80033e0 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800334e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003352:	d02e      	beq.n	80033b2 <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 8003354:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003358:	d828      	bhi.n	80033ac <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800335a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800335e:	d02a      	beq.n	80033b6 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8003360:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003364:	d822      	bhi.n	80033ac <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8003366:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800336a:	d026      	beq.n	80033ba <HAL_RCCEx_PeriphCLKConfig+0x9da>
 800336c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003370:	d81c      	bhi.n	80033ac <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8003372:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003376:	d010      	beq.n	800339a <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 8003378:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800337c:	d816      	bhi.n	80033ac <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800337e:	2b00      	cmp	r3, #0
 8003380:	d01d      	beq.n	80033be <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8003382:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003386:	d111      	bne.n	80033ac <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	3304      	adds	r3, #4
 800338c:	2100      	movs	r1, #0
 800338e:	4618      	mov	r0, r3
 8003390:	f000 fa66 	bl	8003860 <RCCEx_PLL2_Config>
 8003394:	4603      	mov	r3, r0
 8003396:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003398:	e012      	b.n	80033c0 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	3324      	adds	r3, #36	; 0x24
 800339e:	2102      	movs	r1, #2
 80033a0:	4618      	mov	r0, r3
 80033a2:	f000 fb0f 	bl	80039c4 <RCCEx_PLL3_Config>
 80033a6:	4603      	mov	r3, r0
 80033a8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80033aa:	e009      	b.n	80033c0 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80033ac:	2301      	movs	r3, #1
 80033ae:	75fb      	strb	r3, [r7, #23]
      break;
 80033b0:	e006      	b.n	80033c0 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80033b2:	bf00      	nop
 80033b4:	e004      	b.n	80033c0 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80033b6:	bf00      	nop
 80033b8:	e002      	b.n	80033c0 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80033ba:	bf00      	nop
 80033bc:	e000      	b.n	80033c0 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80033be:	bf00      	nop
    }

    if(ret == HAL_OK)
 80033c0:	7dfb      	ldrb	r3, [r7, #23]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d10a      	bne.n	80033dc <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80033c6:	4b8e      	ldr	r3, [pc, #568]	; (8003600 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80033c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033ca:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80033d4:	498a      	ldr	r1, [pc, #552]	; (8003600 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80033d6:	4313      	orrs	r3, r2
 80033d8:	654b      	str	r3, [r1, #84]	; 0x54
 80033da:	e001      	b.n	80033e0 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033dc:	7dfb      	ldrb	r3, [r7, #23]
 80033de:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d04b      	beq.n	8003484 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80033f2:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80033f6:	d02e      	beq.n	8003456 <HAL_RCCEx_PeriphCLKConfig+0xa76>
 80033f8:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80033fc:	d828      	bhi.n	8003450 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 80033fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003402:	d02a      	beq.n	800345a <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8003404:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003408:	d822      	bhi.n	8003450 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800340a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800340e:	d026      	beq.n	800345e <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8003410:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003414:	d81c      	bhi.n	8003450 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8003416:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800341a:	d010      	beq.n	800343e <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 800341c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003420:	d816      	bhi.n	8003450 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8003422:	2b00      	cmp	r3, #0
 8003424:	d01d      	beq.n	8003462 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8003426:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800342a:	d111      	bne.n	8003450 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	3304      	adds	r3, #4
 8003430:	2100      	movs	r1, #0
 8003432:	4618      	mov	r0, r3
 8003434:	f000 fa14 	bl	8003860 <RCCEx_PLL2_Config>
 8003438:	4603      	mov	r3, r0
 800343a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800343c:	e012      	b.n	8003464 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	3324      	adds	r3, #36	; 0x24
 8003442:	2102      	movs	r1, #2
 8003444:	4618      	mov	r0, r3
 8003446:	f000 fabd 	bl	80039c4 <RCCEx_PLL3_Config>
 800344a:	4603      	mov	r3, r0
 800344c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800344e:	e009      	b.n	8003464 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003450:	2301      	movs	r3, #1
 8003452:	75fb      	strb	r3, [r7, #23]
      break;
 8003454:	e006      	b.n	8003464 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8003456:	bf00      	nop
 8003458:	e004      	b.n	8003464 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800345a:	bf00      	nop
 800345c:	e002      	b.n	8003464 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800345e:	bf00      	nop
 8003460:	e000      	b.n	8003464 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8003462:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003464:	7dfb      	ldrb	r3, [r7, #23]
 8003466:	2b00      	cmp	r3, #0
 8003468:	d10a      	bne.n	8003480 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800346a:	4b65      	ldr	r3, [pc, #404]	; (8003600 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800346c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800346e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003478:	4961      	ldr	r1, [pc, #388]	; (8003600 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800347a:	4313      	orrs	r3, r2
 800347c:	658b      	str	r3, [r1, #88]	; 0x58
 800347e:	e001      	b.n	8003484 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003480:	7dfb      	ldrb	r3, [r7, #23]
 8003482:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800348c:	2b00      	cmp	r3, #0
 800348e:	d04b      	beq.n	8003528 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003496:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800349a:	d02e      	beq.n	80034fa <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 800349c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80034a0:	d828      	bhi.n	80034f4 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80034a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80034a6:	d02a      	beq.n	80034fe <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 80034a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80034ac:	d822      	bhi.n	80034f4 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80034ae:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80034b2:	d026      	beq.n	8003502 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 80034b4:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80034b8:	d81c      	bhi.n	80034f4 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80034ba:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80034be:	d010      	beq.n	80034e2 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 80034c0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80034c4:	d816      	bhi.n	80034f4 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d01d      	beq.n	8003506 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 80034ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80034ce:	d111      	bne.n	80034f4 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	3304      	adds	r3, #4
 80034d4:	2100      	movs	r1, #0
 80034d6:	4618      	mov	r0, r3
 80034d8:	f000 f9c2 	bl	8003860 <RCCEx_PLL2_Config>
 80034dc:	4603      	mov	r3, r0
 80034de:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80034e0:	e012      	b.n	8003508 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	3324      	adds	r3, #36	; 0x24
 80034e6:	2102      	movs	r1, #2
 80034e8:	4618      	mov	r0, r3
 80034ea:	f000 fa6b 	bl	80039c4 <RCCEx_PLL3_Config>
 80034ee:	4603      	mov	r3, r0
 80034f0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80034f2:	e009      	b.n	8003508 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80034f4:	2301      	movs	r3, #1
 80034f6:	75fb      	strb	r3, [r7, #23]
      break;
 80034f8:	e006      	b.n	8003508 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 80034fa:	bf00      	nop
 80034fc:	e004      	b.n	8003508 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 80034fe:	bf00      	nop
 8003500:	e002      	b.n	8003508 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8003502:	bf00      	nop
 8003504:	e000      	b.n	8003508 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8003506:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003508:	7dfb      	ldrb	r3, [r7, #23]
 800350a:	2b00      	cmp	r3, #0
 800350c:	d10a      	bne.n	8003524 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800350e:	4b3c      	ldr	r3, [pc, #240]	; (8003600 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003510:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003512:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800351c:	4938      	ldr	r1, [pc, #224]	; (8003600 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800351e:	4313      	orrs	r3, r2
 8003520:	658b      	str	r3, [r1, #88]	; 0x58
 8003522:	e001      	b.n	8003528 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003524:	7dfb      	ldrb	r3, [r7, #23]
 8003526:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f003 0308 	and.w	r3, r3, #8
 8003530:	2b00      	cmp	r3, #0
 8003532:	d01a      	beq.n	800356a <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800353a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800353e:	d10a      	bne.n	8003556 <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	3324      	adds	r3, #36	; 0x24
 8003544:	2102      	movs	r1, #2
 8003546:	4618      	mov	r0, r3
 8003548:	f000 fa3c 	bl	80039c4 <RCCEx_PLL3_Config>
 800354c:	4603      	mov	r3, r0
 800354e:	2b00      	cmp	r3, #0
 8003550:	d001      	beq.n	8003556 <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 8003552:	2301      	movs	r3, #1
 8003554:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8003556:	4b2a      	ldr	r3, [pc, #168]	; (8003600 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003558:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800355a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003564:	4926      	ldr	r1, [pc, #152]	; (8003600 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003566:	4313      	orrs	r3, r2
 8003568:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f003 0310 	and.w	r3, r3, #16
 8003572:	2b00      	cmp	r3, #0
 8003574:	d01a      	beq.n	80035ac <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800357c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003580:	d10a      	bne.n	8003598 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	3324      	adds	r3, #36	; 0x24
 8003586:	2102      	movs	r1, #2
 8003588:	4618      	mov	r0, r3
 800358a:	f000 fa1b 	bl	80039c4 <RCCEx_PLL3_Config>
 800358e:	4603      	mov	r3, r0
 8003590:	2b00      	cmp	r3, #0
 8003592:	d001      	beq.n	8003598 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 8003594:	2301      	movs	r3, #1
 8003596:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003598:	4b19      	ldr	r3, [pc, #100]	; (8003600 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800359a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800359c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80035a6:	4916      	ldr	r1, [pc, #88]	; (8003600 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80035a8:	4313      	orrs	r3, r2
 80035aa:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d036      	beq.n	8003626 <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80035be:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80035c2:	d01f      	beq.n	8003604 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 80035c4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80035c8:	d817      	bhi.n	80035fa <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d003      	beq.n	80035d6 <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 80035ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035d2:	d009      	beq.n	80035e8 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 80035d4:	e011      	b.n	80035fa <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	3304      	adds	r3, #4
 80035da:	2100      	movs	r1, #0
 80035dc:	4618      	mov	r0, r3
 80035de:	f000 f93f 	bl	8003860 <RCCEx_PLL2_Config>
 80035e2:	4603      	mov	r3, r0
 80035e4:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80035e6:	e00e      	b.n	8003606 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	3324      	adds	r3, #36	; 0x24
 80035ec:	2102      	movs	r1, #2
 80035ee:	4618      	mov	r0, r3
 80035f0:	f000 f9e8 	bl	80039c4 <RCCEx_PLL3_Config>
 80035f4:	4603      	mov	r3, r0
 80035f6:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80035f8:	e005      	b.n	8003606 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80035fa:	2301      	movs	r3, #1
 80035fc:	75fb      	strb	r3, [r7, #23]
      break;
 80035fe:	e002      	b.n	8003606 <HAL_RCCEx_PeriphCLKConfig+0xc26>
 8003600:	58024400 	.word	0x58024400
      break;
 8003604:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003606:	7dfb      	ldrb	r3, [r7, #23]
 8003608:	2b00      	cmp	r3, #0
 800360a:	d10a      	bne.n	8003622 <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800360c:	4b93      	ldr	r3, [pc, #588]	; (800385c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800360e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003610:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800361a:	4990      	ldr	r1, [pc, #576]	; (800385c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800361c:	4313      	orrs	r3, r2
 800361e:	658b      	str	r3, [r1, #88]	; 0x58
 8003620:	e001      	b.n	8003626 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003622:	7dfb      	ldrb	r3, [r7, #23]
 8003624:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800362e:	2b00      	cmp	r3, #0
 8003630:	d033      	beq.n	800369a <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003638:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800363c:	d01c      	beq.n	8003678 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 800363e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003642:	d816      	bhi.n	8003672 <HAL_RCCEx_PeriphCLKConfig+0xc92>
 8003644:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003648:	d003      	beq.n	8003652 <HAL_RCCEx_PeriphCLKConfig+0xc72>
 800364a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800364e:	d007      	beq.n	8003660 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 8003650:	e00f      	b.n	8003672 <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003652:	4b82      	ldr	r3, [pc, #520]	; (800385c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003654:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003656:	4a81      	ldr	r2, [pc, #516]	; (800385c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003658:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800365c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800365e:	e00c      	b.n	800367a <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	3324      	adds	r3, #36	; 0x24
 8003664:	2101      	movs	r1, #1
 8003666:	4618      	mov	r0, r3
 8003668:	f000 f9ac 	bl	80039c4 <RCCEx_PLL3_Config>
 800366c:	4603      	mov	r3, r0
 800366e:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8003670:	e003      	b.n	800367a <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003672:	2301      	movs	r3, #1
 8003674:	75fb      	strb	r3, [r7, #23]
      break;
 8003676:	e000      	b.n	800367a <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 8003678:	bf00      	nop
    }

    if(ret == HAL_OK)
 800367a:	7dfb      	ldrb	r3, [r7, #23]
 800367c:	2b00      	cmp	r3, #0
 800367e:	d10a      	bne.n	8003696 <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003680:	4b76      	ldr	r3, [pc, #472]	; (800385c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003682:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003684:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800368e:	4973      	ldr	r1, [pc, #460]	; (800385c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003690:	4313      	orrs	r3, r2
 8003692:	654b      	str	r3, [r1, #84]	; 0x54
 8003694:	e001      	b.n	800369a <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003696:	7dfb      	ldrb	r3, [r7, #23]
 8003698:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d029      	beq.n	80036fa <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d003      	beq.n	80036b6 <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 80036ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036b2:	d007      	beq.n	80036c4 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 80036b4:	e00f      	b.n	80036d6 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80036b6:	4b69      	ldr	r3, [pc, #420]	; (800385c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80036b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036ba:	4a68      	ldr	r2, [pc, #416]	; (800385c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80036bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036c0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80036c2:	e00b      	b.n	80036dc <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	3304      	adds	r3, #4
 80036c8:	2102      	movs	r1, #2
 80036ca:	4618      	mov	r0, r3
 80036cc:	f000 f8c8 	bl	8003860 <RCCEx_PLL2_Config>
 80036d0:	4603      	mov	r3, r0
 80036d2:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80036d4:	e002      	b.n	80036dc <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 80036d6:	2301      	movs	r3, #1
 80036d8:	75fb      	strb	r3, [r7, #23]
      break;
 80036da:	bf00      	nop
    }

    if(ret == HAL_OK)
 80036dc:	7dfb      	ldrb	r3, [r7, #23]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d109      	bne.n	80036f6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80036e2:	4b5e      	ldr	r3, [pc, #376]	; (800385c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80036e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036e6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036ee:	495b      	ldr	r1, [pc, #364]	; (800385c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80036f0:	4313      	orrs	r3, r2
 80036f2:	64cb      	str	r3, [r1, #76]	; 0x4c
 80036f4:	e001      	b.n	80036fa <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036f6:	7dfb      	ldrb	r3, [r7, #23]
 80036f8:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003702:	2b00      	cmp	r3, #0
 8003704:	d00a      	beq.n	800371c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	3324      	adds	r3, #36	; 0x24
 800370a:	2102      	movs	r1, #2
 800370c:	4618      	mov	r0, r3
 800370e:	f000 f959 	bl	80039c4 <RCCEx_PLL3_Config>
 8003712:	4603      	mov	r3, r0
 8003714:	2b00      	cmp	r3, #0
 8003716:	d001      	beq.n	800371c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 8003718:	2301      	movs	r3, #1
 800371a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003724:	2b00      	cmp	r3, #0
 8003726:	d030      	beq.n	800378a <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800372c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003730:	d017      	beq.n	8003762 <HAL_RCCEx_PeriphCLKConfig+0xd82>
 8003732:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003736:	d811      	bhi.n	800375c <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8003738:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800373c:	d013      	beq.n	8003766 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 800373e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003742:	d80b      	bhi.n	800375c <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8003744:	2b00      	cmp	r3, #0
 8003746:	d010      	beq.n	800376a <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8003748:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800374c:	d106      	bne.n	800375c <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800374e:	4b43      	ldr	r3, [pc, #268]	; (800385c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003750:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003752:	4a42      	ldr	r2, [pc, #264]	; (800385c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003754:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003758:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800375a:	e007      	b.n	800376c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800375c:	2301      	movs	r3, #1
 800375e:	75fb      	strb	r3, [r7, #23]
      break;
 8003760:	e004      	b.n	800376c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8003762:	bf00      	nop
 8003764:	e002      	b.n	800376c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8003766:	bf00      	nop
 8003768:	e000      	b.n	800376c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800376a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800376c:	7dfb      	ldrb	r3, [r7, #23]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d109      	bne.n	8003786 <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003772:	4b3a      	ldr	r3, [pc, #232]	; (800385c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003774:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003776:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800377e:	4937      	ldr	r1, [pc, #220]	; (800385c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003780:	4313      	orrs	r3, r2
 8003782:	654b      	str	r3, [r1, #84]	; 0x54
 8003784:	e001      	b.n	800378a <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003786:	7dfb      	ldrb	r3, [r7, #23]
 8003788:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003792:	2b00      	cmp	r3, #0
 8003794:	d008      	beq.n	80037a8 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003796:	4b31      	ldr	r3, [pc, #196]	; (800385c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003798:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800379a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037a2:	492e      	ldr	r1, [pc, #184]	; (800385c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80037a4:	4313      	orrs	r3, r2
 80037a6:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d009      	beq.n	80037c8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80037b4:	4b29      	ldr	r3, [pc, #164]	; (800385c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80037b6:	691b      	ldr	r3, [r3, #16]
 80037b8:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80037c2:	4926      	ldr	r1, [pc, #152]	; (800385c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80037c4:	4313      	orrs	r3, r2
 80037c6:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d008      	beq.n	80037e6 <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80037d4:	4b21      	ldr	r3, [pc, #132]	; (800385c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80037d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037d8:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80037e0:	491e      	ldr	r1, [pc, #120]	; (800385c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80037e2:	4313      	orrs	r3, r2
 80037e4:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d00d      	beq.n	800380e <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80037f2:	4b1a      	ldr	r3, [pc, #104]	; (800385c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80037f4:	691b      	ldr	r3, [r3, #16]
 80037f6:	4a19      	ldr	r2, [pc, #100]	; (800385c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80037f8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80037fc:	6113      	str	r3, [r2, #16]
 80037fe:	4b17      	ldr	r3, [pc, #92]	; (800385c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003800:	691a      	ldr	r2, [r3, #16]
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8003808:	4914      	ldr	r1, [pc, #80]	; (800385c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800380a:	4313      	orrs	r3, r2
 800380c:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	2b00      	cmp	r3, #0
 8003814:	da08      	bge.n	8003828 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8003816:	4b11      	ldr	r3, [pc, #68]	; (800385c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003818:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800381a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003822:	490e      	ldr	r1, [pc, #56]	; (800385c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003824:	4313      	orrs	r3, r2
 8003826:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003830:	2b00      	cmp	r3, #0
 8003832:	d009      	beq.n	8003848 <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003834:	4b09      	ldr	r3, [pc, #36]	; (800385c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003836:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003838:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003842:	4906      	ldr	r1, [pc, #24]	; (800385c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003844:	4313      	orrs	r3, r2
 8003846:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8003848:	7dbb      	ldrb	r3, [r7, #22]
 800384a:	2b00      	cmp	r3, #0
 800384c:	d101      	bne.n	8003852 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 800384e:	2300      	movs	r3, #0
 8003850:	e000      	b.n	8003854 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 8003852:	2301      	movs	r3, #1
}
 8003854:	4618      	mov	r0, r3
 8003856:	3718      	adds	r7, #24
 8003858:	46bd      	mov	sp, r7
 800385a:	bd80      	pop	{r7, pc}
 800385c:	58024400 	.word	0x58024400

08003860 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b084      	sub	sp, #16
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
 8003868:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800386a:	2300      	movs	r3, #0
 800386c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800386e:	4b53      	ldr	r3, [pc, #332]	; (80039bc <RCCEx_PLL2_Config+0x15c>)
 8003870:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003872:	f003 0303 	and.w	r3, r3, #3
 8003876:	2b03      	cmp	r3, #3
 8003878:	d101      	bne.n	800387e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800387a:	2301      	movs	r3, #1
 800387c:	e099      	b.n	80039b2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800387e:	4b4f      	ldr	r3, [pc, #316]	; (80039bc <RCCEx_PLL2_Config+0x15c>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	4a4e      	ldr	r2, [pc, #312]	; (80039bc <RCCEx_PLL2_Config+0x15c>)
 8003884:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003888:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800388a:	f7fd fa81 	bl	8000d90 <HAL_GetTick>
 800388e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003890:	e008      	b.n	80038a4 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8003892:	f7fd fa7d 	bl	8000d90 <HAL_GetTick>
 8003896:	4602      	mov	r2, r0
 8003898:	68bb      	ldr	r3, [r7, #8]
 800389a:	1ad3      	subs	r3, r2, r3
 800389c:	2b02      	cmp	r3, #2
 800389e:	d901      	bls.n	80038a4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80038a0:	2303      	movs	r3, #3
 80038a2:	e086      	b.n	80039b2 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80038a4:	4b45      	ldr	r3, [pc, #276]	; (80039bc <RCCEx_PLL2_Config+0x15c>)
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d1f0      	bne.n	8003892 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80038b0:	4b42      	ldr	r3, [pc, #264]	; (80039bc <RCCEx_PLL2_Config+0x15c>)
 80038b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038b4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	031b      	lsls	r3, r3, #12
 80038be:	493f      	ldr	r1, [pc, #252]	; (80039bc <RCCEx_PLL2_Config+0x15c>)
 80038c0:	4313      	orrs	r3, r2
 80038c2:	628b      	str	r3, [r1, #40]	; 0x28
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	685b      	ldr	r3, [r3, #4]
 80038c8:	3b01      	subs	r3, #1
 80038ca:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	689b      	ldr	r3, [r3, #8]
 80038d2:	3b01      	subs	r3, #1
 80038d4:	025b      	lsls	r3, r3, #9
 80038d6:	b29b      	uxth	r3, r3
 80038d8:	431a      	orrs	r2, r3
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	68db      	ldr	r3, [r3, #12]
 80038de:	3b01      	subs	r3, #1
 80038e0:	041b      	lsls	r3, r3, #16
 80038e2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80038e6:	431a      	orrs	r2, r3
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	691b      	ldr	r3, [r3, #16]
 80038ec:	3b01      	subs	r3, #1
 80038ee:	061b      	lsls	r3, r3, #24
 80038f0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80038f4:	4931      	ldr	r1, [pc, #196]	; (80039bc <RCCEx_PLL2_Config+0x15c>)
 80038f6:	4313      	orrs	r3, r2
 80038f8:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80038fa:	4b30      	ldr	r3, [pc, #192]	; (80039bc <RCCEx_PLL2_Config+0x15c>)
 80038fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038fe:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	695b      	ldr	r3, [r3, #20]
 8003906:	492d      	ldr	r1, [pc, #180]	; (80039bc <RCCEx_PLL2_Config+0x15c>)
 8003908:	4313      	orrs	r3, r2
 800390a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800390c:	4b2b      	ldr	r3, [pc, #172]	; (80039bc <RCCEx_PLL2_Config+0x15c>)
 800390e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003910:	f023 0220 	bic.w	r2, r3, #32
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	699b      	ldr	r3, [r3, #24]
 8003918:	4928      	ldr	r1, [pc, #160]	; (80039bc <RCCEx_PLL2_Config+0x15c>)
 800391a:	4313      	orrs	r3, r2
 800391c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800391e:	4b27      	ldr	r3, [pc, #156]	; (80039bc <RCCEx_PLL2_Config+0x15c>)
 8003920:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003922:	4a26      	ldr	r2, [pc, #152]	; (80039bc <RCCEx_PLL2_Config+0x15c>)
 8003924:	f023 0310 	bic.w	r3, r3, #16
 8003928:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800392a:	4b24      	ldr	r3, [pc, #144]	; (80039bc <RCCEx_PLL2_Config+0x15c>)
 800392c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800392e:	4b24      	ldr	r3, [pc, #144]	; (80039c0 <RCCEx_PLL2_Config+0x160>)
 8003930:	4013      	ands	r3, r2
 8003932:	687a      	ldr	r2, [r7, #4]
 8003934:	69d2      	ldr	r2, [r2, #28]
 8003936:	00d2      	lsls	r2, r2, #3
 8003938:	4920      	ldr	r1, [pc, #128]	; (80039bc <RCCEx_PLL2_Config+0x15c>)
 800393a:	4313      	orrs	r3, r2
 800393c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800393e:	4b1f      	ldr	r3, [pc, #124]	; (80039bc <RCCEx_PLL2_Config+0x15c>)
 8003940:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003942:	4a1e      	ldr	r2, [pc, #120]	; (80039bc <RCCEx_PLL2_Config+0x15c>)
 8003944:	f043 0310 	orr.w	r3, r3, #16
 8003948:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d106      	bne.n	800395e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8003950:	4b1a      	ldr	r3, [pc, #104]	; (80039bc <RCCEx_PLL2_Config+0x15c>)
 8003952:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003954:	4a19      	ldr	r2, [pc, #100]	; (80039bc <RCCEx_PLL2_Config+0x15c>)
 8003956:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800395a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800395c:	e00f      	b.n	800397e <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	2b01      	cmp	r3, #1
 8003962:	d106      	bne.n	8003972 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8003964:	4b15      	ldr	r3, [pc, #84]	; (80039bc <RCCEx_PLL2_Config+0x15c>)
 8003966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003968:	4a14      	ldr	r2, [pc, #80]	; (80039bc <RCCEx_PLL2_Config+0x15c>)
 800396a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800396e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003970:	e005      	b.n	800397e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8003972:	4b12      	ldr	r3, [pc, #72]	; (80039bc <RCCEx_PLL2_Config+0x15c>)
 8003974:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003976:	4a11      	ldr	r2, [pc, #68]	; (80039bc <RCCEx_PLL2_Config+0x15c>)
 8003978:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800397c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800397e:	4b0f      	ldr	r3, [pc, #60]	; (80039bc <RCCEx_PLL2_Config+0x15c>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	4a0e      	ldr	r2, [pc, #56]	; (80039bc <RCCEx_PLL2_Config+0x15c>)
 8003984:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003988:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800398a:	f7fd fa01 	bl	8000d90 <HAL_GetTick>
 800398e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003990:	e008      	b.n	80039a4 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8003992:	f7fd f9fd 	bl	8000d90 <HAL_GetTick>
 8003996:	4602      	mov	r2, r0
 8003998:	68bb      	ldr	r3, [r7, #8]
 800399a:	1ad3      	subs	r3, r2, r3
 800399c:	2b02      	cmp	r3, #2
 800399e:	d901      	bls.n	80039a4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80039a0:	2303      	movs	r3, #3
 80039a2:	e006      	b.n	80039b2 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80039a4:	4b05      	ldr	r3, [pc, #20]	; (80039bc <RCCEx_PLL2_Config+0x15c>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d0f0      	beq.n	8003992 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80039b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80039b2:	4618      	mov	r0, r3
 80039b4:	3710      	adds	r7, #16
 80039b6:	46bd      	mov	sp, r7
 80039b8:	bd80      	pop	{r7, pc}
 80039ba:	bf00      	nop
 80039bc:	58024400 	.word	0x58024400
 80039c0:	ffff0007 	.word	0xffff0007

080039c4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b084      	sub	sp, #16
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
 80039cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80039ce:	2300      	movs	r3, #0
 80039d0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80039d2:	4b53      	ldr	r3, [pc, #332]	; (8003b20 <RCCEx_PLL3_Config+0x15c>)
 80039d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039d6:	f003 0303 	and.w	r3, r3, #3
 80039da:	2b03      	cmp	r3, #3
 80039dc:	d101      	bne.n	80039e2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80039de:	2301      	movs	r3, #1
 80039e0:	e099      	b.n	8003b16 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80039e2:	4b4f      	ldr	r3, [pc, #316]	; (8003b20 <RCCEx_PLL3_Config+0x15c>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	4a4e      	ldr	r2, [pc, #312]	; (8003b20 <RCCEx_PLL3_Config+0x15c>)
 80039e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80039ec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80039ee:	f7fd f9cf 	bl	8000d90 <HAL_GetTick>
 80039f2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80039f4:	e008      	b.n	8003a08 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80039f6:	f7fd f9cb 	bl	8000d90 <HAL_GetTick>
 80039fa:	4602      	mov	r2, r0
 80039fc:	68bb      	ldr	r3, [r7, #8]
 80039fe:	1ad3      	subs	r3, r2, r3
 8003a00:	2b02      	cmp	r3, #2
 8003a02:	d901      	bls.n	8003a08 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003a04:	2303      	movs	r3, #3
 8003a06:	e086      	b.n	8003b16 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003a08:	4b45      	ldr	r3, [pc, #276]	; (8003b20 <RCCEx_PLL3_Config+0x15c>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d1f0      	bne.n	80039f6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8003a14:	4b42      	ldr	r3, [pc, #264]	; (8003b20 <RCCEx_PLL3_Config+0x15c>)
 8003a16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a18:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	051b      	lsls	r3, r3, #20
 8003a22:	493f      	ldr	r1, [pc, #252]	; (8003b20 <RCCEx_PLL3_Config+0x15c>)
 8003a24:	4313      	orrs	r3, r2
 8003a26:	628b      	str	r3, [r1, #40]	; 0x28
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	685b      	ldr	r3, [r3, #4]
 8003a2c:	3b01      	subs	r3, #1
 8003a2e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	689b      	ldr	r3, [r3, #8]
 8003a36:	3b01      	subs	r3, #1
 8003a38:	025b      	lsls	r3, r3, #9
 8003a3a:	b29b      	uxth	r3, r3
 8003a3c:	431a      	orrs	r2, r3
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	68db      	ldr	r3, [r3, #12]
 8003a42:	3b01      	subs	r3, #1
 8003a44:	041b      	lsls	r3, r3, #16
 8003a46:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003a4a:	431a      	orrs	r2, r3
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	691b      	ldr	r3, [r3, #16]
 8003a50:	3b01      	subs	r3, #1
 8003a52:	061b      	lsls	r3, r3, #24
 8003a54:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003a58:	4931      	ldr	r1, [pc, #196]	; (8003b20 <RCCEx_PLL3_Config+0x15c>)
 8003a5a:	4313      	orrs	r3, r2
 8003a5c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8003a5e:	4b30      	ldr	r3, [pc, #192]	; (8003b20 <RCCEx_PLL3_Config+0x15c>)
 8003a60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a62:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	695b      	ldr	r3, [r3, #20]
 8003a6a:	492d      	ldr	r1, [pc, #180]	; (8003b20 <RCCEx_PLL3_Config+0x15c>)
 8003a6c:	4313      	orrs	r3, r2
 8003a6e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8003a70:	4b2b      	ldr	r3, [pc, #172]	; (8003b20 <RCCEx_PLL3_Config+0x15c>)
 8003a72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a74:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	699b      	ldr	r3, [r3, #24]
 8003a7c:	4928      	ldr	r1, [pc, #160]	; (8003b20 <RCCEx_PLL3_Config+0x15c>)
 8003a7e:	4313      	orrs	r3, r2
 8003a80:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8003a82:	4b27      	ldr	r3, [pc, #156]	; (8003b20 <RCCEx_PLL3_Config+0x15c>)
 8003a84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a86:	4a26      	ldr	r2, [pc, #152]	; (8003b20 <RCCEx_PLL3_Config+0x15c>)
 8003a88:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003a8c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8003a8e:	4b24      	ldr	r3, [pc, #144]	; (8003b20 <RCCEx_PLL3_Config+0x15c>)
 8003a90:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003a92:	4b24      	ldr	r3, [pc, #144]	; (8003b24 <RCCEx_PLL3_Config+0x160>)
 8003a94:	4013      	ands	r3, r2
 8003a96:	687a      	ldr	r2, [r7, #4]
 8003a98:	69d2      	ldr	r2, [r2, #28]
 8003a9a:	00d2      	lsls	r2, r2, #3
 8003a9c:	4920      	ldr	r1, [pc, #128]	; (8003b20 <RCCEx_PLL3_Config+0x15c>)
 8003a9e:	4313      	orrs	r3, r2
 8003aa0:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8003aa2:	4b1f      	ldr	r3, [pc, #124]	; (8003b20 <RCCEx_PLL3_Config+0x15c>)
 8003aa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aa6:	4a1e      	ldr	r2, [pc, #120]	; (8003b20 <RCCEx_PLL3_Config+0x15c>)
 8003aa8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003aac:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d106      	bne.n	8003ac2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8003ab4:	4b1a      	ldr	r3, [pc, #104]	; (8003b20 <RCCEx_PLL3_Config+0x15c>)
 8003ab6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ab8:	4a19      	ldr	r2, [pc, #100]	; (8003b20 <RCCEx_PLL3_Config+0x15c>)
 8003aba:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003abe:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003ac0:	e00f      	b.n	8003ae2 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	2b01      	cmp	r3, #1
 8003ac6:	d106      	bne.n	8003ad6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8003ac8:	4b15      	ldr	r3, [pc, #84]	; (8003b20 <RCCEx_PLL3_Config+0x15c>)
 8003aca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003acc:	4a14      	ldr	r2, [pc, #80]	; (8003b20 <RCCEx_PLL3_Config+0x15c>)
 8003ace:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003ad2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003ad4:	e005      	b.n	8003ae2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8003ad6:	4b12      	ldr	r3, [pc, #72]	; (8003b20 <RCCEx_PLL3_Config+0x15c>)
 8003ad8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ada:	4a11      	ldr	r2, [pc, #68]	; (8003b20 <RCCEx_PLL3_Config+0x15c>)
 8003adc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003ae0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8003ae2:	4b0f      	ldr	r3, [pc, #60]	; (8003b20 <RCCEx_PLL3_Config+0x15c>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	4a0e      	ldr	r2, [pc, #56]	; (8003b20 <RCCEx_PLL3_Config+0x15c>)
 8003ae8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003aec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003aee:	f7fd f94f 	bl	8000d90 <HAL_GetTick>
 8003af2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003af4:	e008      	b.n	8003b08 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8003af6:	f7fd f94b 	bl	8000d90 <HAL_GetTick>
 8003afa:	4602      	mov	r2, r0
 8003afc:	68bb      	ldr	r3, [r7, #8]
 8003afe:	1ad3      	subs	r3, r2, r3
 8003b00:	2b02      	cmp	r3, #2
 8003b02:	d901      	bls.n	8003b08 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003b04:	2303      	movs	r3, #3
 8003b06:	e006      	b.n	8003b16 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003b08:	4b05      	ldr	r3, [pc, #20]	; (8003b20 <RCCEx_PLL3_Config+0x15c>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d0f0      	beq.n	8003af6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8003b14:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b16:	4618      	mov	r0, r3
 8003b18:	3710      	adds	r7, #16
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	bd80      	pop	{r7, pc}
 8003b1e:	bf00      	nop
 8003b20:	58024400 	.word	0x58024400
 8003b24:	ffff0007 	.word	0xffff0007

08003b28 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b08a      	sub	sp, #40	; 0x28
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8003b30:	2300      	movs	r3, #0
 8003b32:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8003b34:	f001 faa0 	bl	8005078 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8003b38:	4b5b      	ldr	r3, [pc, #364]	; (8003ca8 <pvPortMalloc+0x180>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d101      	bne.n	8003b44 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8003b40:	f000 f920 	bl	8003d84 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003b44:	4b59      	ldr	r3, [pc, #356]	; (8003cac <pvPortMalloc+0x184>)
 8003b46:	681a      	ldr	r2, [r3, #0]
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	4013      	ands	r3, r2
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	f040 8093 	bne.w	8003c78 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d01d      	beq.n	8003b94 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8003b58:	2208      	movs	r2, #8
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	4413      	add	r3, r2
 8003b5e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	f003 0307 	and.w	r3, r3, #7
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d014      	beq.n	8003b94 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	f023 0307 	bic.w	r3, r3, #7
 8003b70:	3308      	adds	r3, #8
 8003b72:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	f003 0307 	and.w	r3, r3, #7
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d00a      	beq.n	8003b94 <pvPortMalloc+0x6c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003b7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b82:	f383 8811 	msr	BASEPRI, r3
 8003b86:	f3bf 8f6f 	isb	sy
 8003b8a:	f3bf 8f4f 	dsb	sy
 8003b8e:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003b90:	bf00      	nop
 8003b92:	e7fe      	b.n	8003b92 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d06e      	beq.n	8003c78 <pvPortMalloc+0x150>
 8003b9a:	4b45      	ldr	r3, [pc, #276]	; (8003cb0 <pvPortMalloc+0x188>)
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	687a      	ldr	r2, [r7, #4]
 8003ba0:	429a      	cmp	r2, r3
 8003ba2:	d869      	bhi.n	8003c78 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8003ba4:	4b43      	ldr	r3, [pc, #268]	; (8003cb4 <pvPortMalloc+0x18c>)
 8003ba6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8003ba8:	4b42      	ldr	r3, [pc, #264]	; (8003cb4 <pvPortMalloc+0x18c>)
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003bae:	e004      	b.n	8003bba <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8003bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bb2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8003bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bbc:	685b      	ldr	r3, [r3, #4]
 8003bbe:	687a      	ldr	r2, [r7, #4]
 8003bc0:	429a      	cmp	r2, r3
 8003bc2:	d903      	bls.n	8003bcc <pvPortMalloc+0xa4>
 8003bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d1f1      	bne.n	8003bb0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8003bcc:	4b36      	ldr	r3, [pc, #216]	; (8003ca8 <pvPortMalloc+0x180>)
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bd2:	429a      	cmp	r2, r3
 8003bd4:	d050      	beq.n	8003c78 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003bd6:	6a3b      	ldr	r3, [r7, #32]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	2208      	movs	r2, #8
 8003bdc:	4413      	add	r3, r2
 8003bde:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003be2:	681a      	ldr	r2, [r3, #0]
 8003be4:	6a3b      	ldr	r3, [r7, #32]
 8003be6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bea:	685a      	ldr	r2, [r3, #4]
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	1ad2      	subs	r2, r2, r3
 8003bf0:	2308      	movs	r3, #8
 8003bf2:	005b      	lsls	r3, r3, #1
 8003bf4:	429a      	cmp	r2, r3
 8003bf6:	d91f      	bls.n	8003c38 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003bf8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	4413      	add	r3, r2
 8003bfe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003c00:	69bb      	ldr	r3, [r7, #24]
 8003c02:	f003 0307 	and.w	r3, r3, #7
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d00a      	beq.n	8003c20 <pvPortMalloc+0xf8>
	__asm volatile
 8003c0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c0e:	f383 8811 	msr	BASEPRI, r3
 8003c12:	f3bf 8f6f 	isb	sy
 8003c16:	f3bf 8f4f 	dsb	sy
 8003c1a:	613b      	str	r3, [r7, #16]
}
 8003c1c:	bf00      	nop
 8003c1e:	e7fe      	b.n	8003c1e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c22:	685a      	ldr	r2, [r3, #4]
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	1ad2      	subs	r2, r2, r3
 8003c28:	69bb      	ldr	r3, [r7, #24]
 8003c2a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8003c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c2e:	687a      	ldr	r2, [r7, #4]
 8003c30:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003c32:	69b8      	ldr	r0, [r7, #24]
 8003c34:	f000 f908 	bl	8003e48 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003c38:	4b1d      	ldr	r3, [pc, #116]	; (8003cb0 <pvPortMalloc+0x188>)
 8003c3a:	681a      	ldr	r2, [r3, #0]
 8003c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c3e:	685b      	ldr	r3, [r3, #4]
 8003c40:	1ad3      	subs	r3, r2, r3
 8003c42:	4a1b      	ldr	r2, [pc, #108]	; (8003cb0 <pvPortMalloc+0x188>)
 8003c44:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003c46:	4b1a      	ldr	r3, [pc, #104]	; (8003cb0 <pvPortMalloc+0x188>)
 8003c48:	681a      	ldr	r2, [r3, #0]
 8003c4a:	4b1b      	ldr	r3, [pc, #108]	; (8003cb8 <pvPortMalloc+0x190>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	429a      	cmp	r2, r3
 8003c50:	d203      	bcs.n	8003c5a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003c52:	4b17      	ldr	r3, [pc, #92]	; (8003cb0 <pvPortMalloc+0x188>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	4a18      	ldr	r2, [pc, #96]	; (8003cb8 <pvPortMalloc+0x190>)
 8003c58:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c5c:	685a      	ldr	r2, [r3, #4]
 8003c5e:	4b13      	ldr	r3, [pc, #76]	; (8003cac <pvPortMalloc+0x184>)
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	431a      	orrs	r2, r3
 8003c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c66:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8003c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8003c6e:	4b13      	ldr	r3, [pc, #76]	; (8003cbc <pvPortMalloc+0x194>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	3301      	adds	r3, #1
 8003c74:	4a11      	ldr	r2, [pc, #68]	; (8003cbc <pvPortMalloc+0x194>)
 8003c76:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8003c78:	f001 fa0c 	bl	8005094 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003c7c:	69fb      	ldr	r3, [r7, #28]
 8003c7e:	f003 0307 	and.w	r3, r3, #7
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d00a      	beq.n	8003c9c <pvPortMalloc+0x174>
	__asm volatile
 8003c86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c8a:	f383 8811 	msr	BASEPRI, r3
 8003c8e:	f3bf 8f6f 	isb	sy
 8003c92:	f3bf 8f4f 	dsb	sy
 8003c96:	60fb      	str	r3, [r7, #12]
}
 8003c98:	bf00      	nop
 8003c9a:	e7fe      	b.n	8003c9a <pvPortMalloc+0x172>
	return pvReturn;
 8003c9c:	69fb      	ldr	r3, [r7, #28]
}
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	3728      	adds	r7, #40	; 0x28
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	bd80      	pop	{r7, pc}
 8003ca6:	bf00      	nop
 8003ca8:	24003f58 	.word	0x24003f58
 8003cac:	24003f6c 	.word	0x24003f6c
 8003cb0:	24003f5c 	.word	0x24003f5c
 8003cb4:	24003f50 	.word	0x24003f50
 8003cb8:	24003f60 	.word	0x24003f60
 8003cbc:	24003f64 	.word	0x24003f64

08003cc0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b086      	sub	sp, #24
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d04d      	beq.n	8003d6e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8003cd2:	2308      	movs	r3, #8
 8003cd4:	425b      	negs	r3, r3
 8003cd6:	697a      	ldr	r2, [r7, #20]
 8003cd8:	4413      	add	r3, r2
 8003cda:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8003cdc:	697b      	ldr	r3, [r7, #20]
 8003cde:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003ce0:	693b      	ldr	r3, [r7, #16]
 8003ce2:	685a      	ldr	r2, [r3, #4]
 8003ce4:	4b24      	ldr	r3, [pc, #144]	; (8003d78 <vPortFree+0xb8>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4013      	ands	r3, r2
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d10a      	bne.n	8003d04 <vPortFree+0x44>
	__asm volatile
 8003cee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cf2:	f383 8811 	msr	BASEPRI, r3
 8003cf6:	f3bf 8f6f 	isb	sy
 8003cfa:	f3bf 8f4f 	dsb	sy
 8003cfe:	60fb      	str	r3, [r7, #12]
}
 8003d00:	bf00      	nop
 8003d02:	e7fe      	b.n	8003d02 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003d04:	693b      	ldr	r3, [r7, #16]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d00a      	beq.n	8003d22 <vPortFree+0x62>
	__asm volatile
 8003d0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d10:	f383 8811 	msr	BASEPRI, r3
 8003d14:	f3bf 8f6f 	isb	sy
 8003d18:	f3bf 8f4f 	dsb	sy
 8003d1c:	60bb      	str	r3, [r7, #8]
}
 8003d1e:	bf00      	nop
 8003d20:	e7fe      	b.n	8003d20 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8003d22:	693b      	ldr	r3, [r7, #16]
 8003d24:	685a      	ldr	r2, [r3, #4]
 8003d26:	4b14      	ldr	r3, [pc, #80]	; (8003d78 <vPortFree+0xb8>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	4013      	ands	r3, r2
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d01e      	beq.n	8003d6e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8003d30:	693b      	ldr	r3, [r7, #16]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d11a      	bne.n	8003d6e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003d38:	693b      	ldr	r3, [r7, #16]
 8003d3a:	685a      	ldr	r2, [r3, #4]
 8003d3c:	4b0e      	ldr	r3, [pc, #56]	; (8003d78 <vPortFree+0xb8>)
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	43db      	mvns	r3, r3
 8003d42:	401a      	ands	r2, r3
 8003d44:	693b      	ldr	r3, [r7, #16]
 8003d46:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8003d48:	f001 f996 	bl	8005078 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003d4c:	693b      	ldr	r3, [r7, #16]
 8003d4e:	685a      	ldr	r2, [r3, #4]
 8003d50:	4b0a      	ldr	r3, [pc, #40]	; (8003d7c <vPortFree+0xbc>)
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	4413      	add	r3, r2
 8003d56:	4a09      	ldr	r2, [pc, #36]	; (8003d7c <vPortFree+0xbc>)
 8003d58:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003d5a:	6938      	ldr	r0, [r7, #16]
 8003d5c:	f000 f874 	bl	8003e48 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8003d60:	4b07      	ldr	r3, [pc, #28]	; (8003d80 <vPortFree+0xc0>)
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	3301      	adds	r3, #1
 8003d66:	4a06      	ldr	r2, [pc, #24]	; (8003d80 <vPortFree+0xc0>)
 8003d68:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8003d6a:	f001 f993 	bl	8005094 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8003d6e:	bf00      	nop
 8003d70:	3718      	adds	r7, #24
 8003d72:	46bd      	mov	sp, r7
 8003d74:	bd80      	pop	{r7, pc}
 8003d76:	bf00      	nop
 8003d78:	24003f6c 	.word	0x24003f6c
 8003d7c:	24003f5c 	.word	0x24003f5c
 8003d80:	24003f68 	.word	0x24003f68

08003d84 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8003d84:	b480      	push	{r7}
 8003d86:	b085      	sub	sp, #20
 8003d88:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003d8a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8003d8e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8003d90:	4b27      	ldr	r3, [pc, #156]	; (8003e30 <prvHeapInit+0xac>)
 8003d92:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	f003 0307 	and.w	r3, r3, #7
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d00c      	beq.n	8003db8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	3307      	adds	r3, #7
 8003da2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	f023 0307 	bic.w	r3, r3, #7
 8003daa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003dac:	68ba      	ldr	r2, [r7, #8]
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	1ad3      	subs	r3, r2, r3
 8003db2:	4a1f      	ldr	r2, [pc, #124]	; (8003e30 <prvHeapInit+0xac>)
 8003db4:	4413      	add	r3, r2
 8003db6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003dbc:	4a1d      	ldr	r2, [pc, #116]	; (8003e34 <prvHeapInit+0xb0>)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8003dc2:	4b1c      	ldr	r3, [pc, #112]	; (8003e34 <prvHeapInit+0xb0>)
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	68ba      	ldr	r2, [r7, #8]
 8003dcc:	4413      	add	r3, r2
 8003dce:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8003dd0:	2208      	movs	r2, #8
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	1a9b      	subs	r3, r3, r2
 8003dd6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	f023 0307 	bic.w	r3, r3, #7
 8003dde:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	4a15      	ldr	r2, [pc, #84]	; (8003e38 <prvHeapInit+0xb4>)
 8003de4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8003de6:	4b14      	ldr	r3, [pc, #80]	; (8003e38 <prvHeapInit+0xb4>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	2200      	movs	r2, #0
 8003dec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8003dee:	4b12      	ldr	r3, [pc, #72]	; (8003e38 <prvHeapInit+0xb4>)
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	2200      	movs	r2, #0
 8003df4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	68fa      	ldr	r2, [r7, #12]
 8003dfe:	1ad2      	subs	r2, r2, r3
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003e04:	4b0c      	ldr	r3, [pc, #48]	; (8003e38 <prvHeapInit+0xb4>)
 8003e06:	681a      	ldr	r2, [r3, #0]
 8003e08:	683b      	ldr	r3, [r7, #0]
 8003e0a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	685b      	ldr	r3, [r3, #4]
 8003e10:	4a0a      	ldr	r2, [pc, #40]	; (8003e3c <prvHeapInit+0xb8>)
 8003e12:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	685b      	ldr	r3, [r3, #4]
 8003e18:	4a09      	ldr	r2, [pc, #36]	; (8003e40 <prvHeapInit+0xbc>)
 8003e1a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003e1c:	4b09      	ldr	r3, [pc, #36]	; (8003e44 <prvHeapInit+0xc0>)
 8003e1e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003e22:	601a      	str	r2, [r3, #0]
}
 8003e24:	bf00      	nop
 8003e26:	3714      	adds	r7, #20
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2e:	4770      	bx	lr
 8003e30:	24000350 	.word	0x24000350
 8003e34:	24003f50 	.word	0x24003f50
 8003e38:	24003f58 	.word	0x24003f58
 8003e3c:	24003f60 	.word	0x24003f60
 8003e40:	24003f5c 	.word	0x24003f5c
 8003e44:	24003f6c 	.word	0x24003f6c

08003e48 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8003e48:	b480      	push	{r7}
 8003e4a:	b085      	sub	sp, #20
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003e50:	4b28      	ldr	r3, [pc, #160]	; (8003ef4 <prvInsertBlockIntoFreeList+0xac>)
 8003e52:	60fb      	str	r3, [r7, #12]
 8003e54:	e002      	b.n	8003e5c <prvInsertBlockIntoFreeList+0x14>
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	60fb      	str	r3, [r7, #12]
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	687a      	ldr	r2, [r7, #4]
 8003e62:	429a      	cmp	r2, r3
 8003e64:	d8f7      	bhi.n	8003e56 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	685b      	ldr	r3, [r3, #4]
 8003e6e:	68ba      	ldr	r2, [r7, #8]
 8003e70:	4413      	add	r3, r2
 8003e72:	687a      	ldr	r2, [r7, #4]
 8003e74:	429a      	cmp	r2, r3
 8003e76:	d108      	bne.n	8003e8a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	685a      	ldr	r2, [r3, #4]
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	685b      	ldr	r3, [r3, #4]
 8003e80:	441a      	add	r2, r3
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	685b      	ldr	r3, [r3, #4]
 8003e92:	68ba      	ldr	r2, [r7, #8]
 8003e94:	441a      	add	r2, r3
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	429a      	cmp	r2, r3
 8003e9c:	d118      	bne.n	8003ed0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681a      	ldr	r2, [r3, #0]
 8003ea2:	4b15      	ldr	r3, [pc, #84]	; (8003ef8 <prvInsertBlockIntoFreeList+0xb0>)
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	429a      	cmp	r2, r3
 8003ea8:	d00d      	beq.n	8003ec6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	685a      	ldr	r2, [r3, #4]
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	685b      	ldr	r3, [r3, #4]
 8003eb4:	441a      	add	r2, r3
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	681a      	ldr	r2, [r3, #0]
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	601a      	str	r2, [r3, #0]
 8003ec4:	e008      	b.n	8003ed8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003ec6:	4b0c      	ldr	r3, [pc, #48]	; (8003ef8 <prvInsertBlockIntoFreeList+0xb0>)
 8003ec8:	681a      	ldr	r2, [r3, #0]
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	601a      	str	r2, [r3, #0]
 8003ece:	e003      	b.n	8003ed8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681a      	ldr	r2, [r3, #0]
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8003ed8:	68fa      	ldr	r2, [r7, #12]
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	429a      	cmp	r2, r3
 8003ede:	d002      	beq.n	8003ee6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	687a      	ldr	r2, [r7, #4]
 8003ee4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003ee6:	bf00      	nop
 8003ee8:	3714      	adds	r7, #20
 8003eea:	46bd      	mov	sp, r7
 8003eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef0:	4770      	bx	lr
 8003ef2:	bf00      	nop
 8003ef4:	24003f50 	.word	0x24003f50
 8003ef8:	24003f58 	.word	0x24003f58

08003efc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003efc:	b480      	push	{r7}
 8003efe:	b083      	sub	sp, #12
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	f103 0208 	add.w	r2, r3, #8
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	f04f 32ff 	mov.w	r2, #4294967295
 8003f14:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	f103 0208 	add.w	r2, r3, #8
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	f103 0208 	add.w	r2, r3, #8
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003f30:	bf00      	nop
 8003f32:	370c      	adds	r7, #12
 8003f34:	46bd      	mov	sp, r7
 8003f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3a:	4770      	bx	lr

08003f3c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003f3c:	b480      	push	{r7}
 8003f3e:	b083      	sub	sp, #12
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2200      	movs	r2, #0
 8003f48:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003f4a:	bf00      	nop
 8003f4c:	370c      	adds	r7, #12
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f54:	4770      	bx	lr

08003f56 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003f56:	b480      	push	{r7}
 8003f58:	b085      	sub	sp, #20
 8003f5a:	af00      	add	r7, sp, #0
 8003f5c:	6078      	str	r0, [r7, #4]
 8003f5e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	685b      	ldr	r3, [r3, #4]
 8003f64:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	68fa      	ldr	r2, [r7, #12]
 8003f6a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	689a      	ldr	r2, [r3, #8]
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	689b      	ldr	r3, [r3, #8]
 8003f78:	683a      	ldr	r2, [r7, #0]
 8003f7a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	683a      	ldr	r2, [r7, #0]
 8003f80:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003f82:	683b      	ldr	r3, [r7, #0]
 8003f84:	687a      	ldr	r2, [r7, #4]
 8003f86:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	1c5a      	adds	r2, r3, #1
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	601a      	str	r2, [r3, #0]
}
 8003f92:	bf00      	nop
 8003f94:	3714      	adds	r7, #20
 8003f96:	46bd      	mov	sp, r7
 8003f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9c:	4770      	bx	lr

08003f9e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003f9e:	b480      	push	{r7}
 8003fa0:	b085      	sub	sp, #20
 8003fa2:	af00      	add	r7, sp, #0
 8003fa4:	6078      	str	r0, [r7, #4]
 8003fa6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003fae:	68bb      	ldr	r3, [r7, #8]
 8003fb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fb4:	d103      	bne.n	8003fbe <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	691b      	ldr	r3, [r3, #16]
 8003fba:	60fb      	str	r3, [r7, #12]
 8003fbc:	e00c      	b.n	8003fd8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	3308      	adds	r3, #8
 8003fc2:	60fb      	str	r3, [r7, #12]
 8003fc4:	e002      	b.n	8003fcc <vListInsert+0x2e>
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	685b      	ldr	r3, [r3, #4]
 8003fca:	60fb      	str	r3, [r7, #12]
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	685b      	ldr	r3, [r3, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	68ba      	ldr	r2, [r7, #8]
 8003fd4:	429a      	cmp	r2, r3
 8003fd6:	d2f6      	bcs.n	8003fc6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	685a      	ldr	r2, [r3, #4]
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	685b      	ldr	r3, [r3, #4]
 8003fe4:	683a      	ldr	r2, [r7, #0]
 8003fe6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	68fa      	ldr	r2, [r7, #12]
 8003fec:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	683a      	ldr	r2, [r7, #0]
 8003ff2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	687a      	ldr	r2, [r7, #4]
 8003ff8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	1c5a      	adds	r2, r3, #1
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	601a      	str	r2, [r3, #0]
}
 8004004:	bf00      	nop
 8004006:	3714      	adds	r7, #20
 8004008:	46bd      	mov	sp, r7
 800400a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400e:	4770      	bx	lr

08004010 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004010:	b480      	push	{r7}
 8004012:	b085      	sub	sp, #20
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	691b      	ldr	r3, [r3, #16]
 800401c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	685b      	ldr	r3, [r3, #4]
 8004022:	687a      	ldr	r2, [r7, #4]
 8004024:	6892      	ldr	r2, [r2, #8]
 8004026:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	689b      	ldr	r3, [r3, #8]
 800402c:	687a      	ldr	r2, [r7, #4]
 800402e:	6852      	ldr	r2, [r2, #4]
 8004030:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	685b      	ldr	r3, [r3, #4]
 8004036:	687a      	ldr	r2, [r7, #4]
 8004038:	429a      	cmp	r2, r3
 800403a:	d103      	bne.n	8004044 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	689a      	ldr	r2, [r3, #8]
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2200      	movs	r2, #0
 8004048:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	1e5a      	subs	r2, r3, #1
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	681b      	ldr	r3, [r3, #0]
}
 8004058:	4618      	mov	r0, r3
 800405a:	3714      	adds	r7, #20
 800405c:	46bd      	mov	sp, r7
 800405e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004062:	4770      	bx	lr

08004064 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004064:	b480      	push	{r7}
 8004066:	b085      	sub	sp, #20
 8004068:	af00      	add	r7, sp, #0
 800406a:	60f8      	str	r0, [r7, #12]
 800406c:	60b9      	str	r1, [r7, #8]
 800406e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	3b04      	subs	r3, #4
 8004074:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800407c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	3b04      	subs	r3, #4
 8004082:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004084:	68bb      	ldr	r3, [r7, #8]
 8004086:	f023 0201 	bic.w	r2, r3, #1
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	3b04      	subs	r3, #4
 8004092:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004094:	4a0c      	ldr	r2, [pc, #48]	; (80040c8 <pxPortInitialiseStack+0x64>)
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	3b14      	subs	r3, #20
 800409e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80040a0:	687a      	ldr	r2, [r7, #4]
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	3b04      	subs	r3, #4
 80040aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	f06f 0202 	mvn.w	r2, #2
 80040b2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	3b20      	subs	r3, #32
 80040b8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80040ba:	68fb      	ldr	r3, [r7, #12]
}
 80040bc:	4618      	mov	r0, r3
 80040be:	3714      	adds	r7, #20
 80040c0:	46bd      	mov	sp, r7
 80040c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c6:	4770      	bx	lr
 80040c8:	080040cd 	.word	0x080040cd

080040cc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80040cc:	b480      	push	{r7}
 80040ce:	b085      	sub	sp, #20
 80040d0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80040d2:	2300      	movs	r3, #0
 80040d4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80040d6:	4b12      	ldr	r3, [pc, #72]	; (8004120 <prvTaskExitError+0x54>)
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040de:	d00a      	beq.n	80040f6 <prvTaskExitError+0x2a>
	__asm volatile
 80040e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040e4:	f383 8811 	msr	BASEPRI, r3
 80040e8:	f3bf 8f6f 	isb	sy
 80040ec:	f3bf 8f4f 	dsb	sy
 80040f0:	60fb      	str	r3, [r7, #12]
}
 80040f2:	bf00      	nop
 80040f4:	e7fe      	b.n	80040f4 <prvTaskExitError+0x28>
	__asm volatile
 80040f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040fa:	f383 8811 	msr	BASEPRI, r3
 80040fe:	f3bf 8f6f 	isb	sy
 8004102:	f3bf 8f4f 	dsb	sy
 8004106:	60bb      	str	r3, [r7, #8]
}
 8004108:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800410a:	bf00      	nop
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2b00      	cmp	r3, #0
 8004110:	d0fc      	beq.n	800410c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004112:	bf00      	nop
 8004114:	bf00      	nop
 8004116:	3714      	adds	r7, #20
 8004118:	46bd      	mov	sp, r7
 800411a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411e:	4770      	bx	lr
 8004120:	24000010 	.word	0x24000010
	...

08004130 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004130:	4b07      	ldr	r3, [pc, #28]	; (8004150 <pxCurrentTCBConst2>)
 8004132:	6819      	ldr	r1, [r3, #0]
 8004134:	6808      	ldr	r0, [r1, #0]
 8004136:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800413a:	f380 8809 	msr	PSP, r0
 800413e:	f3bf 8f6f 	isb	sy
 8004142:	f04f 0000 	mov.w	r0, #0
 8004146:	f380 8811 	msr	BASEPRI, r0
 800414a:	4770      	bx	lr
 800414c:	f3af 8000 	nop.w

08004150 <pxCurrentTCBConst2>:
 8004150:	24003f78 	.word	0x24003f78
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004154:	bf00      	nop
 8004156:	bf00      	nop

08004158 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004158:	4808      	ldr	r0, [pc, #32]	; (800417c <prvPortStartFirstTask+0x24>)
 800415a:	6800      	ldr	r0, [r0, #0]
 800415c:	6800      	ldr	r0, [r0, #0]
 800415e:	f380 8808 	msr	MSP, r0
 8004162:	f04f 0000 	mov.w	r0, #0
 8004166:	f380 8814 	msr	CONTROL, r0
 800416a:	b662      	cpsie	i
 800416c:	b661      	cpsie	f
 800416e:	f3bf 8f4f 	dsb	sy
 8004172:	f3bf 8f6f 	isb	sy
 8004176:	df00      	svc	0
 8004178:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800417a:	bf00      	nop
 800417c:	e000ed08 	.word	0xe000ed08

08004180 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004180:	b580      	push	{r7, lr}
 8004182:	b086      	sub	sp, #24
 8004184:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004186:	4b46      	ldr	r3, [pc, #280]	; (80042a0 <xPortStartScheduler+0x120>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	4a46      	ldr	r2, [pc, #280]	; (80042a4 <xPortStartScheduler+0x124>)
 800418c:	4293      	cmp	r3, r2
 800418e:	d10a      	bne.n	80041a6 <xPortStartScheduler+0x26>
	__asm volatile
 8004190:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004194:	f383 8811 	msr	BASEPRI, r3
 8004198:	f3bf 8f6f 	isb	sy
 800419c:	f3bf 8f4f 	dsb	sy
 80041a0:	613b      	str	r3, [r7, #16]
}
 80041a2:	bf00      	nop
 80041a4:	e7fe      	b.n	80041a4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80041a6:	4b3e      	ldr	r3, [pc, #248]	; (80042a0 <xPortStartScheduler+0x120>)
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	4a3f      	ldr	r2, [pc, #252]	; (80042a8 <xPortStartScheduler+0x128>)
 80041ac:	4293      	cmp	r3, r2
 80041ae:	d10a      	bne.n	80041c6 <xPortStartScheduler+0x46>
	__asm volatile
 80041b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041b4:	f383 8811 	msr	BASEPRI, r3
 80041b8:	f3bf 8f6f 	isb	sy
 80041bc:	f3bf 8f4f 	dsb	sy
 80041c0:	60fb      	str	r3, [r7, #12]
}
 80041c2:	bf00      	nop
 80041c4:	e7fe      	b.n	80041c4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80041c6:	4b39      	ldr	r3, [pc, #228]	; (80042ac <xPortStartScheduler+0x12c>)
 80041c8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80041ca:	697b      	ldr	r3, [r7, #20]
 80041cc:	781b      	ldrb	r3, [r3, #0]
 80041ce:	b2db      	uxtb	r3, r3
 80041d0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80041d2:	697b      	ldr	r3, [r7, #20]
 80041d4:	22ff      	movs	r2, #255	; 0xff
 80041d6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80041d8:	697b      	ldr	r3, [r7, #20]
 80041da:	781b      	ldrb	r3, [r3, #0]
 80041dc:	b2db      	uxtb	r3, r3
 80041de:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80041e0:	78fb      	ldrb	r3, [r7, #3]
 80041e2:	b2db      	uxtb	r3, r3
 80041e4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80041e8:	b2da      	uxtb	r2, r3
 80041ea:	4b31      	ldr	r3, [pc, #196]	; (80042b0 <xPortStartScheduler+0x130>)
 80041ec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80041ee:	4b31      	ldr	r3, [pc, #196]	; (80042b4 <xPortStartScheduler+0x134>)
 80041f0:	2207      	movs	r2, #7
 80041f2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80041f4:	e009      	b.n	800420a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80041f6:	4b2f      	ldr	r3, [pc, #188]	; (80042b4 <xPortStartScheduler+0x134>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	3b01      	subs	r3, #1
 80041fc:	4a2d      	ldr	r2, [pc, #180]	; (80042b4 <xPortStartScheduler+0x134>)
 80041fe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004200:	78fb      	ldrb	r3, [r7, #3]
 8004202:	b2db      	uxtb	r3, r3
 8004204:	005b      	lsls	r3, r3, #1
 8004206:	b2db      	uxtb	r3, r3
 8004208:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800420a:	78fb      	ldrb	r3, [r7, #3]
 800420c:	b2db      	uxtb	r3, r3
 800420e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004212:	2b80      	cmp	r3, #128	; 0x80
 8004214:	d0ef      	beq.n	80041f6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004216:	4b27      	ldr	r3, [pc, #156]	; (80042b4 <xPortStartScheduler+0x134>)
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f1c3 0307 	rsb	r3, r3, #7
 800421e:	2b04      	cmp	r3, #4
 8004220:	d00a      	beq.n	8004238 <xPortStartScheduler+0xb8>
	__asm volatile
 8004222:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004226:	f383 8811 	msr	BASEPRI, r3
 800422a:	f3bf 8f6f 	isb	sy
 800422e:	f3bf 8f4f 	dsb	sy
 8004232:	60bb      	str	r3, [r7, #8]
}
 8004234:	bf00      	nop
 8004236:	e7fe      	b.n	8004236 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004238:	4b1e      	ldr	r3, [pc, #120]	; (80042b4 <xPortStartScheduler+0x134>)
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	021b      	lsls	r3, r3, #8
 800423e:	4a1d      	ldr	r2, [pc, #116]	; (80042b4 <xPortStartScheduler+0x134>)
 8004240:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004242:	4b1c      	ldr	r3, [pc, #112]	; (80042b4 <xPortStartScheduler+0x134>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800424a:	4a1a      	ldr	r2, [pc, #104]	; (80042b4 <xPortStartScheduler+0x134>)
 800424c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	b2da      	uxtb	r2, r3
 8004252:	697b      	ldr	r3, [r7, #20]
 8004254:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004256:	4b18      	ldr	r3, [pc, #96]	; (80042b8 <xPortStartScheduler+0x138>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	4a17      	ldr	r2, [pc, #92]	; (80042b8 <xPortStartScheduler+0x138>)
 800425c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004260:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004262:	4b15      	ldr	r3, [pc, #84]	; (80042b8 <xPortStartScheduler+0x138>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	4a14      	ldr	r2, [pc, #80]	; (80042b8 <xPortStartScheduler+0x138>)
 8004268:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800426c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800426e:	f000 f8dd 	bl	800442c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004272:	4b12      	ldr	r3, [pc, #72]	; (80042bc <xPortStartScheduler+0x13c>)
 8004274:	2200      	movs	r2, #0
 8004276:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004278:	f000 f8fc 	bl	8004474 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800427c:	4b10      	ldr	r3, [pc, #64]	; (80042c0 <xPortStartScheduler+0x140>)
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	4a0f      	ldr	r2, [pc, #60]	; (80042c0 <xPortStartScheduler+0x140>)
 8004282:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004286:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004288:	f7ff ff66 	bl	8004158 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800428c:	f001 f856 	bl	800533c <vTaskSwitchContext>
	prvTaskExitError();
 8004290:	f7ff ff1c 	bl	80040cc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004294:	2300      	movs	r3, #0
}
 8004296:	4618      	mov	r0, r3
 8004298:	3718      	adds	r7, #24
 800429a:	46bd      	mov	sp, r7
 800429c:	bd80      	pop	{r7, pc}
 800429e:	bf00      	nop
 80042a0:	e000ed00 	.word	0xe000ed00
 80042a4:	410fc271 	.word	0x410fc271
 80042a8:	410fc270 	.word	0x410fc270
 80042ac:	e000e400 	.word	0xe000e400
 80042b0:	24003f70 	.word	0x24003f70
 80042b4:	24003f74 	.word	0x24003f74
 80042b8:	e000ed20 	.word	0xe000ed20
 80042bc:	24000010 	.word	0x24000010
 80042c0:	e000ef34 	.word	0xe000ef34

080042c4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80042c4:	b480      	push	{r7}
 80042c6:	b083      	sub	sp, #12
 80042c8:	af00      	add	r7, sp, #0
	__asm volatile
 80042ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042ce:	f383 8811 	msr	BASEPRI, r3
 80042d2:	f3bf 8f6f 	isb	sy
 80042d6:	f3bf 8f4f 	dsb	sy
 80042da:	607b      	str	r3, [r7, #4]
}
 80042dc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80042de:	4b0f      	ldr	r3, [pc, #60]	; (800431c <vPortEnterCritical+0x58>)
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	3301      	adds	r3, #1
 80042e4:	4a0d      	ldr	r2, [pc, #52]	; (800431c <vPortEnterCritical+0x58>)
 80042e6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80042e8:	4b0c      	ldr	r3, [pc, #48]	; (800431c <vPortEnterCritical+0x58>)
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	2b01      	cmp	r3, #1
 80042ee:	d10f      	bne.n	8004310 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80042f0:	4b0b      	ldr	r3, [pc, #44]	; (8004320 <vPortEnterCritical+0x5c>)
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	b2db      	uxtb	r3, r3
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d00a      	beq.n	8004310 <vPortEnterCritical+0x4c>
	__asm volatile
 80042fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042fe:	f383 8811 	msr	BASEPRI, r3
 8004302:	f3bf 8f6f 	isb	sy
 8004306:	f3bf 8f4f 	dsb	sy
 800430a:	603b      	str	r3, [r7, #0]
}
 800430c:	bf00      	nop
 800430e:	e7fe      	b.n	800430e <vPortEnterCritical+0x4a>
	}
}
 8004310:	bf00      	nop
 8004312:	370c      	adds	r7, #12
 8004314:	46bd      	mov	sp, r7
 8004316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431a:	4770      	bx	lr
 800431c:	24000010 	.word	0x24000010
 8004320:	e000ed04 	.word	0xe000ed04

08004324 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004324:	b480      	push	{r7}
 8004326:	b083      	sub	sp, #12
 8004328:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800432a:	4b12      	ldr	r3, [pc, #72]	; (8004374 <vPortExitCritical+0x50>)
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	2b00      	cmp	r3, #0
 8004330:	d10a      	bne.n	8004348 <vPortExitCritical+0x24>
	__asm volatile
 8004332:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004336:	f383 8811 	msr	BASEPRI, r3
 800433a:	f3bf 8f6f 	isb	sy
 800433e:	f3bf 8f4f 	dsb	sy
 8004342:	607b      	str	r3, [r7, #4]
}
 8004344:	bf00      	nop
 8004346:	e7fe      	b.n	8004346 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004348:	4b0a      	ldr	r3, [pc, #40]	; (8004374 <vPortExitCritical+0x50>)
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	3b01      	subs	r3, #1
 800434e:	4a09      	ldr	r2, [pc, #36]	; (8004374 <vPortExitCritical+0x50>)
 8004350:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004352:	4b08      	ldr	r3, [pc, #32]	; (8004374 <vPortExitCritical+0x50>)
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	2b00      	cmp	r3, #0
 8004358:	d105      	bne.n	8004366 <vPortExitCritical+0x42>
 800435a:	2300      	movs	r3, #0
 800435c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004364:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004366:	bf00      	nop
 8004368:	370c      	adds	r7, #12
 800436a:	46bd      	mov	sp, r7
 800436c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004370:	4770      	bx	lr
 8004372:	bf00      	nop
 8004374:	24000010 	.word	0x24000010
	...

08004380 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004380:	f3ef 8009 	mrs	r0, PSP
 8004384:	f3bf 8f6f 	isb	sy
 8004388:	4b15      	ldr	r3, [pc, #84]	; (80043e0 <pxCurrentTCBConst>)
 800438a:	681a      	ldr	r2, [r3, #0]
 800438c:	f01e 0f10 	tst.w	lr, #16
 8004390:	bf08      	it	eq
 8004392:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004396:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800439a:	6010      	str	r0, [r2, #0]
 800439c:	e92d 0009 	stmdb	sp!, {r0, r3}
 80043a0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80043a4:	f380 8811 	msr	BASEPRI, r0
 80043a8:	f3bf 8f4f 	dsb	sy
 80043ac:	f3bf 8f6f 	isb	sy
 80043b0:	f000 ffc4 	bl	800533c <vTaskSwitchContext>
 80043b4:	f04f 0000 	mov.w	r0, #0
 80043b8:	f380 8811 	msr	BASEPRI, r0
 80043bc:	bc09      	pop	{r0, r3}
 80043be:	6819      	ldr	r1, [r3, #0]
 80043c0:	6808      	ldr	r0, [r1, #0]
 80043c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80043c6:	f01e 0f10 	tst.w	lr, #16
 80043ca:	bf08      	it	eq
 80043cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80043d0:	f380 8809 	msr	PSP, r0
 80043d4:	f3bf 8f6f 	isb	sy
 80043d8:	4770      	bx	lr
 80043da:	bf00      	nop
 80043dc:	f3af 8000 	nop.w

080043e0 <pxCurrentTCBConst>:
 80043e0:	24003f78 	.word	0x24003f78
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80043e4:	bf00      	nop
 80043e6:	bf00      	nop

080043e8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	b082      	sub	sp, #8
 80043ec:	af00      	add	r7, sp, #0
	__asm volatile
 80043ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043f2:	f383 8811 	msr	BASEPRI, r3
 80043f6:	f3bf 8f6f 	isb	sy
 80043fa:	f3bf 8f4f 	dsb	sy
 80043fe:	607b      	str	r3, [r7, #4]
}
 8004400:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004402:	f000 fee3 	bl	80051cc <xTaskIncrementTick>
 8004406:	4603      	mov	r3, r0
 8004408:	2b00      	cmp	r3, #0
 800440a:	d003      	beq.n	8004414 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800440c:	4b06      	ldr	r3, [pc, #24]	; (8004428 <xPortSysTickHandler+0x40>)
 800440e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004412:	601a      	str	r2, [r3, #0]
 8004414:	2300      	movs	r3, #0
 8004416:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	f383 8811 	msr	BASEPRI, r3
}
 800441e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004420:	bf00      	nop
 8004422:	3708      	adds	r7, #8
 8004424:	46bd      	mov	sp, r7
 8004426:	bd80      	pop	{r7, pc}
 8004428:	e000ed04 	.word	0xe000ed04

0800442c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800442c:	b480      	push	{r7}
 800442e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004430:	4b0b      	ldr	r3, [pc, #44]	; (8004460 <vPortSetupTimerInterrupt+0x34>)
 8004432:	2200      	movs	r2, #0
 8004434:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004436:	4b0b      	ldr	r3, [pc, #44]	; (8004464 <vPortSetupTimerInterrupt+0x38>)
 8004438:	2200      	movs	r2, #0
 800443a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800443c:	4b0a      	ldr	r3, [pc, #40]	; (8004468 <vPortSetupTimerInterrupt+0x3c>)
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	4a0a      	ldr	r2, [pc, #40]	; (800446c <vPortSetupTimerInterrupt+0x40>)
 8004442:	fba2 2303 	umull	r2, r3, r2, r3
 8004446:	099b      	lsrs	r3, r3, #6
 8004448:	4a09      	ldr	r2, [pc, #36]	; (8004470 <vPortSetupTimerInterrupt+0x44>)
 800444a:	3b01      	subs	r3, #1
 800444c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800444e:	4b04      	ldr	r3, [pc, #16]	; (8004460 <vPortSetupTimerInterrupt+0x34>)
 8004450:	2207      	movs	r2, #7
 8004452:	601a      	str	r2, [r3, #0]
}
 8004454:	bf00      	nop
 8004456:	46bd      	mov	sp, r7
 8004458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445c:	4770      	bx	lr
 800445e:	bf00      	nop
 8004460:	e000e010 	.word	0xe000e010
 8004464:	e000e018 	.word	0xe000e018
 8004468:	24000000 	.word	0x24000000
 800446c:	10624dd3 	.word	0x10624dd3
 8004470:	e000e014 	.word	0xe000e014

08004474 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004474:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004484 <vPortEnableVFP+0x10>
 8004478:	6801      	ldr	r1, [r0, #0]
 800447a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800447e:	6001      	str	r1, [r0, #0]
 8004480:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004482:	bf00      	nop
 8004484:	e000ed88 	.word	0xe000ed88

08004488 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004488:	b580      	push	{r7, lr}
 800448a:	b084      	sub	sp, #16
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
 8004490:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	2b00      	cmp	r3, #0
 800449a:	d10a      	bne.n	80044b2 <xQueueGenericReset+0x2a>
	__asm volatile
 800449c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044a0:	f383 8811 	msr	BASEPRI, r3
 80044a4:	f3bf 8f6f 	isb	sy
 80044a8:	f3bf 8f4f 	dsb	sy
 80044ac:	60bb      	str	r3, [r7, #8]
}
 80044ae:	bf00      	nop
 80044b0:	e7fe      	b.n	80044b0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80044b2:	f7ff ff07 	bl	80042c4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	681a      	ldr	r2, [r3, #0]
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044be:	68f9      	ldr	r1, [r7, #12]
 80044c0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80044c2:	fb01 f303 	mul.w	r3, r1, r3
 80044c6:	441a      	add	r2, r3
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	2200      	movs	r2, #0
 80044d0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	681a      	ldr	r2, [r3, #0]
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	681a      	ldr	r2, [r3, #0]
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044e2:	3b01      	subs	r3, #1
 80044e4:	68f9      	ldr	r1, [r7, #12]
 80044e6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80044e8:	fb01 f303 	mul.w	r3, r1, r3
 80044ec:	441a      	add	r2, r3
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	22ff      	movs	r2, #255	; 0xff
 80044f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	22ff      	movs	r2, #255	; 0xff
 80044fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004502:	683b      	ldr	r3, [r7, #0]
 8004504:	2b00      	cmp	r3, #0
 8004506:	d114      	bne.n	8004532 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	691b      	ldr	r3, [r3, #16]
 800450c:	2b00      	cmp	r3, #0
 800450e:	d01a      	beq.n	8004546 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	3310      	adds	r3, #16
 8004514:	4618      	mov	r0, r3
 8004516:	f000 ff97 	bl	8005448 <xTaskRemoveFromEventList>
 800451a:	4603      	mov	r3, r0
 800451c:	2b00      	cmp	r3, #0
 800451e:	d012      	beq.n	8004546 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004520:	4b0c      	ldr	r3, [pc, #48]	; (8004554 <xQueueGenericReset+0xcc>)
 8004522:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004526:	601a      	str	r2, [r3, #0]
 8004528:	f3bf 8f4f 	dsb	sy
 800452c:	f3bf 8f6f 	isb	sy
 8004530:	e009      	b.n	8004546 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	3310      	adds	r3, #16
 8004536:	4618      	mov	r0, r3
 8004538:	f7ff fce0 	bl	8003efc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	3324      	adds	r3, #36	; 0x24
 8004540:	4618      	mov	r0, r3
 8004542:	f7ff fcdb 	bl	8003efc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004546:	f7ff feed 	bl	8004324 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800454a:	2301      	movs	r3, #1
}
 800454c:	4618      	mov	r0, r3
 800454e:	3710      	adds	r7, #16
 8004550:	46bd      	mov	sp, r7
 8004552:	bd80      	pop	{r7, pc}
 8004554:	e000ed04 	.word	0xe000ed04

08004558 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004558:	b580      	push	{r7, lr}
 800455a:	b08a      	sub	sp, #40	; 0x28
 800455c:	af02      	add	r7, sp, #8
 800455e:	60f8      	str	r0, [r7, #12]
 8004560:	60b9      	str	r1, [r7, #8]
 8004562:	4613      	mov	r3, r2
 8004564:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	2b00      	cmp	r3, #0
 800456a:	d10a      	bne.n	8004582 <xQueueGenericCreate+0x2a>
	__asm volatile
 800456c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004570:	f383 8811 	msr	BASEPRI, r3
 8004574:	f3bf 8f6f 	isb	sy
 8004578:	f3bf 8f4f 	dsb	sy
 800457c:	613b      	str	r3, [r7, #16]
}
 800457e:	bf00      	nop
 8004580:	e7fe      	b.n	8004580 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	68ba      	ldr	r2, [r7, #8]
 8004586:	fb02 f303 	mul.w	r3, r2, r3
 800458a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800458c:	69fb      	ldr	r3, [r7, #28]
 800458e:	3348      	adds	r3, #72	; 0x48
 8004590:	4618      	mov	r0, r3
 8004592:	f7ff fac9 	bl	8003b28 <pvPortMalloc>
 8004596:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004598:	69bb      	ldr	r3, [r7, #24]
 800459a:	2b00      	cmp	r3, #0
 800459c:	d011      	beq.n	80045c2 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800459e:	69bb      	ldr	r3, [r7, #24]
 80045a0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80045a2:	697b      	ldr	r3, [r7, #20]
 80045a4:	3348      	adds	r3, #72	; 0x48
 80045a6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80045a8:	69bb      	ldr	r3, [r7, #24]
 80045aa:	2200      	movs	r2, #0
 80045ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80045b0:	79fa      	ldrb	r2, [r7, #7]
 80045b2:	69bb      	ldr	r3, [r7, #24]
 80045b4:	9300      	str	r3, [sp, #0]
 80045b6:	4613      	mov	r3, r2
 80045b8:	697a      	ldr	r2, [r7, #20]
 80045ba:	68b9      	ldr	r1, [r7, #8]
 80045bc:	68f8      	ldr	r0, [r7, #12]
 80045be:	f000 f805 	bl	80045cc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80045c2:	69bb      	ldr	r3, [r7, #24]
	}
 80045c4:	4618      	mov	r0, r3
 80045c6:	3720      	adds	r7, #32
 80045c8:	46bd      	mov	sp, r7
 80045ca:	bd80      	pop	{r7, pc}

080045cc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b084      	sub	sp, #16
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	60f8      	str	r0, [r7, #12]
 80045d4:	60b9      	str	r1, [r7, #8]
 80045d6:	607a      	str	r2, [r7, #4]
 80045d8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80045da:	68bb      	ldr	r3, [r7, #8]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d103      	bne.n	80045e8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80045e0:	69bb      	ldr	r3, [r7, #24]
 80045e2:	69ba      	ldr	r2, [r7, #24]
 80045e4:	601a      	str	r2, [r3, #0]
 80045e6:	e002      	b.n	80045ee <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80045e8:	69bb      	ldr	r3, [r7, #24]
 80045ea:	687a      	ldr	r2, [r7, #4]
 80045ec:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80045ee:	69bb      	ldr	r3, [r7, #24]
 80045f0:	68fa      	ldr	r2, [r7, #12]
 80045f2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80045f4:	69bb      	ldr	r3, [r7, #24]
 80045f6:	68ba      	ldr	r2, [r7, #8]
 80045f8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80045fa:	2101      	movs	r1, #1
 80045fc:	69b8      	ldr	r0, [r7, #24]
 80045fe:	f7ff ff43 	bl	8004488 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004602:	bf00      	nop
 8004604:	3710      	adds	r7, #16
 8004606:	46bd      	mov	sp, r7
 8004608:	bd80      	pop	{r7, pc}
	...

0800460c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800460c:	b580      	push	{r7, lr}
 800460e:	b08e      	sub	sp, #56	; 0x38
 8004610:	af00      	add	r7, sp, #0
 8004612:	60f8      	str	r0, [r7, #12]
 8004614:	60b9      	str	r1, [r7, #8]
 8004616:	607a      	str	r2, [r7, #4]
 8004618:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800461a:	2300      	movs	r3, #0
 800461c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004622:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004624:	2b00      	cmp	r3, #0
 8004626:	d10a      	bne.n	800463e <xQueueGenericSend+0x32>
	__asm volatile
 8004628:	f04f 0350 	mov.w	r3, #80	; 0x50
 800462c:	f383 8811 	msr	BASEPRI, r3
 8004630:	f3bf 8f6f 	isb	sy
 8004634:	f3bf 8f4f 	dsb	sy
 8004638:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800463a:	bf00      	nop
 800463c:	e7fe      	b.n	800463c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800463e:	68bb      	ldr	r3, [r7, #8]
 8004640:	2b00      	cmp	r3, #0
 8004642:	d103      	bne.n	800464c <xQueueGenericSend+0x40>
 8004644:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004648:	2b00      	cmp	r3, #0
 800464a:	d101      	bne.n	8004650 <xQueueGenericSend+0x44>
 800464c:	2301      	movs	r3, #1
 800464e:	e000      	b.n	8004652 <xQueueGenericSend+0x46>
 8004650:	2300      	movs	r3, #0
 8004652:	2b00      	cmp	r3, #0
 8004654:	d10a      	bne.n	800466c <xQueueGenericSend+0x60>
	__asm volatile
 8004656:	f04f 0350 	mov.w	r3, #80	; 0x50
 800465a:	f383 8811 	msr	BASEPRI, r3
 800465e:	f3bf 8f6f 	isb	sy
 8004662:	f3bf 8f4f 	dsb	sy
 8004666:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004668:	bf00      	nop
 800466a:	e7fe      	b.n	800466a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	2b02      	cmp	r3, #2
 8004670:	d103      	bne.n	800467a <xQueueGenericSend+0x6e>
 8004672:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004674:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004676:	2b01      	cmp	r3, #1
 8004678:	d101      	bne.n	800467e <xQueueGenericSend+0x72>
 800467a:	2301      	movs	r3, #1
 800467c:	e000      	b.n	8004680 <xQueueGenericSend+0x74>
 800467e:	2300      	movs	r3, #0
 8004680:	2b00      	cmp	r3, #0
 8004682:	d10a      	bne.n	800469a <xQueueGenericSend+0x8e>
	__asm volatile
 8004684:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004688:	f383 8811 	msr	BASEPRI, r3
 800468c:	f3bf 8f6f 	isb	sy
 8004690:	f3bf 8f4f 	dsb	sy
 8004694:	623b      	str	r3, [r7, #32]
}
 8004696:	bf00      	nop
 8004698:	e7fe      	b.n	8004698 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800469a:	f001 f895 	bl	80057c8 <xTaskGetSchedulerState>
 800469e:	4603      	mov	r3, r0
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d102      	bne.n	80046aa <xQueueGenericSend+0x9e>
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d101      	bne.n	80046ae <xQueueGenericSend+0xa2>
 80046aa:	2301      	movs	r3, #1
 80046ac:	e000      	b.n	80046b0 <xQueueGenericSend+0xa4>
 80046ae:	2300      	movs	r3, #0
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d10a      	bne.n	80046ca <xQueueGenericSend+0xbe>
	__asm volatile
 80046b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046b8:	f383 8811 	msr	BASEPRI, r3
 80046bc:	f3bf 8f6f 	isb	sy
 80046c0:	f3bf 8f4f 	dsb	sy
 80046c4:	61fb      	str	r3, [r7, #28]
}
 80046c6:	bf00      	nop
 80046c8:	e7fe      	b.n	80046c8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80046ca:	f7ff fdfb 	bl	80042c4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80046ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80046d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046d6:	429a      	cmp	r2, r3
 80046d8:	d302      	bcc.n	80046e0 <xQueueGenericSend+0xd4>
 80046da:	683b      	ldr	r3, [r7, #0]
 80046dc:	2b02      	cmp	r3, #2
 80046de:	d129      	bne.n	8004734 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80046e0:	683a      	ldr	r2, [r7, #0]
 80046e2:	68b9      	ldr	r1, [r7, #8]
 80046e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80046e6:	f000 f96f 	bl	80049c8 <prvCopyDataToQueue>
 80046ea:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80046ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d010      	beq.n	8004716 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80046f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046f6:	3324      	adds	r3, #36	; 0x24
 80046f8:	4618      	mov	r0, r3
 80046fa:	f000 fea5 	bl	8005448 <xTaskRemoveFromEventList>
 80046fe:	4603      	mov	r3, r0
 8004700:	2b00      	cmp	r3, #0
 8004702:	d013      	beq.n	800472c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004704:	4b3f      	ldr	r3, [pc, #252]	; (8004804 <xQueueGenericSend+0x1f8>)
 8004706:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800470a:	601a      	str	r2, [r3, #0]
 800470c:	f3bf 8f4f 	dsb	sy
 8004710:	f3bf 8f6f 	isb	sy
 8004714:	e00a      	b.n	800472c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004716:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004718:	2b00      	cmp	r3, #0
 800471a:	d007      	beq.n	800472c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800471c:	4b39      	ldr	r3, [pc, #228]	; (8004804 <xQueueGenericSend+0x1f8>)
 800471e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004722:	601a      	str	r2, [r3, #0]
 8004724:	f3bf 8f4f 	dsb	sy
 8004728:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800472c:	f7ff fdfa 	bl	8004324 <vPortExitCritical>
				return pdPASS;
 8004730:	2301      	movs	r3, #1
 8004732:	e063      	b.n	80047fc <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d103      	bne.n	8004742 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800473a:	f7ff fdf3 	bl	8004324 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800473e:	2300      	movs	r3, #0
 8004740:	e05c      	b.n	80047fc <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004742:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004744:	2b00      	cmp	r3, #0
 8004746:	d106      	bne.n	8004756 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004748:	f107 0314 	add.w	r3, r7, #20
 800474c:	4618      	mov	r0, r3
 800474e:	f000 fedd 	bl	800550c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004752:	2301      	movs	r3, #1
 8004754:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004756:	f7ff fde5 	bl	8004324 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800475a:	f000 fc8d 	bl	8005078 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800475e:	f7ff fdb1 	bl	80042c4 <vPortEnterCritical>
 8004762:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004764:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004768:	b25b      	sxtb	r3, r3
 800476a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800476e:	d103      	bne.n	8004778 <xQueueGenericSend+0x16c>
 8004770:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004772:	2200      	movs	r2, #0
 8004774:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004778:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800477a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800477e:	b25b      	sxtb	r3, r3
 8004780:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004784:	d103      	bne.n	800478e <xQueueGenericSend+0x182>
 8004786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004788:	2200      	movs	r2, #0
 800478a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800478e:	f7ff fdc9 	bl	8004324 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004792:	1d3a      	adds	r2, r7, #4
 8004794:	f107 0314 	add.w	r3, r7, #20
 8004798:	4611      	mov	r1, r2
 800479a:	4618      	mov	r0, r3
 800479c:	f000 fecc 	bl	8005538 <xTaskCheckForTimeOut>
 80047a0:	4603      	mov	r3, r0
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d124      	bne.n	80047f0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80047a6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80047a8:	f000 fa06 	bl	8004bb8 <prvIsQueueFull>
 80047ac:	4603      	mov	r3, r0
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d018      	beq.n	80047e4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80047b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047b4:	3310      	adds	r3, #16
 80047b6:	687a      	ldr	r2, [r7, #4]
 80047b8:	4611      	mov	r1, r2
 80047ba:	4618      	mov	r0, r3
 80047bc:	f000 fe20 	bl	8005400 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80047c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80047c2:	f000 f991 	bl	8004ae8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80047c6:	f000 fc65 	bl	8005094 <xTaskResumeAll>
 80047ca:	4603      	mov	r3, r0
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	f47f af7c 	bne.w	80046ca <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80047d2:	4b0c      	ldr	r3, [pc, #48]	; (8004804 <xQueueGenericSend+0x1f8>)
 80047d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80047d8:	601a      	str	r2, [r3, #0]
 80047da:	f3bf 8f4f 	dsb	sy
 80047de:	f3bf 8f6f 	isb	sy
 80047e2:	e772      	b.n	80046ca <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80047e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80047e6:	f000 f97f 	bl	8004ae8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80047ea:	f000 fc53 	bl	8005094 <xTaskResumeAll>
 80047ee:	e76c      	b.n	80046ca <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80047f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80047f2:	f000 f979 	bl	8004ae8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80047f6:	f000 fc4d 	bl	8005094 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80047fa:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80047fc:	4618      	mov	r0, r3
 80047fe:	3738      	adds	r7, #56	; 0x38
 8004800:	46bd      	mov	sp, r7
 8004802:	bd80      	pop	{r7, pc}
 8004804:	e000ed04 	.word	0xe000ed04

08004808 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004808:	b580      	push	{r7, lr}
 800480a:	b08c      	sub	sp, #48	; 0x30
 800480c:	af00      	add	r7, sp, #0
 800480e:	60f8      	str	r0, [r7, #12]
 8004810:	60b9      	str	r1, [r7, #8]
 8004812:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004814:	2300      	movs	r3, #0
 8004816:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800481c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800481e:	2b00      	cmp	r3, #0
 8004820:	d10a      	bne.n	8004838 <xQueueReceive+0x30>
	__asm volatile
 8004822:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004826:	f383 8811 	msr	BASEPRI, r3
 800482a:	f3bf 8f6f 	isb	sy
 800482e:	f3bf 8f4f 	dsb	sy
 8004832:	623b      	str	r3, [r7, #32]
}
 8004834:	bf00      	nop
 8004836:	e7fe      	b.n	8004836 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004838:	68bb      	ldr	r3, [r7, #8]
 800483a:	2b00      	cmp	r3, #0
 800483c:	d103      	bne.n	8004846 <xQueueReceive+0x3e>
 800483e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004842:	2b00      	cmp	r3, #0
 8004844:	d101      	bne.n	800484a <xQueueReceive+0x42>
 8004846:	2301      	movs	r3, #1
 8004848:	e000      	b.n	800484c <xQueueReceive+0x44>
 800484a:	2300      	movs	r3, #0
 800484c:	2b00      	cmp	r3, #0
 800484e:	d10a      	bne.n	8004866 <xQueueReceive+0x5e>
	__asm volatile
 8004850:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004854:	f383 8811 	msr	BASEPRI, r3
 8004858:	f3bf 8f6f 	isb	sy
 800485c:	f3bf 8f4f 	dsb	sy
 8004860:	61fb      	str	r3, [r7, #28]
}
 8004862:	bf00      	nop
 8004864:	e7fe      	b.n	8004864 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004866:	f000 ffaf 	bl	80057c8 <xTaskGetSchedulerState>
 800486a:	4603      	mov	r3, r0
 800486c:	2b00      	cmp	r3, #0
 800486e:	d102      	bne.n	8004876 <xQueueReceive+0x6e>
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2b00      	cmp	r3, #0
 8004874:	d101      	bne.n	800487a <xQueueReceive+0x72>
 8004876:	2301      	movs	r3, #1
 8004878:	e000      	b.n	800487c <xQueueReceive+0x74>
 800487a:	2300      	movs	r3, #0
 800487c:	2b00      	cmp	r3, #0
 800487e:	d10a      	bne.n	8004896 <xQueueReceive+0x8e>
	__asm volatile
 8004880:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004884:	f383 8811 	msr	BASEPRI, r3
 8004888:	f3bf 8f6f 	isb	sy
 800488c:	f3bf 8f4f 	dsb	sy
 8004890:	61bb      	str	r3, [r7, #24]
}
 8004892:	bf00      	nop
 8004894:	e7fe      	b.n	8004894 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004896:	f7ff fd15 	bl	80042c4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800489a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800489c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800489e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80048a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d01f      	beq.n	80048e6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80048a6:	68b9      	ldr	r1, [r7, #8]
 80048a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80048aa:	f000 f8f7 	bl	8004a9c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80048ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048b0:	1e5a      	subs	r2, r3, #1
 80048b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048b4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80048b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048b8:	691b      	ldr	r3, [r3, #16]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d00f      	beq.n	80048de <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80048be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048c0:	3310      	adds	r3, #16
 80048c2:	4618      	mov	r0, r3
 80048c4:	f000 fdc0 	bl	8005448 <xTaskRemoveFromEventList>
 80048c8:	4603      	mov	r3, r0
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d007      	beq.n	80048de <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80048ce:	4b3d      	ldr	r3, [pc, #244]	; (80049c4 <xQueueReceive+0x1bc>)
 80048d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80048d4:	601a      	str	r2, [r3, #0]
 80048d6:	f3bf 8f4f 	dsb	sy
 80048da:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80048de:	f7ff fd21 	bl	8004324 <vPortExitCritical>
				return pdPASS;
 80048e2:	2301      	movs	r3, #1
 80048e4:	e069      	b.n	80049ba <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d103      	bne.n	80048f4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80048ec:	f7ff fd1a 	bl	8004324 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80048f0:	2300      	movs	r3, #0
 80048f2:	e062      	b.n	80049ba <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80048f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d106      	bne.n	8004908 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80048fa:	f107 0310 	add.w	r3, r7, #16
 80048fe:	4618      	mov	r0, r3
 8004900:	f000 fe04 	bl	800550c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004904:	2301      	movs	r3, #1
 8004906:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004908:	f7ff fd0c 	bl	8004324 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800490c:	f000 fbb4 	bl	8005078 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004910:	f7ff fcd8 	bl	80042c4 <vPortEnterCritical>
 8004914:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004916:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800491a:	b25b      	sxtb	r3, r3
 800491c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004920:	d103      	bne.n	800492a <xQueueReceive+0x122>
 8004922:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004924:	2200      	movs	r2, #0
 8004926:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800492a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800492c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004930:	b25b      	sxtb	r3, r3
 8004932:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004936:	d103      	bne.n	8004940 <xQueueReceive+0x138>
 8004938:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800493a:	2200      	movs	r2, #0
 800493c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004940:	f7ff fcf0 	bl	8004324 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004944:	1d3a      	adds	r2, r7, #4
 8004946:	f107 0310 	add.w	r3, r7, #16
 800494a:	4611      	mov	r1, r2
 800494c:	4618      	mov	r0, r3
 800494e:	f000 fdf3 	bl	8005538 <xTaskCheckForTimeOut>
 8004952:	4603      	mov	r3, r0
 8004954:	2b00      	cmp	r3, #0
 8004956:	d123      	bne.n	80049a0 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004958:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800495a:	f000 f917 	bl	8004b8c <prvIsQueueEmpty>
 800495e:	4603      	mov	r3, r0
 8004960:	2b00      	cmp	r3, #0
 8004962:	d017      	beq.n	8004994 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004964:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004966:	3324      	adds	r3, #36	; 0x24
 8004968:	687a      	ldr	r2, [r7, #4]
 800496a:	4611      	mov	r1, r2
 800496c:	4618      	mov	r0, r3
 800496e:	f000 fd47 	bl	8005400 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004972:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004974:	f000 f8b8 	bl	8004ae8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004978:	f000 fb8c 	bl	8005094 <xTaskResumeAll>
 800497c:	4603      	mov	r3, r0
 800497e:	2b00      	cmp	r3, #0
 8004980:	d189      	bne.n	8004896 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8004982:	4b10      	ldr	r3, [pc, #64]	; (80049c4 <xQueueReceive+0x1bc>)
 8004984:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004988:	601a      	str	r2, [r3, #0]
 800498a:	f3bf 8f4f 	dsb	sy
 800498e:	f3bf 8f6f 	isb	sy
 8004992:	e780      	b.n	8004896 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004994:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004996:	f000 f8a7 	bl	8004ae8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800499a:	f000 fb7b 	bl	8005094 <xTaskResumeAll>
 800499e:	e77a      	b.n	8004896 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80049a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80049a2:	f000 f8a1 	bl	8004ae8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80049a6:	f000 fb75 	bl	8005094 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80049aa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80049ac:	f000 f8ee 	bl	8004b8c <prvIsQueueEmpty>
 80049b0:	4603      	mov	r3, r0
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	f43f af6f 	beq.w	8004896 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80049b8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80049ba:	4618      	mov	r0, r3
 80049bc:	3730      	adds	r7, #48	; 0x30
 80049be:	46bd      	mov	sp, r7
 80049c0:	bd80      	pop	{r7, pc}
 80049c2:	bf00      	nop
 80049c4:	e000ed04 	.word	0xe000ed04

080049c8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80049c8:	b580      	push	{r7, lr}
 80049ca:	b086      	sub	sp, #24
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	60f8      	str	r0, [r7, #12]
 80049d0:	60b9      	str	r1, [r7, #8]
 80049d2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80049d4:	2300      	movs	r3, #0
 80049d6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049dc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d10d      	bne.n	8004a02 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d14d      	bne.n	8004a8a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	689b      	ldr	r3, [r3, #8]
 80049f2:	4618      	mov	r0, r3
 80049f4:	f000 ff06 	bl	8005804 <xTaskPriorityDisinherit>
 80049f8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	2200      	movs	r2, #0
 80049fe:	609a      	str	r2, [r3, #8]
 8004a00:	e043      	b.n	8004a8a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d119      	bne.n	8004a3c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	6858      	ldr	r0, [r3, #4]
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a10:	461a      	mov	r2, r3
 8004a12:	68b9      	ldr	r1, [r7, #8]
 8004a14:	f001 f80e 	bl	8005a34 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	685a      	ldr	r2, [r3, #4]
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a20:	441a      	add	r2, r3
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	685a      	ldr	r2, [r3, #4]
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	689b      	ldr	r3, [r3, #8]
 8004a2e:	429a      	cmp	r2, r3
 8004a30:	d32b      	bcc.n	8004a8a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	681a      	ldr	r2, [r3, #0]
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	605a      	str	r2, [r3, #4]
 8004a3a:	e026      	b.n	8004a8a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	68d8      	ldr	r0, [r3, #12]
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a44:	461a      	mov	r2, r3
 8004a46:	68b9      	ldr	r1, [r7, #8]
 8004a48:	f000 fff4 	bl	8005a34 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	68da      	ldr	r2, [r3, #12]
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a54:	425b      	negs	r3, r3
 8004a56:	441a      	add	r2, r3
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	68da      	ldr	r2, [r3, #12]
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	429a      	cmp	r2, r3
 8004a66:	d207      	bcs.n	8004a78 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	689a      	ldr	r2, [r3, #8]
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a70:	425b      	negs	r3, r3
 8004a72:	441a      	add	r2, r3
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2b02      	cmp	r3, #2
 8004a7c:	d105      	bne.n	8004a8a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004a7e:	693b      	ldr	r3, [r7, #16]
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d002      	beq.n	8004a8a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004a84:	693b      	ldr	r3, [r7, #16]
 8004a86:	3b01      	subs	r3, #1
 8004a88:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004a8a:	693b      	ldr	r3, [r7, #16]
 8004a8c:	1c5a      	adds	r2, r3, #1
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004a92:	697b      	ldr	r3, [r7, #20]
}
 8004a94:	4618      	mov	r0, r3
 8004a96:	3718      	adds	r7, #24
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	bd80      	pop	{r7, pc}

08004a9c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	b082      	sub	sp, #8
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
 8004aa4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d018      	beq.n	8004ae0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	68da      	ldr	r2, [r3, #12]
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ab6:	441a      	add	r2, r3
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	68da      	ldr	r2, [r3, #12]
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	689b      	ldr	r3, [r3, #8]
 8004ac4:	429a      	cmp	r2, r3
 8004ac6:	d303      	bcc.n	8004ad0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681a      	ldr	r2, [r3, #0]
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	68d9      	ldr	r1, [r3, #12]
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ad8:	461a      	mov	r2, r3
 8004ada:	6838      	ldr	r0, [r7, #0]
 8004adc:	f000 ffaa 	bl	8005a34 <memcpy>
	}
}
 8004ae0:	bf00      	nop
 8004ae2:	3708      	adds	r7, #8
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	bd80      	pop	{r7, pc}

08004ae8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b084      	sub	sp, #16
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004af0:	f7ff fbe8 	bl	80042c4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004afa:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004afc:	e011      	b.n	8004b22 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d012      	beq.n	8004b2c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	3324      	adds	r3, #36	; 0x24
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	f000 fc9c 	bl	8005448 <xTaskRemoveFromEventList>
 8004b10:	4603      	mov	r3, r0
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d001      	beq.n	8004b1a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004b16:	f000 fd71 	bl	80055fc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004b1a:	7bfb      	ldrb	r3, [r7, #15]
 8004b1c:	3b01      	subs	r3, #1
 8004b1e:	b2db      	uxtb	r3, r3
 8004b20:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004b22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	dce9      	bgt.n	8004afe <prvUnlockQueue+0x16>
 8004b2a:	e000      	b.n	8004b2e <prvUnlockQueue+0x46>
					break;
 8004b2c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	22ff      	movs	r2, #255	; 0xff
 8004b32:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004b36:	f7ff fbf5 	bl	8004324 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004b3a:	f7ff fbc3 	bl	80042c4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004b44:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004b46:	e011      	b.n	8004b6c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	691b      	ldr	r3, [r3, #16]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d012      	beq.n	8004b76 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	3310      	adds	r3, #16
 8004b54:	4618      	mov	r0, r3
 8004b56:	f000 fc77 	bl	8005448 <xTaskRemoveFromEventList>
 8004b5a:	4603      	mov	r3, r0
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d001      	beq.n	8004b64 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004b60:	f000 fd4c 	bl	80055fc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004b64:	7bbb      	ldrb	r3, [r7, #14]
 8004b66:	3b01      	subs	r3, #1
 8004b68:	b2db      	uxtb	r3, r3
 8004b6a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004b6c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	dce9      	bgt.n	8004b48 <prvUnlockQueue+0x60>
 8004b74:	e000      	b.n	8004b78 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004b76:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	22ff      	movs	r2, #255	; 0xff
 8004b7c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004b80:	f7ff fbd0 	bl	8004324 <vPortExitCritical>
}
 8004b84:	bf00      	nop
 8004b86:	3710      	adds	r7, #16
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	bd80      	pop	{r7, pc}

08004b8c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	b084      	sub	sp, #16
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004b94:	f7ff fb96 	bl	80042c4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d102      	bne.n	8004ba6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004ba0:	2301      	movs	r3, #1
 8004ba2:	60fb      	str	r3, [r7, #12]
 8004ba4:	e001      	b.n	8004baa <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004ba6:	2300      	movs	r3, #0
 8004ba8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004baa:	f7ff fbbb 	bl	8004324 <vPortExitCritical>

	return xReturn;
 8004bae:	68fb      	ldr	r3, [r7, #12]
}
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	3710      	adds	r7, #16
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	bd80      	pop	{r7, pc}

08004bb8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	b084      	sub	sp, #16
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004bc0:	f7ff fb80 	bl	80042c4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bcc:	429a      	cmp	r2, r3
 8004bce:	d102      	bne.n	8004bd6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004bd0:	2301      	movs	r3, #1
 8004bd2:	60fb      	str	r3, [r7, #12]
 8004bd4:	e001      	b.n	8004bda <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004bd6:	2300      	movs	r3, #0
 8004bd8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004bda:	f7ff fba3 	bl	8004324 <vPortExitCritical>

	return xReturn;
 8004bde:	68fb      	ldr	r3, [r7, #12]
}
 8004be0:	4618      	mov	r0, r3
 8004be2:	3710      	adds	r7, #16
 8004be4:	46bd      	mov	sp, r7
 8004be6:	bd80      	pop	{r7, pc}

08004be8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004be8:	b580      	push	{r7, lr}
 8004bea:	b08e      	sub	sp, #56	; 0x38
 8004bec:	af04      	add	r7, sp, #16
 8004bee:	60f8      	str	r0, [r7, #12]
 8004bf0:	60b9      	str	r1, [r7, #8]
 8004bf2:	607a      	str	r2, [r7, #4]
 8004bf4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004bf6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d10a      	bne.n	8004c12 <xTaskCreateStatic+0x2a>
	__asm volatile
 8004bfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c00:	f383 8811 	msr	BASEPRI, r3
 8004c04:	f3bf 8f6f 	isb	sy
 8004c08:	f3bf 8f4f 	dsb	sy
 8004c0c:	623b      	str	r3, [r7, #32]
}
 8004c0e:	bf00      	nop
 8004c10:	e7fe      	b.n	8004c10 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004c12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d10a      	bne.n	8004c2e <xTaskCreateStatic+0x46>
	__asm volatile
 8004c18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c1c:	f383 8811 	msr	BASEPRI, r3
 8004c20:	f3bf 8f6f 	isb	sy
 8004c24:	f3bf 8f4f 	dsb	sy
 8004c28:	61fb      	str	r3, [r7, #28]
}
 8004c2a:	bf00      	nop
 8004c2c:	e7fe      	b.n	8004c2c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004c2e:	23b4      	movs	r3, #180	; 0xb4
 8004c30:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004c32:	693b      	ldr	r3, [r7, #16]
 8004c34:	2bb4      	cmp	r3, #180	; 0xb4
 8004c36:	d00a      	beq.n	8004c4e <xTaskCreateStatic+0x66>
	__asm volatile
 8004c38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c3c:	f383 8811 	msr	BASEPRI, r3
 8004c40:	f3bf 8f6f 	isb	sy
 8004c44:	f3bf 8f4f 	dsb	sy
 8004c48:	61bb      	str	r3, [r7, #24]
}
 8004c4a:	bf00      	nop
 8004c4c:	e7fe      	b.n	8004c4c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004c4e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004c50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d01e      	beq.n	8004c94 <xTaskCreateStatic+0xac>
 8004c56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d01b      	beq.n	8004c94 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004c5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c5e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c62:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004c64:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c68:	2202      	movs	r2, #2
 8004c6a:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004c6e:	2300      	movs	r3, #0
 8004c70:	9303      	str	r3, [sp, #12]
 8004c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c74:	9302      	str	r3, [sp, #8]
 8004c76:	f107 0314 	add.w	r3, r7, #20
 8004c7a:	9301      	str	r3, [sp, #4]
 8004c7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c7e:	9300      	str	r3, [sp, #0]
 8004c80:	683b      	ldr	r3, [r7, #0]
 8004c82:	687a      	ldr	r2, [r7, #4]
 8004c84:	68b9      	ldr	r1, [r7, #8]
 8004c86:	68f8      	ldr	r0, [r7, #12]
 8004c88:	f000 f850 	bl	8004d2c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004c8c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004c8e:	f000 f8eb 	bl	8004e68 <prvAddNewTaskToReadyList>
 8004c92:	e001      	b.n	8004c98 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8004c94:	2300      	movs	r3, #0
 8004c96:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004c98:	697b      	ldr	r3, [r7, #20]
	}
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	3728      	adds	r7, #40	; 0x28
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	bd80      	pop	{r7, pc}

08004ca2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004ca2:	b580      	push	{r7, lr}
 8004ca4:	b08c      	sub	sp, #48	; 0x30
 8004ca6:	af04      	add	r7, sp, #16
 8004ca8:	60f8      	str	r0, [r7, #12]
 8004caa:	60b9      	str	r1, [r7, #8]
 8004cac:	603b      	str	r3, [r7, #0]
 8004cae:	4613      	mov	r3, r2
 8004cb0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004cb2:	88fb      	ldrh	r3, [r7, #6]
 8004cb4:	009b      	lsls	r3, r3, #2
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	f7fe ff36 	bl	8003b28 <pvPortMalloc>
 8004cbc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004cbe:	697b      	ldr	r3, [r7, #20]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d00e      	beq.n	8004ce2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004cc4:	20b4      	movs	r0, #180	; 0xb4
 8004cc6:	f7fe ff2f 	bl	8003b28 <pvPortMalloc>
 8004cca:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004ccc:	69fb      	ldr	r3, [r7, #28]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d003      	beq.n	8004cda <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004cd2:	69fb      	ldr	r3, [r7, #28]
 8004cd4:	697a      	ldr	r2, [r7, #20]
 8004cd6:	631a      	str	r2, [r3, #48]	; 0x30
 8004cd8:	e005      	b.n	8004ce6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004cda:	6978      	ldr	r0, [r7, #20]
 8004cdc:	f7fe fff0 	bl	8003cc0 <vPortFree>
 8004ce0:	e001      	b.n	8004ce6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004ce2:	2300      	movs	r3, #0
 8004ce4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004ce6:	69fb      	ldr	r3, [r7, #28]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d017      	beq.n	8004d1c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004cec:	69fb      	ldr	r3, [r7, #28]
 8004cee:	2200      	movs	r2, #0
 8004cf0:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004cf4:	88fa      	ldrh	r2, [r7, #6]
 8004cf6:	2300      	movs	r3, #0
 8004cf8:	9303      	str	r3, [sp, #12]
 8004cfa:	69fb      	ldr	r3, [r7, #28]
 8004cfc:	9302      	str	r3, [sp, #8]
 8004cfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d00:	9301      	str	r3, [sp, #4]
 8004d02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d04:	9300      	str	r3, [sp, #0]
 8004d06:	683b      	ldr	r3, [r7, #0]
 8004d08:	68b9      	ldr	r1, [r7, #8]
 8004d0a:	68f8      	ldr	r0, [r7, #12]
 8004d0c:	f000 f80e 	bl	8004d2c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004d10:	69f8      	ldr	r0, [r7, #28]
 8004d12:	f000 f8a9 	bl	8004e68 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004d16:	2301      	movs	r3, #1
 8004d18:	61bb      	str	r3, [r7, #24]
 8004d1a:	e002      	b.n	8004d22 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004d1c:	f04f 33ff 	mov.w	r3, #4294967295
 8004d20:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004d22:	69bb      	ldr	r3, [r7, #24]
	}
 8004d24:	4618      	mov	r0, r3
 8004d26:	3720      	adds	r7, #32
 8004d28:	46bd      	mov	sp, r7
 8004d2a:	bd80      	pop	{r7, pc}

08004d2c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	b088      	sub	sp, #32
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	60f8      	str	r0, [r7, #12]
 8004d34:	60b9      	str	r1, [r7, #8]
 8004d36:	607a      	str	r2, [r7, #4]
 8004d38:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004d3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d3c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004d3e:	6879      	ldr	r1, [r7, #4]
 8004d40:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8004d44:	440b      	add	r3, r1
 8004d46:	009b      	lsls	r3, r3, #2
 8004d48:	4413      	add	r3, r2
 8004d4a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004d4c:	69bb      	ldr	r3, [r7, #24]
 8004d4e:	f023 0307 	bic.w	r3, r3, #7
 8004d52:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004d54:	69bb      	ldr	r3, [r7, #24]
 8004d56:	f003 0307 	and.w	r3, r3, #7
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d00a      	beq.n	8004d74 <prvInitialiseNewTask+0x48>
	__asm volatile
 8004d5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d62:	f383 8811 	msr	BASEPRI, r3
 8004d66:	f3bf 8f6f 	isb	sy
 8004d6a:	f3bf 8f4f 	dsb	sy
 8004d6e:	617b      	str	r3, [r7, #20]
}
 8004d70:	bf00      	nop
 8004d72:	e7fe      	b.n	8004d72 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004d74:	68bb      	ldr	r3, [r7, #8]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d01f      	beq.n	8004dba <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	61fb      	str	r3, [r7, #28]
 8004d7e:	e012      	b.n	8004da6 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004d80:	68ba      	ldr	r2, [r7, #8]
 8004d82:	69fb      	ldr	r3, [r7, #28]
 8004d84:	4413      	add	r3, r2
 8004d86:	7819      	ldrb	r1, [r3, #0]
 8004d88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d8a:	69fb      	ldr	r3, [r7, #28]
 8004d8c:	4413      	add	r3, r2
 8004d8e:	3334      	adds	r3, #52	; 0x34
 8004d90:	460a      	mov	r2, r1
 8004d92:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004d94:	68ba      	ldr	r2, [r7, #8]
 8004d96:	69fb      	ldr	r3, [r7, #28]
 8004d98:	4413      	add	r3, r2
 8004d9a:	781b      	ldrb	r3, [r3, #0]
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d006      	beq.n	8004dae <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004da0:	69fb      	ldr	r3, [r7, #28]
 8004da2:	3301      	adds	r3, #1
 8004da4:	61fb      	str	r3, [r7, #28]
 8004da6:	69fb      	ldr	r3, [r7, #28]
 8004da8:	2b0f      	cmp	r3, #15
 8004daa:	d9e9      	bls.n	8004d80 <prvInitialiseNewTask+0x54>
 8004dac:	e000      	b.n	8004db0 <prvInitialiseNewTask+0x84>
			{
				break;
 8004dae:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004db0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004db2:	2200      	movs	r2, #0
 8004db4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004db8:	e003      	b.n	8004dc2 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004dba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004dc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dc4:	2b06      	cmp	r3, #6
 8004dc6:	d901      	bls.n	8004dcc <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004dc8:	2306      	movs	r3, #6
 8004dca:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004dcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004dd0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004dd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dd4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004dd6:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8004dd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dda:	2200      	movs	r2, #0
 8004ddc:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004dde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004de0:	3304      	adds	r3, #4
 8004de2:	4618      	mov	r0, r3
 8004de4:	f7ff f8aa 	bl	8003f3c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004de8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dea:	3318      	adds	r3, #24
 8004dec:	4618      	mov	r0, r3
 8004dee:	f7ff f8a5 	bl	8003f3c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004df2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004df4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004df6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004df8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dfa:	f1c3 0207 	rsb	r2, r3, #7
 8004dfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e00:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004e02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e06:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004e08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004e10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e12:	2200      	movs	r2, #0
 8004e14:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004e18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e1a:	334c      	adds	r3, #76	; 0x4c
 8004e1c:	2260      	movs	r2, #96	; 0x60
 8004e1e:	2100      	movs	r1, #0
 8004e20:	4618      	mov	r0, r3
 8004e22:	f000 fe15 	bl	8005a50 <memset>
 8004e26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e28:	4a0c      	ldr	r2, [pc, #48]	; (8004e5c <prvInitialiseNewTask+0x130>)
 8004e2a:	651a      	str	r2, [r3, #80]	; 0x50
 8004e2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e2e:	4a0c      	ldr	r2, [pc, #48]	; (8004e60 <prvInitialiseNewTask+0x134>)
 8004e30:	655a      	str	r2, [r3, #84]	; 0x54
 8004e32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e34:	4a0b      	ldr	r2, [pc, #44]	; (8004e64 <prvInitialiseNewTask+0x138>)
 8004e36:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004e38:	683a      	ldr	r2, [r7, #0]
 8004e3a:	68f9      	ldr	r1, [r7, #12]
 8004e3c:	69b8      	ldr	r0, [r7, #24]
 8004e3e:	f7ff f911 	bl	8004064 <pxPortInitialiseStack>
 8004e42:	4602      	mov	r2, r0
 8004e44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e46:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004e48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d002      	beq.n	8004e54 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004e4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e52:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004e54:	bf00      	nop
 8004e56:	3720      	adds	r7, #32
 8004e58:	46bd      	mov	sp, r7
 8004e5a:	bd80      	pop	{r7, pc}
 8004e5c:	0800640c 	.word	0x0800640c
 8004e60:	0800642c 	.word	0x0800642c
 8004e64:	080063ec 	.word	0x080063ec

08004e68 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	b082      	sub	sp, #8
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004e70:	f7ff fa28 	bl	80042c4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004e74:	4b2a      	ldr	r3, [pc, #168]	; (8004f20 <prvAddNewTaskToReadyList+0xb8>)
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	3301      	adds	r3, #1
 8004e7a:	4a29      	ldr	r2, [pc, #164]	; (8004f20 <prvAddNewTaskToReadyList+0xb8>)
 8004e7c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004e7e:	4b29      	ldr	r3, [pc, #164]	; (8004f24 <prvAddNewTaskToReadyList+0xbc>)
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d109      	bne.n	8004e9a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004e86:	4a27      	ldr	r2, [pc, #156]	; (8004f24 <prvAddNewTaskToReadyList+0xbc>)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004e8c:	4b24      	ldr	r3, [pc, #144]	; (8004f20 <prvAddNewTaskToReadyList+0xb8>)
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	2b01      	cmp	r3, #1
 8004e92:	d110      	bne.n	8004eb6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004e94:	f000 fbd6 	bl	8005644 <prvInitialiseTaskLists>
 8004e98:	e00d      	b.n	8004eb6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004e9a:	4b23      	ldr	r3, [pc, #140]	; (8004f28 <prvAddNewTaskToReadyList+0xc0>)
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d109      	bne.n	8004eb6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004ea2:	4b20      	ldr	r3, [pc, #128]	; (8004f24 <prvAddNewTaskToReadyList+0xbc>)
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eac:	429a      	cmp	r2, r3
 8004eae:	d802      	bhi.n	8004eb6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004eb0:	4a1c      	ldr	r2, [pc, #112]	; (8004f24 <prvAddNewTaskToReadyList+0xbc>)
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004eb6:	4b1d      	ldr	r3, [pc, #116]	; (8004f2c <prvAddNewTaskToReadyList+0xc4>)
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	3301      	adds	r3, #1
 8004ebc:	4a1b      	ldr	r2, [pc, #108]	; (8004f2c <prvAddNewTaskToReadyList+0xc4>)
 8004ebe:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ec4:	2201      	movs	r2, #1
 8004ec6:	409a      	lsls	r2, r3
 8004ec8:	4b19      	ldr	r3, [pc, #100]	; (8004f30 <prvAddNewTaskToReadyList+0xc8>)
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	4313      	orrs	r3, r2
 8004ece:	4a18      	ldr	r2, [pc, #96]	; (8004f30 <prvAddNewTaskToReadyList+0xc8>)
 8004ed0:	6013      	str	r3, [r2, #0]
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ed6:	4613      	mov	r3, r2
 8004ed8:	009b      	lsls	r3, r3, #2
 8004eda:	4413      	add	r3, r2
 8004edc:	009b      	lsls	r3, r3, #2
 8004ede:	4a15      	ldr	r2, [pc, #84]	; (8004f34 <prvAddNewTaskToReadyList+0xcc>)
 8004ee0:	441a      	add	r2, r3
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	3304      	adds	r3, #4
 8004ee6:	4619      	mov	r1, r3
 8004ee8:	4610      	mov	r0, r2
 8004eea:	f7ff f834 	bl	8003f56 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004eee:	f7ff fa19 	bl	8004324 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004ef2:	4b0d      	ldr	r3, [pc, #52]	; (8004f28 <prvAddNewTaskToReadyList+0xc0>)
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d00e      	beq.n	8004f18 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004efa:	4b0a      	ldr	r3, [pc, #40]	; (8004f24 <prvAddNewTaskToReadyList+0xbc>)
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f04:	429a      	cmp	r2, r3
 8004f06:	d207      	bcs.n	8004f18 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004f08:	4b0b      	ldr	r3, [pc, #44]	; (8004f38 <prvAddNewTaskToReadyList+0xd0>)
 8004f0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f0e:	601a      	str	r2, [r3, #0]
 8004f10:	f3bf 8f4f 	dsb	sy
 8004f14:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004f18:	bf00      	nop
 8004f1a:	3708      	adds	r7, #8
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	bd80      	pop	{r7, pc}
 8004f20:	24004078 	.word	0x24004078
 8004f24:	24003f78 	.word	0x24003f78
 8004f28:	24004084 	.word	0x24004084
 8004f2c:	24004094 	.word	0x24004094
 8004f30:	24004080 	.word	0x24004080
 8004f34:	24003f7c 	.word	0x24003f7c
 8004f38:	e000ed04 	.word	0xe000ed04

08004f3c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004f3c:	b580      	push	{r7, lr}
 8004f3e:	b084      	sub	sp, #16
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004f44:	2300      	movs	r3, #0
 8004f46:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d017      	beq.n	8004f7e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004f4e:	4b13      	ldr	r3, [pc, #76]	; (8004f9c <vTaskDelay+0x60>)
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d00a      	beq.n	8004f6c <vTaskDelay+0x30>
	__asm volatile
 8004f56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f5a:	f383 8811 	msr	BASEPRI, r3
 8004f5e:	f3bf 8f6f 	isb	sy
 8004f62:	f3bf 8f4f 	dsb	sy
 8004f66:	60bb      	str	r3, [r7, #8]
}
 8004f68:	bf00      	nop
 8004f6a:	e7fe      	b.n	8004f6a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004f6c:	f000 f884 	bl	8005078 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004f70:	2100      	movs	r1, #0
 8004f72:	6878      	ldr	r0, [r7, #4]
 8004f74:	f000 fccc 	bl	8005910 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004f78:	f000 f88c 	bl	8005094 <xTaskResumeAll>
 8004f7c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d107      	bne.n	8004f94 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8004f84:	4b06      	ldr	r3, [pc, #24]	; (8004fa0 <vTaskDelay+0x64>)
 8004f86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f8a:	601a      	str	r2, [r3, #0]
 8004f8c:	f3bf 8f4f 	dsb	sy
 8004f90:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004f94:	bf00      	nop
 8004f96:	3710      	adds	r7, #16
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	bd80      	pop	{r7, pc}
 8004f9c:	240040a0 	.word	0x240040a0
 8004fa0:	e000ed04 	.word	0xe000ed04

08004fa4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	b08a      	sub	sp, #40	; 0x28
 8004fa8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004faa:	2300      	movs	r3, #0
 8004fac:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004fae:	2300      	movs	r3, #0
 8004fb0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004fb2:	463a      	mov	r2, r7
 8004fb4:	1d39      	adds	r1, r7, #4
 8004fb6:	f107 0308 	add.w	r3, r7, #8
 8004fba:	4618      	mov	r0, r3
 8004fbc:	f7fb fa7a 	bl	80004b4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004fc0:	6839      	ldr	r1, [r7, #0]
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	68ba      	ldr	r2, [r7, #8]
 8004fc6:	9202      	str	r2, [sp, #8]
 8004fc8:	9301      	str	r3, [sp, #4]
 8004fca:	2300      	movs	r3, #0
 8004fcc:	9300      	str	r3, [sp, #0]
 8004fce:	2300      	movs	r3, #0
 8004fd0:	460a      	mov	r2, r1
 8004fd2:	4921      	ldr	r1, [pc, #132]	; (8005058 <vTaskStartScheduler+0xb4>)
 8004fd4:	4821      	ldr	r0, [pc, #132]	; (800505c <vTaskStartScheduler+0xb8>)
 8004fd6:	f7ff fe07 	bl	8004be8 <xTaskCreateStatic>
 8004fda:	4603      	mov	r3, r0
 8004fdc:	4a20      	ldr	r2, [pc, #128]	; (8005060 <vTaskStartScheduler+0xbc>)
 8004fde:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004fe0:	4b1f      	ldr	r3, [pc, #124]	; (8005060 <vTaskStartScheduler+0xbc>)
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d002      	beq.n	8004fee <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004fe8:	2301      	movs	r3, #1
 8004fea:	617b      	str	r3, [r7, #20]
 8004fec:	e001      	b.n	8004ff2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004fee:	2300      	movs	r3, #0
 8004ff0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004ff2:	697b      	ldr	r3, [r7, #20]
 8004ff4:	2b01      	cmp	r3, #1
 8004ff6:	d11b      	bne.n	8005030 <vTaskStartScheduler+0x8c>
	__asm volatile
 8004ff8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ffc:	f383 8811 	msr	BASEPRI, r3
 8005000:	f3bf 8f6f 	isb	sy
 8005004:	f3bf 8f4f 	dsb	sy
 8005008:	613b      	str	r3, [r7, #16]
}
 800500a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800500c:	4b15      	ldr	r3, [pc, #84]	; (8005064 <vTaskStartScheduler+0xc0>)
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	334c      	adds	r3, #76	; 0x4c
 8005012:	4a15      	ldr	r2, [pc, #84]	; (8005068 <vTaskStartScheduler+0xc4>)
 8005014:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005016:	4b15      	ldr	r3, [pc, #84]	; (800506c <vTaskStartScheduler+0xc8>)
 8005018:	f04f 32ff 	mov.w	r2, #4294967295
 800501c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800501e:	4b14      	ldr	r3, [pc, #80]	; (8005070 <vTaskStartScheduler+0xcc>)
 8005020:	2201      	movs	r2, #1
 8005022:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005024:	4b13      	ldr	r3, [pc, #76]	; (8005074 <vTaskStartScheduler+0xd0>)
 8005026:	2200      	movs	r2, #0
 8005028:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800502a:	f7ff f8a9 	bl	8004180 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800502e:	e00e      	b.n	800504e <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005030:	697b      	ldr	r3, [r7, #20]
 8005032:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005036:	d10a      	bne.n	800504e <vTaskStartScheduler+0xaa>
	__asm volatile
 8005038:	f04f 0350 	mov.w	r3, #80	; 0x50
 800503c:	f383 8811 	msr	BASEPRI, r3
 8005040:	f3bf 8f6f 	isb	sy
 8005044:	f3bf 8f4f 	dsb	sy
 8005048:	60fb      	str	r3, [r7, #12]
}
 800504a:	bf00      	nop
 800504c:	e7fe      	b.n	800504c <vTaskStartScheduler+0xa8>
}
 800504e:	bf00      	nop
 8005050:	3718      	adds	r7, #24
 8005052:	46bd      	mov	sp, r7
 8005054:	bd80      	pop	{r7, pc}
 8005056:	bf00      	nop
 8005058:	080063d4 	.word	0x080063d4
 800505c:	08005615 	.word	0x08005615
 8005060:	2400409c 	.word	0x2400409c
 8005064:	24003f78 	.word	0x24003f78
 8005068:	24000014 	.word	0x24000014
 800506c:	24004098 	.word	0x24004098
 8005070:	24004084 	.word	0x24004084
 8005074:	2400407c 	.word	0x2400407c

08005078 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005078:	b480      	push	{r7}
 800507a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800507c:	4b04      	ldr	r3, [pc, #16]	; (8005090 <vTaskSuspendAll+0x18>)
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	3301      	adds	r3, #1
 8005082:	4a03      	ldr	r2, [pc, #12]	; (8005090 <vTaskSuspendAll+0x18>)
 8005084:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005086:	bf00      	nop
 8005088:	46bd      	mov	sp, r7
 800508a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508e:	4770      	bx	lr
 8005090:	240040a0 	.word	0x240040a0

08005094 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005094:	b580      	push	{r7, lr}
 8005096:	b084      	sub	sp, #16
 8005098:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800509a:	2300      	movs	r3, #0
 800509c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800509e:	2300      	movs	r3, #0
 80050a0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80050a2:	4b41      	ldr	r3, [pc, #260]	; (80051a8 <xTaskResumeAll+0x114>)
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d10a      	bne.n	80050c0 <xTaskResumeAll+0x2c>
	__asm volatile
 80050aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050ae:	f383 8811 	msr	BASEPRI, r3
 80050b2:	f3bf 8f6f 	isb	sy
 80050b6:	f3bf 8f4f 	dsb	sy
 80050ba:	603b      	str	r3, [r7, #0]
}
 80050bc:	bf00      	nop
 80050be:	e7fe      	b.n	80050be <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80050c0:	f7ff f900 	bl	80042c4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80050c4:	4b38      	ldr	r3, [pc, #224]	; (80051a8 <xTaskResumeAll+0x114>)
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	3b01      	subs	r3, #1
 80050ca:	4a37      	ldr	r2, [pc, #220]	; (80051a8 <xTaskResumeAll+0x114>)
 80050cc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80050ce:	4b36      	ldr	r3, [pc, #216]	; (80051a8 <xTaskResumeAll+0x114>)
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d161      	bne.n	800519a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80050d6:	4b35      	ldr	r3, [pc, #212]	; (80051ac <xTaskResumeAll+0x118>)
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d05d      	beq.n	800519a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80050de:	e02e      	b.n	800513e <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80050e0:	4b33      	ldr	r3, [pc, #204]	; (80051b0 <xTaskResumeAll+0x11c>)
 80050e2:	68db      	ldr	r3, [r3, #12]
 80050e4:	68db      	ldr	r3, [r3, #12]
 80050e6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	3318      	adds	r3, #24
 80050ec:	4618      	mov	r0, r3
 80050ee:	f7fe ff8f 	bl	8004010 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	3304      	adds	r3, #4
 80050f6:	4618      	mov	r0, r3
 80050f8:	f7fe ff8a 	bl	8004010 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005100:	2201      	movs	r2, #1
 8005102:	409a      	lsls	r2, r3
 8005104:	4b2b      	ldr	r3, [pc, #172]	; (80051b4 <xTaskResumeAll+0x120>)
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	4313      	orrs	r3, r2
 800510a:	4a2a      	ldr	r2, [pc, #168]	; (80051b4 <xTaskResumeAll+0x120>)
 800510c:	6013      	str	r3, [r2, #0]
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005112:	4613      	mov	r3, r2
 8005114:	009b      	lsls	r3, r3, #2
 8005116:	4413      	add	r3, r2
 8005118:	009b      	lsls	r3, r3, #2
 800511a:	4a27      	ldr	r2, [pc, #156]	; (80051b8 <xTaskResumeAll+0x124>)
 800511c:	441a      	add	r2, r3
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	3304      	adds	r3, #4
 8005122:	4619      	mov	r1, r3
 8005124:	4610      	mov	r0, r2
 8005126:	f7fe ff16 	bl	8003f56 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800512e:	4b23      	ldr	r3, [pc, #140]	; (80051bc <xTaskResumeAll+0x128>)
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005134:	429a      	cmp	r2, r3
 8005136:	d302      	bcc.n	800513e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8005138:	4b21      	ldr	r3, [pc, #132]	; (80051c0 <xTaskResumeAll+0x12c>)
 800513a:	2201      	movs	r2, #1
 800513c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800513e:	4b1c      	ldr	r3, [pc, #112]	; (80051b0 <xTaskResumeAll+0x11c>)
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	2b00      	cmp	r3, #0
 8005144:	d1cc      	bne.n	80050e0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	2b00      	cmp	r3, #0
 800514a:	d001      	beq.n	8005150 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800514c:	f000 fb1c 	bl	8005788 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005150:	4b1c      	ldr	r3, [pc, #112]	; (80051c4 <xTaskResumeAll+0x130>)
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	2b00      	cmp	r3, #0
 800515a:	d010      	beq.n	800517e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800515c:	f000 f836 	bl	80051cc <xTaskIncrementTick>
 8005160:	4603      	mov	r3, r0
 8005162:	2b00      	cmp	r3, #0
 8005164:	d002      	beq.n	800516c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8005166:	4b16      	ldr	r3, [pc, #88]	; (80051c0 <xTaskResumeAll+0x12c>)
 8005168:	2201      	movs	r2, #1
 800516a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	3b01      	subs	r3, #1
 8005170:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	2b00      	cmp	r3, #0
 8005176:	d1f1      	bne.n	800515c <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8005178:	4b12      	ldr	r3, [pc, #72]	; (80051c4 <xTaskResumeAll+0x130>)
 800517a:	2200      	movs	r2, #0
 800517c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800517e:	4b10      	ldr	r3, [pc, #64]	; (80051c0 <xTaskResumeAll+0x12c>)
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	2b00      	cmp	r3, #0
 8005184:	d009      	beq.n	800519a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005186:	2301      	movs	r3, #1
 8005188:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800518a:	4b0f      	ldr	r3, [pc, #60]	; (80051c8 <xTaskResumeAll+0x134>)
 800518c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005190:	601a      	str	r2, [r3, #0]
 8005192:	f3bf 8f4f 	dsb	sy
 8005196:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800519a:	f7ff f8c3 	bl	8004324 <vPortExitCritical>

	return xAlreadyYielded;
 800519e:	68bb      	ldr	r3, [r7, #8]
}
 80051a0:	4618      	mov	r0, r3
 80051a2:	3710      	adds	r7, #16
 80051a4:	46bd      	mov	sp, r7
 80051a6:	bd80      	pop	{r7, pc}
 80051a8:	240040a0 	.word	0x240040a0
 80051ac:	24004078 	.word	0x24004078
 80051b0:	24004038 	.word	0x24004038
 80051b4:	24004080 	.word	0x24004080
 80051b8:	24003f7c 	.word	0x24003f7c
 80051bc:	24003f78 	.word	0x24003f78
 80051c0:	2400408c 	.word	0x2400408c
 80051c4:	24004088 	.word	0x24004088
 80051c8:	e000ed04 	.word	0xe000ed04

080051cc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80051cc:	b580      	push	{r7, lr}
 80051ce:	b086      	sub	sp, #24
 80051d0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80051d2:	2300      	movs	r3, #0
 80051d4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80051d6:	4b4e      	ldr	r3, [pc, #312]	; (8005310 <xTaskIncrementTick+0x144>)
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	2b00      	cmp	r3, #0
 80051dc:	f040 808e 	bne.w	80052fc <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80051e0:	4b4c      	ldr	r3, [pc, #304]	; (8005314 <xTaskIncrementTick+0x148>)
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	3301      	adds	r3, #1
 80051e6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80051e8:	4a4a      	ldr	r2, [pc, #296]	; (8005314 <xTaskIncrementTick+0x148>)
 80051ea:	693b      	ldr	r3, [r7, #16]
 80051ec:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80051ee:	693b      	ldr	r3, [r7, #16]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d120      	bne.n	8005236 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80051f4:	4b48      	ldr	r3, [pc, #288]	; (8005318 <xTaskIncrementTick+0x14c>)
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d00a      	beq.n	8005214 <xTaskIncrementTick+0x48>
	__asm volatile
 80051fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005202:	f383 8811 	msr	BASEPRI, r3
 8005206:	f3bf 8f6f 	isb	sy
 800520a:	f3bf 8f4f 	dsb	sy
 800520e:	603b      	str	r3, [r7, #0]
}
 8005210:	bf00      	nop
 8005212:	e7fe      	b.n	8005212 <xTaskIncrementTick+0x46>
 8005214:	4b40      	ldr	r3, [pc, #256]	; (8005318 <xTaskIncrementTick+0x14c>)
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	60fb      	str	r3, [r7, #12]
 800521a:	4b40      	ldr	r3, [pc, #256]	; (800531c <xTaskIncrementTick+0x150>)
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	4a3e      	ldr	r2, [pc, #248]	; (8005318 <xTaskIncrementTick+0x14c>)
 8005220:	6013      	str	r3, [r2, #0]
 8005222:	4a3e      	ldr	r2, [pc, #248]	; (800531c <xTaskIncrementTick+0x150>)
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	6013      	str	r3, [r2, #0]
 8005228:	4b3d      	ldr	r3, [pc, #244]	; (8005320 <xTaskIncrementTick+0x154>)
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	3301      	adds	r3, #1
 800522e:	4a3c      	ldr	r2, [pc, #240]	; (8005320 <xTaskIncrementTick+0x154>)
 8005230:	6013      	str	r3, [r2, #0]
 8005232:	f000 faa9 	bl	8005788 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005236:	4b3b      	ldr	r3, [pc, #236]	; (8005324 <xTaskIncrementTick+0x158>)
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	693a      	ldr	r2, [r7, #16]
 800523c:	429a      	cmp	r2, r3
 800523e:	d348      	bcc.n	80052d2 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005240:	4b35      	ldr	r3, [pc, #212]	; (8005318 <xTaskIncrementTick+0x14c>)
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	2b00      	cmp	r3, #0
 8005248:	d104      	bne.n	8005254 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800524a:	4b36      	ldr	r3, [pc, #216]	; (8005324 <xTaskIncrementTick+0x158>)
 800524c:	f04f 32ff 	mov.w	r2, #4294967295
 8005250:	601a      	str	r2, [r3, #0]
					break;
 8005252:	e03e      	b.n	80052d2 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005254:	4b30      	ldr	r3, [pc, #192]	; (8005318 <xTaskIncrementTick+0x14c>)
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	68db      	ldr	r3, [r3, #12]
 800525a:	68db      	ldr	r3, [r3, #12]
 800525c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800525e:	68bb      	ldr	r3, [r7, #8]
 8005260:	685b      	ldr	r3, [r3, #4]
 8005262:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005264:	693a      	ldr	r2, [r7, #16]
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	429a      	cmp	r2, r3
 800526a:	d203      	bcs.n	8005274 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800526c:	4a2d      	ldr	r2, [pc, #180]	; (8005324 <xTaskIncrementTick+0x158>)
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005272:	e02e      	b.n	80052d2 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005274:	68bb      	ldr	r3, [r7, #8]
 8005276:	3304      	adds	r3, #4
 8005278:	4618      	mov	r0, r3
 800527a:	f7fe fec9 	bl	8004010 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800527e:	68bb      	ldr	r3, [r7, #8]
 8005280:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005282:	2b00      	cmp	r3, #0
 8005284:	d004      	beq.n	8005290 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005286:	68bb      	ldr	r3, [r7, #8]
 8005288:	3318      	adds	r3, #24
 800528a:	4618      	mov	r0, r3
 800528c:	f7fe fec0 	bl	8004010 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005290:	68bb      	ldr	r3, [r7, #8]
 8005292:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005294:	2201      	movs	r2, #1
 8005296:	409a      	lsls	r2, r3
 8005298:	4b23      	ldr	r3, [pc, #140]	; (8005328 <xTaskIncrementTick+0x15c>)
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	4313      	orrs	r3, r2
 800529e:	4a22      	ldr	r2, [pc, #136]	; (8005328 <xTaskIncrementTick+0x15c>)
 80052a0:	6013      	str	r3, [r2, #0]
 80052a2:	68bb      	ldr	r3, [r7, #8]
 80052a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052a6:	4613      	mov	r3, r2
 80052a8:	009b      	lsls	r3, r3, #2
 80052aa:	4413      	add	r3, r2
 80052ac:	009b      	lsls	r3, r3, #2
 80052ae:	4a1f      	ldr	r2, [pc, #124]	; (800532c <xTaskIncrementTick+0x160>)
 80052b0:	441a      	add	r2, r3
 80052b2:	68bb      	ldr	r3, [r7, #8]
 80052b4:	3304      	adds	r3, #4
 80052b6:	4619      	mov	r1, r3
 80052b8:	4610      	mov	r0, r2
 80052ba:	f7fe fe4c 	bl	8003f56 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80052be:	68bb      	ldr	r3, [r7, #8]
 80052c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052c2:	4b1b      	ldr	r3, [pc, #108]	; (8005330 <xTaskIncrementTick+0x164>)
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052c8:	429a      	cmp	r2, r3
 80052ca:	d3b9      	bcc.n	8005240 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80052cc:	2301      	movs	r3, #1
 80052ce:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80052d0:	e7b6      	b.n	8005240 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80052d2:	4b17      	ldr	r3, [pc, #92]	; (8005330 <xTaskIncrementTick+0x164>)
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052d8:	4914      	ldr	r1, [pc, #80]	; (800532c <xTaskIncrementTick+0x160>)
 80052da:	4613      	mov	r3, r2
 80052dc:	009b      	lsls	r3, r3, #2
 80052de:	4413      	add	r3, r2
 80052e0:	009b      	lsls	r3, r3, #2
 80052e2:	440b      	add	r3, r1
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	2b01      	cmp	r3, #1
 80052e8:	d901      	bls.n	80052ee <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 80052ea:	2301      	movs	r3, #1
 80052ec:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80052ee:	4b11      	ldr	r3, [pc, #68]	; (8005334 <xTaskIncrementTick+0x168>)
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d007      	beq.n	8005306 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80052f6:	2301      	movs	r3, #1
 80052f8:	617b      	str	r3, [r7, #20]
 80052fa:	e004      	b.n	8005306 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80052fc:	4b0e      	ldr	r3, [pc, #56]	; (8005338 <xTaskIncrementTick+0x16c>)
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	3301      	adds	r3, #1
 8005302:	4a0d      	ldr	r2, [pc, #52]	; (8005338 <xTaskIncrementTick+0x16c>)
 8005304:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005306:	697b      	ldr	r3, [r7, #20]
}
 8005308:	4618      	mov	r0, r3
 800530a:	3718      	adds	r7, #24
 800530c:	46bd      	mov	sp, r7
 800530e:	bd80      	pop	{r7, pc}
 8005310:	240040a0 	.word	0x240040a0
 8005314:	2400407c 	.word	0x2400407c
 8005318:	24004030 	.word	0x24004030
 800531c:	24004034 	.word	0x24004034
 8005320:	24004090 	.word	0x24004090
 8005324:	24004098 	.word	0x24004098
 8005328:	24004080 	.word	0x24004080
 800532c:	24003f7c 	.word	0x24003f7c
 8005330:	24003f78 	.word	0x24003f78
 8005334:	2400408c 	.word	0x2400408c
 8005338:	24004088 	.word	0x24004088

0800533c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800533c:	b480      	push	{r7}
 800533e:	b087      	sub	sp, #28
 8005340:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005342:	4b29      	ldr	r3, [pc, #164]	; (80053e8 <vTaskSwitchContext+0xac>)
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	2b00      	cmp	r3, #0
 8005348:	d003      	beq.n	8005352 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800534a:	4b28      	ldr	r3, [pc, #160]	; (80053ec <vTaskSwitchContext+0xb0>)
 800534c:	2201      	movs	r2, #1
 800534e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005350:	e044      	b.n	80053dc <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8005352:	4b26      	ldr	r3, [pc, #152]	; (80053ec <vTaskSwitchContext+0xb0>)
 8005354:	2200      	movs	r2, #0
 8005356:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005358:	4b25      	ldr	r3, [pc, #148]	; (80053f0 <vTaskSwitchContext+0xb4>)
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	fab3 f383 	clz	r3, r3
 8005364:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8005366:	7afb      	ldrb	r3, [r7, #11]
 8005368:	f1c3 031f 	rsb	r3, r3, #31
 800536c:	617b      	str	r3, [r7, #20]
 800536e:	4921      	ldr	r1, [pc, #132]	; (80053f4 <vTaskSwitchContext+0xb8>)
 8005370:	697a      	ldr	r2, [r7, #20]
 8005372:	4613      	mov	r3, r2
 8005374:	009b      	lsls	r3, r3, #2
 8005376:	4413      	add	r3, r2
 8005378:	009b      	lsls	r3, r3, #2
 800537a:	440b      	add	r3, r1
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	2b00      	cmp	r3, #0
 8005380:	d10a      	bne.n	8005398 <vTaskSwitchContext+0x5c>
	__asm volatile
 8005382:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005386:	f383 8811 	msr	BASEPRI, r3
 800538a:	f3bf 8f6f 	isb	sy
 800538e:	f3bf 8f4f 	dsb	sy
 8005392:	607b      	str	r3, [r7, #4]
}
 8005394:	bf00      	nop
 8005396:	e7fe      	b.n	8005396 <vTaskSwitchContext+0x5a>
 8005398:	697a      	ldr	r2, [r7, #20]
 800539a:	4613      	mov	r3, r2
 800539c:	009b      	lsls	r3, r3, #2
 800539e:	4413      	add	r3, r2
 80053a0:	009b      	lsls	r3, r3, #2
 80053a2:	4a14      	ldr	r2, [pc, #80]	; (80053f4 <vTaskSwitchContext+0xb8>)
 80053a4:	4413      	add	r3, r2
 80053a6:	613b      	str	r3, [r7, #16]
 80053a8:	693b      	ldr	r3, [r7, #16]
 80053aa:	685b      	ldr	r3, [r3, #4]
 80053ac:	685a      	ldr	r2, [r3, #4]
 80053ae:	693b      	ldr	r3, [r7, #16]
 80053b0:	605a      	str	r2, [r3, #4]
 80053b2:	693b      	ldr	r3, [r7, #16]
 80053b4:	685a      	ldr	r2, [r3, #4]
 80053b6:	693b      	ldr	r3, [r7, #16]
 80053b8:	3308      	adds	r3, #8
 80053ba:	429a      	cmp	r2, r3
 80053bc:	d104      	bne.n	80053c8 <vTaskSwitchContext+0x8c>
 80053be:	693b      	ldr	r3, [r7, #16]
 80053c0:	685b      	ldr	r3, [r3, #4]
 80053c2:	685a      	ldr	r2, [r3, #4]
 80053c4:	693b      	ldr	r3, [r7, #16]
 80053c6:	605a      	str	r2, [r3, #4]
 80053c8:	693b      	ldr	r3, [r7, #16]
 80053ca:	685b      	ldr	r3, [r3, #4]
 80053cc:	68db      	ldr	r3, [r3, #12]
 80053ce:	4a0a      	ldr	r2, [pc, #40]	; (80053f8 <vTaskSwitchContext+0xbc>)
 80053d0:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80053d2:	4b09      	ldr	r3, [pc, #36]	; (80053f8 <vTaskSwitchContext+0xbc>)
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	334c      	adds	r3, #76	; 0x4c
 80053d8:	4a08      	ldr	r2, [pc, #32]	; (80053fc <vTaskSwitchContext+0xc0>)
 80053da:	6013      	str	r3, [r2, #0]
}
 80053dc:	bf00      	nop
 80053de:	371c      	adds	r7, #28
 80053e0:	46bd      	mov	sp, r7
 80053e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e6:	4770      	bx	lr
 80053e8:	240040a0 	.word	0x240040a0
 80053ec:	2400408c 	.word	0x2400408c
 80053f0:	24004080 	.word	0x24004080
 80053f4:	24003f7c 	.word	0x24003f7c
 80053f8:	24003f78 	.word	0x24003f78
 80053fc:	24000014 	.word	0x24000014

08005400 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005400:	b580      	push	{r7, lr}
 8005402:	b084      	sub	sp, #16
 8005404:	af00      	add	r7, sp, #0
 8005406:	6078      	str	r0, [r7, #4]
 8005408:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	2b00      	cmp	r3, #0
 800540e:	d10a      	bne.n	8005426 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8005410:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005414:	f383 8811 	msr	BASEPRI, r3
 8005418:	f3bf 8f6f 	isb	sy
 800541c:	f3bf 8f4f 	dsb	sy
 8005420:	60fb      	str	r3, [r7, #12]
}
 8005422:	bf00      	nop
 8005424:	e7fe      	b.n	8005424 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005426:	4b07      	ldr	r3, [pc, #28]	; (8005444 <vTaskPlaceOnEventList+0x44>)
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	3318      	adds	r3, #24
 800542c:	4619      	mov	r1, r3
 800542e:	6878      	ldr	r0, [r7, #4]
 8005430:	f7fe fdb5 	bl	8003f9e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005434:	2101      	movs	r1, #1
 8005436:	6838      	ldr	r0, [r7, #0]
 8005438:	f000 fa6a 	bl	8005910 <prvAddCurrentTaskToDelayedList>
}
 800543c:	bf00      	nop
 800543e:	3710      	adds	r7, #16
 8005440:	46bd      	mov	sp, r7
 8005442:	bd80      	pop	{r7, pc}
 8005444:	24003f78 	.word	0x24003f78

08005448 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005448:	b580      	push	{r7, lr}
 800544a:	b086      	sub	sp, #24
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	68db      	ldr	r3, [r3, #12]
 8005454:	68db      	ldr	r3, [r3, #12]
 8005456:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005458:	693b      	ldr	r3, [r7, #16]
 800545a:	2b00      	cmp	r3, #0
 800545c:	d10a      	bne.n	8005474 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800545e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005462:	f383 8811 	msr	BASEPRI, r3
 8005466:	f3bf 8f6f 	isb	sy
 800546a:	f3bf 8f4f 	dsb	sy
 800546e:	60fb      	str	r3, [r7, #12]
}
 8005470:	bf00      	nop
 8005472:	e7fe      	b.n	8005472 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005474:	693b      	ldr	r3, [r7, #16]
 8005476:	3318      	adds	r3, #24
 8005478:	4618      	mov	r0, r3
 800547a:	f7fe fdc9 	bl	8004010 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800547e:	4b1d      	ldr	r3, [pc, #116]	; (80054f4 <xTaskRemoveFromEventList+0xac>)
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	2b00      	cmp	r3, #0
 8005484:	d11c      	bne.n	80054c0 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005486:	693b      	ldr	r3, [r7, #16]
 8005488:	3304      	adds	r3, #4
 800548a:	4618      	mov	r0, r3
 800548c:	f7fe fdc0 	bl	8004010 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005490:	693b      	ldr	r3, [r7, #16]
 8005492:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005494:	2201      	movs	r2, #1
 8005496:	409a      	lsls	r2, r3
 8005498:	4b17      	ldr	r3, [pc, #92]	; (80054f8 <xTaskRemoveFromEventList+0xb0>)
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	4313      	orrs	r3, r2
 800549e:	4a16      	ldr	r2, [pc, #88]	; (80054f8 <xTaskRemoveFromEventList+0xb0>)
 80054a0:	6013      	str	r3, [r2, #0]
 80054a2:	693b      	ldr	r3, [r7, #16]
 80054a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054a6:	4613      	mov	r3, r2
 80054a8:	009b      	lsls	r3, r3, #2
 80054aa:	4413      	add	r3, r2
 80054ac:	009b      	lsls	r3, r3, #2
 80054ae:	4a13      	ldr	r2, [pc, #76]	; (80054fc <xTaskRemoveFromEventList+0xb4>)
 80054b0:	441a      	add	r2, r3
 80054b2:	693b      	ldr	r3, [r7, #16]
 80054b4:	3304      	adds	r3, #4
 80054b6:	4619      	mov	r1, r3
 80054b8:	4610      	mov	r0, r2
 80054ba:	f7fe fd4c 	bl	8003f56 <vListInsertEnd>
 80054be:	e005      	b.n	80054cc <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80054c0:	693b      	ldr	r3, [r7, #16]
 80054c2:	3318      	adds	r3, #24
 80054c4:	4619      	mov	r1, r3
 80054c6:	480e      	ldr	r0, [pc, #56]	; (8005500 <xTaskRemoveFromEventList+0xb8>)
 80054c8:	f7fe fd45 	bl	8003f56 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80054cc:	693b      	ldr	r3, [r7, #16]
 80054ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054d0:	4b0c      	ldr	r3, [pc, #48]	; (8005504 <xTaskRemoveFromEventList+0xbc>)
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054d6:	429a      	cmp	r2, r3
 80054d8:	d905      	bls.n	80054e6 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80054da:	2301      	movs	r3, #1
 80054dc:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80054de:	4b0a      	ldr	r3, [pc, #40]	; (8005508 <xTaskRemoveFromEventList+0xc0>)
 80054e0:	2201      	movs	r2, #1
 80054e2:	601a      	str	r2, [r3, #0]
 80054e4:	e001      	b.n	80054ea <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 80054e6:	2300      	movs	r3, #0
 80054e8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80054ea:	697b      	ldr	r3, [r7, #20]
}
 80054ec:	4618      	mov	r0, r3
 80054ee:	3718      	adds	r7, #24
 80054f0:	46bd      	mov	sp, r7
 80054f2:	bd80      	pop	{r7, pc}
 80054f4:	240040a0 	.word	0x240040a0
 80054f8:	24004080 	.word	0x24004080
 80054fc:	24003f7c 	.word	0x24003f7c
 8005500:	24004038 	.word	0x24004038
 8005504:	24003f78 	.word	0x24003f78
 8005508:	2400408c 	.word	0x2400408c

0800550c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800550c:	b480      	push	{r7}
 800550e:	b083      	sub	sp, #12
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005514:	4b06      	ldr	r3, [pc, #24]	; (8005530 <vTaskInternalSetTimeOutState+0x24>)
 8005516:	681a      	ldr	r2, [r3, #0]
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800551c:	4b05      	ldr	r3, [pc, #20]	; (8005534 <vTaskInternalSetTimeOutState+0x28>)
 800551e:	681a      	ldr	r2, [r3, #0]
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	605a      	str	r2, [r3, #4]
}
 8005524:	bf00      	nop
 8005526:	370c      	adds	r7, #12
 8005528:	46bd      	mov	sp, r7
 800552a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552e:	4770      	bx	lr
 8005530:	24004090 	.word	0x24004090
 8005534:	2400407c 	.word	0x2400407c

08005538 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005538:	b580      	push	{r7, lr}
 800553a:	b088      	sub	sp, #32
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
 8005540:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	2b00      	cmp	r3, #0
 8005546:	d10a      	bne.n	800555e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8005548:	f04f 0350 	mov.w	r3, #80	; 0x50
 800554c:	f383 8811 	msr	BASEPRI, r3
 8005550:	f3bf 8f6f 	isb	sy
 8005554:	f3bf 8f4f 	dsb	sy
 8005558:	613b      	str	r3, [r7, #16]
}
 800555a:	bf00      	nop
 800555c:	e7fe      	b.n	800555c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800555e:	683b      	ldr	r3, [r7, #0]
 8005560:	2b00      	cmp	r3, #0
 8005562:	d10a      	bne.n	800557a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8005564:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005568:	f383 8811 	msr	BASEPRI, r3
 800556c:	f3bf 8f6f 	isb	sy
 8005570:	f3bf 8f4f 	dsb	sy
 8005574:	60fb      	str	r3, [r7, #12]
}
 8005576:	bf00      	nop
 8005578:	e7fe      	b.n	8005578 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800557a:	f7fe fea3 	bl	80042c4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800557e:	4b1d      	ldr	r3, [pc, #116]	; (80055f4 <xTaskCheckForTimeOut+0xbc>)
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	685b      	ldr	r3, [r3, #4]
 8005588:	69ba      	ldr	r2, [r7, #24]
 800558a:	1ad3      	subs	r3, r2, r3
 800558c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800558e:	683b      	ldr	r3, [r7, #0]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005596:	d102      	bne.n	800559e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005598:	2300      	movs	r3, #0
 800559a:	61fb      	str	r3, [r7, #28]
 800559c:	e023      	b.n	80055e6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681a      	ldr	r2, [r3, #0]
 80055a2:	4b15      	ldr	r3, [pc, #84]	; (80055f8 <xTaskCheckForTimeOut+0xc0>)
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	429a      	cmp	r2, r3
 80055a8:	d007      	beq.n	80055ba <xTaskCheckForTimeOut+0x82>
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	685b      	ldr	r3, [r3, #4]
 80055ae:	69ba      	ldr	r2, [r7, #24]
 80055b0:	429a      	cmp	r2, r3
 80055b2:	d302      	bcc.n	80055ba <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80055b4:	2301      	movs	r3, #1
 80055b6:	61fb      	str	r3, [r7, #28]
 80055b8:	e015      	b.n	80055e6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80055ba:	683b      	ldr	r3, [r7, #0]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	697a      	ldr	r2, [r7, #20]
 80055c0:	429a      	cmp	r2, r3
 80055c2:	d20b      	bcs.n	80055dc <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80055c4:	683b      	ldr	r3, [r7, #0]
 80055c6:	681a      	ldr	r2, [r3, #0]
 80055c8:	697b      	ldr	r3, [r7, #20]
 80055ca:	1ad2      	subs	r2, r2, r3
 80055cc:	683b      	ldr	r3, [r7, #0]
 80055ce:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80055d0:	6878      	ldr	r0, [r7, #4]
 80055d2:	f7ff ff9b 	bl	800550c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80055d6:	2300      	movs	r3, #0
 80055d8:	61fb      	str	r3, [r7, #28]
 80055da:	e004      	b.n	80055e6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80055dc:	683b      	ldr	r3, [r7, #0]
 80055de:	2200      	movs	r2, #0
 80055e0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80055e2:	2301      	movs	r3, #1
 80055e4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80055e6:	f7fe fe9d 	bl	8004324 <vPortExitCritical>

	return xReturn;
 80055ea:	69fb      	ldr	r3, [r7, #28]
}
 80055ec:	4618      	mov	r0, r3
 80055ee:	3720      	adds	r7, #32
 80055f0:	46bd      	mov	sp, r7
 80055f2:	bd80      	pop	{r7, pc}
 80055f4:	2400407c 	.word	0x2400407c
 80055f8:	24004090 	.word	0x24004090

080055fc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80055fc:	b480      	push	{r7}
 80055fe:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005600:	4b03      	ldr	r3, [pc, #12]	; (8005610 <vTaskMissedYield+0x14>)
 8005602:	2201      	movs	r2, #1
 8005604:	601a      	str	r2, [r3, #0]
}
 8005606:	bf00      	nop
 8005608:	46bd      	mov	sp, r7
 800560a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560e:	4770      	bx	lr
 8005610:	2400408c 	.word	0x2400408c

08005614 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005614:	b580      	push	{r7, lr}
 8005616:	b082      	sub	sp, #8
 8005618:	af00      	add	r7, sp, #0
 800561a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800561c:	f000 f852 	bl	80056c4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005620:	4b06      	ldr	r3, [pc, #24]	; (800563c <prvIdleTask+0x28>)
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	2b01      	cmp	r3, #1
 8005626:	d9f9      	bls.n	800561c <prvIdleTask+0x8>
			{
				taskYIELD();
 8005628:	4b05      	ldr	r3, [pc, #20]	; (8005640 <prvIdleTask+0x2c>)
 800562a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800562e:	601a      	str	r2, [r3, #0]
 8005630:	f3bf 8f4f 	dsb	sy
 8005634:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005638:	e7f0      	b.n	800561c <prvIdleTask+0x8>
 800563a:	bf00      	nop
 800563c:	24003f7c 	.word	0x24003f7c
 8005640:	e000ed04 	.word	0xe000ed04

08005644 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005644:	b580      	push	{r7, lr}
 8005646:	b082      	sub	sp, #8
 8005648:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800564a:	2300      	movs	r3, #0
 800564c:	607b      	str	r3, [r7, #4]
 800564e:	e00c      	b.n	800566a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005650:	687a      	ldr	r2, [r7, #4]
 8005652:	4613      	mov	r3, r2
 8005654:	009b      	lsls	r3, r3, #2
 8005656:	4413      	add	r3, r2
 8005658:	009b      	lsls	r3, r3, #2
 800565a:	4a12      	ldr	r2, [pc, #72]	; (80056a4 <prvInitialiseTaskLists+0x60>)
 800565c:	4413      	add	r3, r2
 800565e:	4618      	mov	r0, r3
 8005660:	f7fe fc4c 	bl	8003efc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	3301      	adds	r3, #1
 8005668:	607b      	str	r3, [r7, #4]
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	2b06      	cmp	r3, #6
 800566e:	d9ef      	bls.n	8005650 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005670:	480d      	ldr	r0, [pc, #52]	; (80056a8 <prvInitialiseTaskLists+0x64>)
 8005672:	f7fe fc43 	bl	8003efc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005676:	480d      	ldr	r0, [pc, #52]	; (80056ac <prvInitialiseTaskLists+0x68>)
 8005678:	f7fe fc40 	bl	8003efc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800567c:	480c      	ldr	r0, [pc, #48]	; (80056b0 <prvInitialiseTaskLists+0x6c>)
 800567e:	f7fe fc3d 	bl	8003efc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005682:	480c      	ldr	r0, [pc, #48]	; (80056b4 <prvInitialiseTaskLists+0x70>)
 8005684:	f7fe fc3a 	bl	8003efc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005688:	480b      	ldr	r0, [pc, #44]	; (80056b8 <prvInitialiseTaskLists+0x74>)
 800568a:	f7fe fc37 	bl	8003efc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800568e:	4b0b      	ldr	r3, [pc, #44]	; (80056bc <prvInitialiseTaskLists+0x78>)
 8005690:	4a05      	ldr	r2, [pc, #20]	; (80056a8 <prvInitialiseTaskLists+0x64>)
 8005692:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005694:	4b0a      	ldr	r3, [pc, #40]	; (80056c0 <prvInitialiseTaskLists+0x7c>)
 8005696:	4a05      	ldr	r2, [pc, #20]	; (80056ac <prvInitialiseTaskLists+0x68>)
 8005698:	601a      	str	r2, [r3, #0]
}
 800569a:	bf00      	nop
 800569c:	3708      	adds	r7, #8
 800569e:	46bd      	mov	sp, r7
 80056a0:	bd80      	pop	{r7, pc}
 80056a2:	bf00      	nop
 80056a4:	24003f7c 	.word	0x24003f7c
 80056a8:	24004008 	.word	0x24004008
 80056ac:	2400401c 	.word	0x2400401c
 80056b0:	24004038 	.word	0x24004038
 80056b4:	2400404c 	.word	0x2400404c
 80056b8:	24004064 	.word	0x24004064
 80056bc:	24004030 	.word	0x24004030
 80056c0:	24004034 	.word	0x24004034

080056c4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80056c4:	b580      	push	{r7, lr}
 80056c6:	b082      	sub	sp, #8
 80056c8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80056ca:	e019      	b.n	8005700 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80056cc:	f7fe fdfa 	bl	80042c4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80056d0:	4b10      	ldr	r3, [pc, #64]	; (8005714 <prvCheckTasksWaitingTermination+0x50>)
 80056d2:	68db      	ldr	r3, [r3, #12]
 80056d4:	68db      	ldr	r3, [r3, #12]
 80056d6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	3304      	adds	r3, #4
 80056dc:	4618      	mov	r0, r3
 80056de:	f7fe fc97 	bl	8004010 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80056e2:	4b0d      	ldr	r3, [pc, #52]	; (8005718 <prvCheckTasksWaitingTermination+0x54>)
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	3b01      	subs	r3, #1
 80056e8:	4a0b      	ldr	r2, [pc, #44]	; (8005718 <prvCheckTasksWaitingTermination+0x54>)
 80056ea:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80056ec:	4b0b      	ldr	r3, [pc, #44]	; (800571c <prvCheckTasksWaitingTermination+0x58>)
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	3b01      	subs	r3, #1
 80056f2:	4a0a      	ldr	r2, [pc, #40]	; (800571c <prvCheckTasksWaitingTermination+0x58>)
 80056f4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80056f6:	f7fe fe15 	bl	8004324 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80056fa:	6878      	ldr	r0, [r7, #4]
 80056fc:	f000 f810 	bl	8005720 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005700:	4b06      	ldr	r3, [pc, #24]	; (800571c <prvCheckTasksWaitingTermination+0x58>)
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	2b00      	cmp	r3, #0
 8005706:	d1e1      	bne.n	80056cc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005708:	bf00      	nop
 800570a:	bf00      	nop
 800570c:	3708      	adds	r7, #8
 800570e:	46bd      	mov	sp, r7
 8005710:	bd80      	pop	{r7, pc}
 8005712:	bf00      	nop
 8005714:	2400404c 	.word	0x2400404c
 8005718:	24004078 	.word	0x24004078
 800571c:	24004060 	.word	0x24004060

08005720 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005720:	b580      	push	{r7, lr}
 8005722:	b084      	sub	sp, #16
 8005724:	af00      	add	r7, sp, #0
 8005726:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	334c      	adds	r3, #76	; 0x4c
 800572c:	4618      	mov	r0, r3
 800572e:	f000 f9ff 	bl	8005b30 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8005738:	2b00      	cmp	r3, #0
 800573a:	d108      	bne.n	800574e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005740:	4618      	mov	r0, r3
 8005742:	f7fe fabd 	bl	8003cc0 <vPortFree>
				vPortFree( pxTCB );
 8005746:	6878      	ldr	r0, [r7, #4]
 8005748:	f7fe faba 	bl	8003cc0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800574c:	e018      	b.n	8005780 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8005754:	2b01      	cmp	r3, #1
 8005756:	d103      	bne.n	8005760 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8005758:	6878      	ldr	r0, [r7, #4]
 800575a:	f7fe fab1 	bl	8003cc0 <vPortFree>
	}
 800575e:	e00f      	b.n	8005780 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8005766:	2b02      	cmp	r3, #2
 8005768:	d00a      	beq.n	8005780 <prvDeleteTCB+0x60>
	__asm volatile
 800576a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800576e:	f383 8811 	msr	BASEPRI, r3
 8005772:	f3bf 8f6f 	isb	sy
 8005776:	f3bf 8f4f 	dsb	sy
 800577a:	60fb      	str	r3, [r7, #12]
}
 800577c:	bf00      	nop
 800577e:	e7fe      	b.n	800577e <prvDeleteTCB+0x5e>
	}
 8005780:	bf00      	nop
 8005782:	3710      	adds	r7, #16
 8005784:	46bd      	mov	sp, r7
 8005786:	bd80      	pop	{r7, pc}

08005788 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005788:	b480      	push	{r7}
 800578a:	b083      	sub	sp, #12
 800578c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800578e:	4b0c      	ldr	r3, [pc, #48]	; (80057c0 <prvResetNextTaskUnblockTime+0x38>)
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	2b00      	cmp	r3, #0
 8005796:	d104      	bne.n	80057a2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005798:	4b0a      	ldr	r3, [pc, #40]	; (80057c4 <prvResetNextTaskUnblockTime+0x3c>)
 800579a:	f04f 32ff 	mov.w	r2, #4294967295
 800579e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80057a0:	e008      	b.n	80057b4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80057a2:	4b07      	ldr	r3, [pc, #28]	; (80057c0 <prvResetNextTaskUnblockTime+0x38>)
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	68db      	ldr	r3, [r3, #12]
 80057a8:	68db      	ldr	r3, [r3, #12]
 80057aa:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	685b      	ldr	r3, [r3, #4]
 80057b0:	4a04      	ldr	r2, [pc, #16]	; (80057c4 <prvResetNextTaskUnblockTime+0x3c>)
 80057b2:	6013      	str	r3, [r2, #0]
}
 80057b4:	bf00      	nop
 80057b6:	370c      	adds	r7, #12
 80057b8:	46bd      	mov	sp, r7
 80057ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057be:	4770      	bx	lr
 80057c0:	24004030 	.word	0x24004030
 80057c4:	24004098 	.word	0x24004098

080057c8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80057c8:	b480      	push	{r7}
 80057ca:	b083      	sub	sp, #12
 80057cc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80057ce:	4b0b      	ldr	r3, [pc, #44]	; (80057fc <xTaskGetSchedulerState+0x34>)
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d102      	bne.n	80057dc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80057d6:	2301      	movs	r3, #1
 80057d8:	607b      	str	r3, [r7, #4]
 80057da:	e008      	b.n	80057ee <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80057dc:	4b08      	ldr	r3, [pc, #32]	; (8005800 <xTaskGetSchedulerState+0x38>)
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d102      	bne.n	80057ea <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80057e4:	2302      	movs	r3, #2
 80057e6:	607b      	str	r3, [r7, #4]
 80057e8:	e001      	b.n	80057ee <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80057ea:	2300      	movs	r3, #0
 80057ec:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80057ee:	687b      	ldr	r3, [r7, #4]
	}
 80057f0:	4618      	mov	r0, r3
 80057f2:	370c      	adds	r7, #12
 80057f4:	46bd      	mov	sp, r7
 80057f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fa:	4770      	bx	lr
 80057fc:	24004084 	.word	0x24004084
 8005800:	240040a0 	.word	0x240040a0

08005804 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005804:	b580      	push	{r7, lr}
 8005806:	b086      	sub	sp, #24
 8005808:	af00      	add	r7, sp, #0
 800580a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005810:	2300      	movs	r3, #0
 8005812:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	2b00      	cmp	r3, #0
 8005818:	d06e      	beq.n	80058f8 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800581a:	4b3a      	ldr	r3, [pc, #232]	; (8005904 <xTaskPriorityDisinherit+0x100>)
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	693a      	ldr	r2, [r7, #16]
 8005820:	429a      	cmp	r2, r3
 8005822:	d00a      	beq.n	800583a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8005824:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005828:	f383 8811 	msr	BASEPRI, r3
 800582c:	f3bf 8f6f 	isb	sy
 8005830:	f3bf 8f4f 	dsb	sy
 8005834:	60fb      	str	r3, [r7, #12]
}
 8005836:	bf00      	nop
 8005838:	e7fe      	b.n	8005838 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800583a:	693b      	ldr	r3, [r7, #16]
 800583c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800583e:	2b00      	cmp	r3, #0
 8005840:	d10a      	bne.n	8005858 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8005842:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005846:	f383 8811 	msr	BASEPRI, r3
 800584a:	f3bf 8f6f 	isb	sy
 800584e:	f3bf 8f4f 	dsb	sy
 8005852:	60bb      	str	r3, [r7, #8]
}
 8005854:	bf00      	nop
 8005856:	e7fe      	b.n	8005856 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8005858:	693b      	ldr	r3, [r7, #16]
 800585a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800585c:	1e5a      	subs	r2, r3, #1
 800585e:	693b      	ldr	r3, [r7, #16]
 8005860:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005862:	693b      	ldr	r3, [r7, #16]
 8005864:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005866:	693b      	ldr	r3, [r7, #16]
 8005868:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800586a:	429a      	cmp	r2, r3
 800586c:	d044      	beq.n	80058f8 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800586e:	693b      	ldr	r3, [r7, #16]
 8005870:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005872:	2b00      	cmp	r3, #0
 8005874:	d140      	bne.n	80058f8 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005876:	693b      	ldr	r3, [r7, #16]
 8005878:	3304      	adds	r3, #4
 800587a:	4618      	mov	r0, r3
 800587c:	f7fe fbc8 	bl	8004010 <uxListRemove>
 8005880:	4603      	mov	r3, r0
 8005882:	2b00      	cmp	r3, #0
 8005884:	d115      	bne.n	80058b2 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8005886:	693b      	ldr	r3, [r7, #16]
 8005888:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800588a:	491f      	ldr	r1, [pc, #124]	; (8005908 <xTaskPriorityDisinherit+0x104>)
 800588c:	4613      	mov	r3, r2
 800588e:	009b      	lsls	r3, r3, #2
 8005890:	4413      	add	r3, r2
 8005892:	009b      	lsls	r3, r3, #2
 8005894:	440b      	add	r3, r1
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	2b00      	cmp	r3, #0
 800589a:	d10a      	bne.n	80058b2 <xTaskPriorityDisinherit+0xae>
 800589c:	693b      	ldr	r3, [r7, #16]
 800589e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058a0:	2201      	movs	r2, #1
 80058a2:	fa02 f303 	lsl.w	r3, r2, r3
 80058a6:	43da      	mvns	r2, r3
 80058a8:	4b18      	ldr	r3, [pc, #96]	; (800590c <xTaskPriorityDisinherit+0x108>)
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	4013      	ands	r3, r2
 80058ae:	4a17      	ldr	r2, [pc, #92]	; (800590c <xTaskPriorityDisinherit+0x108>)
 80058b0:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80058b2:	693b      	ldr	r3, [r7, #16]
 80058b4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80058b6:	693b      	ldr	r3, [r7, #16]
 80058b8:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80058ba:	693b      	ldr	r3, [r7, #16]
 80058bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058be:	f1c3 0207 	rsb	r2, r3, #7
 80058c2:	693b      	ldr	r3, [r7, #16]
 80058c4:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80058c6:	693b      	ldr	r3, [r7, #16]
 80058c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058ca:	2201      	movs	r2, #1
 80058cc:	409a      	lsls	r2, r3
 80058ce:	4b0f      	ldr	r3, [pc, #60]	; (800590c <xTaskPriorityDisinherit+0x108>)
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	4313      	orrs	r3, r2
 80058d4:	4a0d      	ldr	r2, [pc, #52]	; (800590c <xTaskPriorityDisinherit+0x108>)
 80058d6:	6013      	str	r3, [r2, #0]
 80058d8:	693b      	ldr	r3, [r7, #16]
 80058da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058dc:	4613      	mov	r3, r2
 80058de:	009b      	lsls	r3, r3, #2
 80058e0:	4413      	add	r3, r2
 80058e2:	009b      	lsls	r3, r3, #2
 80058e4:	4a08      	ldr	r2, [pc, #32]	; (8005908 <xTaskPriorityDisinherit+0x104>)
 80058e6:	441a      	add	r2, r3
 80058e8:	693b      	ldr	r3, [r7, #16]
 80058ea:	3304      	adds	r3, #4
 80058ec:	4619      	mov	r1, r3
 80058ee:	4610      	mov	r0, r2
 80058f0:	f7fe fb31 	bl	8003f56 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80058f4:	2301      	movs	r3, #1
 80058f6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80058f8:	697b      	ldr	r3, [r7, #20]
	}
 80058fa:	4618      	mov	r0, r3
 80058fc:	3718      	adds	r7, #24
 80058fe:	46bd      	mov	sp, r7
 8005900:	bd80      	pop	{r7, pc}
 8005902:	bf00      	nop
 8005904:	24003f78 	.word	0x24003f78
 8005908:	24003f7c 	.word	0x24003f7c
 800590c:	24004080 	.word	0x24004080

08005910 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005910:	b580      	push	{r7, lr}
 8005912:	b084      	sub	sp, #16
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
 8005918:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800591a:	4b29      	ldr	r3, [pc, #164]	; (80059c0 <prvAddCurrentTaskToDelayedList+0xb0>)
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005920:	4b28      	ldr	r3, [pc, #160]	; (80059c4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	3304      	adds	r3, #4
 8005926:	4618      	mov	r0, r3
 8005928:	f7fe fb72 	bl	8004010 <uxListRemove>
 800592c:	4603      	mov	r3, r0
 800592e:	2b00      	cmp	r3, #0
 8005930:	d10b      	bne.n	800594a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8005932:	4b24      	ldr	r3, [pc, #144]	; (80059c4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005938:	2201      	movs	r2, #1
 800593a:	fa02 f303 	lsl.w	r3, r2, r3
 800593e:	43da      	mvns	r2, r3
 8005940:	4b21      	ldr	r3, [pc, #132]	; (80059c8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	4013      	ands	r3, r2
 8005946:	4a20      	ldr	r2, [pc, #128]	; (80059c8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005948:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005950:	d10a      	bne.n	8005968 <prvAddCurrentTaskToDelayedList+0x58>
 8005952:	683b      	ldr	r3, [r7, #0]
 8005954:	2b00      	cmp	r3, #0
 8005956:	d007      	beq.n	8005968 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005958:	4b1a      	ldr	r3, [pc, #104]	; (80059c4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	3304      	adds	r3, #4
 800595e:	4619      	mov	r1, r3
 8005960:	481a      	ldr	r0, [pc, #104]	; (80059cc <prvAddCurrentTaskToDelayedList+0xbc>)
 8005962:	f7fe faf8 	bl	8003f56 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005966:	e026      	b.n	80059b6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005968:	68fa      	ldr	r2, [r7, #12]
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	4413      	add	r3, r2
 800596e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005970:	4b14      	ldr	r3, [pc, #80]	; (80059c4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	68ba      	ldr	r2, [r7, #8]
 8005976:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005978:	68ba      	ldr	r2, [r7, #8]
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	429a      	cmp	r2, r3
 800597e:	d209      	bcs.n	8005994 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005980:	4b13      	ldr	r3, [pc, #76]	; (80059d0 <prvAddCurrentTaskToDelayedList+0xc0>)
 8005982:	681a      	ldr	r2, [r3, #0]
 8005984:	4b0f      	ldr	r3, [pc, #60]	; (80059c4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	3304      	adds	r3, #4
 800598a:	4619      	mov	r1, r3
 800598c:	4610      	mov	r0, r2
 800598e:	f7fe fb06 	bl	8003f9e <vListInsert>
}
 8005992:	e010      	b.n	80059b6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005994:	4b0f      	ldr	r3, [pc, #60]	; (80059d4 <prvAddCurrentTaskToDelayedList+0xc4>)
 8005996:	681a      	ldr	r2, [r3, #0]
 8005998:	4b0a      	ldr	r3, [pc, #40]	; (80059c4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	3304      	adds	r3, #4
 800599e:	4619      	mov	r1, r3
 80059a0:	4610      	mov	r0, r2
 80059a2:	f7fe fafc 	bl	8003f9e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80059a6:	4b0c      	ldr	r3, [pc, #48]	; (80059d8 <prvAddCurrentTaskToDelayedList+0xc8>)
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	68ba      	ldr	r2, [r7, #8]
 80059ac:	429a      	cmp	r2, r3
 80059ae:	d202      	bcs.n	80059b6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80059b0:	4a09      	ldr	r2, [pc, #36]	; (80059d8 <prvAddCurrentTaskToDelayedList+0xc8>)
 80059b2:	68bb      	ldr	r3, [r7, #8]
 80059b4:	6013      	str	r3, [r2, #0]
}
 80059b6:	bf00      	nop
 80059b8:	3710      	adds	r7, #16
 80059ba:	46bd      	mov	sp, r7
 80059bc:	bd80      	pop	{r7, pc}
 80059be:	bf00      	nop
 80059c0:	2400407c 	.word	0x2400407c
 80059c4:	24003f78 	.word	0x24003f78
 80059c8:	24004080 	.word	0x24004080
 80059cc:	24004064 	.word	0x24004064
 80059d0:	24004034 	.word	0x24004034
 80059d4:	24004030 	.word	0x24004030
 80059d8:	24004098 	.word	0x24004098

080059dc <__errno>:
 80059dc:	4b01      	ldr	r3, [pc, #4]	; (80059e4 <__errno+0x8>)
 80059de:	6818      	ldr	r0, [r3, #0]
 80059e0:	4770      	bx	lr
 80059e2:	bf00      	nop
 80059e4:	24000014 	.word	0x24000014

080059e8 <__libc_init_array>:
 80059e8:	b570      	push	{r4, r5, r6, lr}
 80059ea:	4d0d      	ldr	r5, [pc, #52]	; (8005a20 <__libc_init_array+0x38>)
 80059ec:	4c0d      	ldr	r4, [pc, #52]	; (8005a24 <__libc_init_array+0x3c>)
 80059ee:	1b64      	subs	r4, r4, r5
 80059f0:	10a4      	asrs	r4, r4, #2
 80059f2:	2600      	movs	r6, #0
 80059f4:	42a6      	cmp	r6, r4
 80059f6:	d109      	bne.n	8005a0c <__libc_init_array+0x24>
 80059f8:	4d0b      	ldr	r5, [pc, #44]	; (8005a28 <__libc_init_array+0x40>)
 80059fa:	4c0c      	ldr	r4, [pc, #48]	; (8005a2c <__libc_init_array+0x44>)
 80059fc:	f000 fccc 	bl	8006398 <_init>
 8005a00:	1b64      	subs	r4, r4, r5
 8005a02:	10a4      	asrs	r4, r4, #2
 8005a04:	2600      	movs	r6, #0
 8005a06:	42a6      	cmp	r6, r4
 8005a08:	d105      	bne.n	8005a16 <__libc_init_array+0x2e>
 8005a0a:	bd70      	pop	{r4, r5, r6, pc}
 8005a0c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a10:	4798      	blx	r3
 8005a12:	3601      	adds	r6, #1
 8005a14:	e7ee      	b.n	80059f4 <__libc_init_array+0xc>
 8005a16:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a1a:	4798      	blx	r3
 8005a1c:	3601      	adds	r6, #1
 8005a1e:	e7f2      	b.n	8005a06 <__libc_init_array+0x1e>
 8005a20:	08006480 	.word	0x08006480
 8005a24:	08006480 	.word	0x08006480
 8005a28:	08006480 	.word	0x08006480
 8005a2c:	08006484 	.word	0x08006484

08005a30 <__retarget_lock_acquire_recursive>:
 8005a30:	4770      	bx	lr

08005a32 <__retarget_lock_release_recursive>:
 8005a32:	4770      	bx	lr

08005a34 <memcpy>:
 8005a34:	440a      	add	r2, r1
 8005a36:	4291      	cmp	r1, r2
 8005a38:	f100 33ff 	add.w	r3, r0, #4294967295
 8005a3c:	d100      	bne.n	8005a40 <memcpy+0xc>
 8005a3e:	4770      	bx	lr
 8005a40:	b510      	push	{r4, lr}
 8005a42:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005a46:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005a4a:	4291      	cmp	r1, r2
 8005a4c:	d1f9      	bne.n	8005a42 <memcpy+0xe>
 8005a4e:	bd10      	pop	{r4, pc}

08005a50 <memset>:
 8005a50:	4402      	add	r2, r0
 8005a52:	4603      	mov	r3, r0
 8005a54:	4293      	cmp	r3, r2
 8005a56:	d100      	bne.n	8005a5a <memset+0xa>
 8005a58:	4770      	bx	lr
 8005a5a:	f803 1b01 	strb.w	r1, [r3], #1
 8005a5e:	e7f9      	b.n	8005a54 <memset+0x4>

08005a60 <_malloc_r>:
 8005a60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a62:	1ccd      	adds	r5, r1, #3
 8005a64:	f025 0503 	bic.w	r5, r5, #3
 8005a68:	3508      	adds	r5, #8
 8005a6a:	2d0c      	cmp	r5, #12
 8005a6c:	bf38      	it	cc
 8005a6e:	250c      	movcc	r5, #12
 8005a70:	2d00      	cmp	r5, #0
 8005a72:	4606      	mov	r6, r0
 8005a74:	db01      	blt.n	8005a7a <_malloc_r+0x1a>
 8005a76:	42a9      	cmp	r1, r5
 8005a78:	d903      	bls.n	8005a82 <_malloc_r+0x22>
 8005a7a:	230c      	movs	r3, #12
 8005a7c:	6033      	str	r3, [r6, #0]
 8005a7e:	2000      	movs	r0, #0
 8005a80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005a82:	f000 f8f5 	bl	8005c70 <__malloc_lock>
 8005a86:	4921      	ldr	r1, [pc, #132]	; (8005b0c <_malloc_r+0xac>)
 8005a88:	680a      	ldr	r2, [r1, #0]
 8005a8a:	4614      	mov	r4, r2
 8005a8c:	b99c      	cbnz	r4, 8005ab6 <_malloc_r+0x56>
 8005a8e:	4f20      	ldr	r7, [pc, #128]	; (8005b10 <_malloc_r+0xb0>)
 8005a90:	683b      	ldr	r3, [r7, #0]
 8005a92:	b923      	cbnz	r3, 8005a9e <_malloc_r+0x3e>
 8005a94:	4621      	mov	r1, r4
 8005a96:	4630      	mov	r0, r6
 8005a98:	f000 f8a6 	bl	8005be8 <_sbrk_r>
 8005a9c:	6038      	str	r0, [r7, #0]
 8005a9e:	4629      	mov	r1, r5
 8005aa0:	4630      	mov	r0, r6
 8005aa2:	f000 f8a1 	bl	8005be8 <_sbrk_r>
 8005aa6:	1c43      	adds	r3, r0, #1
 8005aa8:	d123      	bne.n	8005af2 <_malloc_r+0x92>
 8005aaa:	230c      	movs	r3, #12
 8005aac:	6033      	str	r3, [r6, #0]
 8005aae:	4630      	mov	r0, r6
 8005ab0:	f000 f8e4 	bl	8005c7c <__malloc_unlock>
 8005ab4:	e7e3      	b.n	8005a7e <_malloc_r+0x1e>
 8005ab6:	6823      	ldr	r3, [r4, #0]
 8005ab8:	1b5b      	subs	r3, r3, r5
 8005aba:	d417      	bmi.n	8005aec <_malloc_r+0x8c>
 8005abc:	2b0b      	cmp	r3, #11
 8005abe:	d903      	bls.n	8005ac8 <_malloc_r+0x68>
 8005ac0:	6023      	str	r3, [r4, #0]
 8005ac2:	441c      	add	r4, r3
 8005ac4:	6025      	str	r5, [r4, #0]
 8005ac6:	e004      	b.n	8005ad2 <_malloc_r+0x72>
 8005ac8:	6863      	ldr	r3, [r4, #4]
 8005aca:	42a2      	cmp	r2, r4
 8005acc:	bf0c      	ite	eq
 8005ace:	600b      	streq	r3, [r1, #0]
 8005ad0:	6053      	strne	r3, [r2, #4]
 8005ad2:	4630      	mov	r0, r6
 8005ad4:	f000 f8d2 	bl	8005c7c <__malloc_unlock>
 8005ad8:	f104 000b 	add.w	r0, r4, #11
 8005adc:	1d23      	adds	r3, r4, #4
 8005ade:	f020 0007 	bic.w	r0, r0, #7
 8005ae2:	1ac2      	subs	r2, r0, r3
 8005ae4:	d0cc      	beq.n	8005a80 <_malloc_r+0x20>
 8005ae6:	1a1b      	subs	r3, r3, r0
 8005ae8:	50a3      	str	r3, [r4, r2]
 8005aea:	e7c9      	b.n	8005a80 <_malloc_r+0x20>
 8005aec:	4622      	mov	r2, r4
 8005aee:	6864      	ldr	r4, [r4, #4]
 8005af0:	e7cc      	b.n	8005a8c <_malloc_r+0x2c>
 8005af2:	1cc4      	adds	r4, r0, #3
 8005af4:	f024 0403 	bic.w	r4, r4, #3
 8005af8:	42a0      	cmp	r0, r4
 8005afa:	d0e3      	beq.n	8005ac4 <_malloc_r+0x64>
 8005afc:	1a21      	subs	r1, r4, r0
 8005afe:	4630      	mov	r0, r6
 8005b00:	f000 f872 	bl	8005be8 <_sbrk_r>
 8005b04:	3001      	adds	r0, #1
 8005b06:	d1dd      	bne.n	8005ac4 <_malloc_r+0x64>
 8005b08:	e7cf      	b.n	8005aaa <_malloc_r+0x4a>
 8005b0a:	bf00      	nop
 8005b0c:	240040a4 	.word	0x240040a4
 8005b10:	240040a8 	.word	0x240040a8

08005b14 <cleanup_glue>:
 8005b14:	b538      	push	{r3, r4, r5, lr}
 8005b16:	460c      	mov	r4, r1
 8005b18:	6809      	ldr	r1, [r1, #0]
 8005b1a:	4605      	mov	r5, r0
 8005b1c:	b109      	cbz	r1, 8005b22 <cleanup_glue+0xe>
 8005b1e:	f7ff fff9 	bl	8005b14 <cleanup_glue>
 8005b22:	4621      	mov	r1, r4
 8005b24:	4628      	mov	r0, r5
 8005b26:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005b2a:	f000 b8ad 	b.w	8005c88 <_free_r>
	...

08005b30 <_reclaim_reent>:
 8005b30:	4b2c      	ldr	r3, [pc, #176]	; (8005be4 <_reclaim_reent+0xb4>)
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	4283      	cmp	r3, r0
 8005b36:	b570      	push	{r4, r5, r6, lr}
 8005b38:	4604      	mov	r4, r0
 8005b3a:	d051      	beq.n	8005be0 <_reclaim_reent+0xb0>
 8005b3c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8005b3e:	b143      	cbz	r3, 8005b52 <_reclaim_reent+0x22>
 8005b40:	68db      	ldr	r3, [r3, #12]
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d14a      	bne.n	8005bdc <_reclaim_reent+0xac>
 8005b46:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005b48:	6819      	ldr	r1, [r3, #0]
 8005b4a:	b111      	cbz	r1, 8005b52 <_reclaim_reent+0x22>
 8005b4c:	4620      	mov	r0, r4
 8005b4e:	f000 f89b 	bl	8005c88 <_free_r>
 8005b52:	6961      	ldr	r1, [r4, #20]
 8005b54:	b111      	cbz	r1, 8005b5c <_reclaim_reent+0x2c>
 8005b56:	4620      	mov	r0, r4
 8005b58:	f000 f896 	bl	8005c88 <_free_r>
 8005b5c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8005b5e:	b111      	cbz	r1, 8005b66 <_reclaim_reent+0x36>
 8005b60:	4620      	mov	r0, r4
 8005b62:	f000 f891 	bl	8005c88 <_free_r>
 8005b66:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8005b68:	b111      	cbz	r1, 8005b70 <_reclaim_reent+0x40>
 8005b6a:	4620      	mov	r0, r4
 8005b6c:	f000 f88c 	bl	8005c88 <_free_r>
 8005b70:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8005b72:	b111      	cbz	r1, 8005b7a <_reclaim_reent+0x4a>
 8005b74:	4620      	mov	r0, r4
 8005b76:	f000 f887 	bl	8005c88 <_free_r>
 8005b7a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8005b7c:	b111      	cbz	r1, 8005b84 <_reclaim_reent+0x54>
 8005b7e:	4620      	mov	r0, r4
 8005b80:	f000 f882 	bl	8005c88 <_free_r>
 8005b84:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8005b86:	b111      	cbz	r1, 8005b8e <_reclaim_reent+0x5e>
 8005b88:	4620      	mov	r0, r4
 8005b8a:	f000 f87d 	bl	8005c88 <_free_r>
 8005b8e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8005b90:	b111      	cbz	r1, 8005b98 <_reclaim_reent+0x68>
 8005b92:	4620      	mov	r0, r4
 8005b94:	f000 f878 	bl	8005c88 <_free_r>
 8005b98:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005b9a:	b111      	cbz	r1, 8005ba2 <_reclaim_reent+0x72>
 8005b9c:	4620      	mov	r0, r4
 8005b9e:	f000 f873 	bl	8005c88 <_free_r>
 8005ba2:	69a3      	ldr	r3, [r4, #24]
 8005ba4:	b1e3      	cbz	r3, 8005be0 <_reclaim_reent+0xb0>
 8005ba6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005ba8:	4620      	mov	r0, r4
 8005baa:	4798      	blx	r3
 8005bac:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8005bae:	b1b9      	cbz	r1, 8005be0 <_reclaim_reent+0xb0>
 8005bb0:	4620      	mov	r0, r4
 8005bb2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005bb6:	f7ff bfad 	b.w	8005b14 <cleanup_glue>
 8005bba:	5949      	ldr	r1, [r1, r5]
 8005bbc:	b941      	cbnz	r1, 8005bd0 <_reclaim_reent+0xa0>
 8005bbe:	3504      	adds	r5, #4
 8005bc0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005bc2:	2d80      	cmp	r5, #128	; 0x80
 8005bc4:	68d9      	ldr	r1, [r3, #12]
 8005bc6:	d1f8      	bne.n	8005bba <_reclaim_reent+0x8a>
 8005bc8:	4620      	mov	r0, r4
 8005bca:	f000 f85d 	bl	8005c88 <_free_r>
 8005bce:	e7ba      	b.n	8005b46 <_reclaim_reent+0x16>
 8005bd0:	680e      	ldr	r6, [r1, #0]
 8005bd2:	4620      	mov	r0, r4
 8005bd4:	f000 f858 	bl	8005c88 <_free_r>
 8005bd8:	4631      	mov	r1, r6
 8005bda:	e7ef      	b.n	8005bbc <_reclaim_reent+0x8c>
 8005bdc:	2500      	movs	r5, #0
 8005bde:	e7ef      	b.n	8005bc0 <_reclaim_reent+0x90>
 8005be0:	bd70      	pop	{r4, r5, r6, pc}
 8005be2:	bf00      	nop
 8005be4:	24000014 	.word	0x24000014

08005be8 <_sbrk_r>:
 8005be8:	b538      	push	{r3, r4, r5, lr}
 8005bea:	4d06      	ldr	r5, [pc, #24]	; (8005c04 <_sbrk_r+0x1c>)
 8005bec:	2300      	movs	r3, #0
 8005bee:	4604      	mov	r4, r0
 8005bf0:	4608      	mov	r0, r1
 8005bf2:	602b      	str	r3, [r5, #0]
 8005bf4:	f7fa ffe6 	bl	8000bc4 <_sbrk>
 8005bf8:	1c43      	adds	r3, r0, #1
 8005bfa:	d102      	bne.n	8005c02 <_sbrk_r+0x1a>
 8005bfc:	682b      	ldr	r3, [r5, #0]
 8005bfe:	b103      	cbz	r3, 8005c02 <_sbrk_r+0x1a>
 8005c00:	6023      	str	r3, [r4, #0]
 8005c02:	bd38      	pop	{r3, r4, r5, pc}
 8005c04:	2400410c 	.word	0x2400410c

08005c08 <sniprintf>:
 8005c08:	b40c      	push	{r2, r3}
 8005c0a:	b530      	push	{r4, r5, lr}
 8005c0c:	4b17      	ldr	r3, [pc, #92]	; (8005c6c <sniprintf+0x64>)
 8005c0e:	1e0c      	subs	r4, r1, #0
 8005c10:	681d      	ldr	r5, [r3, #0]
 8005c12:	b09d      	sub	sp, #116	; 0x74
 8005c14:	da08      	bge.n	8005c28 <sniprintf+0x20>
 8005c16:	238b      	movs	r3, #139	; 0x8b
 8005c18:	602b      	str	r3, [r5, #0]
 8005c1a:	f04f 30ff 	mov.w	r0, #4294967295
 8005c1e:	b01d      	add	sp, #116	; 0x74
 8005c20:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005c24:	b002      	add	sp, #8
 8005c26:	4770      	bx	lr
 8005c28:	f44f 7302 	mov.w	r3, #520	; 0x208
 8005c2c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005c30:	bf14      	ite	ne
 8005c32:	f104 33ff 	addne.w	r3, r4, #4294967295
 8005c36:	4623      	moveq	r3, r4
 8005c38:	9304      	str	r3, [sp, #16]
 8005c3a:	9307      	str	r3, [sp, #28]
 8005c3c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005c40:	9002      	str	r0, [sp, #8]
 8005c42:	9006      	str	r0, [sp, #24]
 8005c44:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005c48:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005c4a:	ab21      	add	r3, sp, #132	; 0x84
 8005c4c:	a902      	add	r1, sp, #8
 8005c4e:	4628      	mov	r0, r5
 8005c50:	9301      	str	r3, [sp, #4]
 8005c52:	f000 f8c5 	bl	8005de0 <_svfiprintf_r>
 8005c56:	1c43      	adds	r3, r0, #1
 8005c58:	bfbc      	itt	lt
 8005c5a:	238b      	movlt	r3, #139	; 0x8b
 8005c5c:	602b      	strlt	r3, [r5, #0]
 8005c5e:	2c00      	cmp	r4, #0
 8005c60:	d0dd      	beq.n	8005c1e <sniprintf+0x16>
 8005c62:	9b02      	ldr	r3, [sp, #8]
 8005c64:	2200      	movs	r2, #0
 8005c66:	701a      	strb	r2, [r3, #0]
 8005c68:	e7d9      	b.n	8005c1e <sniprintf+0x16>
 8005c6a:	bf00      	nop
 8005c6c:	24000014 	.word	0x24000014

08005c70 <__malloc_lock>:
 8005c70:	4801      	ldr	r0, [pc, #4]	; (8005c78 <__malloc_lock+0x8>)
 8005c72:	f7ff bedd 	b.w	8005a30 <__retarget_lock_acquire_recursive>
 8005c76:	bf00      	nop
 8005c78:	24004104 	.word	0x24004104

08005c7c <__malloc_unlock>:
 8005c7c:	4801      	ldr	r0, [pc, #4]	; (8005c84 <__malloc_unlock+0x8>)
 8005c7e:	f7ff bed8 	b.w	8005a32 <__retarget_lock_release_recursive>
 8005c82:	bf00      	nop
 8005c84:	24004104 	.word	0x24004104

08005c88 <_free_r>:
 8005c88:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005c8a:	2900      	cmp	r1, #0
 8005c8c:	d048      	beq.n	8005d20 <_free_r+0x98>
 8005c8e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005c92:	9001      	str	r0, [sp, #4]
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	f1a1 0404 	sub.w	r4, r1, #4
 8005c9a:	bfb8      	it	lt
 8005c9c:	18e4      	addlt	r4, r4, r3
 8005c9e:	f7ff ffe7 	bl	8005c70 <__malloc_lock>
 8005ca2:	4a20      	ldr	r2, [pc, #128]	; (8005d24 <_free_r+0x9c>)
 8005ca4:	9801      	ldr	r0, [sp, #4]
 8005ca6:	6813      	ldr	r3, [r2, #0]
 8005ca8:	4615      	mov	r5, r2
 8005caa:	b933      	cbnz	r3, 8005cba <_free_r+0x32>
 8005cac:	6063      	str	r3, [r4, #4]
 8005cae:	6014      	str	r4, [r2, #0]
 8005cb0:	b003      	add	sp, #12
 8005cb2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005cb6:	f7ff bfe1 	b.w	8005c7c <__malloc_unlock>
 8005cba:	42a3      	cmp	r3, r4
 8005cbc:	d90b      	bls.n	8005cd6 <_free_r+0x4e>
 8005cbe:	6821      	ldr	r1, [r4, #0]
 8005cc0:	1862      	adds	r2, r4, r1
 8005cc2:	4293      	cmp	r3, r2
 8005cc4:	bf04      	itt	eq
 8005cc6:	681a      	ldreq	r2, [r3, #0]
 8005cc8:	685b      	ldreq	r3, [r3, #4]
 8005cca:	6063      	str	r3, [r4, #4]
 8005ccc:	bf04      	itt	eq
 8005cce:	1852      	addeq	r2, r2, r1
 8005cd0:	6022      	streq	r2, [r4, #0]
 8005cd2:	602c      	str	r4, [r5, #0]
 8005cd4:	e7ec      	b.n	8005cb0 <_free_r+0x28>
 8005cd6:	461a      	mov	r2, r3
 8005cd8:	685b      	ldr	r3, [r3, #4]
 8005cda:	b10b      	cbz	r3, 8005ce0 <_free_r+0x58>
 8005cdc:	42a3      	cmp	r3, r4
 8005cde:	d9fa      	bls.n	8005cd6 <_free_r+0x4e>
 8005ce0:	6811      	ldr	r1, [r2, #0]
 8005ce2:	1855      	adds	r5, r2, r1
 8005ce4:	42a5      	cmp	r5, r4
 8005ce6:	d10b      	bne.n	8005d00 <_free_r+0x78>
 8005ce8:	6824      	ldr	r4, [r4, #0]
 8005cea:	4421      	add	r1, r4
 8005cec:	1854      	adds	r4, r2, r1
 8005cee:	42a3      	cmp	r3, r4
 8005cf0:	6011      	str	r1, [r2, #0]
 8005cf2:	d1dd      	bne.n	8005cb0 <_free_r+0x28>
 8005cf4:	681c      	ldr	r4, [r3, #0]
 8005cf6:	685b      	ldr	r3, [r3, #4]
 8005cf8:	6053      	str	r3, [r2, #4]
 8005cfa:	4421      	add	r1, r4
 8005cfc:	6011      	str	r1, [r2, #0]
 8005cfe:	e7d7      	b.n	8005cb0 <_free_r+0x28>
 8005d00:	d902      	bls.n	8005d08 <_free_r+0x80>
 8005d02:	230c      	movs	r3, #12
 8005d04:	6003      	str	r3, [r0, #0]
 8005d06:	e7d3      	b.n	8005cb0 <_free_r+0x28>
 8005d08:	6825      	ldr	r5, [r4, #0]
 8005d0a:	1961      	adds	r1, r4, r5
 8005d0c:	428b      	cmp	r3, r1
 8005d0e:	bf04      	itt	eq
 8005d10:	6819      	ldreq	r1, [r3, #0]
 8005d12:	685b      	ldreq	r3, [r3, #4]
 8005d14:	6063      	str	r3, [r4, #4]
 8005d16:	bf04      	itt	eq
 8005d18:	1949      	addeq	r1, r1, r5
 8005d1a:	6021      	streq	r1, [r4, #0]
 8005d1c:	6054      	str	r4, [r2, #4]
 8005d1e:	e7c7      	b.n	8005cb0 <_free_r+0x28>
 8005d20:	b003      	add	sp, #12
 8005d22:	bd30      	pop	{r4, r5, pc}
 8005d24:	240040a4 	.word	0x240040a4

08005d28 <__ssputs_r>:
 8005d28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d2c:	688e      	ldr	r6, [r1, #8]
 8005d2e:	429e      	cmp	r6, r3
 8005d30:	4682      	mov	sl, r0
 8005d32:	460c      	mov	r4, r1
 8005d34:	4690      	mov	r8, r2
 8005d36:	461f      	mov	r7, r3
 8005d38:	d838      	bhi.n	8005dac <__ssputs_r+0x84>
 8005d3a:	898a      	ldrh	r2, [r1, #12]
 8005d3c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005d40:	d032      	beq.n	8005da8 <__ssputs_r+0x80>
 8005d42:	6825      	ldr	r5, [r4, #0]
 8005d44:	6909      	ldr	r1, [r1, #16]
 8005d46:	eba5 0901 	sub.w	r9, r5, r1
 8005d4a:	6965      	ldr	r5, [r4, #20]
 8005d4c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005d50:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005d54:	3301      	adds	r3, #1
 8005d56:	444b      	add	r3, r9
 8005d58:	106d      	asrs	r5, r5, #1
 8005d5a:	429d      	cmp	r5, r3
 8005d5c:	bf38      	it	cc
 8005d5e:	461d      	movcc	r5, r3
 8005d60:	0553      	lsls	r3, r2, #21
 8005d62:	d531      	bpl.n	8005dc8 <__ssputs_r+0xa0>
 8005d64:	4629      	mov	r1, r5
 8005d66:	f7ff fe7b 	bl	8005a60 <_malloc_r>
 8005d6a:	4606      	mov	r6, r0
 8005d6c:	b950      	cbnz	r0, 8005d84 <__ssputs_r+0x5c>
 8005d6e:	230c      	movs	r3, #12
 8005d70:	f8ca 3000 	str.w	r3, [sl]
 8005d74:	89a3      	ldrh	r3, [r4, #12]
 8005d76:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005d7a:	81a3      	strh	r3, [r4, #12]
 8005d7c:	f04f 30ff 	mov.w	r0, #4294967295
 8005d80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d84:	6921      	ldr	r1, [r4, #16]
 8005d86:	464a      	mov	r2, r9
 8005d88:	f7ff fe54 	bl	8005a34 <memcpy>
 8005d8c:	89a3      	ldrh	r3, [r4, #12]
 8005d8e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005d92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d96:	81a3      	strh	r3, [r4, #12]
 8005d98:	6126      	str	r6, [r4, #16]
 8005d9a:	6165      	str	r5, [r4, #20]
 8005d9c:	444e      	add	r6, r9
 8005d9e:	eba5 0509 	sub.w	r5, r5, r9
 8005da2:	6026      	str	r6, [r4, #0]
 8005da4:	60a5      	str	r5, [r4, #8]
 8005da6:	463e      	mov	r6, r7
 8005da8:	42be      	cmp	r6, r7
 8005daa:	d900      	bls.n	8005dae <__ssputs_r+0x86>
 8005dac:	463e      	mov	r6, r7
 8005dae:	4632      	mov	r2, r6
 8005db0:	6820      	ldr	r0, [r4, #0]
 8005db2:	4641      	mov	r1, r8
 8005db4:	f000 faa8 	bl	8006308 <memmove>
 8005db8:	68a3      	ldr	r3, [r4, #8]
 8005dba:	6822      	ldr	r2, [r4, #0]
 8005dbc:	1b9b      	subs	r3, r3, r6
 8005dbe:	4432      	add	r2, r6
 8005dc0:	60a3      	str	r3, [r4, #8]
 8005dc2:	6022      	str	r2, [r4, #0]
 8005dc4:	2000      	movs	r0, #0
 8005dc6:	e7db      	b.n	8005d80 <__ssputs_r+0x58>
 8005dc8:	462a      	mov	r2, r5
 8005dca:	f000 fab7 	bl	800633c <_realloc_r>
 8005dce:	4606      	mov	r6, r0
 8005dd0:	2800      	cmp	r0, #0
 8005dd2:	d1e1      	bne.n	8005d98 <__ssputs_r+0x70>
 8005dd4:	6921      	ldr	r1, [r4, #16]
 8005dd6:	4650      	mov	r0, sl
 8005dd8:	f7ff ff56 	bl	8005c88 <_free_r>
 8005ddc:	e7c7      	b.n	8005d6e <__ssputs_r+0x46>
	...

08005de0 <_svfiprintf_r>:
 8005de0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005de4:	4698      	mov	r8, r3
 8005de6:	898b      	ldrh	r3, [r1, #12]
 8005de8:	061b      	lsls	r3, r3, #24
 8005dea:	b09d      	sub	sp, #116	; 0x74
 8005dec:	4607      	mov	r7, r0
 8005dee:	460d      	mov	r5, r1
 8005df0:	4614      	mov	r4, r2
 8005df2:	d50e      	bpl.n	8005e12 <_svfiprintf_r+0x32>
 8005df4:	690b      	ldr	r3, [r1, #16]
 8005df6:	b963      	cbnz	r3, 8005e12 <_svfiprintf_r+0x32>
 8005df8:	2140      	movs	r1, #64	; 0x40
 8005dfa:	f7ff fe31 	bl	8005a60 <_malloc_r>
 8005dfe:	6028      	str	r0, [r5, #0]
 8005e00:	6128      	str	r0, [r5, #16]
 8005e02:	b920      	cbnz	r0, 8005e0e <_svfiprintf_r+0x2e>
 8005e04:	230c      	movs	r3, #12
 8005e06:	603b      	str	r3, [r7, #0]
 8005e08:	f04f 30ff 	mov.w	r0, #4294967295
 8005e0c:	e0d1      	b.n	8005fb2 <_svfiprintf_r+0x1d2>
 8005e0e:	2340      	movs	r3, #64	; 0x40
 8005e10:	616b      	str	r3, [r5, #20]
 8005e12:	2300      	movs	r3, #0
 8005e14:	9309      	str	r3, [sp, #36]	; 0x24
 8005e16:	2320      	movs	r3, #32
 8005e18:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005e1c:	f8cd 800c 	str.w	r8, [sp, #12]
 8005e20:	2330      	movs	r3, #48	; 0x30
 8005e22:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005fcc <_svfiprintf_r+0x1ec>
 8005e26:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005e2a:	f04f 0901 	mov.w	r9, #1
 8005e2e:	4623      	mov	r3, r4
 8005e30:	469a      	mov	sl, r3
 8005e32:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005e36:	b10a      	cbz	r2, 8005e3c <_svfiprintf_r+0x5c>
 8005e38:	2a25      	cmp	r2, #37	; 0x25
 8005e3a:	d1f9      	bne.n	8005e30 <_svfiprintf_r+0x50>
 8005e3c:	ebba 0b04 	subs.w	fp, sl, r4
 8005e40:	d00b      	beq.n	8005e5a <_svfiprintf_r+0x7a>
 8005e42:	465b      	mov	r3, fp
 8005e44:	4622      	mov	r2, r4
 8005e46:	4629      	mov	r1, r5
 8005e48:	4638      	mov	r0, r7
 8005e4a:	f7ff ff6d 	bl	8005d28 <__ssputs_r>
 8005e4e:	3001      	adds	r0, #1
 8005e50:	f000 80aa 	beq.w	8005fa8 <_svfiprintf_r+0x1c8>
 8005e54:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005e56:	445a      	add	r2, fp
 8005e58:	9209      	str	r2, [sp, #36]	; 0x24
 8005e5a:	f89a 3000 	ldrb.w	r3, [sl]
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	f000 80a2 	beq.w	8005fa8 <_svfiprintf_r+0x1c8>
 8005e64:	2300      	movs	r3, #0
 8005e66:	f04f 32ff 	mov.w	r2, #4294967295
 8005e6a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005e6e:	f10a 0a01 	add.w	sl, sl, #1
 8005e72:	9304      	str	r3, [sp, #16]
 8005e74:	9307      	str	r3, [sp, #28]
 8005e76:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005e7a:	931a      	str	r3, [sp, #104]	; 0x68
 8005e7c:	4654      	mov	r4, sl
 8005e7e:	2205      	movs	r2, #5
 8005e80:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005e84:	4851      	ldr	r0, [pc, #324]	; (8005fcc <_svfiprintf_r+0x1ec>)
 8005e86:	f7fa fa2b 	bl	80002e0 <memchr>
 8005e8a:	9a04      	ldr	r2, [sp, #16]
 8005e8c:	b9d8      	cbnz	r0, 8005ec6 <_svfiprintf_r+0xe6>
 8005e8e:	06d0      	lsls	r0, r2, #27
 8005e90:	bf44      	itt	mi
 8005e92:	2320      	movmi	r3, #32
 8005e94:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005e98:	0711      	lsls	r1, r2, #28
 8005e9a:	bf44      	itt	mi
 8005e9c:	232b      	movmi	r3, #43	; 0x2b
 8005e9e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005ea2:	f89a 3000 	ldrb.w	r3, [sl]
 8005ea6:	2b2a      	cmp	r3, #42	; 0x2a
 8005ea8:	d015      	beq.n	8005ed6 <_svfiprintf_r+0xf6>
 8005eaa:	9a07      	ldr	r2, [sp, #28]
 8005eac:	4654      	mov	r4, sl
 8005eae:	2000      	movs	r0, #0
 8005eb0:	f04f 0c0a 	mov.w	ip, #10
 8005eb4:	4621      	mov	r1, r4
 8005eb6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005eba:	3b30      	subs	r3, #48	; 0x30
 8005ebc:	2b09      	cmp	r3, #9
 8005ebe:	d94e      	bls.n	8005f5e <_svfiprintf_r+0x17e>
 8005ec0:	b1b0      	cbz	r0, 8005ef0 <_svfiprintf_r+0x110>
 8005ec2:	9207      	str	r2, [sp, #28]
 8005ec4:	e014      	b.n	8005ef0 <_svfiprintf_r+0x110>
 8005ec6:	eba0 0308 	sub.w	r3, r0, r8
 8005eca:	fa09 f303 	lsl.w	r3, r9, r3
 8005ece:	4313      	orrs	r3, r2
 8005ed0:	9304      	str	r3, [sp, #16]
 8005ed2:	46a2      	mov	sl, r4
 8005ed4:	e7d2      	b.n	8005e7c <_svfiprintf_r+0x9c>
 8005ed6:	9b03      	ldr	r3, [sp, #12]
 8005ed8:	1d19      	adds	r1, r3, #4
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	9103      	str	r1, [sp, #12]
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	bfbb      	ittet	lt
 8005ee2:	425b      	neglt	r3, r3
 8005ee4:	f042 0202 	orrlt.w	r2, r2, #2
 8005ee8:	9307      	strge	r3, [sp, #28]
 8005eea:	9307      	strlt	r3, [sp, #28]
 8005eec:	bfb8      	it	lt
 8005eee:	9204      	strlt	r2, [sp, #16]
 8005ef0:	7823      	ldrb	r3, [r4, #0]
 8005ef2:	2b2e      	cmp	r3, #46	; 0x2e
 8005ef4:	d10c      	bne.n	8005f10 <_svfiprintf_r+0x130>
 8005ef6:	7863      	ldrb	r3, [r4, #1]
 8005ef8:	2b2a      	cmp	r3, #42	; 0x2a
 8005efa:	d135      	bne.n	8005f68 <_svfiprintf_r+0x188>
 8005efc:	9b03      	ldr	r3, [sp, #12]
 8005efe:	1d1a      	adds	r2, r3, #4
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	9203      	str	r2, [sp, #12]
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	bfb8      	it	lt
 8005f08:	f04f 33ff 	movlt.w	r3, #4294967295
 8005f0c:	3402      	adds	r4, #2
 8005f0e:	9305      	str	r3, [sp, #20]
 8005f10:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005fdc <_svfiprintf_r+0x1fc>
 8005f14:	7821      	ldrb	r1, [r4, #0]
 8005f16:	2203      	movs	r2, #3
 8005f18:	4650      	mov	r0, sl
 8005f1a:	f7fa f9e1 	bl	80002e0 <memchr>
 8005f1e:	b140      	cbz	r0, 8005f32 <_svfiprintf_r+0x152>
 8005f20:	2340      	movs	r3, #64	; 0x40
 8005f22:	eba0 000a 	sub.w	r0, r0, sl
 8005f26:	fa03 f000 	lsl.w	r0, r3, r0
 8005f2a:	9b04      	ldr	r3, [sp, #16]
 8005f2c:	4303      	orrs	r3, r0
 8005f2e:	3401      	adds	r4, #1
 8005f30:	9304      	str	r3, [sp, #16]
 8005f32:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005f36:	4826      	ldr	r0, [pc, #152]	; (8005fd0 <_svfiprintf_r+0x1f0>)
 8005f38:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005f3c:	2206      	movs	r2, #6
 8005f3e:	f7fa f9cf 	bl	80002e0 <memchr>
 8005f42:	2800      	cmp	r0, #0
 8005f44:	d038      	beq.n	8005fb8 <_svfiprintf_r+0x1d8>
 8005f46:	4b23      	ldr	r3, [pc, #140]	; (8005fd4 <_svfiprintf_r+0x1f4>)
 8005f48:	bb1b      	cbnz	r3, 8005f92 <_svfiprintf_r+0x1b2>
 8005f4a:	9b03      	ldr	r3, [sp, #12]
 8005f4c:	3307      	adds	r3, #7
 8005f4e:	f023 0307 	bic.w	r3, r3, #7
 8005f52:	3308      	adds	r3, #8
 8005f54:	9303      	str	r3, [sp, #12]
 8005f56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f58:	4433      	add	r3, r6
 8005f5a:	9309      	str	r3, [sp, #36]	; 0x24
 8005f5c:	e767      	b.n	8005e2e <_svfiprintf_r+0x4e>
 8005f5e:	fb0c 3202 	mla	r2, ip, r2, r3
 8005f62:	460c      	mov	r4, r1
 8005f64:	2001      	movs	r0, #1
 8005f66:	e7a5      	b.n	8005eb4 <_svfiprintf_r+0xd4>
 8005f68:	2300      	movs	r3, #0
 8005f6a:	3401      	adds	r4, #1
 8005f6c:	9305      	str	r3, [sp, #20]
 8005f6e:	4619      	mov	r1, r3
 8005f70:	f04f 0c0a 	mov.w	ip, #10
 8005f74:	4620      	mov	r0, r4
 8005f76:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005f7a:	3a30      	subs	r2, #48	; 0x30
 8005f7c:	2a09      	cmp	r2, #9
 8005f7e:	d903      	bls.n	8005f88 <_svfiprintf_r+0x1a8>
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d0c5      	beq.n	8005f10 <_svfiprintf_r+0x130>
 8005f84:	9105      	str	r1, [sp, #20]
 8005f86:	e7c3      	b.n	8005f10 <_svfiprintf_r+0x130>
 8005f88:	fb0c 2101 	mla	r1, ip, r1, r2
 8005f8c:	4604      	mov	r4, r0
 8005f8e:	2301      	movs	r3, #1
 8005f90:	e7f0      	b.n	8005f74 <_svfiprintf_r+0x194>
 8005f92:	ab03      	add	r3, sp, #12
 8005f94:	9300      	str	r3, [sp, #0]
 8005f96:	462a      	mov	r2, r5
 8005f98:	4b0f      	ldr	r3, [pc, #60]	; (8005fd8 <_svfiprintf_r+0x1f8>)
 8005f9a:	a904      	add	r1, sp, #16
 8005f9c:	4638      	mov	r0, r7
 8005f9e:	f3af 8000 	nop.w
 8005fa2:	1c42      	adds	r2, r0, #1
 8005fa4:	4606      	mov	r6, r0
 8005fa6:	d1d6      	bne.n	8005f56 <_svfiprintf_r+0x176>
 8005fa8:	89ab      	ldrh	r3, [r5, #12]
 8005faa:	065b      	lsls	r3, r3, #25
 8005fac:	f53f af2c 	bmi.w	8005e08 <_svfiprintf_r+0x28>
 8005fb0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005fb2:	b01d      	add	sp, #116	; 0x74
 8005fb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005fb8:	ab03      	add	r3, sp, #12
 8005fba:	9300      	str	r3, [sp, #0]
 8005fbc:	462a      	mov	r2, r5
 8005fbe:	4b06      	ldr	r3, [pc, #24]	; (8005fd8 <_svfiprintf_r+0x1f8>)
 8005fc0:	a904      	add	r1, sp, #16
 8005fc2:	4638      	mov	r0, r7
 8005fc4:	f000 f87a 	bl	80060bc <_printf_i>
 8005fc8:	e7eb      	b.n	8005fa2 <_svfiprintf_r+0x1c2>
 8005fca:	bf00      	nop
 8005fcc:	0800644c 	.word	0x0800644c
 8005fd0:	08006456 	.word	0x08006456
 8005fd4:	00000000 	.word	0x00000000
 8005fd8:	08005d29 	.word	0x08005d29
 8005fdc:	08006452 	.word	0x08006452

08005fe0 <_printf_common>:
 8005fe0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005fe4:	4616      	mov	r6, r2
 8005fe6:	4699      	mov	r9, r3
 8005fe8:	688a      	ldr	r2, [r1, #8]
 8005fea:	690b      	ldr	r3, [r1, #16]
 8005fec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005ff0:	4293      	cmp	r3, r2
 8005ff2:	bfb8      	it	lt
 8005ff4:	4613      	movlt	r3, r2
 8005ff6:	6033      	str	r3, [r6, #0]
 8005ff8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005ffc:	4607      	mov	r7, r0
 8005ffe:	460c      	mov	r4, r1
 8006000:	b10a      	cbz	r2, 8006006 <_printf_common+0x26>
 8006002:	3301      	adds	r3, #1
 8006004:	6033      	str	r3, [r6, #0]
 8006006:	6823      	ldr	r3, [r4, #0]
 8006008:	0699      	lsls	r1, r3, #26
 800600a:	bf42      	ittt	mi
 800600c:	6833      	ldrmi	r3, [r6, #0]
 800600e:	3302      	addmi	r3, #2
 8006010:	6033      	strmi	r3, [r6, #0]
 8006012:	6825      	ldr	r5, [r4, #0]
 8006014:	f015 0506 	ands.w	r5, r5, #6
 8006018:	d106      	bne.n	8006028 <_printf_common+0x48>
 800601a:	f104 0a19 	add.w	sl, r4, #25
 800601e:	68e3      	ldr	r3, [r4, #12]
 8006020:	6832      	ldr	r2, [r6, #0]
 8006022:	1a9b      	subs	r3, r3, r2
 8006024:	42ab      	cmp	r3, r5
 8006026:	dc26      	bgt.n	8006076 <_printf_common+0x96>
 8006028:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800602c:	1e13      	subs	r3, r2, #0
 800602e:	6822      	ldr	r2, [r4, #0]
 8006030:	bf18      	it	ne
 8006032:	2301      	movne	r3, #1
 8006034:	0692      	lsls	r2, r2, #26
 8006036:	d42b      	bmi.n	8006090 <_printf_common+0xb0>
 8006038:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800603c:	4649      	mov	r1, r9
 800603e:	4638      	mov	r0, r7
 8006040:	47c0      	blx	r8
 8006042:	3001      	adds	r0, #1
 8006044:	d01e      	beq.n	8006084 <_printf_common+0xa4>
 8006046:	6823      	ldr	r3, [r4, #0]
 8006048:	68e5      	ldr	r5, [r4, #12]
 800604a:	6832      	ldr	r2, [r6, #0]
 800604c:	f003 0306 	and.w	r3, r3, #6
 8006050:	2b04      	cmp	r3, #4
 8006052:	bf08      	it	eq
 8006054:	1aad      	subeq	r5, r5, r2
 8006056:	68a3      	ldr	r3, [r4, #8]
 8006058:	6922      	ldr	r2, [r4, #16]
 800605a:	bf0c      	ite	eq
 800605c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006060:	2500      	movne	r5, #0
 8006062:	4293      	cmp	r3, r2
 8006064:	bfc4      	itt	gt
 8006066:	1a9b      	subgt	r3, r3, r2
 8006068:	18ed      	addgt	r5, r5, r3
 800606a:	2600      	movs	r6, #0
 800606c:	341a      	adds	r4, #26
 800606e:	42b5      	cmp	r5, r6
 8006070:	d11a      	bne.n	80060a8 <_printf_common+0xc8>
 8006072:	2000      	movs	r0, #0
 8006074:	e008      	b.n	8006088 <_printf_common+0xa8>
 8006076:	2301      	movs	r3, #1
 8006078:	4652      	mov	r2, sl
 800607a:	4649      	mov	r1, r9
 800607c:	4638      	mov	r0, r7
 800607e:	47c0      	blx	r8
 8006080:	3001      	adds	r0, #1
 8006082:	d103      	bne.n	800608c <_printf_common+0xac>
 8006084:	f04f 30ff 	mov.w	r0, #4294967295
 8006088:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800608c:	3501      	adds	r5, #1
 800608e:	e7c6      	b.n	800601e <_printf_common+0x3e>
 8006090:	18e1      	adds	r1, r4, r3
 8006092:	1c5a      	adds	r2, r3, #1
 8006094:	2030      	movs	r0, #48	; 0x30
 8006096:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800609a:	4422      	add	r2, r4
 800609c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80060a0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80060a4:	3302      	adds	r3, #2
 80060a6:	e7c7      	b.n	8006038 <_printf_common+0x58>
 80060a8:	2301      	movs	r3, #1
 80060aa:	4622      	mov	r2, r4
 80060ac:	4649      	mov	r1, r9
 80060ae:	4638      	mov	r0, r7
 80060b0:	47c0      	blx	r8
 80060b2:	3001      	adds	r0, #1
 80060b4:	d0e6      	beq.n	8006084 <_printf_common+0xa4>
 80060b6:	3601      	adds	r6, #1
 80060b8:	e7d9      	b.n	800606e <_printf_common+0x8e>
	...

080060bc <_printf_i>:
 80060bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80060c0:	460c      	mov	r4, r1
 80060c2:	4691      	mov	r9, r2
 80060c4:	7e27      	ldrb	r7, [r4, #24]
 80060c6:	990c      	ldr	r1, [sp, #48]	; 0x30
 80060c8:	2f78      	cmp	r7, #120	; 0x78
 80060ca:	4680      	mov	r8, r0
 80060cc:	469a      	mov	sl, r3
 80060ce:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80060d2:	d807      	bhi.n	80060e4 <_printf_i+0x28>
 80060d4:	2f62      	cmp	r7, #98	; 0x62
 80060d6:	d80a      	bhi.n	80060ee <_printf_i+0x32>
 80060d8:	2f00      	cmp	r7, #0
 80060da:	f000 80d8 	beq.w	800628e <_printf_i+0x1d2>
 80060de:	2f58      	cmp	r7, #88	; 0x58
 80060e0:	f000 80a3 	beq.w	800622a <_printf_i+0x16e>
 80060e4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80060e8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80060ec:	e03a      	b.n	8006164 <_printf_i+0xa8>
 80060ee:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80060f2:	2b15      	cmp	r3, #21
 80060f4:	d8f6      	bhi.n	80060e4 <_printf_i+0x28>
 80060f6:	a001      	add	r0, pc, #4	; (adr r0, 80060fc <_printf_i+0x40>)
 80060f8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80060fc:	08006155 	.word	0x08006155
 8006100:	08006169 	.word	0x08006169
 8006104:	080060e5 	.word	0x080060e5
 8006108:	080060e5 	.word	0x080060e5
 800610c:	080060e5 	.word	0x080060e5
 8006110:	080060e5 	.word	0x080060e5
 8006114:	08006169 	.word	0x08006169
 8006118:	080060e5 	.word	0x080060e5
 800611c:	080060e5 	.word	0x080060e5
 8006120:	080060e5 	.word	0x080060e5
 8006124:	080060e5 	.word	0x080060e5
 8006128:	08006275 	.word	0x08006275
 800612c:	08006199 	.word	0x08006199
 8006130:	08006257 	.word	0x08006257
 8006134:	080060e5 	.word	0x080060e5
 8006138:	080060e5 	.word	0x080060e5
 800613c:	08006297 	.word	0x08006297
 8006140:	080060e5 	.word	0x080060e5
 8006144:	08006199 	.word	0x08006199
 8006148:	080060e5 	.word	0x080060e5
 800614c:	080060e5 	.word	0x080060e5
 8006150:	0800625f 	.word	0x0800625f
 8006154:	680b      	ldr	r3, [r1, #0]
 8006156:	1d1a      	adds	r2, r3, #4
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	600a      	str	r2, [r1, #0]
 800615c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006160:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006164:	2301      	movs	r3, #1
 8006166:	e0a3      	b.n	80062b0 <_printf_i+0x1f4>
 8006168:	6825      	ldr	r5, [r4, #0]
 800616a:	6808      	ldr	r0, [r1, #0]
 800616c:	062e      	lsls	r6, r5, #24
 800616e:	f100 0304 	add.w	r3, r0, #4
 8006172:	d50a      	bpl.n	800618a <_printf_i+0xce>
 8006174:	6805      	ldr	r5, [r0, #0]
 8006176:	600b      	str	r3, [r1, #0]
 8006178:	2d00      	cmp	r5, #0
 800617a:	da03      	bge.n	8006184 <_printf_i+0xc8>
 800617c:	232d      	movs	r3, #45	; 0x2d
 800617e:	426d      	negs	r5, r5
 8006180:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006184:	485e      	ldr	r0, [pc, #376]	; (8006300 <_printf_i+0x244>)
 8006186:	230a      	movs	r3, #10
 8006188:	e019      	b.n	80061be <_printf_i+0x102>
 800618a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800618e:	6805      	ldr	r5, [r0, #0]
 8006190:	600b      	str	r3, [r1, #0]
 8006192:	bf18      	it	ne
 8006194:	b22d      	sxthne	r5, r5
 8006196:	e7ef      	b.n	8006178 <_printf_i+0xbc>
 8006198:	680b      	ldr	r3, [r1, #0]
 800619a:	6825      	ldr	r5, [r4, #0]
 800619c:	1d18      	adds	r0, r3, #4
 800619e:	6008      	str	r0, [r1, #0]
 80061a0:	0628      	lsls	r0, r5, #24
 80061a2:	d501      	bpl.n	80061a8 <_printf_i+0xec>
 80061a4:	681d      	ldr	r5, [r3, #0]
 80061a6:	e002      	b.n	80061ae <_printf_i+0xf2>
 80061a8:	0669      	lsls	r1, r5, #25
 80061aa:	d5fb      	bpl.n	80061a4 <_printf_i+0xe8>
 80061ac:	881d      	ldrh	r5, [r3, #0]
 80061ae:	4854      	ldr	r0, [pc, #336]	; (8006300 <_printf_i+0x244>)
 80061b0:	2f6f      	cmp	r7, #111	; 0x6f
 80061b2:	bf0c      	ite	eq
 80061b4:	2308      	moveq	r3, #8
 80061b6:	230a      	movne	r3, #10
 80061b8:	2100      	movs	r1, #0
 80061ba:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80061be:	6866      	ldr	r6, [r4, #4]
 80061c0:	60a6      	str	r6, [r4, #8]
 80061c2:	2e00      	cmp	r6, #0
 80061c4:	bfa2      	ittt	ge
 80061c6:	6821      	ldrge	r1, [r4, #0]
 80061c8:	f021 0104 	bicge.w	r1, r1, #4
 80061cc:	6021      	strge	r1, [r4, #0]
 80061ce:	b90d      	cbnz	r5, 80061d4 <_printf_i+0x118>
 80061d0:	2e00      	cmp	r6, #0
 80061d2:	d04d      	beq.n	8006270 <_printf_i+0x1b4>
 80061d4:	4616      	mov	r6, r2
 80061d6:	fbb5 f1f3 	udiv	r1, r5, r3
 80061da:	fb03 5711 	mls	r7, r3, r1, r5
 80061de:	5dc7      	ldrb	r7, [r0, r7]
 80061e0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80061e4:	462f      	mov	r7, r5
 80061e6:	42bb      	cmp	r3, r7
 80061e8:	460d      	mov	r5, r1
 80061ea:	d9f4      	bls.n	80061d6 <_printf_i+0x11a>
 80061ec:	2b08      	cmp	r3, #8
 80061ee:	d10b      	bne.n	8006208 <_printf_i+0x14c>
 80061f0:	6823      	ldr	r3, [r4, #0]
 80061f2:	07df      	lsls	r7, r3, #31
 80061f4:	d508      	bpl.n	8006208 <_printf_i+0x14c>
 80061f6:	6923      	ldr	r3, [r4, #16]
 80061f8:	6861      	ldr	r1, [r4, #4]
 80061fa:	4299      	cmp	r1, r3
 80061fc:	bfde      	ittt	le
 80061fe:	2330      	movle	r3, #48	; 0x30
 8006200:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006204:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006208:	1b92      	subs	r2, r2, r6
 800620a:	6122      	str	r2, [r4, #16]
 800620c:	f8cd a000 	str.w	sl, [sp]
 8006210:	464b      	mov	r3, r9
 8006212:	aa03      	add	r2, sp, #12
 8006214:	4621      	mov	r1, r4
 8006216:	4640      	mov	r0, r8
 8006218:	f7ff fee2 	bl	8005fe0 <_printf_common>
 800621c:	3001      	adds	r0, #1
 800621e:	d14c      	bne.n	80062ba <_printf_i+0x1fe>
 8006220:	f04f 30ff 	mov.w	r0, #4294967295
 8006224:	b004      	add	sp, #16
 8006226:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800622a:	4835      	ldr	r0, [pc, #212]	; (8006300 <_printf_i+0x244>)
 800622c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006230:	6823      	ldr	r3, [r4, #0]
 8006232:	680e      	ldr	r6, [r1, #0]
 8006234:	061f      	lsls	r7, r3, #24
 8006236:	f856 5b04 	ldr.w	r5, [r6], #4
 800623a:	600e      	str	r6, [r1, #0]
 800623c:	d514      	bpl.n	8006268 <_printf_i+0x1ac>
 800623e:	07d9      	lsls	r1, r3, #31
 8006240:	bf44      	itt	mi
 8006242:	f043 0320 	orrmi.w	r3, r3, #32
 8006246:	6023      	strmi	r3, [r4, #0]
 8006248:	b91d      	cbnz	r5, 8006252 <_printf_i+0x196>
 800624a:	6823      	ldr	r3, [r4, #0]
 800624c:	f023 0320 	bic.w	r3, r3, #32
 8006250:	6023      	str	r3, [r4, #0]
 8006252:	2310      	movs	r3, #16
 8006254:	e7b0      	b.n	80061b8 <_printf_i+0xfc>
 8006256:	6823      	ldr	r3, [r4, #0]
 8006258:	f043 0320 	orr.w	r3, r3, #32
 800625c:	6023      	str	r3, [r4, #0]
 800625e:	2378      	movs	r3, #120	; 0x78
 8006260:	4828      	ldr	r0, [pc, #160]	; (8006304 <_printf_i+0x248>)
 8006262:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006266:	e7e3      	b.n	8006230 <_printf_i+0x174>
 8006268:	065e      	lsls	r6, r3, #25
 800626a:	bf48      	it	mi
 800626c:	b2ad      	uxthmi	r5, r5
 800626e:	e7e6      	b.n	800623e <_printf_i+0x182>
 8006270:	4616      	mov	r6, r2
 8006272:	e7bb      	b.n	80061ec <_printf_i+0x130>
 8006274:	680b      	ldr	r3, [r1, #0]
 8006276:	6826      	ldr	r6, [r4, #0]
 8006278:	6960      	ldr	r0, [r4, #20]
 800627a:	1d1d      	adds	r5, r3, #4
 800627c:	600d      	str	r5, [r1, #0]
 800627e:	0635      	lsls	r5, r6, #24
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	d501      	bpl.n	8006288 <_printf_i+0x1cc>
 8006284:	6018      	str	r0, [r3, #0]
 8006286:	e002      	b.n	800628e <_printf_i+0x1d2>
 8006288:	0671      	lsls	r1, r6, #25
 800628a:	d5fb      	bpl.n	8006284 <_printf_i+0x1c8>
 800628c:	8018      	strh	r0, [r3, #0]
 800628e:	2300      	movs	r3, #0
 8006290:	6123      	str	r3, [r4, #16]
 8006292:	4616      	mov	r6, r2
 8006294:	e7ba      	b.n	800620c <_printf_i+0x150>
 8006296:	680b      	ldr	r3, [r1, #0]
 8006298:	1d1a      	adds	r2, r3, #4
 800629a:	600a      	str	r2, [r1, #0]
 800629c:	681e      	ldr	r6, [r3, #0]
 800629e:	6862      	ldr	r2, [r4, #4]
 80062a0:	2100      	movs	r1, #0
 80062a2:	4630      	mov	r0, r6
 80062a4:	f7fa f81c 	bl	80002e0 <memchr>
 80062a8:	b108      	cbz	r0, 80062ae <_printf_i+0x1f2>
 80062aa:	1b80      	subs	r0, r0, r6
 80062ac:	6060      	str	r0, [r4, #4]
 80062ae:	6863      	ldr	r3, [r4, #4]
 80062b0:	6123      	str	r3, [r4, #16]
 80062b2:	2300      	movs	r3, #0
 80062b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80062b8:	e7a8      	b.n	800620c <_printf_i+0x150>
 80062ba:	6923      	ldr	r3, [r4, #16]
 80062bc:	4632      	mov	r2, r6
 80062be:	4649      	mov	r1, r9
 80062c0:	4640      	mov	r0, r8
 80062c2:	47d0      	blx	sl
 80062c4:	3001      	adds	r0, #1
 80062c6:	d0ab      	beq.n	8006220 <_printf_i+0x164>
 80062c8:	6823      	ldr	r3, [r4, #0]
 80062ca:	079b      	lsls	r3, r3, #30
 80062cc:	d413      	bmi.n	80062f6 <_printf_i+0x23a>
 80062ce:	68e0      	ldr	r0, [r4, #12]
 80062d0:	9b03      	ldr	r3, [sp, #12]
 80062d2:	4298      	cmp	r0, r3
 80062d4:	bfb8      	it	lt
 80062d6:	4618      	movlt	r0, r3
 80062d8:	e7a4      	b.n	8006224 <_printf_i+0x168>
 80062da:	2301      	movs	r3, #1
 80062dc:	4632      	mov	r2, r6
 80062de:	4649      	mov	r1, r9
 80062e0:	4640      	mov	r0, r8
 80062e2:	47d0      	blx	sl
 80062e4:	3001      	adds	r0, #1
 80062e6:	d09b      	beq.n	8006220 <_printf_i+0x164>
 80062e8:	3501      	adds	r5, #1
 80062ea:	68e3      	ldr	r3, [r4, #12]
 80062ec:	9903      	ldr	r1, [sp, #12]
 80062ee:	1a5b      	subs	r3, r3, r1
 80062f0:	42ab      	cmp	r3, r5
 80062f2:	dcf2      	bgt.n	80062da <_printf_i+0x21e>
 80062f4:	e7eb      	b.n	80062ce <_printf_i+0x212>
 80062f6:	2500      	movs	r5, #0
 80062f8:	f104 0619 	add.w	r6, r4, #25
 80062fc:	e7f5      	b.n	80062ea <_printf_i+0x22e>
 80062fe:	bf00      	nop
 8006300:	0800645d 	.word	0x0800645d
 8006304:	0800646e 	.word	0x0800646e

08006308 <memmove>:
 8006308:	4288      	cmp	r0, r1
 800630a:	b510      	push	{r4, lr}
 800630c:	eb01 0402 	add.w	r4, r1, r2
 8006310:	d902      	bls.n	8006318 <memmove+0x10>
 8006312:	4284      	cmp	r4, r0
 8006314:	4623      	mov	r3, r4
 8006316:	d807      	bhi.n	8006328 <memmove+0x20>
 8006318:	1e43      	subs	r3, r0, #1
 800631a:	42a1      	cmp	r1, r4
 800631c:	d008      	beq.n	8006330 <memmove+0x28>
 800631e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006322:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006326:	e7f8      	b.n	800631a <memmove+0x12>
 8006328:	4402      	add	r2, r0
 800632a:	4601      	mov	r1, r0
 800632c:	428a      	cmp	r2, r1
 800632e:	d100      	bne.n	8006332 <memmove+0x2a>
 8006330:	bd10      	pop	{r4, pc}
 8006332:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006336:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800633a:	e7f7      	b.n	800632c <memmove+0x24>

0800633c <_realloc_r>:
 800633c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800633e:	4607      	mov	r7, r0
 8006340:	4614      	mov	r4, r2
 8006342:	460e      	mov	r6, r1
 8006344:	b921      	cbnz	r1, 8006350 <_realloc_r+0x14>
 8006346:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800634a:	4611      	mov	r1, r2
 800634c:	f7ff bb88 	b.w	8005a60 <_malloc_r>
 8006350:	b922      	cbnz	r2, 800635c <_realloc_r+0x20>
 8006352:	f7ff fc99 	bl	8005c88 <_free_r>
 8006356:	4625      	mov	r5, r4
 8006358:	4628      	mov	r0, r5
 800635a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800635c:	f000 f814 	bl	8006388 <_malloc_usable_size_r>
 8006360:	42a0      	cmp	r0, r4
 8006362:	d20f      	bcs.n	8006384 <_realloc_r+0x48>
 8006364:	4621      	mov	r1, r4
 8006366:	4638      	mov	r0, r7
 8006368:	f7ff fb7a 	bl	8005a60 <_malloc_r>
 800636c:	4605      	mov	r5, r0
 800636e:	2800      	cmp	r0, #0
 8006370:	d0f2      	beq.n	8006358 <_realloc_r+0x1c>
 8006372:	4631      	mov	r1, r6
 8006374:	4622      	mov	r2, r4
 8006376:	f7ff fb5d 	bl	8005a34 <memcpy>
 800637a:	4631      	mov	r1, r6
 800637c:	4638      	mov	r0, r7
 800637e:	f7ff fc83 	bl	8005c88 <_free_r>
 8006382:	e7e9      	b.n	8006358 <_realloc_r+0x1c>
 8006384:	4635      	mov	r5, r6
 8006386:	e7e7      	b.n	8006358 <_realloc_r+0x1c>

08006388 <_malloc_usable_size_r>:
 8006388:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800638c:	1f18      	subs	r0, r3, #4
 800638e:	2b00      	cmp	r3, #0
 8006390:	bfbc      	itt	lt
 8006392:	580b      	ldrlt	r3, [r1, r0]
 8006394:	18c0      	addlt	r0, r0, r3
 8006396:	4770      	bx	lr

08006398 <_init>:
 8006398:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800639a:	bf00      	nop
 800639c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800639e:	bc08      	pop	{r3}
 80063a0:	469e      	mov	lr, r3
 80063a2:	4770      	bx	lr

080063a4 <_fini>:
 80063a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063a6:	bf00      	nop
 80063a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80063aa:	bc08      	pop	{r3}
 80063ac:	469e      	mov	lr, r3
 80063ae:	4770      	bx	lr
