
nucleo_h745zi_q_temp__system_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008c40  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000118  08008ee0  08008ee0  00018ee0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008ff8  08008ff8  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  08008ff8  08008ff8  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008ff8  08008ff8  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008ff8  08008ff8  00018ff8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008ffc  08008ffc  00018ffc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  24000000  08009000  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000040fc  24000078  08009078  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  24004174  08009078  00024174  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   000250f1  00000000  00000000  000200a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000041ba  00000000  00000000  00045197  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001370  00000000  00000000  00049358  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000011f8  00000000  00000000  0004a6c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003c140  00000000  00000000  0004b8c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001867d  00000000  00000000  00087a00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0018cd13  00000000  00000000  000a007d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0022cd90  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000055a8  00000000  00000000  0022cde4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000078 	.word	0x24000078
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08008ec8 	.word	0x08008ec8

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400007c 	.word	0x2400007c
 80002dc:	08008ec8 	.word	0x08008ec8

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000380:	b480      	push	{r7}
 8000382:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000384:	4b3f      	ldr	r3, [pc, #252]	; (8000484 <SystemInit+0x104>)
 8000386:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800038a:	4a3e      	ldr	r2, [pc, #248]	; (8000484 <SystemInit+0x104>)
 800038c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000390:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8000394:	4b3b      	ldr	r3, [pc, #236]	; (8000484 <SystemInit+0x104>)
 8000396:	691b      	ldr	r3, [r3, #16]
 8000398:	4a3a      	ldr	r2, [pc, #232]	; (8000484 <SystemInit+0x104>)
 800039a:	f043 0310 	orr.w	r3, r3, #16
 800039e:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80003a0:	4b39      	ldr	r3, [pc, #228]	; (8000488 <SystemInit+0x108>)
 80003a2:	681b      	ldr	r3, [r3, #0]
 80003a4:	f003 030f 	and.w	r3, r3, #15
 80003a8:	2b06      	cmp	r3, #6
 80003aa:	d807      	bhi.n	80003bc <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80003ac:	4b36      	ldr	r3, [pc, #216]	; (8000488 <SystemInit+0x108>)
 80003ae:	681b      	ldr	r3, [r3, #0]
 80003b0:	f023 030f 	bic.w	r3, r3, #15
 80003b4:	4a34      	ldr	r2, [pc, #208]	; (8000488 <SystemInit+0x108>)
 80003b6:	f043 0307 	orr.w	r3, r3, #7
 80003ba:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80003bc:	4b33      	ldr	r3, [pc, #204]	; (800048c <SystemInit+0x10c>)
 80003be:	681b      	ldr	r3, [r3, #0]
 80003c0:	4a32      	ldr	r2, [pc, #200]	; (800048c <SystemInit+0x10c>)
 80003c2:	f043 0301 	orr.w	r3, r3, #1
 80003c6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80003c8:	4b30      	ldr	r3, [pc, #192]	; (800048c <SystemInit+0x10c>)
 80003ca:	2200      	movs	r2, #0
 80003cc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80003ce:	4b2f      	ldr	r3, [pc, #188]	; (800048c <SystemInit+0x10c>)
 80003d0:	681a      	ldr	r2, [r3, #0]
 80003d2:	492e      	ldr	r1, [pc, #184]	; (800048c <SystemInit+0x10c>)
 80003d4:	4b2e      	ldr	r3, [pc, #184]	; (8000490 <SystemInit+0x110>)
 80003d6:	4013      	ands	r3, r2
 80003d8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80003da:	4b2b      	ldr	r3, [pc, #172]	; (8000488 <SystemInit+0x108>)
 80003dc:	681b      	ldr	r3, [r3, #0]
 80003de:	f003 0308 	and.w	r3, r3, #8
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d007      	beq.n	80003f6 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80003e6:	4b28      	ldr	r3, [pc, #160]	; (8000488 <SystemInit+0x108>)
 80003e8:	681b      	ldr	r3, [r3, #0]
 80003ea:	f023 030f 	bic.w	r3, r3, #15
 80003ee:	4a26      	ldr	r2, [pc, #152]	; (8000488 <SystemInit+0x108>)
 80003f0:	f043 0307 	orr.w	r3, r3, #7
 80003f4:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80003f6:	4b25      	ldr	r3, [pc, #148]	; (800048c <SystemInit+0x10c>)
 80003f8:	2200      	movs	r2, #0
 80003fa:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80003fc:	4b23      	ldr	r3, [pc, #140]	; (800048c <SystemInit+0x10c>)
 80003fe:	2200      	movs	r2, #0
 8000400:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000402:	4b22      	ldr	r3, [pc, #136]	; (800048c <SystemInit+0x10c>)
 8000404:	2200      	movs	r2, #0
 8000406:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000408:	4b20      	ldr	r3, [pc, #128]	; (800048c <SystemInit+0x10c>)
 800040a:	4a22      	ldr	r2, [pc, #136]	; (8000494 <SystemInit+0x114>)
 800040c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800040e:	4b1f      	ldr	r3, [pc, #124]	; (800048c <SystemInit+0x10c>)
 8000410:	4a21      	ldr	r2, [pc, #132]	; (8000498 <SystemInit+0x118>)
 8000412:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000414:	4b1d      	ldr	r3, [pc, #116]	; (800048c <SystemInit+0x10c>)
 8000416:	4a21      	ldr	r2, [pc, #132]	; (800049c <SystemInit+0x11c>)
 8000418:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800041a:	4b1c      	ldr	r3, [pc, #112]	; (800048c <SystemInit+0x10c>)
 800041c:	2200      	movs	r2, #0
 800041e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000420:	4b1a      	ldr	r3, [pc, #104]	; (800048c <SystemInit+0x10c>)
 8000422:	4a1e      	ldr	r2, [pc, #120]	; (800049c <SystemInit+0x11c>)
 8000424:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000426:	4b19      	ldr	r3, [pc, #100]	; (800048c <SystemInit+0x10c>)
 8000428:	2200      	movs	r2, #0
 800042a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800042c:	4b17      	ldr	r3, [pc, #92]	; (800048c <SystemInit+0x10c>)
 800042e:	4a1b      	ldr	r2, [pc, #108]	; (800049c <SystemInit+0x11c>)
 8000430:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000432:	4b16      	ldr	r3, [pc, #88]	; (800048c <SystemInit+0x10c>)
 8000434:	2200      	movs	r2, #0
 8000436:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000438:	4b14      	ldr	r3, [pc, #80]	; (800048c <SystemInit+0x10c>)
 800043a:	681b      	ldr	r3, [r3, #0]
 800043c:	4a13      	ldr	r2, [pc, #76]	; (800048c <SystemInit+0x10c>)
 800043e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000442:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000444:	4b11      	ldr	r3, [pc, #68]	; (800048c <SystemInit+0x10c>)
 8000446:	2200      	movs	r2, #0
 8000448:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800044a:	4b15      	ldr	r3, [pc, #84]	; (80004a0 <SystemInit+0x120>)
 800044c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800044e:	4a14      	ldr	r2, [pc, #80]	; (80004a0 <SystemInit+0x120>)
 8000450:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000454:	6253      	str	r3, [r2, #36]	; 0x24


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000456:	4b13      	ldr	r3, [pc, #76]	; (80004a4 <SystemInit+0x124>)
 8000458:	681a      	ldr	r2, [r3, #0]
 800045a:	4b13      	ldr	r3, [pc, #76]	; (80004a8 <SystemInit+0x128>)
 800045c:	4013      	ands	r3, r2
 800045e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000462:	d202      	bcs.n	800046a <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000464:	4b11      	ldr	r3, [pc, #68]	; (80004ac <SystemInit+0x12c>)
 8000466:	2201      	movs	r2, #1
 8000468:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800046a:	4b11      	ldr	r3, [pc, #68]	; (80004b0 <SystemInit+0x130>)
 800046c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000470:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 8000472:	4b04      	ldr	r3, [pc, #16]	; (8000484 <SystemInit+0x104>)
 8000474:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000478:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 800047a:	bf00      	nop
 800047c:	46bd      	mov	sp, r7
 800047e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000482:	4770      	bx	lr
 8000484:	e000ed00 	.word	0xe000ed00
 8000488:	52002000 	.word	0x52002000
 800048c:	58024400 	.word	0x58024400
 8000490:	eaf6ed7f 	.word	0xeaf6ed7f
 8000494:	02020200 	.word	0x02020200
 8000498:	01ff0000 	.word	0x01ff0000
 800049c:	01010280 	.word	0x01010280
 80004a0:	580000c0 	.word	0x580000c0
 80004a4:	5c001000 	.word	0x5c001000
 80004a8:	ffff0000 	.word	0xffff0000
 80004ac:	51008108 	.word	0x51008108
 80004b0:	52004000 	.word	0x52004000

080004b4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80004b4:	b480      	push	{r7}
 80004b6:	b085      	sub	sp, #20
 80004b8:	af00      	add	r7, sp, #0
 80004ba:	60f8      	str	r0, [r7, #12]
 80004bc:	60b9      	str	r1, [r7, #8]
 80004be:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80004c0:	68fb      	ldr	r3, [r7, #12]
 80004c2:	4a07      	ldr	r2, [pc, #28]	; (80004e0 <vApplicationGetIdleTaskMemory+0x2c>)
 80004c4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80004c6:	68bb      	ldr	r3, [r7, #8]
 80004c8:	4a06      	ldr	r2, [pc, #24]	; (80004e4 <vApplicationGetIdleTaskMemory+0x30>)
 80004ca:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	2280      	movs	r2, #128	; 0x80
 80004d0:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80004d2:	bf00      	nop
 80004d4:	3714      	adds	r7, #20
 80004d6:	46bd      	mov	sp, r7
 80004d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004dc:	4770      	bx	lr
 80004de:	bf00      	nop
 80004e0:	24000094 	.word	0x24000094
 80004e4:	24000148 	.word	0x24000148

080004e8 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b086      	sub	sp, #24
 80004ec:	af02      	add	r7, sp, #8
 80004ee:	4603      	mov	r3, r0
 80004f0:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 80004f2:	79fb      	ldrb	r3, [r7, #7]
 80004f4:	f023 030f 	bic.w	r3, r3, #15
 80004f8:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 80004fa:	79fb      	ldrb	r3, [r7, #7]
 80004fc:	011b      	lsls	r3, r3, #4
 80004fe:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000500:	7bfb      	ldrb	r3, [r7, #15]
 8000502:	f043 030c 	orr.w	r3, r3, #12
 8000506:	b2db      	uxtb	r3, r3
 8000508:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 800050a:	7bfb      	ldrb	r3, [r7, #15]
 800050c:	f043 0308 	orr.w	r3, r3, #8
 8000510:	b2db      	uxtb	r3, r3
 8000512:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8000514:	7bbb      	ldrb	r3, [r7, #14]
 8000516:	f043 030c 	orr.w	r3, r3, #12
 800051a:	b2db      	uxtb	r3, r3
 800051c:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 800051e:	7bbb      	ldrb	r3, [r7, #14]
 8000520:	f043 0308 	orr.w	r3, r3, #8
 8000524:	b2db      	uxtb	r3, r3
 8000526:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000528:	f107 0208 	add.w	r2, r7, #8
 800052c:	2364      	movs	r3, #100	; 0x64
 800052e:	9300      	str	r3, [sp, #0]
 8000530:	2304      	movs	r3, #4
 8000532:	214e      	movs	r1, #78	; 0x4e
 8000534:	4803      	ldr	r0, [pc, #12]	; (8000544 <lcd_send_cmd+0x5c>)
 8000536:	f002 fc41 	bl	8002dbc <HAL_I2C_Master_Transmit>
}
 800053a:	bf00      	nop
 800053c:	3710      	adds	r7, #16
 800053e:	46bd      	mov	sp, r7
 8000540:	bd80      	pop	{r7, pc}
 8000542:	bf00      	nop
 8000544:	240040a8 	.word	0x240040a8

08000548 <lcd_send_data>:

void lcd_send_data (char data)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b086      	sub	sp, #24
 800054c:	af02      	add	r7, sp, #8
 800054e:	4603      	mov	r3, r0
 8000550:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8000552:	79fb      	ldrb	r3, [r7, #7]
 8000554:	f023 030f 	bic.w	r3, r3, #15
 8000558:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 800055a:	79fb      	ldrb	r3, [r7, #7]
 800055c:	011b      	lsls	r3, r3, #4
 800055e:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8000560:	7bfb      	ldrb	r3, [r7, #15]
 8000562:	f043 030d 	orr.w	r3, r3, #13
 8000566:	b2db      	uxtb	r3, r3
 8000568:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 800056a:	7bfb      	ldrb	r3, [r7, #15]
 800056c:	f043 0309 	orr.w	r3, r3, #9
 8000570:	b2db      	uxtb	r3, r3
 8000572:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8000574:	7bbb      	ldrb	r3, [r7, #14]
 8000576:	f043 030d 	orr.w	r3, r3, #13
 800057a:	b2db      	uxtb	r3, r3
 800057c:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 800057e:	7bbb      	ldrb	r3, [r7, #14]
 8000580:	f043 0309 	orr.w	r3, r3, #9
 8000584:	b2db      	uxtb	r3, r3
 8000586:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000588:	f107 0208 	add.w	r2, r7, #8
 800058c:	2364      	movs	r3, #100	; 0x64
 800058e:	9300      	str	r3, [sp, #0]
 8000590:	2304      	movs	r3, #4
 8000592:	214e      	movs	r1, #78	; 0x4e
 8000594:	4803      	ldr	r0, [pc, #12]	; (80005a4 <lcd_send_data+0x5c>)
 8000596:	f002 fc11 	bl	8002dbc <HAL_I2C_Master_Transmit>
}
 800059a:	bf00      	nop
 800059c:	3710      	adds	r7, #16
 800059e:	46bd      	mov	sp, r7
 80005a0:	bd80      	pop	{r7, pc}
 80005a2:	bf00      	nop
 80005a4:	240040a8 	.word	0x240040a8

080005a8 <lcd_clear>:

void lcd_clear (void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b082      	sub	sp, #8
 80005ac:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x80);
 80005ae:	2080      	movs	r0, #128	; 0x80
 80005b0:	f7ff ff9a 	bl	80004e8 <lcd_send_cmd>
	for (int i=0; i<70; i++)
 80005b4:	2300      	movs	r3, #0
 80005b6:	607b      	str	r3, [r7, #4]
 80005b8:	e005      	b.n	80005c6 <lcd_clear+0x1e>
	{
		lcd_send_data (' ');
 80005ba:	2020      	movs	r0, #32
 80005bc:	f7ff ffc4 	bl	8000548 <lcd_send_data>
	for (int i=0; i<70; i++)
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	3301      	adds	r3, #1
 80005c4:	607b      	str	r3, [r7, #4]
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	2b45      	cmp	r3, #69	; 0x45
 80005ca:	ddf6      	ble.n	80005ba <lcd_clear+0x12>
	}
}
 80005cc:	bf00      	nop
 80005ce:	bf00      	nop
 80005d0:	3708      	adds	r7, #8
 80005d2:	46bd      	mov	sp, r7
 80005d4:	bd80      	pop	{r7, pc}

080005d6 <lcd_put_cur>:

void lcd_put_cur(int row, int col)
{
 80005d6:	b580      	push	{r7, lr}
 80005d8:	b082      	sub	sp, #8
 80005da:	af00      	add	r7, sp, #0
 80005dc:	6078      	str	r0, [r7, #4]
 80005de:	6039      	str	r1, [r7, #0]
    switch (row)
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d003      	beq.n	80005ee <lcd_put_cur+0x18>
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	2b01      	cmp	r3, #1
 80005ea:	d005      	beq.n	80005f8 <lcd_put_cur+0x22>
 80005ec:	e009      	b.n	8000602 <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 80005ee:	683b      	ldr	r3, [r7, #0]
 80005f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005f4:	603b      	str	r3, [r7, #0]
            break;
 80005f6:	e004      	b.n	8000602 <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 80005f8:	683b      	ldr	r3, [r7, #0]
 80005fa:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80005fe:	603b      	str	r3, [r7, #0]
            break;
 8000600:	bf00      	nop
    }

    lcd_send_cmd (col);
 8000602:	683b      	ldr	r3, [r7, #0]
 8000604:	b2db      	uxtb	r3, r3
 8000606:	4618      	mov	r0, r3
 8000608:	f7ff ff6e 	bl	80004e8 <lcd_send_cmd>
}
 800060c:	bf00      	nop
 800060e:	3708      	adds	r7, #8
 8000610:	46bd      	mov	sp, r7
 8000612:	bd80      	pop	{r7, pc}

08000614 <lcd_init>:


void lcd_init (void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 8000618:	2032      	movs	r0, #50	; 0x32
 800061a:	f000 fd17 	bl	800104c <HAL_Delay>
	lcd_send_cmd (0x30);
 800061e:	2030      	movs	r0, #48	; 0x30
 8000620:	f7ff ff62 	bl	80004e8 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 8000624:	2005      	movs	r0, #5
 8000626:	f000 fd11 	bl	800104c <HAL_Delay>
	lcd_send_cmd (0x30);
 800062a:	2030      	movs	r0, #48	; 0x30
 800062c:	f7ff ff5c 	bl	80004e8 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 8000630:	2001      	movs	r0, #1
 8000632:	f000 fd0b 	bl	800104c <HAL_Delay>
	lcd_send_cmd (0x30);
 8000636:	2030      	movs	r0, #48	; 0x30
 8000638:	f7ff ff56 	bl	80004e8 <lcd_send_cmd>
	HAL_Delay(10);
 800063c:	200a      	movs	r0, #10
 800063e:	f000 fd05 	bl	800104c <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 8000642:	2020      	movs	r0, #32
 8000644:	f7ff ff50 	bl	80004e8 <lcd_send_cmd>
	HAL_Delay(10);
 8000648:	200a      	movs	r0, #10
 800064a:	f000 fcff 	bl	800104c <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 800064e:	2028      	movs	r0, #40	; 0x28
 8000650:	f7ff ff4a 	bl	80004e8 <lcd_send_cmd>
	HAL_Delay(1);
 8000654:	2001      	movs	r0, #1
 8000656:	f000 fcf9 	bl	800104c <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 800065a:	2008      	movs	r0, #8
 800065c:	f7ff ff44 	bl	80004e8 <lcd_send_cmd>
	HAL_Delay(1);
 8000660:	2001      	movs	r0, #1
 8000662:	f000 fcf3 	bl	800104c <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 8000666:	2001      	movs	r0, #1
 8000668:	f7ff ff3e 	bl	80004e8 <lcd_send_cmd>
	HAL_Delay(1);
 800066c:	2001      	movs	r0, #1
 800066e:	f000 fced 	bl	800104c <HAL_Delay>
	HAL_Delay(1);
 8000672:	2001      	movs	r0, #1
 8000674:	f000 fcea 	bl	800104c <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8000678:	2006      	movs	r0, #6
 800067a:	f7ff ff35 	bl	80004e8 <lcd_send_cmd>
	HAL_Delay(1);
 800067e:	2001      	movs	r0, #1
 8000680:	f000 fce4 	bl	800104c <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8000684:	200c      	movs	r0, #12
 8000686:	f7ff ff2f 	bl	80004e8 <lcd_send_cmd>
}
 800068a:	bf00      	nop
 800068c:	bd80      	pop	{r7, pc}

0800068e <lcd_send_string>:

void lcd_send_string (char *str)
{
 800068e:	b580      	push	{r7, lr}
 8000690:	b082      	sub	sp, #8
 8000692:	af00      	add	r7, sp, #0
 8000694:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8000696:	e006      	b.n	80006a6 <lcd_send_string+0x18>
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	1c5a      	adds	r2, r3, #1
 800069c:	607a      	str	r2, [r7, #4]
 800069e:	781b      	ldrb	r3, [r3, #0]
 80006a0:	4618      	mov	r0, r3
 80006a2:	f7ff ff51 	bl	8000548 <lcd_send_data>
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	781b      	ldrb	r3, [r3, #0]
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d1f4      	bne.n	8000698 <lcd_send_string+0xa>
}
 80006ae:	bf00      	nop
 80006b0:	bf00      	nop
 80006b2:	3708      	adds	r7, #8
 80006b4:	46bd      	mov	sp, r7
 80006b6:	bd80      	pop	{r7, pc}

080006b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b084      	sub	sp, #16
 80006bc:	af02      	add	r7, sp, #8
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 80006be:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80006c2:	607b      	str	r3, [r7, #4]
  while ((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0))
 80006c4:	bf00      	nop
 80006c6:	4b4e      	ldr	r3, [pc, #312]	; (8000800 <main+0x148>)
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d004      	beq.n	80006dc <main+0x24>
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	1e5a      	subs	r2, r3, #1
 80006d6:	607a      	str	r2, [r7, #4]
 80006d8:	2b00      	cmp	r3, #0
 80006da:	dcf4      	bgt.n	80006c6 <main+0xe>
    ;
  if (timeout < 0)
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	2b00      	cmp	r3, #0
 80006e0:	da01      	bge.n	80006e6 <main+0x2e>
  {
    Error_Handler();
 80006e2:	f000 faa6 	bl	8000c32 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006e6:	f000 fc1f 	bl	8000f28 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006ea:	f000 f8a7 	bl	800083c <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
  /* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
  /*HW semaphore Clock enable*/
  __HAL_RCC_HSEM_CLK_ENABLE();
 80006ee:	4b44      	ldr	r3, [pc, #272]	; (8000800 <main+0x148>)
 80006f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006f4:	4a42      	ldr	r2, [pc, #264]	; (8000800 <main+0x148>)
 80006f6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80006fa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80006fe:	4b40      	ldr	r3, [pc, #256]	; (8000800 <main+0x148>)
 8000700:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000704:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000708:	603b      	str	r3, [r7, #0]
 800070a:	683b      	ldr	r3, [r7, #0]
  /*Take HSEM */
  HAL_HSEM_FastTake(HSEM_ID_0);
 800070c:	2000      	movs	r0, #0
 800070e:	f002 fa97 	bl	8002c40 <HAL_HSEM_FastTake>
  /*Release HSEM in order to notify the CPU2(CM4)*/
  HAL_HSEM_Release(HSEM_ID_0, 0);
 8000712:	2100      	movs	r1, #0
 8000714:	2000      	movs	r0, #0
 8000716:	f002 faad 	bl	8002c74 <HAL_HSEM_Release>
  /* wait until CPU2 wakes up from stop mode */
  timeout = 0xFFFF;
 800071a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800071e:	607b      	str	r3, [r7, #4]
  while ((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0))
 8000720:	bf00      	nop
 8000722:	4b37      	ldr	r3, [pc, #220]	; (8000800 <main+0x148>)
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800072a:	2b00      	cmp	r3, #0
 800072c:	d104      	bne.n	8000738 <main+0x80>
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	1e5a      	subs	r2, r3, #1
 8000732:	607a      	str	r2, [r7, #4]
 8000734:	2b00      	cmp	r3, #0
 8000736:	dcf4      	bgt.n	8000722 <main+0x6a>
    ;
  if (timeout < 0)
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	2b00      	cmp	r3, #0
 800073c:	da01      	bge.n	8000742 <main+0x8a>
  {
    Error_Handler();
 800073e:	f000 fa78 	bl	8000c32 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000742:	f000 f9b7 	bl	8000ab4 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000746:	f000 f975 	bl	8000a34 <MX_I2C1_Init>
  MX_ADC1_Init();
 800074a:	f000 f8fb 	bl	8000944 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  lcd_init();
 800074e:	f7ff ff61 	bl	8000614 <lcd_init>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
  queue1 = xQueueCreate(1, sizeof(uint32_t));
 8000752:	2200      	movs	r2, #0
 8000754:	2104      	movs	r1, #4
 8000756:	2001      	movs	r0, #1
 8000758:	f006 fc96 	bl	8007088 <xQueueGenericCreate>
 800075c:	4603      	mov	r3, r0
 800075e:	4a29      	ldr	r2, [pc, #164]	; (8000804 <main+0x14c>)
 8000760:	6013      	str	r3, [r2, #0]
  xQueuePotentiometer = xQueueCreate(1, sizeof(uint16_t));
 8000762:	2200      	movs	r2, #0
 8000764:	2102      	movs	r1, #2
 8000766:	2001      	movs	r0, #1
 8000768:	f006 fc8e 	bl	8007088 <xQueueGenericCreate>
 800076c:	4603      	mov	r3, r0
 800076e:	4a26      	ldr	r2, [pc, #152]	; (8000808 <main+0x150>)
 8000770:	6013      	str	r3, [r2, #0]
  /* Create the thread(s) */
  /* definition and creation of defaultTask */

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  xTaskCreate(vPrintLCD, "Print LCD", 256, NULL, 1, NULL);
 8000772:	2300      	movs	r3, #0
 8000774:	9301      	str	r3, [sp, #4]
 8000776:	2301      	movs	r3, #1
 8000778:	9300      	str	r3, [sp, #0]
 800077a:	2300      	movs	r3, #0
 800077c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000780:	4922      	ldr	r1, [pc, #136]	; (800080c <main+0x154>)
 8000782:	4823      	ldr	r0, [pc, #140]	; (8000810 <main+0x158>)
 8000784:	f007 f825 	bl	80077d2 <xTaskCreate>
  xTaskCreate(vReadTemp, "Read Temperature", 256, NULL, 1, NULL);
 8000788:	2300      	movs	r3, #0
 800078a:	9301      	str	r3, [sp, #4]
 800078c:	2301      	movs	r3, #1
 800078e:	9300      	str	r3, [sp, #0]
 8000790:	2300      	movs	r3, #0
 8000792:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000796:	491f      	ldr	r1, [pc, #124]	; (8000814 <main+0x15c>)
 8000798:	481f      	ldr	r0, [pc, #124]	; (8000818 <main+0x160>)
 800079a:	f007 f81a 	bl	80077d2 <xTaskCreate>
  xTaskCreate(vReadPot, "Read Potentiometer", 256, NULL, 1, NULL);
 800079e:	2300      	movs	r3, #0
 80007a0:	9301      	str	r3, [sp, #4]
 80007a2:	2301      	movs	r3, #1
 80007a4:	9300      	str	r3, [sp, #0]
 80007a6:	2300      	movs	r3, #0
 80007a8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80007ac:	491b      	ldr	r1, [pc, #108]	; (800081c <main+0x164>)
 80007ae:	481c      	ldr	r0, [pc, #112]	; (8000820 <main+0x168>)
 80007b0:	f007 f80f 	bl	80077d2 <xTaskCreate>
  xTaskCreate(vSendDimmer, "Send Dimmer", 256, NULL, 1, NULL);
 80007b4:	2300      	movs	r3, #0
 80007b6:	9301      	str	r3, [sp, #4]
 80007b8:	2301      	movs	r3, #1
 80007ba:	9300      	str	r3, [sp, #0]
 80007bc:	2300      	movs	r3, #0
 80007be:	f44f 7280 	mov.w	r2, #256	; 0x100
 80007c2:	4918      	ldr	r1, [pc, #96]	; (8000824 <main+0x16c>)
 80007c4:	4818      	ldr	r0, [pc, #96]	; (8000828 <main+0x170>)
 80007c6:	f007 f804 	bl	80077d2 <xTaskCreate>
  xTaskCreate(vLevelFans, "Level fans", 256, NULL, 1, NULL);
 80007ca:	2300      	movs	r3, #0
 80007cc:	9301      	str	r3, [sp, #4]
 80007ce:	2301      	movs	r3, #1
 80007d0:	9300      	str	r3, [sp, #0]
 80007d2:	2300      	movs	r3, #0
 80007d4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80007d8:	4914      	ldr	r1, [pc, #80]	; (800082c <main+0x174>)
 80007da:	4815      	ldr	r0, [pc, #84]	; (8000830 <main+0x178>)
 80007dc:	f006 fff9 	bl	80077d2 <xTaskCreate>
  xTaskCreate(vCalculatePID, "Calculate PID", 256, NULL, 1, NULL);
 80007e0:	2300      	movs	r3, #0
 80007e2:	9301      	str	r3, [sp, #4]
 80007e4:	2301      	movs	r3, #1
 80007e6:	9300      	str	r3, [sp, #0]
 80007e8:	2300      	movs	r3, #0
 80007ea:	f44f 7280 	mov.w	r2, #256	; 0x100
 80007ee:	4911      	ldr	r1, [pc, #68]	; (8000834 <main+0x17c>)
 80007f0:	4811      	ldr	r0, [pc, #68]	; (8000838 <main+0x180>)
 80007f2:	f006 ffee 	bl	80077d2 <xTaskCreate>
  /* Start scheduler */
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  lcd_clear();
 80007f6:	f7ff fed7 	bl	80005a8 <lcd_clear>

  /* Start scheduler */
  vTaskStartScheduler();
 80007fa:	f007 f96b 	bl	8007ad4 <vTaskStartScheduler>

  /* We should never get here as control is now taken by the scheduler */
  while (1)
 80007fe:	e7fe      	b.n	80007fe <main+0x146>
 8000800:	58024400 	.word	0x58024400
 8000804:	24004158 	.word	0x24004158
 8000808:	2400415c 	.word	0x2400415c
 800080c:	08008ee0 	.word	0x08008ee0
 8000810:	08000b25 	.word	0x08000b25
 8000814:	08008eec 	.word	0x08008eec
 8000818:	08000b8d 	.word	0x08000b8d
 800081c:	08008f00 	.word	0x08008f00
 8000820:	08000ba5 	.word	0x08000ba5
 8000824:	08008f14 	.word	0x08008f14
 8000828:	08000bf1 	.word	0x08000bf1
 800082c:	08008f20 	.word	0x08008f20
 8000830:	08000c07 	.word	0x08000c07
 8000834:	08008f2c 	.word	0x08008f2c
 8000838:	08000c1d 	.word	0x08000c1d

0800083c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b09c      	sub	sp, #112	; 0x70
 8000840:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000842:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000846:	224c      	movs	r2, #76	; 0x4c
 8000848:	2100      	movs	r1, #0
 800084a:	4618      	mov	r0, r3
 800084c:	f007 fe98 	bl	8008580 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000850:	1d3b      	adds	r3, r7, #4
 8000852:	2220      	movs	r2, #32
 8000854:	2100      	movs	r1, #0
 8000856:	4618      	mov	r0, r3
 8000858:	f007 fe92 	bl	8008580 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 800085c:	2004      	movs	r0, #4
 800085e:	f002 fdad 	bl	80033bc <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000862:	2300      	movs	r3, #0
 8000864:	603b      	str	r3, [r7, #0]
 8000866:	4b34      	ldr	r3, [pc, #208]	; (8000938 <SystemClock_Config+0xfc>)
 8000868:	699b      	ldr	r3, [r3, #24]
 800086a:	4a33      	ldr	r2, [pc, #204]	; (8000938 <SystemClock_Config+0xfc>)
 800086c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000870:	6193      	str	r3, [r2, #24]
 8000872:	4b31      	ldr	r3, [pc, #196]	; (8000938 <SystemClock_Config+0xfc>)
 8000874:	699b      	ldr	r3, [r3, #24]
 8000876:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800087a:	603b      	str	r3, [r7, #0]
 800087c:	4b2f      	ldr	r3, [pc, #188]	; (800093c <SystemClock_Config+0x100>)
 800087e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000880:	4a2e      	ldr	r2, [pc, #184]	; (800093c <SystemClock_Config+0x100>)
 8000882:	f043 0301 	orr.w	r3, r3, #1
 8000886:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000888:	4b2c      	ldr	r3, [pc, #176]	; (800093c <SystemClock_Config+0x100>)
 800088a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800088c:	f003 0301 	and.w	r3, r3, #1
 8000890:	603b      	str	r3, [r7, #0]
 8000892:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000894:	bf00      	nop
 8000896:	4b28      	ldr	r3, [pc, #160]	; (8000938 <SystemClock_Config+0xfc>)
 8000898:	699b      	ldr	r3, [r3, #24]
 800089a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800089e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80008a2:	d1f8      	bne.n	8000896 <SystemClock_Config+0x5a>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 80008a4:	4b26      	ldr	r3, [pc, #152]	; (8000940 <SystemClock_Config+0x104>)
 80008a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80008a8:	f023 0303 	bic.w	r3, r3, #3
 80008ac:	4a24      	ldr	r2, [pc, #144]	; (8000940 <SystemClock_Config+0x104>)
 80008ae:	f043 0302 	orr.w	r3, r3, #2
 80008b2:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008b4:	2301      	movs	r3, #1
 80008b6:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80008b8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80008bc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008be:	2302      	movs	r3, #2
 80008c0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008c2:	2302      	movs	r3, #2
 80008c4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 5;
 80008c6:	2305      	movs	r3, #5
 80008c8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 160;
 80008ca:	23a0      	movs	r3, #160	; 0xa0
 80008cc:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80008ce:	2302      	movs	r3, #2
 80008d0:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80008d2:	2302      	movs	r3, #2
 80008d4:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80008d6:	2302      	movs	r3, #2
 80008d8:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 80008da:	2308      	movs	r3, #8
 80008dc:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80008de:	2300      	movs	r3, #0
 80008e0:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80008e2:	2300      	movs	r3, #0
 80008e4:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008ea:	4618      	mov	r0, r3
 80008ec:	f002 fdc0 	bl	8003470 <HAL_RCC_OscConfig>
 80008f0:	4603      	mov	r3, r0
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d001      	beq.n	80008fa <SystemClock_Config+0xbe>
  {
    Error_Handler();
 80008f6:	f000 f99c 	bl	8000c32 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008fa:	233f      	movs	r3, #63	; 0x3f
 80008fc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008fe:	2303      	movs	r3, #3
 8000900:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000902:	2300      	movs	r3, #0
 8000904:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000906:	2308      	movs	r3, #8
 8000908:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800090a:	2340      	movs	r3, #64	; 0x40
 800090c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800090e:	2340      	movs	r3, #64	; 0x40
 8000910:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000912:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000916:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000918:	2340      	movs	r3, #64	; 0x40
 800091a:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800091c:	1d3b      	adds	r3, r7, #4
 800091e:	2102      	movs	r1, #2
 8000920:	4618      	mov	r0, r3
 8000922:	f003 f9b5 	bl	8003c90 <HAL_RCC_ClockConfig>
 8000926:	4603      	mov	r3, r0
 8000928:	2b00      	cmp	r3, #0
 800092a:	d001      	beq.n	8000930 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 800092c:	f000 f981 	bl	8000c32 <Error_Handler>
  }
}
 8000930:	bf00      	nop
 8000932:	3770      	adds	r7, #112	; 0x70
 8000934:	46bd      	mov	sp, r7
 8000936:	bd80      	pop	{r7, pc}
 8000938:	58024800 	.word	0x58024800
 800093c:	58000400 	.word	0x58000400
 8000940:	58024400 	.word	0x58024400

08000944 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b08a      	sub	sp, #40	; 0x28
 8000948:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800094a:	f107 031c 	add.w	r3, r7, #28
 800094e:	2200      	movs	r2, #0
 8000950:	601a      	str	r2, [r3, #0]
 8000952:	605a      	str	r2, [r3, #4]
 8000954:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000956:	463b      	mov	r3, r7
 8000958:	2200      	movs	r2, #0
 800095a:	601a      	str	r2, [r3, #0]
 800095c:	605a      	str	r2, [r3, #4]
 800095e:	609a      	str	r2, [r3, #8]
 8000960:	60da      	str	r2, [r3, #12]
 8000962:	611a      	str	r2, [r3, #16]
 8000964:	615a      	str	r2, [r3, #20]
 8000966:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000968:	4b2f      	ldr	r3, [pc, #188]	; (8000a28 <MX_ADC1_Init+0xe4>)
 800096a:	4a30      	ldr	r2, [pc, #192]	; (8000a2c <MX_ADC1_Init+0xe8>)
 800096c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800096e:	4b2e      	ldr	r3, [pc, #184]	; (8000a28 <MX_ADC1_Init+0xe4>)
 8000970:	2200      	movs	r2, #0
 8000972:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8000974:	4b2c      	ldr	r3, [pc, #176]	; (8000a28 <MX_ADC1_Init+0xe4>)
 8000976:	2200      	movs	r2, #0
 8000978:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800097a:	4b2b      	ldr	r3, [pc, #172]	; (8000a28 <MX_ADC1_Init+0xe4>)
 800097c:	2200      	movs	r2, #0
 800097e:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000980:	4b29      	ldr	r3, [pc, #164]	; (8000a28 <MX_ADC1_Init+0xe4>)
 8000982:	2204      	movs	r2, #4
 8000984:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000986:	4b28      	ldr	r3, [pc, #160]	; (8000a28 <MX_ADC1_Init+0xe4>)
 8000988:	2200      	movs	r2, #0
 800098a:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800098c:	4b26      	ldr	r3, [pc, #152]	; (8000a28 <MX_ADC1_Init+0xe4>)
 800098e:	2201      	movs	r2, #1
 8000990:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 8000992:	4b25      	ldr	r3, [pc, #148]	; (8000a28 <MX_ADC1_Init+0xe4>)
 8000994:	2201      	movs	r2, #1
 8000996:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000998:	4b23      	ldr	r3, [pc, #140]	; (8000a28 <MX_ADC1_Init+0xe4>)
 800099a:	2200      	movs	r2, #0
 800099c:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800099e:	4b22      	ldr	r3, [pc, #136]	; (8000a28 <MX_ADC1_Init+0xe4>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80009a4:	4b20      	ldr	r3, [pc, #128]	; (8000a28 <MX_ADC1_Init+0xe4>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 80009aa:	4b1f      	ldr	r3, [pc, #124]	; (8000a28 <MX_ADC1_Init+0xe4>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80009b0:	4b1d      	ldr	r3, [pc, #116]	; (8000a28 <MX_ADC1_Init+0xe4>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80009b6:	4b1c      	ldr	r3, [pc, #112]	; (8000a28 <MX_ADC1_Init+0xe4>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80009bc:	4b1a      	ldr	r3, [pc, #104]	; (8000a28 <MX_ADC1_Init+0xe4>)
 80009be:	2200      	movs	r2, #0
 80009c0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80009c4:	4818      	ldr	r0, [pc, #96]	; (8000a28 <MX_ADC1_Init+0xe4>)
 80009c6:	f000 fd53 	bl	8001470 <HAL_ADC_Init>
 80009ca:	4603      	mov	r3, r0
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d001      	beq.n	80009d4 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80009d0:	f000 f92f 	bl	8000c32 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80009d4:	2300      	movs	r3, #0
 80009d6:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80009d8:	f107 031c 	add.w	r3, r7, #28
 80009dc:	4619      	mov	r1, r3
 80009de:	4812      	ldr	r0, [pc, #72]	; (8000a28 <MX_ADC1_Init+0xe4>)
 80009e0:	f001 fdbc 	bl	800255c <HAL_ADCEx_MultiModeConfigChannel>
 80009e4:	4603      	mov	r3, r0
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d001      	beq.n	80009ee <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 80009ea:	f000 f922 	bl	8000c32 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 80009ee:	4b10      	ldr	r3, [pc, #64]	; (8000a30 <MX_ADC1_Init+0xec>)
 80009f0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80009f2:	2306      	movs	r3, #6
 80009f4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80009f6:	2300      	movs	r3, #0
 80009f8:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80009fa:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80009fe:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000a00:	2304      	movs	r3, #4
 8000a02:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000a04:	2300      	movs	r3, #0
 8000a06:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a0c:	463b      	mov	r3, r7
 8000a0e:	4619      	mov	r1, r3
 8000a10:	4805      	ldr	r0, [pc, #20]	; (8000a28 <MX_ADC1_Init+0xe4>)
 8000a12:	f001 f899 	bl	8001b48 <HAL_ADC_ConfigChannel>
 8000a16:	4603      	mov	r3, r0
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d001      	beq.n	8000a20 <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 8000a1c:	f000 f909 	bl	8000c32 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000a20:	bf00      	nop
 8000a22:	3728      	adds	r7, #40	; 0x28
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bd80      	pop	{r7, pc}
 8000a28:	240040f4 	.word	0x240040f4
 8000a2c:	40022000 	.word	0x40022000
 8000a30:	3ef08000 	.word	0x3ef08000

08000a34 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000a38:	4b1b      	ldr	r3, [pc, #108]	; (8000aa8 <MX_I2C1_Init+0x74>)
 8000a3a:	4a1c      	ldr	r2, [pc, #112]	; (8000aac <MX_I2C1_Init+0x78>)
 8000a3c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10C0ECFF;
 8000a3e:	4b1a      	ldr	r3, [pc, #104]	; (8000aa8 <MX_I2C1_Init+0x74>)
 8000a40:	4a1b      	ldr	r2, [pc, #108]	; (8000ab0 <MX_I2C1_Init+0x7c>)
 8000a42:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000a44:	4b18      	ldr	r3, [pc, #96]	; (8000aa8 <MX_I2C1_Init+0x74>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a4a:	4b17      	ldr	r3, [pc, #92]	; (8000aa8 <MX_I2C1_Init+0x74>)
 8000a4c:	2201      	movs	r2, #1
 8000a4e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a50:	4b15      	ldr	r3, [pc, #84]	; (8000aa8 <MX_I2C1_Init+0x74>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000a56:	4b14      	ldr	r3, [pc, #80]	; (8000aa8 <MX_I2C1_Init+0x74>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a5c:	4b12      	ldr	r3, [pc, #72]	; (8000aa8 <MX_I2C1_Init+0x74>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a62:	4b11      	ldr	r3, [pc, #68]	; (8000aa8 <MX_I2C1_Init+0x74>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a68:	4b0f      	ldr	r3, [pc, #60]	; (8000aa8 <MX_I2C1_Init+0x74>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a6e:	480e      	ldr	r0, [pc, #56]	; (8000aa8 <MX_I2C1_Init+0x74>)
 8000a70:	f002 f914 	bl	8002c9c <HAL_I2C_Init>
 8000a74:	4603      	mov	r3, r0
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d001      	beq.n	8000a7e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000a7a:	f000 f8da 	bl	8000c32 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a7e:	2100      	movs	r1, #0
 8000a80:	4809      	ldr	r0, [pc, #36]	; (8000aa8 <MX_I2C1_Init+0x74>)
 8000a82:	f002 fc03 	bl	800328c <HAL_I2CEx_ConfigAnalogFilter>
 8000a86:	4603      	mov	r3, r0
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d001      	beq.n	8000a90 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000a8c:	f000 f8d1 	bl	8000c32 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000a90:	2100      	movs	r1, #0
 8000a92:	4805      	ldr	r0, [pc, #20]	; (8000aa8 <MX_I2C1_Init+0x74>)
 8000a94:	f002 fc45 	bl	8003322 <HAL_I2CEx_ConfigDigitalFilter>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d001      	beq.n	8000aa2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000a9e:	f000 f8c8 	bl	8000c32 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000aa2:	bf00      	nop
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	240040a8 	.word	0x240040a8
 8000aac:	40005400 	.word	0x40005400
 8000ab0:	10c0ecff 	.word	0x10c0ecff

08000ab4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	b085      	sub	sp, #20
 8000ab8:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000aba:	4b19      	ldr	r3, [pc, #100]	; (8000b20 <MX_GPIO_Init+0x6c>)
 8000abc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ac0:	4a17      	ldr	r2, [pc, #92]	; (8000b20 <MX_GPIO_Init+0x6c>)
 8000ac2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ac6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000aca:	4b15      	ldr	r3, [pc, #84]	; (8000b20 <MX_GPIO_Init+0x6c>)
 8000acc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ad0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ad4:	60fb      	str	r3, [r7, #12]
 8000ad6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ad8:	4b11      	ldr	r3, [pc, #68]	; (8000b20 <MX_GPIO_Init+0x6c>)
 8000ada:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ade:	4a10      	ldr	r2, [pc, #64]	; (8000b20 <MX_GPIO_Init+0x6c>)
 8000ae0:	f043 0301 	orr.w	r3, r3, #1
 8000ae4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ae8:	4b0d      	ldr	r3, [pc, #52]	; (8000b20 <MX_GPIO_Init+0x6c>)
 8000aea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000aee:	f003 0301 	and.w	r3, r3, #1
 8000af2:	60bb      	str	r3, [r7, #8]
 8000af4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000af6:	4b0a      	ldr	r3, [pc, #40]	; (8000b20 <MX_GPIO_Init+0x6c>)
 8000af8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000afc:	4a08      	ldr	r2, [pc, #32]	; (8000b20 <MX_GPIO_Init+0x6c>)
 8000afe:	f043 0302 	orr.w	r3, r3, #2
 8000b02:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b06:	4b06      	ldr	r3, [pc, #24]	; (8000b20 <MX_GPIO_Init+0x6c>)
 8000b08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b0c:	f003 0302 	and.w	r3, r3, #2
 8000b10:	607b      	str	r3, [r7, #4]
 8000b12:	687b      	ldr	r3, [r7, #4]

}
 8000b14:	bf00      	nop
 8000b16:	3714      	adds	r7, #20
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1e:	4770      	bx	lr
 8000b20:	58024400 	.word	0x58024400

08000b24 <vPrintLCD>:

/* USER CODE BEGIN 4 */
void vPrintLCD(void *pvParameters)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b086      	sub	sp, #24
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
  const TickType_t xDelay = 700 / portTICK_PERIOD_MS;
 8000b2c:	f44f 732f 	mov.w	r3, #700	; 0x2bc
 8000b30:	617b      	str	r3, [r7, #20]
  int received = 0; 
 8000b32:	2300      	movs	r3, #0
 8000b34:	613b      	str	r3, [r7, #16]
  char buffer[2];
  for (;;)
  {
    xQueueReceive(queue1, &received, portMAX_DELAY);
 8000b36:	4b12      	ldr	r3, [pc, #72]	; (8000b80 <vPrintLCD+0x5c>)
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	f107 0110 	add.w	r1, r7, #16
 8000b3e:	f04f 32ff 	mov.w	r2, #4294967295
 8000b42:	4618      	mov	r0, r3
 8000b44:	f006 fbf8 	bl	8007338 <xQueueReceive>
    lcd_put_cur(0, 0);
 8000b48:	2100      	movs	r1, #0
 8000b4a:	2000      	movs	r0, #0
 8000b4c:	f7ff fd43 	bl	80005d6 <lcd_put_cur>
    lcd_send_string("Hello World");
 8000b50:	480c      	ldr	r0, [pc, #48]	; (8000b84 <vPrintLCD+0x60>)
 8000b52:	f7ff fd9c 	bl	800068e <lcd_send_string>
    lcd_put_cur(1,0);
 8000b56:	2100      	movs	r1, #0
 8000b58:	2001      	movs	r0, #1
 8000b5a:	f7ff fd3c 	bl	80005d6 <lcd_put_cur>
    snprintf(buffer, 2, "%d", received);
 8000b5e:	693b      	ldr	r3, [r7, #16]
 8000b60:	f107 000c 	add.w	r0, r7, #12
 8000b64:	4a08      	ldr	r2, [pc, #32]	; (8000b88 <vPrintLCD+0x64>)
 8000b66:	2102      	movs	r1, #2
 8000b68:	f007 fde6 	bl	8008738 <sniprintf>
    lcd_send_string(buffer);
 8000b6c:	f107 030c 	add.w	r3, r7, #12
 8000b70:	4618      	mov	r0, r3
 8000b72:	f7ff fd8c 	bl	800068e <lcd_send_string>
    vTaskDelay( xDelay );
 8000b76:	6978      	ldr	r0, [r7, #20]
 8000b78:	f006 ff78 	bl	8007a6c <vTaskDelay>
    xQueueReceive(queue1, &received, portMAX_DELAY);
 8000b7c:	e7db      	b.n	8000b36 <vPrintLCD+0x12>
 8000b7e:	bf00      	nop
 8000b80:	24004158 	.word	0x24004158
 8000b84:	08008f3c 	.word	0x08008f3c
 8000b88:	08008f48 	.word	0x08008f48

08000b8c <vReadTemp>:
  }
}

void vReadTemp(void *pvParameters)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b084      	sub	sp, #16
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
  const TickType_t xDelay = 700 / portTICK_PERIOD_MS;
 8000b94:	f44f 732f 	mov.w	r3, #700	; 0x2bc
 8000b98:	60fb      	str	r3, [r7, #12]
  for(;;)
  {
	  vTaskDelay( xDelay );
 8000b9a:	68f8      	ldr	r0, [r7, #12]
 8000b9c:	f006 ff66 	bl	8007a6c <vTaskDelay>
 8000ba0:	e7fb      	b.n	8000b9a <vReadTemp+0xe>
	...

08000ba4 <vReadPot>:
  }
}
void vReadPot(void *pvParameters)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b084      	sub	sp, #16
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
  uint16_t raw;
  const TickType_t xDelay = 700 / portTICK_PERIOD_MS;
 8000bac:	f44f 732f 	mov.w	r3, #700	; 0x2bc
 8000bb0:	60fb      	str	r3, [r7, #12]
  for(;;)
  {
    HAL_ADC_Start(&hadc1);
 8000bb2:	480d      	ldr	r0, [pc, #52]	; (8000be8 <vReadPot+0x44>)
 8000bb4:	f000 fdfc 	bl	80017b0 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000bb8:	f04f 31ff 	mov.w	r1, #4294967295
 8000bbc:	480a      	ldr	r0, [pc, #40]	; (8000be8 <vReadPot+0x44>)
 8000bbe:	f000 fec1 	bl	8001944 <HAL_ADC_PollForConversion>
	  raw = HAL_ADC_GetValue(&hadc1);
 8000bc2:	4809      	ldr	r0, [pc, #36]	; (8000be8 <vReadPot+0x44>)
 8000bc4:	f000 ffb2 	bl	8001b2c <HAL_ADC_GetValue>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	b29b      	uxth	r3, r3
 8000bcc:	817b      	strh	r3, [r7, #10]
    xQueueSend(xQueuePotentiometer, &raw, portMAX_DELAY);
 8000bce:	4b07      	ldr	r3, [pc, #28]	; (8000bec <vReadPot+0x48>)
 8000bd0:	6818      	ldr	r0, [r3, #0]
 8000bd2:	f107 010a 	add.w	r1, r7, #10
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	f04f 32ff 	mov.w	r2, #4294967295
 8000bdc:	f006 faae 	bl	800713c <xQueueGenericSend>
    vTaskDelay( xDelay );
 8000be0:	68f8      	ldr	r0, [r7, #12]
 8000be2:	f006 ff43 	bl	8007a6c <vTaskDelay>
    HAL_ADC_Start(&hadc1);
 8000be6:	e7e4      	b.n	8000bb2 <vReadPot+0xe>
 8000be8:	240040f4 	.word	0x240040f4
 8000bec:	2400415c 	.word	0x2400415c

08000bf0 <vSendDimmer>:
  }
}
void vSendDimmer(void *pvParameters)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b084      	sub	sp, #16
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
  const TickType_t xDelay = 700 / portTICK_PERIOD_MS;
 8000bf8:	f44f 732f 	mov.w	r3, #700	; 0x2bc
 8000bfc:	60fb      	str	r3, [r7, #12]
  for(;;)
  {
    vTaskDelay( xDelay );
 8000bfe:	68f8      	ldr	r0, [r7, #12]
 8000c00:	f006 ff34 	bl	8007a6c <vTaskDelay>
 8000c04:	e7fb      	b.n	8000bfe <vSendDimmer+0xe>

08000c06 <vLevelFans>:
  }
}
void vLevelFans(void *pvParameters)
{
 8000c06:	b580      	push	{r7, lr}
 8000c08:	b084      	sub	sp, #16
 8000c0a:	af00      	add	r7, sp, #0
 8000c0c:	6078      	str	r0, [r7, #4]
  const TickType_t xDelay = 700 / portTICK_PERIOD_MS;
 8000c0e:	f44f 732f 	mov.w	r3, #700	; 0x2bc
 8000c12:	60fb      	str	r3, [r7, #12]
  for(;;)
  {
    vTaskDelay( xDelay );
 8000c14:	68f8      	ldr	r0, [r7, #12]
 8000c16:	f006 ff29 	bl	8007a6c <vTaskDelay>
 8000c1a:	e7fb      	b.n	8000c14 <vLevelFans+0xe>

08000c1c <vCalculatePID>:
  }
}
void vCalculatePID(void *pvParameters)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b084      	sub	sp, #16
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
  const TickType_t xDelay = 700 / portTICK_PERIOD_MS;
 8000c24:	f44f 732f 	mov.w	r3, #700	; 0x2bc
 8000c28:	60fb      	str	r3, [r7, #12]
  for(;;)
  {
    vTaskDelay( xDelay );
 8000c2a:	68f8      	ldr	r0, [r7, #12]
 8000c2c:	f006 ff1e 	bl	8007a6c <vTaskDelay>
 8000c30:	e7fb      	b.n	8000c2a <vCalculatePID+0xe>

08000c32 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c32:	b480      	push	{r7}
 8000c34:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c36:	b672      	cpsid	i
}
 8000c38:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c3a:	e7fe      	b.n	8000c3a <Error_Handler+0x8>

08000c3c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b082      	sub	sp, #8
 8000c40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c42:	4b0c      	ldr	r3, [pc, #48]	; (8000c74 <HAL_MspInit+0x38>)
 8000c44:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000c48:	4a0a      	ldr	r2, [pc, #40]	; (8000c74 <HAL_MspInit+0x38>)
 8000c4a:	f043 0302 	orr.w	r3, r3, #2
 8000c4e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000c52:	4b08      	ldr	r3, [pc, #32]	; (8000c74 <HAL_MspInit+0x38>)
 8000c54:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000c58:	f003 0302 	and.w	r3, r3, #2
 8000c5c:	607b      	str	r3, [r7, #4]
 8000c5e:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000c60:	2200      	movs	r2, #0
 8000c62:	210f      	movs	r1, #15
 8000c64:	f06f 0001 	mvn.w	r0, #1
 8000c68:	f001 fe13 	bl	8002892 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c6c:	bf00      	nop
 8000c6e:	3708      	adds	r7, #8
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bd80      	pop	{r7, pc}
 8000c74:	58024400 	.word	0x58024400

08000c78 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b0b8      	sub	sp, #224	; 0xe0
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c80:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000c84:	2200      	movs	r2, #0
 8000c86:	601a      	str	r2, [r3, #0]
 8000c88:	605a      	str	r2, [r3, #4]
 8000c8a:	609a      	str	r2, [r3, #8]
 8000c8c:	60da      	str	r2, [r3, #12]
 8000c8e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c90:	f107 0310 	add.w	r3, r7, #16
 8000c94:	22bc      	movs	r2, #188	; 0xbc
 8000c96:	2100      	movs	r1, #0
 8000c98:	4618      	mov	r0, r3
 8000c9a:	f007 fc71 	bl	8008580 <memset>
  if(hadc->Instance==ADC1)
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	4a2a      	ldr	r2, [pc, #168]	; (8000d4c <HAL_ADC_MspInit+0xd4>)
 8000ca4:	4293      	cmp	r3, r2
 8000ca6:	d14c      	bne.n	8000d42 <HAL_ADC_MspInit+0xca>
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000ca8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000cac:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 2;
 8000cae:	2302      	movs	r3, #2
 8000cb0:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLL2.PLL2N = 12;
 8000cb2:	230c      	movs	r3, #12
 8000cb4:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 8000cb6:	2302      	movs	r3, #2
 8000cb8:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000cba:	2302      	movs	r3, #2
 8000cbc:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000cbe:	2302      	movs	r3, #2
 8000cc0:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000cc2:	23c0      	movs	r3, #192	; 0xc0
 8000cc4:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8000cc6:	2320      	movs	r3, #32
 8000cc8:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000cd4:	f107 0310 	add.w	r3, r7, #16
 8000cd8:	4618      	mov	r0, r3
 8000cda:	f003 fb39 	bl	8004350 <HAL_RCCEx_PeriphCLKConfig>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d001      	beq.n	8000ce8 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8000ce4:	f7ff ffa5 	bl	8000c32 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000ce8:	4b19      	ldr	r3, [pc, #100]	; (8000d50 <HAL_ADC_MspInit+0xd8>)
 8000cea:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000cee:	4a18      	ldr	r2, [pc, #96]	; (8000d50 <HAL_ADC_MspInit+0xd8>)
 8000cf0:	f043 0320 	orr.w	r3, r3, #32
 8000cf4:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000cf8:	4b15      	ldr	r3, [pc, #84]	; (8000d50 <HAL_ADC_MspInit+0xd8>)
 8000cfa:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000cfe:	f003 0320 	and.w	r3, r3, #32
 8000d02:	60fb      	str	r3, [r7, #12]
 8000d04:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d06:	4b12      	ldr	r3, [pc, #72]	; (8000d50 <HAL_ADC_MspInit+0xd8>)
 8000d08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d0c:	4a10      	ldr	r2, [pc, #64]	; (8000d50 <HAL_ADC_MspInit+0xd8>)
 8000d0e:	f043 0301 	orr.w	r3, r3, #1
 8000d12:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d16:	4b0e      	ldr	r3, [pc, #56]	; (8000d50 <HAL_ADC_MspInit+0xd8>)
 8000d18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d1c:	f003 0301 	and.w	r3, r3, #1
 8000d20:	60bb      	str	r3, [r7, #8]
 8000d22:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_INP15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000d24:	2308      	movs	r3, #8
 8000d26:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d2a:	2303      	movs	r3, #3
 8000d2c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d30:	2300      	movs	r3, #0
 8000d32:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d36:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000d3a:	4619      	mov	r1, r3
 8000d3c:	4805      	ldr	r0, [pc, #20]	; (8000d54 <HAL_ADC_MspInit+0xdc>)
 8000d3e:	f001 fdcf 	bl	80028e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000d42:	bf00      	nop
 8000d44:	37e0      	adds	r7, #224	; 0xe0
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	40022000 	.word	0x40022000
 8000d50:	58024400 	.word	0x58024400
 8000d54:	58020000 	.word	0x58020000

08000d58 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b0b8      	sub	sp, #224	; 0xe0
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d60:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000d64:	2200      	movs	r2, #0
 8000d66:	601a      	str	r2, [r3, #0]
 8000d68:	605a      	str	r2, [r3, #4]
 8000d6a:	609a      	str	r2, [r3, #8]
 8000d6c:	60da      	str	r2, [r3, #12]
 8000d6e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d70:	f107 0310 	add.w	r3, r7, #16
 8000d74:	22bc      	movs	r2, #188	; 0xbc
 8000d76:	2100      	movs	r1, #0
 8000d78:	4618      	mov	r0, r3
 8000d7a:	f007 fc01 	bl	8008580 <memset>
  if(hi2c->Instance==I2C1)
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	4a24      	ldr	r2, [pc, #144]	; (8000e14 <HAL_I2C_MspInit+0xbc>)
 8000d84:	4293      	cmp	r3, r2
 8000d86:	d141      	bne.n	8000e0c <HAL_I2C_MspInit+0xb4>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000d88:	2308      	movs	r3, #8
 8000d8a:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d92:	f107 0310 	add.w	r3, r7, #16
 8000d96:	4618      	mov	r0, r3
 8000d98:	f003 fada 	bl	8004350 <HAL_RCCEx_PeriphCLKConfig>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d001      	beq.n	8000da6 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000da2:	f7ff ff46 	bl	8000c32 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000da6:	4b1c      	ldr	r3, [pc, #112]	; (8000e18 <HAL_I2C_MspInit+0xc0>)
 8000da8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dac:	4a1a      	ldr	r2, [pc, #104]	; (8000e18 <HAL_I2C_MspInit+0xc0>)
 8000dae:	f043 0302 	orr.w	r3, r3, #2
 8000db2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000db6:	4b18      	ldr	r3, [pc, #96]	; (8000e18 <HAL_I2C_MspInit+0xc0>)
 8000db8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dbc:	f003 0302 	and.w	r3, r3, #2
 8000dc0:	60fb      	str	r3, [r7, #12]
 8000dc2:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000dc4:	23c0      	movs	r3, #192	; 0xc0
 8000dc6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000dca:	2312      	movs	r3, #18
 8000dcc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000ddc:	2304      	movs	r3, #4
 8000dde:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000de2:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000de6:	4619      	mov	r1, r3
 8000de8:	480c      	ldr	r0, [pc, #48]	; (8000e1c <HAL_I2C_MspInit+0xc4>)
 8000dea:	f001 fd79 	bl	80028e0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000dee:	4b0a      	ldr	r3, [pc, #40]	; (8000e18 <HAL_I2C_MspInit+0xc0>)
 8000df0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000df4:	4a08      	ldr	r2, [pc, #32]	; (8000e18 <HAL_I2C_MspInit+0xc0>)
 8000df6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000dfa:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000dfe:	4b06      	ldr	r3, [pc, #24]	; (8000e18 <HAL_I2C_MspInit+0xc0>)
 8000e00:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000e04:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e08:	60bb      	str	r3, [r7, #8]
 8000e0a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000e0c:	bf00      	nop
 8000e0e:	37e0      	adds	r7, #224	; 0xe0
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd80      	pop	{r7, pc}
 8000e14:	40005400 	.word	0x40005400
 8000e18:	58024400 	.word	0x58024400
 8000e1c:	58020400 	.word	0x58020400

08000e20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e20:	b480      	push	{r7}
 8000e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e24:	e7fe      	b.n	8000e24 <NMI_Handler+0x4>

08000e26 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e26:	b480      	push	{r7}
 8000e28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e2a:	e7fe      	b.n	8000e2a <HardFault_Handler+0x4>

08000e2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e30:	e7fe      	b.n	8000e30 <MemManage_Handler+0x4>

08000e32 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e32:	b480      	push	{r7}
 8000e34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e36:	e7fe      	b.n	8000e36 <BusFault_Handler+0x4>

08000e38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e3c:	e7fe      	b.n	8000e3c <UsageFault_Handler+0x4>

08000e3e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e3e:	b480      	push	{r7}
 8000e40:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e42:	bf00      	nop
 8000e44:	46bd      	mov	sp, r7
 8000e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4a:	4770      	bx	lr

08000e4c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e50:	f000 f8dc 	bl	800100c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000e54:	f007 fa50 	bl	80082f8 <xTaskGetSchedulerState>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	2b01      	cmp	r3, #1
 8000e5c:	d001      	beq.n	8000e62 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000e5e:	f006 f85b 	bl	8006f18 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e62:	bf00      	nop
 8000e64:	bd80      	pop	{r7, pc}
	...

08000e68 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b086      	sub	sp, #24
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e70:	4a14      	ldr	r2, [pc, #80]	; (8000ec4 <_sbrk+0x5c>)
 8000e72:	4b15      	ldr	r3, [pc, #84]	; (8000ec8 <_sbrk+0x60>)
 8000e74:	1ad3      	subs	r3, r2, r3
 8000e76:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e78:	697b      	ldr	r3, [r7, #20]
 8000e7a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e7c:	4b13      	ldr	r3, [pc, #76]	; (8000ecc <_sbrk+0x64>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d102      	bne.n	8000e8a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e84:	4b11      	ldr	r3, [pc, #68]	; (8000ecc <_sbrk+0x64>)
 8000e86:	4a12      	ldr	r2, [pc, #72]	; (8000ed0 <_sbrk+0x68>)
 8000e88:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e8a:	4b10      	ldr	r3, [pc, #64]	; (8000ecc <_sbrk+0x64>)
 8000e8c:	681a      	ldr	r2, [r3, #0]
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	4413      	add	r3, r2
 8000e92:	693a      	ldr	r2, [r7, #16]
 8000e94:	429a      	cmp	r2, r3
 8000e96:	d207      	bcs.n	8000ea8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e98:	f007 fb38 	bl	800850c <__errno>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	220c      	movs	r2, #12
 8000ea0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ea2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ea6:	e009      	b.n	8000ebc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ea8:	4b08      	ldr	r3, [pc, #32]	; (8000ecc <_sbrk+0x64>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000eae:	4b07      	ldr	r3, [pc, #28]	; (8000ecc <_sbrk+0x64>)
 8000eb0:	681a      	ldr	r2, [r3, #0]
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	4413      	add	r3, r2
 8000eb6:	4a05      	ldr	r2, [pc, #20]	; (8000ecc <_sbrk+0x64>)
 8000eb8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000eba:	68fb      	ldr	r3, [r7, #12]
}
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	3718      	adds	r7, #24
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bd80      	pop	{r7, pc}
 8000ec4:	24080000 	.word	0x24080000
 8000ec8:	00000400 	.word	0x00000400
 8000ecc:	24000348 	.word	0x24000348
 8000ed0:	24004178 	.word	0x24004178

08000ed4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000ed4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f0c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000ed8:	f7ff fa52 	bl	8000380 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000edc:	480c      	ldr	r0, [pc, #48]	; (8000f10 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000ede:	490d      	ldr	r1, [pc, #52]	; (8000f14 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000ee0:	4a0d      	ldr	r2, [pc, #52]	; (8000f18 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000ee2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ee4:	e002      	b.n	8000eec <LoopCopyDataInit>

08000ee6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ee6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ee8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000eea:	3304      	adds	r3, #4

08000eec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000eec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000eee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ef0:	d3f9      	bcc.n	8000ee6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ef2:	4a0a      	ldr	r2, [pc, #40]	; (8000f1c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ef4:	4c0a      	ldr	r4, [pc, #40]	; (8000f20 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000ef6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ef8:	e001      	b.n	8000efe <LoopFillZerobss>

08000efa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000efa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000efc:	3204      	adds	r2, #4

08000efe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000efe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f00:	d3fb      	bcc.n	8000efa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f02:	f007 fb09 	bl	8008518 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f06:	f7ff fbd7 	bl	80006b8 <main>
  bx  lr
 8000f0a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000f0c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000f10:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000f14:	24000078 	.word	0x24000078
  ldr r2, =_sidata
 8000f18:	08009000 	.word	0x08009000
  ldr r2, =_sbss
 8000f1c:	24000078 	.word	0x24000078
  ldr r4, =_ebss
 8000f20:	24004174 	.word	0x24004174

08000f24 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f24:	e7fe      	b.n	8000f24 <ADC3_IRQHandler>
	...

08000f28 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b082      	sub	sp, #8
 8000f2c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f2e:	2003      	movs	r0, #3
 8000f30:	f001 fca4 	bl	800287c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000f34:	f003 f862 	bl	8003ffc <HAL_RCC_GetSysClockFreq>
 8000f38:	4602      	mov	r2, r0
 8000f3a:	4b15      	ldr	r3, [pc, #84]	; (8000f90 <HAL_Init+0x68>)
 8000f3c:	699b      	ldr	r3, [r3, #24]
 8000f3e:	0a1b      	lsrs	r3, r3, #8
 8000f40:	f003 030f 	and.w	r3, r3, #15
 8000f44:	4913      	ldr	r1, [pc, #76]	; (8000f94 <HAL_Init+0x6c>)
 8000f46:	5ccb      	ldrb	r3, [r1, r3]
 8000f48:	f003 031f 	and.w	r3, r3, #31
 8000f4c:	fa22 f303 	lsr.w	r3, r2, r3
 8000f50:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000f52:	4b0f      	ldr	r3, [pc, #60]	; (8000f90 <HAL_Init+0x68>)
 8000f54:	699b      	ldr	r3, [r3, #24]
 8000f56:	f003 030f 	and.w	r3, r3, #15
 8000f5a:	4a0e      	ldr	r2, [pc, #56]	; (8000f94 <HAL_Init+0x6c>)
 8000f5c:	5cd3      	ldrb	r3, [r2, r3]
 8000f5e:	f003 031f 	and.w	r3, r3, #31
 8000f62:	687a      	ldr	r2, [r7, #4]
 8000f64:	fa22 f303 	lsr.w	r3, r2, r3
 8000f68:	4a0b      	ldr	r2, [pc, #44]	; (8000f98 <HAL_Init+0x70>)
 8000f6a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000f6c:	4a0b      	ldr	r2, [pc, #44]	; (8000f9c <HAL_Init+0x74>)
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f72:	200f      	movs	r0, #15
 8000f74:	f000 f814 	bl	8000fa0 <HAL_InitTick>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d001      	beq.n	8000f82 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000f7e:	2301      	movs	r3, #1
 8000f80:	e002      	b.n	8000f88 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000f82:	f7ff fe5b 	bl	8000c3c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f86:	2300      	movs	r3, #0
}
 8000f88:	4618      	mov	r0, r3
 8000f8a:	3708      	adds	r7, #8
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd80      	pop	{r7, pc}
 8000f90:	58024400 	.word	0x58024400
 8000f94:	08008f54 	.word	0x08008f54
 8000f98:	24000004 	.word	0x24000004
 8000f9c:	24000000 	.word	0x24000000

08000fa0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b082      	sub	sp, #8
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000fa8:	4b15      	ldr	r3, [pc, #84]	; (8001000 <HAL_InitTick+0x60>)
 8000faa:	781b      	ldrb	r3, [r3, #0]
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d101      	bne.n	8000fb4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000fb0:	2301      	movs	r3, #1
 8000fb2:	e021      	b.n	8000ff8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000fb4:	4b13      	ldr	r3, [pc, #76]	; (8001004 <HAL_InitTick+0x64>)
 8000fb6:	681a      	ldr	r2, [r3, #0]
 8000fb8:	4b11      	ldr	r3, [pc, #68]	; (8001000 <HAL_InitTick+0x60>)
 8000fba:	781b      	ldrb	r3, [r3, #0]
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fc2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fca:	4618      	mov	r0, r3
 8000fcc:	f001 fc7b 	bl	80028c6 <HAL_SYSTICK_Config>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d001      	beq.n	8000fda <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	e00e      	b.n	8000ff8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	2b0f      	cmp	r3, #15
 8000fde:	d80a      	bhi.n	8000ff6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	6879      	ldr	r1, [r7, #4]
 8000fe4:	f04f 30ff 	mov.w	r0, #4294967295
 8000fe8:	f001 fc53 	bl	8002892 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fec:	4a06      	ldr	r2, [pc, #24]	; (8001008 <HAL_InitTick+0x68>)
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	e000      	b.n	8000ff8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000ff6:	2301      	movs	r3, #1
}
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	3708      	adds	r7, #8
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bd80      	pop	{r7, pc}
 8001000:	2400000c 	.word	0x2400000c
 8001004:	24000000 	.word	0x24000000
 8001008:	24000008 	.word	0x24000008

0800100c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800100c:	b480      	push	{r7}
 800100e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001010:	4b06      	ldr	r3, [pc, #24]	; (800102c <HAL_IncTick+0x20>)
 8001012:	781b      	ldrb	r3, [r3, #0]
 8001014:	461a      	mov	r2, r3
 8001016:	4b06      	ldr	r3, [pc, #24]	; (8001030 <HAL_IncTick+0x24>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	4413      	add	r3, r2
 800101c:	4a04      	ldr	r2, [pc, #16]	; (8001030 <HAL_IncTick+0x24>)
 800101e:	6013      	str	r3, [r2, #0]
}
 8001020:	bf00      	nop
 8001022:	46bd      	mov	sp, r7
 8001024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001028:	4770      	bx	lr
 800102a:	bf00      	nop
 800102c:	2400000c 	.word	0x2400000c
 8001030:	24004160 	.word	0x24004160

08001034 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001034:	b480      	push	{r7}
 8001036:	af00      	add	r7, sp, #0
  return uwTick;
 8001038:	4b03      	ldr	r3, [pc, #12]	; (8001048 <HAL_GetTick+0x14>)
 800103a:	681b      	ldr	r3, [r3, #0]
}
 800103c:	4618      	mov	r0, r3
 800103e:	46bd      	mov	sp, r7
 8001040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001044:	4770      	bx	lr
 8001046:	bf00      	nop
 8001048:	24004160 	.word	0x24004160

0800104c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b084      	sub	sp, #16
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001054:	f7ff ffee 	bl	8001034 <HAL_GetTick>
 8001058:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001064:	d005      	beq.n	8001072 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001066:	4b0a      	ldr	r3, [pc, #40]	; (8001090 <HAL_Delay+0x44>)
 8001068:	781b      	ldrb	r3, [r3, #0]
 800106a:	461a      	mov	r2, r3
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	4413      	add	r3, r2
 8001070:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001072:	bf00      	nop
 8001074:	f7ff ffde 	bl	8001034 <HAL_GetTick>
 8001078:	4602      	mov	r2, r0
 800107a:	68bb      	ldr	r3, [r7, #8]
 800107c:	1ad3      	subs	r3, r2, r3
 800107e:	68fa      	ldr	r2, [r7, #12]
 8001080:	429a      	cmp	r2, r3
 8001082:	d8f7      	bhi.n	8001074 <HAL_Delay+0x28>
  {
  }
}
 8001084:	bf00      	nop
 8001086:	bf00      	nop
 8001088:	3710      	adds	r7, #16
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	2400000c 	.word	0x2400000c

08001094 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001094:	b480      	push	{r7}
 8001096:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001098:	4b03      	ldr	r3, [pc, #12]	; (80010a8 <HAL_GetREVID+0x14>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	0c1b      	lsrs	r3, r3, #16
}
 800109e:	4618      	mov	r0, r3
 80010a0:	46bd      	mov	sp, r7
 80010a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a6:	4770      	bx	lr
 80010a8:	5c001000 	.word	0x5c001000

080010ac <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80010ac:	b480      	push	{r7}
 80010ae:	b083      	sub	sp, #12
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
 80010b4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	689b      	ldr	r3, [r3, #8]
 80010ba:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	431a      	orrs	r2, r3
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	609a      	str	r2, [r3, #8]
}
 80010c6:	bf00      	nop
 80010c8:	370c      	adds	r7, #12
 80010ca:	46bd      	mov	sp, r7
 80010cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d0:	4770      	bx	lr

080010d2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80010d2:	b480      	push	{r7}
 80010d4:	b083      	sub	sp, #12
 80010d6:	af00      	add	r7, sp, #0
 80010d8:	6078      	str	r0, [r7, #4]
 80010da:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	689b      	ldr	r3, [r3, #8]
 80010e0:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	431a      	orrs	r2, r3
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	609a      	str	r2, [r3, #8]
}
 80010ec:	bf00      	nop
 80010ee:	370c      	adds	r7, #12
 80010f0:	46bd      	mov	sp, r7
 80010f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f6:	4770      	bx	lr

080010f8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80010f8:	b480      	push	{r7}
 80010fa:	b083      	sub	sp, #12
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	689b      	ldr	r3, [r3, #8]
 8001104:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001108:	4618      	mov	r0, r3
 800110a:	370c      	adds	r7, #12
 800110c:	46bd      	mov	sp, r7
 800110e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001112:	4770      	bx	lr

08001114 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001114:	b480      	push	{r7}
 8001116:	b087      	sub	sp, #28
 8001118:	af00      	add	r7, sp, #0
 800111a:	60f8      	str	r0, [r7, #12]
 800111c:	60b9      	str	r1, [r7, #8]
 800111e:	607a      	str	r2, [r7, #4]
 8001120:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	3360      	adds	r3, #96	; 0x60
 8001126:	461a      	mov	r2, r3
 8001128:	68bb      	ldr	r3, [r7, #8]
 800112a:	009b      	lsls	r3, r3, #2
 800112c:	4413      	add	r3, r2
 800112e:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8001130:	697b      	ldr	r3, [r7, #20]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	430b      	orrs	r3, r1
 8001142:	431a      	orrs	r2, r3
 8001144:	697b      	ldr	r3, [r7, #20]
 8001146:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8001148:	bf00      	nop
 800114a:	371c      	adds	r7, #28
 800114c:	46bd      	mov	sp, r7
 800114e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001152:	4770      	bx	lr

08001154 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8001154:	b480      	push	{r7}
 8001156:	b085      	sub	sp, #20
 8001158:	af00      	add	r7, sp, #0
 800115a:	60f8      	str	r0, [r7, #12]
 800115c:	60b9      	str	r1, [r7, #8]
 800115e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	691b      	ldr	r3, [r3, #16]
 8001164:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8001168:	68bb      	ldr	r3, [r7, #8]
 800116a:	f003 031f 	and.w	r3, r3, #31
 800116e:	6879      	ldr	r1, [r7, #4]
 8001170:	fa01 f303 	lsl.w	r3, r1, r3
 8001174:	431a      	orrs	r2, r3
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	611a      	str	r2, [r3, #16]
}
 800117a:	bf00      	nop
 800117c:	3714      	adds	r7, #20
 800117e:	46bd      	mov	sp, r7
 8001180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001184:	4770      	bx	lr

08001186 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8001186:	b480      	push	{r7}
 8001188:	b087      	sub	sp, #28
 800118a:	af00      	add	r7, sp, #0
 800118c:	60f8      	str	r0, [r7, #12]
 800118e:	60b9      	str	r1, [r7, #8]
 8001190:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	3360      	adds	r3, #96	; 0x60
 8001196:	461a      	mov	r2, r3
 8001198:	68bb      	ldr	r3, [r7, #8]
 800119a:	009b      	lsls	r3, r3, #2
 800119c:	4413      	add	r3, r2
 800119e:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80011a0:	697b      	ldr	r3, [r7, #20]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	431a      	orrs	r2, r3
 80011ac:	697b      	ldr	r3, [r7, #20]
 80011ae:	601a      	str	r2, [r3, #0]
  }
}
 80011b0:	bf00      	nop
 80011b2:	371c      	adds	r7, #28
 80011b4:	46bd      	mov	sp, r7
 80011b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ba:	4770      	bx	lr

080011bc <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80011bc:	b480      	push	{r7}
 80011be:	b083      	sub	sp, #12
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	68db      	ldr	r3, [r3, #12]
 80011c8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d101      	bne.n	80011d4 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80011d0:	2301      	movs	r3, #1
 80011d2:	e000      	b.n	80011d6 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80011d4:	2300      	movs	r3, #0
}
 80011d6:	4618      	mov	r0, r3
 80011d8:	370c      	adds	r7, #12
 80011da:	46bd      	mov	sp, r7
 80011dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e0:	4770      	bx	lr

080011e2 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80011e2:	b480      	push	{r7}
 80011e4:	b087      	sub	sp, #28
 80011e6:	af00      	add	r7, sp, #0
 80011e8:	60f8      	str	r0, [r7, #12]
 80011ea:	60b9      	str	r1, [r7, #8]
 80011ec:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	3330      	adds	r3, #48	; 0x30
 80011f2:	461a      	mov	r2, r3
 80011f4:	68bb      	ldr	r3, [r7, #8]
 80011f6:	0a1b      	lsrs	r3, r3, #8
 80011f8:	009b      	lsls	r3, r3, #2
 80011fa:	f003 030c 	and.w	r3, r3, #12
 80011fe:	4413      	add	r3, r2
 8001200:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001202:	697b      	ldr	r3, [r7, #20]
 8001204:	681a      	ldr	r2, [r3, #0]
 8001206:	68bb      	ldr	r3, [r7, #8]
 8001208:	f003 031f 	and.w	r3, r3, #31
 800120c:	211f      	movs	r1, #31
 800120e:	fa01 f303 	lsl.w	r3, r1, r3
 8001212:	43db      	mvns	r3, r3
 8001214:	401a      	ands	r2, r3
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	0e9b      	lsrs	r3, r3, #26
 800121a:	f003 011f 	and.w	r1, r3, #31
 800121e:	68bb      	ldr	r3, [r7, #8]
 8001220:	f003 031f 	and.w	r3, r3, #31
 8001224:	fa01 f303 	lsl.w	r3, r1, r3
 8001228:	431a      	orrs	r2, r3
 800122a:	697b      	ldr	r3, [r7, #20]
 800122c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800122e:	bf00      	nop
 8001230:	371c      	adds	r7, #28
 8001232:	46bd      	mov	sp, r7
 8001234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001238:	4770      	bx	lr

0800123a <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800123a:	b480      	push	{r7}
 800123c:	b087      	sub	sp, #28
 800123e:	af00      	add	r7, sp, #0
 8001240:	60f8      	str	r0, [r7, #12]
 8001242:	60b9      	str	r1, [r7, #8]
 8001244:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	3314      	adds	r3, #20
 800124a:	461a      	mov	r2, r3
 800124c:	68bb      	ldr	r3, [r7, #8]
 800124e:	0e5b      	lsrs	r3, r3, #25
 8001250:	009b      	lsls	r3, r3, #2
 8001252:	f003 0304 	and.w	r3, r3, #4
 8001256:	4413      	add	r3, r2
 8001258:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800125a:	697b      	ldr	r3, [r7, #20]
 800125c:	681a      	ldr	r2, [r3, #0]
 800125e:	68bb      	ldr	r3, [r7, #8]
 8001260:	0d1b      	lsrs	r3, r3, #20
 8001262:	f003 031f 	and.w	r3, r3, #31
 8001266:	2107      	movs	r1, #7
 8001268:	fa01 f303 	lsl.w	r3, r1, r3
 800126c:	43db      	mvns	r3, r3
 800126e:	401a      	ands	r2, r3
 8001270:	68bb      	ldr	r3, [r7, #8]
 8001272:	0d1b      	lsrs	r3, r3, #20
 8001274:	f003 031f 	and.w	r3, r3, #31
 8001278:	6879      	ldr	r1, [r7, #4]
 800127a:	fa01 f303 	lsl.w	r3, r1, r3
 800127e:	431a      	orrs	r2, r3
 8001280:	697b      	ldr	r3, [r7, #20]
 8001282:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001284:	bf00      	nop
 8001286:	371c      	adds	r7, #28
 8001288:	46bd      	mov	sp, r7
 800128a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128e:	4770      	bx	lr

08001290 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001290:	b480      	push	{r7}
 8001292:	b085      	sub	sp, #20
 8001294:	af00      	add	r7, sp, #0
 8001296:	60f8      	str	r0, [r7, #12]
 8001298:	60b9      	str	r1, [r7, #8]
 800129a:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80012a2:	68bb      	ldr	r3, [r7, #8]
 80012a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80012a8:	43db      	mvns	r3, r3
 80012aa:	401a      	ands	r2, r3
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	f003 0318 	and.w	r3, r3, #24
 80012b2:	4908      	ldr	r1, [pc, #32]	; (80012d4 <LL_ADC_SetChannelSingleDiff+0x44>)
 80012b4:	40d9      	lsrs	r1, r3
 80012b6:	68bb      	ldr	r3, [r7, #8]
 80012b8:	400b      	ands	r3, r1
 80012ba:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80012be:	431a      	orrs	r2, r3
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 80012c6:	bf00      	nop
 80012c8:	3714      	adds	r7, #20
 80012ca:	46bd      	mov	sp, r7
 80012cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d0:	4770      	bx	lr
 80012d2:	bf00      	nop
 80012d4:	000fffff 	.word	0x000fffff

080012d8 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80012d8:	b480      	push	{r7}
 80012da:	b083      	sub	sp, #12
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	689b      	ldr	r3, [r3, #8]
 80012e4:	f003 031f 	and.w	r3, r3, #31
}
 80012e8:	4618      	mov	r0, r3
 80012ea:	370c      	adds	r7, #12
 80012ec:	46bd      	mov	sp, r7
 80012ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f2:	4770      	bx	lr

080012f4 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80012f4:	b480      	push	{r7}
 80012f6:	b083      	sub	sp, #12
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	689b      	ldr	r3, [r3, #8]
 8001300:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 8001304:	4618      	mov	r0, r3
 8001306:	370c      	adds	r7, #12
 8001308:	46bd      	mov	sp, r7
 800130a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130e:	4770      	bx	lr

08001310 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001310:	b480      	push	{r7}
 8001312:	b083      	sub	sp, #12
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	689a      	ldr	r2, [r3, #8]
 800131c:	4b04      	ldr	r3, [pc, #16]	; (8001330 <LL_ADC_DisableDeepPowerDown+0x20>)
 800131e:	4013      	ands	r3, r2
 8001320:	687a      	ldr	r2, [r7, #4]
 8001322:	6093      	str	r3, [r2, #8]
}
 8001324:	bf00      	nop
 8001326:	370c      	adds	r7, #12
 8001328:	46bd      	mov	sp, r7
 800132a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132e:	4770      	bx	lr
 8001330:	5fffffc0 	.word	0x5fffffc0

08001334 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001334:	b480      	push	{r7}
 8001336:	b083      	sub	sp, #12
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	689b      	ldr	r3, [r3, #8]
 8001340:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001344:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001348:	d101      	bne.n	800134e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800134a:	2301      	movs	r3, #1
 800134c:	e000      	b.n	8001350 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800134e:	2300      	movs	r3, #0
}
 8001350:	4618      	mov	r0, r3
 8001352:	370c      	adds	r7, #12
 8001354:	46bd      	mov	sp, r7
 8001356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135a:	4770      	bx	lr

0800135c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800135c:	b480      	push	{r7}
 800135e:	b083      	sub	sp, #12
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	689a      	ldr	r2, [r3, #8]
 8001368:	4b05      	ldr	r3, [pc, #20]	; (8001380 <LL_ADC_EnableInternalRegulator+0x24>)
 800136a:	4013      	ands	r3, r2
 800136c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001374:	bf00      	nop
 8001376:	370c      	adds	r7, #12
 8001378:	46bd      	mov	sp, r7
 800137a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137e:	4770      	bx	lr
 8001380:	6fffffc0 	.word	0x6fffffc0

08001384 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001384:	b480      	push	{r7}
 8001386:	b083      	sub	sp, #12
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	689b      	ldr	r3, [r3, #8]
 8001390:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001394:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001398:	d101      	bne.n	800139e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800139a:	2301      	movs	r3, #1
 800139c:	e000      	b.n	80013a0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800139e:	2300      	movs	r3, #0
}
 80013a0:	4618      	mov	r0, r3
 80013a2:	370c      	adds	r7, #12
 80013a4:	46bd      	mov	sp, r7
 80013a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013aa:	4770      	bx	lr

080013ac <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80013ac:	b480      	push	{r7}
 80013ae:	b083      	sub	sp, #12
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	689a      	ldr	r2, [r3, #8]
 80013b8:	4b05      	ldr	r3, [pc, #20]	; (80013d0 <LL_ADC_Enable+0x24>)
 80013ba:	4013      	ands	r3, r2
 80013bc:	f043 0201 	orr.w	r2, r3, #1
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80013c4:	bf00      	nop
 80013c6:	370c      	adds	r7, #12
 80013c8:	46bd      	mov	sp, r7
 80013ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ce:	4770      	bx	lr
 80013d0:	7fffffc0 	.word	0x7fffffc0

080013d4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80013d4:	b480      	push	{r7}
 80013d6:	b083      	sub	sp, #12
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	689b      	ldr	r3, [r3, #8]
 80013e0:	f003 0301 	and.w	r3, r3, #1
 80013e4:	2b01      	cmp	r3, #1
 80013e6:	d101      	bne.n	80013ec <LL_ADC_IsEnabled+0x18>
 80013e8:	2301      	movs	r3, #1
 80013ea:	e000      	b.n	80013ee <LL_ADC_IsEnabled+0x1a>
 80013ec:	2300      	movs	r3, #0
}
 80013ee:	4618      	mov	r0, r3
 80013f0:	370c      	adds	r7, #12
 80013f2:	46bd      	mov	sp, r7
 80013f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f8:	4770      	bx	lr
	...

080013fc <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80013fc:	b480      	push	{r7}
 80013fe:	b083      	sub	sp, #12
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	689a      	ldr	r2, [r3, #8]
 8001408:	4b05      	ldr	r3, [pc, #20]	; (8001420 <LL_ADC_REG_StartConversion+0x24>)
 800140a:	4013      	ands	r3, r2
 800140c:	f043 0204 	orr.w	r2, r3, #4
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001414:	bf00      	nop
 8001416:	370c      	adds	r7, #12
 8001418:	46bd      	mov	sp, r7
 800141a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141e:	4770      	bx	lr
 8001420:	7fffffc0 	.word	0x7fffffc0

08001424 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001424:	b480      	push	{r7}
 8001426:	b083      	sub	sp, #12
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	689b      	ldr	r3, [r3, #8]
 8001430:	f003 0304 	and.w	r3, r3, #4
 8001434:	2b04      	cmp	r3, #4
 8001436:	d101      	bne.n	800143c <LL_ADC_REG_IsConversionOngoing+0x18>
 8001438:	2301      	movs	r3, #1
 800143a:	e000      	b.n	800143e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800143c:	2300      	movs	r3, #0
}
 800143e:	4618      	mov	r0, r3
 8001440:	370c      	adds	r7, #12
 8001442:	46bd      	mov	sp, r7
 8001444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001448:	4770      	bx	lr

0800144a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800144a:	b480      	push	{r7}
 800144c:	b083      	sub	sp, #12
 800144e:	af00      	add	r7, sp, #0
 8001450:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	689b      	ldr	r3, [r3, #8]
 8001456:	f003 0308 	and.w	r3, r3, #8
 800145a:	2b08      	cmp	r3, #8
 800145c:	d101      	bne.n	8001462 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800145e:	2301      	movs	r3, #1
 8001460:	e000      	b.n	8001464 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001462:	2300      	movs	r3, #0
}
 8001464:	4618      	mov	r0, r3
 8001466:	370c      	adds	r7, #12
 8001468:	46bd      	mov	sp, r7
 800146a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146e:	4770      	bx	lr

08001470 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001470:	b590      	push	{r4, r7, lr}
 8001472:	b089      	sub	sp, #36	; 0x24
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001478:	2300      	movs	r3, #0
 800147a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800147c:	2300      	movs	r3, #0
 800147e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	2b00      	cmp	r3, #0
 8001484:	d101      	bne.n	800148a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001486:	2301      	movs	r3, #1
 8001488:	e18e      	b.n	80017a8 <HAL_ADC_Init+0x338>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	68db      	ldr	r3, [r3, #12]
 800148e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001494:	2b00      	cmp	r3, #0
 8001496:	d109      	bne.n	80014ac <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001498:	6878      	ldr	r0, [r7, #4]
 800149a:	f7ff fbed 	bl	8000c78 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	2200      	movs	r2, #0
 80014a2:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	2200      	movs	r2, #0
 80014a8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	4618      	mov	r0, r3
 80014b2:	f7ff ff3f 	bl	8001334 <LL_ADC_IsDeepPowerDownEnabled>
 80014b6:	4603      	mov	r3, r0
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d004      	beq.n	80014c6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	4618      	mov	r0, r3
 80014c2:	f7ff ff25 	bl	8001310 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	4618      	mov	r0, r3
 80014cc:	f7ff ff5a 	bl	8001384 <LL_ADC_IsInternalRegulatorEnabled>
 80014d0:	4603      	mov	r3, r0
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d114      	bne.n	8001500 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	4618      	mov	r0, r3
 80014dc:	f7ff ff3e 	bl	800135c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80014e0:	4b9a      	ldr	r3, [pc, #616]	; (800174c <HAL_ADC_Init+0x2dc>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	099b      	lsrs	r3, r3, #6
 80014e6:	4a9a      	ldr	r2, [pc, #616]	; (8001750 <HAL_ADC_Init+0x2e0>)
 80014e8:	fba2 2303 	umull	r2, r3, r2, r3
 80014ec:	099b      	lsrs	r3, r3, #6
 80014ee:	3301      	adds	r3, #1
 80014f0:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80014f2:	e002      	b.n	80014fa <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 80014f4:	68bb      	ldr	r3, [r7, #8]
 80014f6:	3b01      	subs	r3, #1
 80014f8:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80014fa:	68bb      	ldr	r3, [r7, #8]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d1f9      	bne.n	80014f4 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	4618      	mov	r0, r3
 8001506:	f7ff ff3d 	bl	8001384 <LL_ADC_IsInternalRegulatorEnabled>
 800150a:	4603      	mov	r3, r0
 800150c:	2b00      	cmp	r3, #0
 800150e:	d10d      	bne.n	800152c <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001514:	f043 0210 	orr.w	r2, r3, #16
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001520:	f043 0201 	orr.w	r2, r3, #1
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001528:	2301      	movs	r3, #1
 800152a:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	4618      	mov	r0, r3
 8001532:	f7ff ff77 	bl	8001424 <LL_ADC_REG_IsConversionOngoing>
 8001536:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800153c:	f003 0310 	and.w	r3, r3, #16
 8001540:	2b00      	cmp	r3, #0
 8001542:	f040 8128 	bne.w	8001796 <HAL_ADC_Init+0x326>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001546:	697b      	ldr	r3, [r7, #20]
 8001548:	2b00      	cmp	r3, #0
 800154a:	f040 8124 	bne.w	8001796 <HAL_ADC_Init+0x326>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001552:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001556:	f043 0202 	orr.w	r2, r3, #2
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	4618      	mov	r0, r3
 8001564:	f7ff ff36 	bl	80013d4 <LL_ADC_IsEnabled>
 8001568:	4603      	mov	r3, r0
 800156a:	2b00      	cmp	r3, #0
 800156c:	d136      	bne.n	80015dc <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	4a78      	ldr	r2, [pc, #480]	; (8001754 <HAL_ADC_Init+0x2e4>)
 8001574:	4293      	cmp	r3, r2
 8001576:	d004      	beq.n	8001582 <HAL_ADC_Init+0x112>
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	4a76      	ldr	r2, [pc, #472]	; (8001758 <HAL_ADC_Init+0x2e8>)
 800157e:	4293      	cmp	r3, r2
 8001580:	d10e      	bne.n	80015a0 <HAL_ADC_Init+0x130>
 8001582:	4874      	ldr	r0, [pc, #464]	; (8001754 <HAL_ADC_Init+0x2e4>)
 8001584:	f7ff ff26 	bl	80013d4 <LL_ADC_IsEnabled>
 8001588:	4604      	mov	r4, r0
 800158a:	4873      	ldr	r0, [pc, #460]	; (8001758 <HAL_ADC_Init+0x2e8>)
 800158c:	f7ff ff22 	bl	80013d4 <LL_ADC_IsEnabled>
 8001590:	4603      	mov	r3, r0
 8001592:	4323      	orrs	r3, r4
 8001594:	2b00      	cmp	r3, #0
 8001596:	bf0c      	ite	eq
 8001598:	2301      	moveq	r3, #1
 800159a:	2300      	movne	r3, #0
 800159c:	b2db      	uxtb	r3, r3
 800159e:	e008      	b.n	80015b2 <HAL_ADC_Init+0x142>
 80015a0:	486e      	ldr	r0, [pc, #440]	; (800175c <HAL_ADC_Init+0x2ec>)
 80015a2:	f7ff ff17 	bl	80013d4 <LL_ADC_IsEnabled>
 80015a6:	4603      	mov	r3, r0
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	bf0c      	ite	eq
 80015ac:	2301      	moveq	r3, #1
 80015ae:	2300      	movne	r3, #0
 80015b0:	b2db      	uxtb	r3, r3
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d012      	beq.n	80015dc <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	4a66      	ldr	r2, [pc, #408]	; (8001754 <HAL_ADC_Init+0x2e4>)
 80015bc:	4293      	cmp	r3, r2
 80015be:	d004      	beq.n	80015ca <HAL_ADC_Init+0x15a>
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	4a64      	ldr	r2, [pc, #400]	; (8001758 <HAL_ADC_Init+0x2e8>)
 80015c6:	4293      	cmp	r3, r2
 80015c8:	d101      	bne.n	80015ce <HAL_ADC_Init+0x15e>
 80015ca:	4a65      	ldr	r2, [pc, #404]	; (8001760 <HAL_ADC_Init+0x2f0>)
 80015cc:	e000      	b.n	80015d0 <HAL_ADC_Init+0x160>
 80015ce:	4a65      	ldr	r2, [pc, #404]	; (8001764 <HAL_ADC_Init+0x2f4>)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	685b      	ldr	r3, [r3, #4]
 80015d4:	4619      	mov	r1, r3
 80015d6:	4610      	mov	r0, r2
 80015d8:	f7ff fd68 	bl	80010ac <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 80015dc:	f7ff fd5a 	bl	8001094 <HAL_GetREVID>
 80015e0:	4603      	mov	r3, r0
 80015e2:	f241 0203 	movw	r2, #4099	; 0x1003
 80015e6:	4293      	cmp	r3, r2
 80015e8:	d914      	bls.n	8001614 <HAL_ADC_Init+0x1a4>
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	689b      	ldr	r3, [r3, #8]
 80015ee:	2b10      	cmp	r3, #16
 80015f0:	d110      	bne.n	8001614 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	7d5b      	ldrb	r3, [r3, #21]
 80015f6:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80015fc:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8001602:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	7f1b      	ldrb	r3, [r3, #28]
 8001608:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 800160a:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800160c:	f043 030c 	orr.w	r3, r3, #12
 8001610:	61bb      	str	r3, [r7, #24]
 8001612:	e00d      	b.n	8001630 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	7d5b      	ldrb	r3, [r3, #21]
 8001618:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800161e:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8001624:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	7f1b      	ldrb	r3, [r3, #28]
 800162a:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800162c:	4313      	orrs	r3, r2
 800162e:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	7f1b      	ldrb	r3, [r3, #28]
 8001634:	2b01      	cmp	r3, #1
 8001636:	d106      	bne.n	8001646 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	6a1b      	ldr	r3, [r3, #32]
 800163c:	3b01      	subs	r3, #1
 800163e:	045b      	lsls	r3, r3, #17
 8001640:	69ba      	ldr	r2, [r7, #24]
 8001642:	4313      	orrs	r3, r2
 8001644:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800164a:	2b00      	cmp	r3, #0
 800164c:	d009      	beq.n	8001662 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001652:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800165a:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800165c:	69ba      	ldr	r2, [r7, #24]
 800165e:	4313      	orrs	r3, r2
 8001660:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	68da      	ldr	r2, [r3, #12]
 8001668:	4b3f      	ldr	r3, [pc, #252]	; (8001768 <HAL_ADC_Init+0x2f8>)
 800166a:	4013      	ands	r3, r2
 800166c:	687a      	ldr	r2, [r7, #4]
 800166e:	6812      	ldr	r2, [r2, #0]
 8001670:	69b9      	ldr	r1, [r7, #24]
 8001672:	430b      	orrs	r3, r1
 8001674:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	4618      	mov	r0, r3
 800167c:	f7ff fed2 	bl	8001424 <LL_ADC_REG_IsConversionOngoing>
 8001680:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	4618      	mov	r0, r3
 8001688:	f7ff fedf 	bl	800144a <LL_ADC_INJ_IsConversionOngoing>
 800168c:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800168e:	693b      	ldr	r3, [r7, #16]
 8001690:	2b00      	cmp	r3, #0
 8001692:	d14a      	bne.n	800172a <HAL_ADC_Init+0x2ba>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	2b00      	cmp	r3, #0
 8001698:	d147      	bne.n	800172a <HAL_ADC_Init+0x2ba>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	7d1b      	ldrb	r3, [r3, #20]
 800169e:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 80016a4:	4313      	orrs	r3, r2
 80016a6:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	68da      	ldr	r2, [r3, #12]
 80016ae:	4b2f      	ldr	r3, [pc, #188]	; (800176c <HAL_ADC_Init+0x2fc>)
 80016b0:	4013      	ands	r3, r2
 80016b2:	687a      	ldr	r2, [r7, #4]
 80016b4:	6812      	ldr	r2, [r2, #0]
 80016b6:	69b9      	ldr	r1, [r7, #24]
 80016b8:	430b      	orrs	r3, r1
 80016ba:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80016c2:	2b01      	cmp	r3, #1
 80016c4:	d11b      	bne.n	80016fe <HAL_ADC_Init+0x28e>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016ca:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	691a      	ldr	r2, [r3, #16]
 80016d2:	4b27      	ldr	r3, [pc, #156]	; (8001770 <HAL_ADC_Init+0x300>)
 80016d4:	4013      	ands	r3, r2
 80016d6:	687a      	ldr	r2, [r7, #4]
 80016d8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80016da:	3a01      	subs	r2, #1
 80016dc:	0411      	lsls	r1, r2, #16
 80016de:	687a      	ldr	r2, [r7, #4]
 80016e0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80016e2:	4311      	orrs	r1, r2
 80016e4:	687a      	ldr	r2, [r7, #4]
 80016e6:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80016e8:	4311      	orrs	r1, r2
 80016ea:	687a      	ldr	r2, [r7, #4]
 80016ec:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80016ee:	430a      	orrs	r2, r1
 80016f0:	431a      	orrs	r2, r3
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f042 0201 	orr.w	r2, r2, #1
 80016fa:	611a      	str	r2, [r3, #16]
 80016fc:	e007      	b.n	800170e <HAL_ADC_Init+0x29e>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	691a      	ldr	r2, [r3, #16]
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f022 0201 	bic.w	r2, r2, #1
 800170c:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	691b      	ldr	r3, [r3, #16]
 8001714:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	430a      	orrs	r2, r1
 8001722:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8001724:	6878      	ldr	r0, [r7, #4]
 8001726:	f000 fde9 	bl	80022fc <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	68db      	ldr	r3, [r3, #12]
 800172e:	2b01      	cmp	r3, #1
 8001730:	d120      	bne.n	8001774 <HAL_ADC_Init+0x304>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001738:	f023 010f 	bic.w	r1, r3, #15
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	699b      	ldr	r3, [r3, #24]
 8001740:	1e5a      	subs	r2, r3, #1
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	430a      	orrs	r2, r1
 8001748:	631a      	str	r2, [r3, #48]	; 0x30
 800174a:	e01b      	b.n	8001784 <HAL_ADC_Init+0x314>
 800174c:	24000000 	.word	0x24000000
 8001750:	053e2d63 	.word	0x053e2d63
 8001754:	40022000 	.word	0x40022000
 8001758:	40022100 	.word	0x40022100
 800175c:	58026000 	.word	0x58026000
 8001760:	40022300 	.word	0x40022300
 8001764:	58026300 	.word	0x58026300
 8001768:	fff0c003 	.word	0xfff0c003
 800176c:	ffffbffc 	.word	0xffffbffc
 8001770:	fc00f81e 	.word	0xfc00f81e
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f022 020f 	bic.w	r2, r2, #15
 8001782:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001788:	f023 0303 	bic.w	r3, r3, #3
 800178c:	f043 0201 	orr.w	r2, r3, #1
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	655a      	str	r2, [r3, #84]	; 0x54
 8001794:	e007      	b.n	80017a6 <HAL_ADC_Init+0x336>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800179a:	f043 0210 	orr.w	r2, r3, #16
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80017a2:	2301      	movs	r3, #1
 80017a4:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80017a6:	7ffb      	ldrb	r3, [r7, #31]
}
 80017a8:	4618      	mov	r0, r3
 80017aa:	3724      	adds	r7, #36	; 0x24
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bd90      	pop	{r4, r7, pc}

080017b0 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b086      	sub	sp, #24
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4a5c      	ldr	r2, [pc, #368]	; (8001930 <HAL_ADC_Start+0x180>)
 80017be:	4293      	cmp	r3, r2
 80017c0:	d004      	beq.n	80017cc <HAL_ADC_Start+0x1c>
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	4a5b      	ldr	r2, [pc, #364]	; (8001934 <HAL_ADC_Start+0x184>)
 80017c8:	4293      	cmp	r3, r2
 80017ca:	d101      	bne.n	80017d0 <HAL_ADC_Start+0x20>
 80017cc:	4b5a      	ldr	r3, [pc, #360]	; (8001938 <HAL_ADC_Start+0x188>)
 80017ce:	e000      	b.n	80017d2 <HAL_ADC_Start+0x22>
 80017d0:	4b5a      	ldr	r3, [pc, #360]	; (800193c <HAL_ADC_Start+0x18c>)
 80017d2:	4618      	mov	r0, r3
 80017d4:	f7ff fd80 	bl	80012d8 <LL_ADC_GetMultimode>
 80017d8:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	4618      	mov	r0, r3
 80017e0:	f7ff fe20 	bl	8001424 <LL_ADC_REG_IsConversionOngoing>
 80017e4:	4603      	mov	r3, r0
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	f040 809a 	bne.w	8001920 <HAL_ADC_Start+0x170>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80017f2:	2b01      	cmp	r3, #1
 80017f4:	d101      	bne.n	80017fa <HAL_ADC_Start+0x4a>
 80017f6:	2302      	movs	r3, #2
 80017f8:	e095      	b.n	8001926 <HAL_ADC_Start+0x176>
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	2201      	movs	r2, #1
 80017fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001802:	6878      	ldr	r0, [r7, #4]
 8001804:	f000 fcf0 	bl	80021e8 <ADC_Enable>
 8001808:	4603      	mov	r3, r0
 800180a:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800180c:	7dfb      	ldrb	r3, [r7, #23]
 800180e:	2b00      	cmp	r3, #0
 8001810:	f040 8081 	bne.w	8001916 <HAL_ADC_Start+0x166>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001818:	4b49      	ldr	r3, [pc, #292]	; (8001940 <HAL_ADC_Start+0x190>)
 800181a:	4013      	ands	r3, r2
 800181c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	4a42      	ldr	r2, [pc, #264]	; (8001934 <HAL_ADC_Start+0x184>)
 800182a:	4293      	cmp	r3, r2
 800182c:	d002      	beq.n	8001834 <HAL_ADC_Start+0x84>
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	e000      	b.n	8001836 <HAL_ADC_Start+0x86>
 8001834:	4b3e      	ldr	r3, [pc, #248]	; (8001930 <HAL_ADC_Start+0x180>)
 8001836:	687a      	ldr	r2, [r7, #4]
 8001838:	6812      	ldr	r2, [r2, #0]
 800183a:	4293      	cmp	r3, r2
 800183c:	d002      	beq.n	8001844 <HAL_ADC_Start+0x94>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800183e:	693b      	ldr	r3, [r7, #16]
 8001840:	2b00      	cmp	r3, #0
 8001842:	d105      	bne.n	8001850 <HAL_ADC_Start+0xa0>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001848:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001854:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001858:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800185c:	d106      	bne.n	800186c <HAL_ADC_Start+0xbc>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001862:	f023 0206 	bic.w	r2, r3, #6
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	659a      	str	r2, [r3, #88]	; 0x58
 800186a:	e002      	b.n	8001872 <HAL_ADC_Start+0xc2>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	2200      	movs	r2, #0
 8001870:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	221c      	movs	r2, #28
 8001878:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	2200      	movs	r2, #0
 800187e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4a2b      	ldr	r2, [pc, #172]	; (8001934 <HAL_ADC_Start+0x184>)
 8001888:	4293      	cmp	r3, r2
 800188a:	d002      	beq.n	8001892 <HAL_ADC_Start+0xe2>
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	e000      	b.n	8001894 <HAL_ADC_Start+0xe4>
 8001892:	4b27      	ldr	r3, [pc, #156]	; (8001930 <HAL_ADC_Start+0x180>)
 8001894:	687a      	ldr	r2, [r7, #4]
 8001896:	6812      	ldr	r2, [r2, #0]
 8001898:	4293      	cmp	r3, r2
 800189a:	d008      	beq.n	80018ae <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800189c:	693b      	ldr	r3, [r7, #16]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d005      	beq.n	80018ae <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80018a2:	693b      	ldr	r3, [r7, #16]
 80018a4:	2b05      	cmp	r3, #5
 80018a6:	d002      	beq.n	80018ae <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80018a8:	693b      	ldr	r3, [r7, #16]
 80018aa:	2b09      	cmp	r3, #9
 80018ac:	d114      	bne.n	80018d8 <HAL_ADC_Start+0x128>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	68db      	ldr	r3, [r3, #12]
 80018b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d007      	beq.n	80018cc <HAL_ADC_Start+0x11c>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018c0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80018c4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	4618      	mov	r0, r3
 80018d2:	f7ff fd93 	bl	80013fc <LL_ADC_REG_StartConversion>
 80018d6:	e025      	b.n	8001924 <HAL_ADC_Start+0x174>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018dc:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	4a12      	ldr	r2, [pc, #72]	; (8001934 <HAL_ADC_Start+0x184>)
 80018ea:	4293      	cmp	r3, r2
 80018ec:	d002      	beq.n	80018f4 <HAL_ADC_Start+0x144>
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	e000      	b.n	80018f6 <HAL_ADC_Start+0x146>
 80018f4:	4b0e      	ldr	r3, [pc, #56]	; (8001930 <HAL_ADC_Start+0x180>)
 80018f6:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	68db      	ldr	r3, [r3, #12]
 80018fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001900:	2b00      	cmp	r3, #0
 8001902:	d00f      	beq.n	8001924 <HAL_ADC_Start+0x174>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001908:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800190c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	655a      	str	r2, [r3, #84]	; 0x54
 8001914:	e006      	b.n	8001924 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	2200      	movs	r2, #0
 800191a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800191e:	e001      	b.n	8001924 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001920:	2302      	movs	r3, #2
 8001922:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001924:	7dfb      	ldrb	r3, [r7, #23]
}
 8001926:	4618      	mov	r0, r3
 8001928:	3718      	adds	r7, #24
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}
 800192e:	bf00      	nop
 8001930:	40022000 	.word	0x40022000
 8001934:	40022100 	.word	0x40022100
 8001938:	40022300 	.word	0x40022300
 800193c:	58026300 	.word	0x58026300
 8001940:	fffff0fe 	.word	0xfffff0fe

08001944 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b088      	sub	sp, #32
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
 800194c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	4a72      	ldr	r2, [pc, #456]	; (8001b1c <HAL_ADC_PollForConversion+0x1d8>)
 8001954:	4293      	cmp	r3, r2
 8001956:	d004      	beq.n	8001962 <HAL_ADC_PollForConversion+0x1e>
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	4a70      	ldr	r2, [pc, #448]	; (8001b20 <HAL_ADC_PollForConversion+0x1dc>)
 800195e:	4293      	cmp	r3, r2
 8001960:	d101      	bne.n	8001966 <HAL_ADC_PollForConversion+0x22>
 8001962:	4b70      	ldr	r3, [pc, #448]	; (8001b24 <HAL_ADC_PollForConversion+0x1e0>)
 8001964:	e000      	b.n	8001968 <HAL_ADC_PollForConversion+0x24>
 8001966:	4b70      	ldr	r3, [pc, #448]	; (8001b28 <HAL_ADC_PollForConversion+0x1e4>)
 8001968:	4618      	mov	r0, r3
 800196a:	f7ff fcb5 	bl	80012d8 <LL_ADC_GetMultimode>
 800196e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	691b      	ldr	r3, [r3, #16]
 8001974:	2b08      	cmp	r3, #8
 8001976:	d102      	bne.n	800197e <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8001978:	2308      	movs	r3, #8
 800197a:	61fb      	str	r3, [r7, #28]
 800197c:	e037      	b.n	80019ee <HAL_ADC_PollForConversion+0xaa>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800197e:	697b      	ldr	r3, [r7, #20]
 8001980:	2b00      	cmp	r3, #0
 8001982:	d005      	beq.n	8001990 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001984:	697b      	ldr	r3, [r7, #20]
 8001986:	2b05      	cmp	r3, #5
 8001988:	d002      	beq.n	8001990 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800198a:	697b      	ldr	r3, [r7, #20]
 800198c:	2b09      	cmp	r3, #9
 800198e:	d111      	bne.n	80019b4 <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check DMNGT bit in handle ADC CFGR register */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	68db      	ldr	r3, [r3, #12]
 8001996:	f003 0301 	and.w	r3, r3, #1
 800199a:	2b00      	cmp	r3, #0
 800199c:	d007      	beq.n	80019ae <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019a2:	f043 0220 	orr.w	r2, r3, #32
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 80019aa:	2301      	movs	r3, #1
 80019ac:	e0b1      	b.n	8001b12 <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80019ae:	2304      	movs	r3, #4
 80019b0:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 80019b2:	e01c      	b.n	80019ee <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4a58      	ldr	r2, [pc, #352]	; (8001b1c <HAL_ADC_PollForConversion+0x1d8>)
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d004      	beq.n	80019c8 <HAL_ADC_PollForConversion+0x84>
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	4a57      	ldr	r2, [pc, #348]	; (8001b20 <HAL_ADC_PollForConversion+0x1dc>)
 80019c4:	4293      	cmp	r3, r2
 80019c6:	d101      	bne.n	80019cc <HAL_ADC_PollForConversion+0x88>
 80019c8:	4b56      	ldr	r3, [pc, #344]	; (8001b24 <HAL_ADC_PollForConversion+0x1e0>)
 80019ca:	e000      	b.n	80019ce <HAL_ADC_PollForConversion+0x8a>
 80019cc:	4b56      	ldr	r3, [pc, #344]	; (8001b28 <HAL_ADC_PollForConversion+0x1e4>)
 80019ce:	4618      	mov	r0, r3
 80019d0:	f7ff fc90 	bl	80012f4 <LL_ADC_GetMultiDMATransfer>
 80019d4:	4603      	mov	r3, r0
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d007      	beq.n	80019ea <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019de:	f043 0220 	orr.w	r2, r3, #32
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 80019e6:	2301      	movs	r3, #1
 80019e8:	e093      	b.n	8001b12 <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80019ea:	2304      	movs	r3, #4
 80019ec:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80019ee:	f7ff fb21 	bl	8001034 <HAL_GetTick>
 80019f2:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80019f4:	e021      	b.n	8001a3a <HAL_ADC_PollForConversion+0xf6>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019fc:	d01d      	beq.n	8001a3a <HAL_ADC_PollForConversion+0xf6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80019fe:	f7ff fb19 	bl	8001034 <HAL_GetTick>
 8001a02:	4602      	mov	r2, r0
 8001a04:	693b      	ldr	r3, [r7, #16]
 8001a06:	1ad3      	subs	r3, r2, r3
 8001a08:	683a      	ldr	r2, [r7, #0]
 8001a0a:	429a      	cmp	r2, r3
 8001a0c:	d302      	bcc.n	8001a14 <HAL_ADC_PollForConversion+0xd0>
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d112      	bne.n	8001a3a <HAL_ADC_PollForConversion+0xf6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	681a      	ldr	r2, [r3, #0]
 8001a1a:	69fb      	ldr	r3, [r7, #28]
 8001a1c:	4013      	ands	r3, r2
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d10b      	bne.n	8001a3a <HAL_ADC_PollForConversion+0xf6>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a26:	f043 0204 	orr.w	r2, r3, #4
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	2200      	movs	r2, #0
 8001a32:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 8001a36:	2303      	movs	r3, #3
 8001a38:	e06b      	b.n	8001b12 <HAL_ADC_PollForConversion+0x1ce>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	681a      	ldr	r2, [r3, #0]
 8001a40:	69fb      	ldr	r3, [r7, #28]
 8001a42:	4013      	ands	r3, r2
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d0d6      	beq.n	80019f6 <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a4c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4618      	mov	r0, r3
 8001a5a:	f7ff fbaf 	bl	80011bc <LL_ADC_REG_IsTriggerSourceSWStart>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d01c      	beq.n	8001a9e <HAL_ADC_PollForConversion+0x15a>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	7d5b      	ldrb	r3, [r3, #21]
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d118      	bne.n	8001a9e <HAL_ADC_PollForConversion+0x15a>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f003 0308 	and.w	r3, r3, #8
 8001a76:	2b08      	cmp	r3, #8
 8001a78:	d111      	bne.n	8001a9e <HAL_ADC_PollForConversion+0x15a>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a7e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a8a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d105      	bne.n	8001a9e <HAL_ADC_PollForConversion+0x15a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a96:	f043 0201 	orr.w	r2, r3, #1
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	4a1f      	ldr	r2, [pc, #124]	; (8001b20 <HAL_ADC_PollForConversion+0x1dc>)
 8001aa4:	4293      	cmp	r3, r2
 8001aa6:	d002      	beq.n	8001aae <HAL_ADC_PollForConversion+0x16a>
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	e000      	b.n	8001ab0 <HAL_ADC_PollForConversion+0x16c>
 8001aae:	4b1b      	ldr	r3, [pc, #108]	; (8001b1c <HAL_ADC_PollForConversion+0x1d8>)
 8001ab0:	687a      	ldr	r2, [r7, #4]
 8001ab2:	6812      	ldr	r2, [r2, #0]
 8001ab4:	4293      	cmp	r3, r2
 8001ab6:	d008      	beq.n	8001aca <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001ab8:	697b      	ldr	r3, [r7, #20]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d005      	beq.n	8001aca <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001abe:	697b      	ldr	r3, [r7, #20]
 8001ac0:	2b05      	cmp	r3, #5
 8001ac2:	d002      	beq.n	8001aca <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001ac4:	697b      	ldr	r3, [r7, #20]
 8001ac6:	2b09      	cmp	r3, #9
 8001ac8:	d104      	bne.n	8001ad4 <HAL_ADC_PollForConversion+0x190>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	68db      	ldr	r3, [r3, #12]
 8001ad0:	61bb      	str	r3, [r7, #24]
 8001ad2:	e00c      	b.n	8001aee <HAL_ADC_PollForConversion+0x1aa>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	4a11      	ldr	r2, [pc, #68]	; (8001b20 <HAL_ADC_PollForConversion+0x1dc>)
 8001ada:	4293      	cmp	r3, r2
 8001adc:	d002      	beq.n	8001ae4 <HAL_ADC_PollForConversion+0x1a0>
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	e000      	b.n	8001ae6 <HAL_ADC_PollForConversion+0x1a2>
 8001ae4:	4b0d      	ldr	r3, [pc, #52]	; (8001b1c <HAL_ADC_PollForConversion+0x1d8>)
 8001ae6:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	68db      	ldr	r3, [r3, #12]
 8001aec:	61bb      	str	r3, [r7, #24]
  }

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8001aee:	69fb      	ldr	r3, [r7, #28]
 8001af0:	2b08      	cmp	r3, #8
 8001af2:	d104      	bne.n	8001afe <HAL_ADC_PollForConversion+0x1ba>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	2208      	movs	r2, #8
 8001afa:	601a      	str	r2, [r3, #0]
 8001afc:	e008      	b.n	8001b10 <HAL_ADC_PollForConversion+0x1cc>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8001afe:	69bb      	ldr	r3, [r7, #24]
 8001b00:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d103      	bne.n	8001b10 <HAL_ADC_PollForConversion+0x1cc>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	220c      	movs	r2, #12
 8001b0e:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8001b10:	2300      	movs	r3, #0
}
 8001b12:	4618      	mov	r0, r3
 8001b14:	3720      	adds	r7, #32
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}
 8001b1a:	bf00      	nop
 8001b1c:	40022000 	.word	0x40022000
 8001b20:	40022100 	.word	0x40022100
 8001b24:	40022300 	.word	0x40022300
 8001b28:	58026300 	.word	0x58026300

08001b2c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	b083      	sub	sp, #12
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	370c      	adds	r7, #12
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b44:	4770      	bx	lr
	...

08001b48 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001b48:	b590      	push	{r4, r7, lr}
 8001b4a:	b0a1      	sub	sp, #132	; 0x84
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
 8001b50:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b52:	2300      	movs	r3, #0
 8001b54:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	68db      	ldr	r3, [r3, #12]
 8001b60:	4a9d      	ldr	r2, [pc, #628]	; (8001dd8 <HAL_ADC_ConfigChannel+0x290>)
 8001b62:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001b6a:	2b01      	cmp	r3, #1
 8001b6c:	d101      	bne.n	8001b72 <HAL_ADC_ConfigChannel+0x2a>
 8001b6e:	2302      	movs	r3, #2
 8001b70:	e321      	b.n	80021b6 <HAL_ADC_ConfigChannel+0x66e>
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	2201      	movs	r2, #1
 8001b76:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	4618      	mov	r0, r3
 8001b80:	f7ff fc50 	bl	8001424 <LL_ADC_REG_IsConversionOngoing>
 8001b84:	4603      	mov	r3, r0
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	f040 8306 	bne.w	8002198 <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d108      	bne.n	8001baa <HAL_ADC_ConfigChannel+0x62>
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	0e9b      	lsrs	r3, r3, #26
 8001b9e:	f003 031f 	and.w	r3, r3, #31
 8001ba2:	2201      	movs	r2, #1
 8001ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba8:	e016      	b.n	8001bd8 <HAL_ADC_ConfigChannel+0x90>
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bb0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001bb2:	fa93 f3a3 	rbit	r3, r3
 8001bb6:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001bb8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001bba:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001bbc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d101      	bne.n	8001bc6 <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 8001bc2:	2320      	movs	r3, #32
 8001bc4:	e003      	b.n	8001bce <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 8001bc6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001bc8:	fab3 f383 	clz	r3, r3
 8001bcc:	b2db      	uxtb	r3, r3
 8001bce:	f003 031f 	and.w	r3, r3, #31
 8001bd2:	2201      	movs	r2, #1
 8001bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd8:	687a      	ldr	r2, [r7, #4]
 8001bda:	6812      	ldr	r2, [r2, #0]
 8001bdc:	69d1      	ldr	r1, [r2, #28]
 8001bde:	687a      	ldr	r2, [r7, #4]
 8001be0:	6812      	ldr	r2, [r2, #0]
 8001be2:	430b      	orrs	r3, r1
 8001be4:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	6818      	ldr	r0, [r3, #0]
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	6859      	ldr	r1, [r3, #4]
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	461a      	mov	r2, r3
 8001bf4:	f7ff faf5 	bl	80011e2 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	f7ff fc11 	bl	8001424 <LL_ADC_REG_IsConversionOngoing>
 8001c02:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4618      	mov	r0, r3
 8001c0a:	f7ff fc1e 	bl	800144a <LL_ADC_INJ_IsConversionOngoing>
 8001c0e:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001c10:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	f040 80b3 	bne.w	8001d7e <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001c18:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	f040 80af 	bne.w	8001d7e <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	6818      	ldr	r0, [r3, #0]
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	6819      	ldr	r1, [r3, #0]
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	689b      	ldr	r3, [r3, #8]
 8001c2c:	461a      	mov	r2, r3
 8001c2e:	f7ff fb04 	bl	800123a <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001c32:	4b6a      	ldr	r3, [pc, #424]	; (8001ddc <HAL_ADC_ConfigChannel+0x294>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8001c3a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001c3e:	d10b      	bne.n	8001c58 <HAL_ADC_ConfigChannel+0x110>
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	695a      	ldr	r2, [r3, #20]
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	68db      	ldr	r3, [r3, #12]
 8001c4a:	089b      	lsrs	r3, r3, #2
 8001c4c:	f003 0307 	and.w	r3, r3, #7
 8001c50:	005b      	lsls	r3, r3, #1
 8001c52:	fa02 f303 	lsl.w	r3, r2, r3
 8001c56:	e01d      	b.n	8001c94 <HAL_ADC_ConfigChannel+0x14c>
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	68db      	ldr	r3, [r3, #12]
 8001c5e:	f003 0310 	and.w	r3, r3, #16
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d10b      	bne.n	8001c7e <HAL_ADC_ConfigChannel+0x136>
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	695a      	ldr	r2, [r3, #20]
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	68db      	ldr	r3, [r3, #12]
 8001c70:	089b      	lsrs	r3, r3, #2
 8001c72:	f003 0307 	and.w	r3, r3, #7
 8001c76:	005b      	lsls	r3, r3, #1
 8001c78:	fa02 f303 	lsl.w	r3, r2, r3
 8001c7c:	e00a      	b.n	8001c94 <HAL_ADC_ConfigChannel+0x14c>
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	695a      	ldr	r2, [r3, #20]
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	68db      	ldr	r3, [r3, #12]
 8001c88:	089b      	lsrs	r3, r3, #2
 8001c8a:	f003 0304 	and.w	r3, r3, #4
 8001c8e:	005b      	lsls	r3, r3, #1
 8001c90:	fa02 f303 	lsl.w	r3, r2, r3
 8001c94:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	691b      	ldr	r3, [r3, #16]
 8001c9a:	2b04      	cmp	r3, #4
 8001c9c:	d027      	beq.n	8001cee <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	6818      	ldr	r0, [r3, #0]
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	6919      	ldr	r1, [r3, #16]
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	681a      	ldr	r2, [r3, #0]
 8001caa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001cac:	f7ff fa32 	bl	8001114 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6818      	ldr	r0, [r3, #0]
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	6919      	ldr	r1, [r3, #16]
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	7e5b      	ldrb	r3, [r3, #25]
 8001cbc:	2b01      	cmp	r3, #1
 8001cbe:	d102      	bne.n	8001cc6 <HAL_ADC_ConfigChannel+0x17e>
 8001cc0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8001cc4:	e000      	b.n	8001cc8 <HAL_ADC_ConfigChannel+0x180>
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	461a      	mov	r2, r3
 8001cca:	f7ff fa5c 	bl	8001186 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	6818      	ldr	r0, [r3, #0]
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	6919      	ldr	r1, [r3, #16]
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	7e1b      	ldrb	r3, [r3, #24]
 8001cda:	2b01      	cmp	r3, #1
 8001cdc:	d102      	bne.n	8001ce4 <HAL_ADC_ConfigChannel+0x19c>
 8001cde:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001ce2:	e000      	b.n	8001ce6 <HAL_ADC_ConfigChannel+0x19e>
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	461a      	mov	r2, r3
 8001ce8:	f7ff fa34 	bl	8001154 <LL_ADC_SetDataRightShift>
 8001cec:	e047      	b.n	8001d7e <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cf4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	069b      	lsls	r3, r3, #26
 8001cfe:	429a      	cmp	r2, r3
 8001d00:	d107      	bne.n	8001d12 <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001d10:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001d18:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	069b      	lsls	r3, r3, #26
 8001d22:	429a      	cmp	r2, r3
 8001d24:	d107      	bne.n	8001d36 <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001d34:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001d3c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	069b      	lsls	r3, r3, #26
 8001d46:	429a      	cmp	r2, r3
 8001d48:	d107      	bne.n	8001d5a <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001d58:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001d60:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	069b      	lsls	r3, r3, #26
 8001d6a:	429a      	cmp	r2, r3
 8001d6c:	d107      	bne.n	8001d7e <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001d7c:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	4618      	mov	r0, r3
 8001d84:	f7ff fb26 	bl	80013d4 <LL_ADC_IsEnabled>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	f040 820d 	bne.w	80021aa <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6818      	ldr	r0, [r3, #0]
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	6819      	ldr	r1, [r3, #0]
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	68db      	ldr	r3, [r3, #12]
 8001d9c:	461a      	mov	r2, r3
 8001d9e:	f7ff fa77 	bl	8001290 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	68db      	ldr	r3, [r3, #12]
 8001da6:	4a0c      	ldr	r2, [pc, #48]	; (8001dd8 <HAL_ADC_ConfigChannel+0x290>)
 8001da8:	4293      	cmp	r3, r2
 8001daa:	f040 8133 	bne.w	8002014 <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d110      	bne.n	8001de0 <HAL_ADC_ConfigChannel+0x298>
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	0e9b      	lsrs	r3, r3, #26
 8001dc4:	3301      	adds	r3, #1
 8001dc6:	f003 031f 	and.w	r3, r3, #31
 8001dca:	2b09      	cmp	r3, #9
 8001dcc:	bf94      	ite	ls
 8001dce:	2301      	movls	r3, #1
 8001dd0:	2300      	movhi	r3, #0
 8001dd2:	b2db      	uxtb	r3, r3
 8001dd4:	e01e      	b.n	8001e14 <HAL_ADC_ConfigChannel+0x2cc>
 8001dd6:	bf00      	nop
 8001dd8:	47ff0000 	.word	0x47ff0000
 8001ddc:	5c001000 	.word	0x5c001000
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001de6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001de8:	fa93 f3a3 	rbit	r3, r3
 8001dec:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8001dee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001df0:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8001df2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d101      	bne.n	8001dfc <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 8001df8:	2320      	movs	r3, #32
 8001dfa:	e003      	b.n	8001e04 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8001dfc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001dfe:	fab3 f383 	clz	r3, r3
 8001e02:	b2db      	uxtb	r3, r3
 8001e04:	3301      	adds	r3, #1
 8001e06:	f003 031f 	and.w	r3, r3, #31
 8001e0a:	2b09      	cmp	r3, #9
 8001e0c:	bf94      	ite	ls
 8001e0e:	2301      	movls	r3, #1
 8001e10:	2300      	movhi	r3, #0
 8001e12:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d079      	beq.n	8001f0c <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d107      	bne.n	8001e34 <HAL_ADC_ConfigChannel+0x2ec>
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	0e9b      	lsrs	r3, r3, #26
 8001e2a:	3301      	adds	r3, #1
 8001e2c:	069b      	lsls	r3, r3, #26
 8001e2e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001e32:	e015      	b.n	8001e60 <HAL_ADC_ConfigChannel+0x318>
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001e3c:	fa93 f3a3 	rbit	r3, r3
 8001e40:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8001e42:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001e44:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8001e46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d101      	bne.n	8001e50 <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 8001e4c:	2320      	movs	r3, #32
 8001e4e:	e003      	b.n	8001e58 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8001e50:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001e52:	fab3 f383 	clz	r3, r3
 8001e56:	b2db      	uxtb	r3, r3
 8001e58:	3301      	adds	r3, #1
 8001e5a:	069b      	lsls	r3, r3, #26
 8001e5c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d109      	bne.n	8001e80 <HAL_ADC_ConfigChannel+0x338>
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	0e9b      	lsrs	r3, r3, #26
 8001e72:	3301      	adds	r3, #1
 8001e74:	f003 031f 	and.w	r3, r3, #31
 8001e78:	2101      	movs	r1, #1
 8001e7a:	fa01 f303 	lsl.w	r3, r1, r3
 8001e7e:	e017      	b.n	8001eb0 <HAL_ADC_ConfigChannel+0x368>
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001e88:	fa93 f3a3 	rbit	r3, r3
 8001e8c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8001e8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001e90:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8001e92:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d101      	bne.n	8001e9c <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 8001e98:	2320      	movs	r3, #32
 8001e9a:	e003      	b.n	8001ea4 <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 8001e9c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001e9e:	fab3 f383 	clz	r3, r3
 8001ea2:	b2db      	uxtb	r3, r3
 8001ea4:	3301      	adds	r3, #1
 8001ea6:	f003 031f 	and.w	r3, r3, #31
 8001eaa:	2101      	movs	r1, #1
 8001eac:	fa01 f303 	lsl.w	r3, r1, r3
 8001eb0:	ea42 0103 	orr.w	r1, r2, r3
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d10a      	bne.n	8001ed6 <HAL_ADC_ConfigChannel+0x38e>
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	0e9b      	lsrs	r3, r3, #26
 8001ec6:	3301      	adds	r3, #1
 8001ec8:	f003 021f 	and.w	r2, r3, #31
 8001ecc:	4613      	mov	r3, r2
 8001ece:	005b      	lsls	r3, r3, #1
 8001ed0:	4413      	add	r3, r2
 8001ed2:	051b      	lsls	r3, r3, #20
 8001ed4:	e018      	b.n	8001f08 <HAL_ADC_ConfigChannel+0x3c0>
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001edc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ede:	fa93 f3a3 	rbit	r3, r3
 8001ee2:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8001ee4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ee6:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8001ee8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d101      	bne.n	8001ef2 <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 8001eee:	2320      	movs	r3, #32
 8001ef0:	e003      	b.n	8001efa <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 8001ef2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ef4:	fab3 f383 	clz	r3, r3
 8001ef8:	b2db      	uxtb	r3, r3
 8001efa:	3301      	adds	r3, #1
 8001efc:	f003 021f 	and.w	r2, r3, #31
 8001f00:	4613      	mov	r3, r2
 8001f02:	005b      	lsls	r3, r3, #1
 8001f04:	4413      	add	r3, r2
 8001f06:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001f08:	430b      	orrs	r3, r1
 8001f0a:	e07e      	b.n	800200a <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d107      	bne.n	8001f28 <HAL_ADC_ConfigChannel+0x3e0>
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	0e9b      	lsrs	r3, r3, #26
 8001f1e:	3301      	adds	r3, #1
 8001f20:	069b      	lsls	r3, r3, #26
 8001f22:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001f26:	e015      	b.n	8001f54 <HAL_ADC_ConfigChannel+0x40c>
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f30:	fa93 f3a3 	rbit	r3, r3
 8001f34:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8001f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f38:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8001f3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d101      	bne.n	8001f44 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8001f40:	2320      	movs	r3, #32
 8001f42:	e003      	b.n	8001f4c <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8001f44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f46:	fab3 f383 	clz	r3, r3
 8001f4a:	b2db      	uxtb	r3, r3
 8001f4c:	3301      	adds	r3, #1
 8001f4e:	069b      	lsls	r3, r3, #26
 8001f50:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d109      	bne.n	8001f74 <HAL_ADC_ConfigChannel+0x42c>
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	0e9b      	lsrs	r3, r3, #26
 8001f66:	3301      	adds	r3, #1
 8001f68:	f003 031f 	and.w	r3, r3, #31
 8001f6c:	2101      	movs	r1, #1
 8001f6e:	fa01 f303 	lsl.w	r3, r1, r3
 8001f72:	e017      	b.n	8001fa4 <HAL_ADC_ConfigChannel+0x45c>
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f7a:	69fb      	ldr	r3, [r7, #28]
 8001f7c:	fa93 f3a3 	rbit	r3, r3
 8001f80:	61bb      	str	r3, [r7, #24]
  return result;
 8001f82:	69bb      	ldr	r3, [r7, #24]
 8001f84:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8001f86:	6a3b      	ldr	r3, [r7, #32]
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d101      	bne.n	8001f90 <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 8001f8c:	2320      	movs	r3, #32
 8001f8e:	e003      	b.n	8001f98 <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 8001f90:	6a3b      	ldr	r3, [r7, #32]
 8001f92:	fab3 f383 	clz	r3, r3
 8001f96:	b2db      	uxtb	r3, r3
 8001f98:	3301      	adds	r3, #1
 8001f9a:	f003 031f 	and.w	r3, r3, #31
 8001f9e:	2101      	movs	r1, #1
 8001fa0:	fa01 f303 	lsl.w	r3, r1, r3
 8001fa4:	ea42 0103 	orr.w	r1, r2, r3
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d10d      	bne.n	8001fd0 <HAL_ADC_ConfigChannel+0x488>
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	0e9b      	lsrs	r3, r3, #26
 8001fba:	3301      	adds	r3, #1
 8001fbc:	f003 021f 	and.w	r2, r3, #31
 8001fc0:	4613      	mov	r3, r2
 8001fc2:	005b      	lsls	r3, r3, #1
 8001fc4:	4413      	add	r3, r2
 8001fc6:	3b1e      	subs	r3, #30
 8001fc8:	051b      	lsls	r3, r3, #20
 8001fca:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001fce:	e01b      	b.n	8002008 <HAL_ADC_ConfigChannel+0x4c0>
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fd6:	693b      	ldr	r3, [r7, #16]
 8001fd8:	fa93 f3a3 	rbit	r3, r3
 8001fdc:	60fb      	str	r3, [r7, #12]
  return result;
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8001fe2:	697b      	ldr	r3, [r7, #20]
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d101      	bne.n	8001fec <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 8001fe8:	2320      	movs	r3, #32
 8001fea:	e003      	b.n	8001ff4 <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 8001fec:	697b      	ldr	r3, [r7, #20]
 8001fee:	fab3 f383 	clz	r3, r3
 8001ff2:	b2db      	uxtb	r3, r3
 8001ff4:	3301      	adds	r3, #1
 8001ff6:	f003 021f 	and.w	r2, r3, #31
 8001ffa:	4613      	mov	r3, r2
 8001ffc:	005b      	lsls	r3, r3, #1
 8001ffe:	4413      	add	r3, r2
 8002000:	3b1e      	subs	r3, #30
 8002002:	051b      	lsls	r3, r3, #20
 8002004:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002008:	430b      	orrs	r3, r1
 800200a:	683a      	ldr	r2, [r7, #0]
 800200c:	6892      	ldr	r2, [r2, #8]
 800200e:	4619      	mov	r1, r3
 8002010:	f7ff f913 	bl	800123a <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	2b00      	cmp	r3, #0
 800201a:	f280 80c6 	bge.w	80021aa <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	4a67      	ldr	r2, [pc, #412]	; (80021c0 <HAL_ADC_ConfigChannel+0x678>)
 8002024:	4293      	cmp	r3, r2
 8002026:	d004      	beq.n	8002032 <HAL_ADC_ConfigChannel+0x4ea>
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4a65      	ldr	r2, [pc, #404]	; (80021c4 <HAL_ADC_ConfigChannel+0x67c>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d101      	bne.n	8002036 <HAL_ADC_ConfigChannel+0x4ee>
 8002032:	4b65      	ldr	r3, [pc, #404]	; (80021c8 <HAL_ADC_ConfigChannel+0x680>)
 8002034:	e000      	b.n	8002038 <HAL_ADC_ConfigChannel+0x4f0>
 8002036:	4b65      	ldr	r3, [pc, #404]	; (80021cc <HAL_ADC_ConfigChannel+0x684>)
 8002038:	4618      	mov	r0, r3
 800203a:	f7ff f85d 	bl	80010f8 <LL_ADC_GetCommonPathInternalCh>
 800203e:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4a5e      	ldr	r2, [pc, #376]	; (80021c0 <HAL_ADC_ConfigChannel+0x678>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d004      	beq.n	8002054 <HAL_ADC_ConfigChannel+0x50c>
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4a5d      	ldr	r2, [pc, #372]	; (80021c4 <HAL_ADC_ConfigChannel+0x67c>)
 8002050:	4293      	cmp	r3, r2
 8002052:	d10e      	bne.n	8002072 <HAL_ADC_ConfigChannel+0x52a>
 8002054:	485a      	ldr	r0, [pc, #360]	; (80021c0 <HAL_ADC_ConfigChannel+0x678>)
 8002056:	f7ff f9bd 	bl	80013d4 <LL_ADC_IsEnabled>
 800205a:	4604      	mov	r4, r0
 800205c:	4859      	ldr	r0, [pc, #356]	; (80021c4 <HAL_ADC_ConfigChannel+0x67c>)
 800205e:	f7ff f9b9 	bl	80013d4 <LL_ADC_IsEnabled>
 8002062:	4603      	mov	r3, r0
 8002064:	4323      	orrs	r3, r4
 8002066:	2b00      	cmp	r3, #0
 8002068:	bf0c      	ite	eq
 800206a:	2301      	moveq	r3, #1
 800206c:	2300      	movne	r3, #0
 800206e:	b2db      	uxtb	r3, r3
 8002070:	e008      	b.n	8002084 <HAL_ADC_ConfigChannel+0x53c>
 8002072:	4857      	ldr	r0, [pc, #348]	; (80021d0 <HAL_ADC_ConfigChannel+0x688>)
 8002074:	f7ff f9ae 	bl	80013d4 <LL_ADC_IsEnabled>
 8002078:	4603      	mov	r3, r0
 800207a:	2b00      	cmp	r3, #0
 800207c:	bf0c      	ite	eq
 800207e:	2301      	moveq	r3, #1
 8002080:	2300      	movne	r3, #0
 8002082:	b2db      	uxtb	r3, r3
 8002084:	2b00      	cmp	r3, #0
 8002086:	d07d      	beq.n	8002184 <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4a51      	ldr	r2, [pc, #324]	; (80021d4 <HAL_ADC_ConfigChannel+0x68c>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d130      	bne.n	80020f4 <HAL_ADC_ConfigChannel+0x5ac>
 8002092:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002094:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002098:	2b00      	cmp	r3, #0
 800209a:	d12b      	bne.n	80020f4 <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4a4b      	ldr	r2, [pc, #300]	; (80021d0 <HAL_ADC_ConfigChannel+0x688>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	f040 8081 	bne.w	80021aa <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4a44      	ldr	r2, [pc, #272]	; (80021c0 <HAL_ADC_ConfigChannel+0x678>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d004      	beq.n	80020bc <HAL_ADC_ConfigChannel+0x574>
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4a43      	ldr	r2, [pc, #268]	; (80021c4 <HAL_ADC_ConfigChannel+0x67c>)
 80020b8:	4293      	cmp	r3, r2
 80020ba:	d101      	bne.n	80020c0 <HAL_ADC_ConfigChannel+0x578>
 80020bc:	4a42      	ldr	r2, [pc, #264]	; (80021c8 <HAL_ADC_ConfigChannel+0x680>)
 80020be:	e000      	b.n	80020c2 <HAL_ADC_ConfigChannel+0x57a>
 80020c0:	4a42      	ldr	r2, [pc, #264]	; (80021cc <HAL_ADC_ConfigChannel+0x684>)
 80020c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80020c4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80020c8:	4619      	mov	r1, r3
 80020ca:	4610      	mov	r0, r2
 80020cc:	f7ff f801 	bl	80010d2 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80020d0:	4b41      	ldr	r3, [pc, #260]	; (80021d8 <HAL_ADC_ConfigChannel+0x690>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	099b      	lsrs	r3, r3, #6
 80020d6:	4a41      	ldr	r2, [pc, #260]	; (80021dc <HAL_ADC_ConfigChannel+0x694>)
 80020d8:	fba2 2303 	umull	r2, r3, r2, r3
 80020dc:	099b      	lsrs	r3, r3, #6
 80020de:	3301      	adds	r3, #1
 80020e0:	005b      	lsls	r3, r3, #1
 80020e2:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80020e4:	e002      	b.n	80020ec <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 80020e6:	68bb      	ldr	r3, [r7, #8]
 80020e8:	3b01      	subs	r3, #1
 80020ea:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80020ec:	68bb      	ldr	r3, [r7, #8]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d1f9      	bne.n	80020e6 <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80020f2:	e05a      	b.n	80021aa <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4a39      	ldr	r2, [pc, #228]	; (80021e0 <HAL_ADC_ConfigChannel+0x698>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d11e      	bne.n	800213c <HAL_ADC_ConfigChannel+0x5f4>
 80020fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002100:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002104:	2b00      	cmp	r3, #0
 8002106:	d119      	bne.n	800213c <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4a30      	ldr	r2, [pc, #192]	; (80021d0 <HAL_ADC_ConfigChannel+0x688>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d14b      	bne.n	80021aa <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4a2a      	ldr	r2, [pc, #168]	; (80021c0 <HAL_ADC_ConfigChannel+0x678>)
 8002118:	4293      	cmp	r3, r2
 800211a:	d004      	beq.n	8002126 <HAL_ADC_ConfigChannel+0x5de>
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4a28      	ldr	r2, [pc, #160]	; (80021c4 <HAL_ADC_ConfigChannel+0x67c>)
 8002122:	4293      	cmp	r3, r2
 8002124:	d101      	bne.n	800212a <HAL_ADC_ConfigChannel+0x5e2>
 8002126:	4a28      	ldr	r2, [pc, #160]	; (80021c8 <HAL_ADC_ConfigChannel+0x680>)
 8002128:	e000      	b.n	800212c <HAL_ADC_ConfigChannel+0x5e4>
 800212a:	4a28      	ldr	r2, [pc, #160]	; (80021cc <HAL_ADC_ConfigChannel+0x684>)
 800212c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800212e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002132:	4619      	mov	r1, r3
 8002134:	4610      	mov	r0, r2
 8002136:	f7fe ffcc 	bl	80010d2 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800213a:	e036      	b.n	80021aa <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4a28      	ldr	r2, [pc, #160]	; (80021e4 <HAL_ADC_ConfigChannel+0x69c>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d131      	bne.n	80021aa <HAL_ADC_ConfigChannel+0x662>
 8002146:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002148:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800214c:	2b00      	cmp	r3, #0
 800214e:	d12c      	bne.n	80021aa <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4a1e      	ldr	r2, [pc, #120]	; (80021d0 <HAL_ADC_ConfigChannel+0x688>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d127      	bne.n	80021aa <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4a18      	ldr	r2, [pc, #96]	; (80021c0 <HAL_ADC_ConfigChannel+0x678>)
 8002160:	4293      	cmp	r3, r2
 8002162:	d004      	beq.n	800216e <HAL_ADC_ConfigChannel+0x626>
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4a16      	ldr	r2, [pc, #88]	; (80021c4 <HAL_ADC_ConfigChannel+0x67c>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d101      	bne.n	8002172 <HAL_ADC_ConfigChannel+0x62a>
 800216e:	4a16      	ldr	r2, [pc, #88]	; (80021c8 <HAL_ADC_ConfigChannel+0x680>)
 8002170:	e000      	b.n	8002174 <HAL_ADC_ConfigChannel+0x62c>
 8002172:	4a16      	ldr	r2, [pc, #88]	; (80021cc <HAL_ADC_ConfigChannel+0x684>)
 8002174:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002176:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800217a:	4619      	mov	r1, r3
 800217c:	4610      	mov	r0, r2
 800217e:	f7fe ffa8 	bl	80010d2 <LL_ADC_SetCommonPathInternalCh>
 8002182:	e012      	b.n	80021aa <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002188:	f043 0220 	orr.w	r2, r3, #32
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8002190:	2301      	movs	r3, #1
 8002192:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8002196:	e008      	b.n	80021aa <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800219c:	f043 0220 	orr.w	r2, r3, #32
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80021a4:	2301      	movs	r3, #1
 80021a6:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	2200      	movs	r2, #0
 80021ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80021b2:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80021b6:	4618      	mov	r0, r3
 80021b8:	3784      	adds	r7, #132	; 0x84
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bd90      	pop	{r4, r7, pc}
 80021be:	bf00      	nop
 80021c0:	40022000 	.word	0x40022000
 80021c4:	40022100 	.word	0x40022100
 80021c8:	40022300 	.word	0x40022300
 80021cc:	58026300 	.word	0x58026300
 80021d0:	58026000 	.word	0x58026000
 80021d4:	cb840000 	.word	0xcb840000
 80021d8:	24000000 	.word	0x24000000
 80021dc:	053e2d63 	.word	0x053e2d63
 80021e0:	c7520000 	.word	0xc7520000
 80021e4:	cfb80000 	.word	0xcfb80000

080021e8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b084      	sub	sp, #16
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4618      	mov	r0, r3
 80021f6:	f7ff f8ed 	bl	80013d4 <LL_ADC_IsEnabled>
 80021fa:	4603      	mov	r3, r0
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d16e      	bne.n	80022de <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	689a      	ldr	r2, [r3, #8]
 8002206:	4b38      	ldr	r3, [pc, #224]	; (80022e8 <ADC_Enable+0x100>)
 8002208:	4013      	ands	r3, r2
 800220a:	2b00      	cmp	r3, #0
 800220c:	d00d      	beq.n	800222a <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002212:	f043 0210 	orr.w	r2, r3, #16
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800221e:	f043 0201 	orr.w	r2, r3, #1
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8002226:	2301      	movs	r3, #1
 8002228:	e05a      	b.n	80022e0 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	4618      	mov	r0, r3
 8002230:	f7ff f8bc 	bl	80013ac <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002234:	f7fe fefe 	bl	8001034 <HAL_GetTick>
 8002238:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	4a2b      	ldr	r2, [pc, #172]	; (80022ec <ADC_Enable+0x104>)
 8002240:	4293      	cmp	r3, r2
 8002242:	d004      	beq.n	800224e <ADC_Enable+0x66>
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4a29      	ldr	r2, [pc, #164]	; (80022f0 <ADC_Enable+0x108>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d101      	bne.n	8002252 <ADC_Enable+0x6a>
 800224e:	4b29      	ldr	r3, [pc, #164]	; (80022f4 <ADC_Enable+0x10c>)
 8002250:	e000      	b.n	8002254 <ADC_Enable+0x6c>
 8002252:	4b29      	ldr	r3, [pc, #164]	; (80022f8 <ADC_Enable+0x110>)
 8002254:	4618      	mov	r0, r3
 8002256:	f7ff f83f 	bl	80012d8 <LL_ADC_GetMultimode>
 800225a:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4a23      	ldr	r2, [pc, #140]	; (80022f0 <ADC_Enable+0x108>)
 8002262:	4293      	cmp	r3, r2
 8002264:	d002      	beq.n	800226c <ADC_Enable+0x84>
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	e000      	b.n	800226e <ADC_Enable+0x86>
 800226c:	4b1f      	ldr	r3, [pc, #124]	; (80022ec <ADC_Enable+0x104>)
 800226e:	687a      	ldr	r2, [r7, #4]
 8002270:	6812      	ldr	r2, [r2, #0]
 8002272:	4293      	cmp	r3, r2
 8002274:	d02c      	beq.n	80022d0 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002276:	68bb      	ldr	r3, [r7, #8]
 8002278:	2b00      	cmp	r3, #0
 800227a:	d130      	bne.n	80022de <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800227c:	e028      	b.n	80022d0 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	4618      	mov	r0, r3
 8002284:	f7ff f8a6 	bl	80013d4 <LL_ADC_IsEnabled>
 8002288:	4603      	mov	r3, r0
 800228a:	2b00      	cmp	r3, #0
 800228c:	d104      	bne.n	8002298 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4618      	mov	r0, r3
 8002294:	f7ff f88a 	bl	80013ac <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002298:	f7fe fecc 	bl	8001034 <HAL_GetTick>
 800229c:	4602      	mov	r2, r0
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	1ad3      	subs	r3, r2, r3
 80022a2:	2b02      	cmp	r3, #2
 80022a4:	d914      	bls.n	80022d0 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f003 0301 	and.w	r3, r3, #1
 80022b0:	2b01      	cmp	r3, #1
 80022b2:	d00d      	beq.n	80022d0 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022b8:	f043 0210 	orr.w	r2, r3, #16
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022c4:	f043 0201 	orr.w	r2, r3, #1
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 80022cc:	2301      	movs	r3, #1
 80022ce:	e007      	b.n	80022e0 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f003 0301 	and.w	r3, r3, #1
 80022da:	2b01      	cmp	r3, #1
 80022dc:	d1cf      	bne.n	800227e <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80022de:	2300      	movs	r3, #0
}
 80022e0:	4618      	mov	r0, r3
 80022e2:	3710      	adds	r7, #16
 80022e4:	46bd      	mov	sp, r7
 80022e6:	bd80      	pop	{r7, pc}
 80022e8:	8000003f 	.word	0x8000003f
 80022ec:	40022000 	.word	0x40022000
 80022f0:	40022100 	.word	0x40022100
 80022f4:	40022300 	.word	0x40022300
 80022f8:	58026300 	.word	0x58026300

080022fc <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b084      	sub	sp, #16
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	4a79      	ldr	r2, [pc, #484]	; (80024f0 <ADC_ConfigureBoostMode+0x1f4>)
 800230a:	4293      	cmp	r3, r2
 800230c:	d004      	beq.n	8002318 <ADC_ConfigureBoostMode+0x1c>
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	4a78      	ldr	r2, [pc, #480]	; (80024f4 <ADC_ConfigureBoostMode+0x1f8>)
 8002314:	4293      	cmp	r3, r2
 8002316:	d109      	bne.n	800232c <ADC_ConfigureBoostMode+0x30>
 8002318:	4b77      	ldr	r3, [pc, #476]	; (80024f8 <ADC_ConfigureBoostMode+0x1fc>)
 800231a:	689b      	ldr	r3, [r3, #8]
 800231c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002320:	2b00      	cmp	r3, #0
 8002322:	bf14      	ite	ne
 8002324:	2301      	movne	r3, #1
 8002326:	2300      	moveq	r3, #0
 8002328:	b2db      	uxtb	r3, r3
 800232a:	e008      	b.n	800233e <ADC_ConfigureBoostMode+0x42>
 800232c:	4b73      	ldr	r3, [pc, #460]	; (80024fc <ADC_ConfigureBoostMode+0x200>)
 800232e:	689b      	ldr	r3, [r3, #8]
 8002330:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002334:	2b00      	cmp	r3, #0
 8002336:	bf14      	ite	ne
 8002338:	2301      	movne	r3, #1
 800233a:	2300      	moveq	r3, #0
 800233c:	b2db      	uxtb	r3, r3
 800233e:	2b00      	cmp	r3, #0
 8002340:	d01c      	beq.n	800237c <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8002342:	f001 ffd5 	bl	80042f0 <HAL_RCC_GetHCLKFreq>
 8002346:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002350:	d010      	beq.n	8002374 <ADC_ConfigureBoostMode+0x78>
 8002352:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002356:	d871      	bhi.n	800243c <ADC_ConfigureBoostMode+0x140>
 8002358:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800235c:	d002      	beq.n	8002364 <ADC_ConfigureBoostMode+0x68>
 800235e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002362:	d16b      	bne.n	800243c <ADC_ConfigureBoostMode+0x140>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	0c1b      	lsrs	r3, r3, #16
 800236a:	68fa      	ldr	r2, [r7, #12]
 800236c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002370:	60fb      	str	r3, [r7, #12]
        break;
 8002372:	e066      	b.n	8002442 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	089b      	lsrs	r3, r3, #2
 8002378:	60fb      	str	r3, [r7, #12]
        break;
 800237a:	e062      	b.n	8002442 <ADC_ConfigureBoostMode+0x146>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 800237c:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002380:	f002 ff26 	bl	80051d0 <HAL_RCCEx_GetPeriphCLKFreq>
 8002384:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	685b      	ldr	r3, [r3, #4]
 800238a:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 800238e:	d051      	beq.n	8002434 <ADC_ConfigureBoostMode+0x138>
 8002390:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8002394:	d854      	bhi.n	8002440 <ADC_ConfigureBoostMode+0x144>
 8002396:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 800239a:	d047      	beq.n	800242c <ADC_ConfigureBoostMode+0x130>
 800239c:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80023a0:	d84e      	bhi.n	8002440 <ADC_ConfigureBoostMode+0x144>
 80023a2:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80023a6:	d03d      	beq.n	8002424 <ADC_ConfigureBoostMode+0x128>
 80023a8:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80023ac:	d848      	bhi.n	8002440 <ADC_ConfigureBoostMode+0x144>
 80023ae:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80023b2:	d033      	beq.n	800241c <ADC_ConfigureBoostMode+0x120>
 80023b4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80023b8:	d842      	bhi.n	8002440 <ADC_ConfigureBoostMode+0x144>
 80023ba:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80023be:	d029      	beq.n	8002414 <ADC_ConfigureBoostMode+0x118>
 80023c0:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80023c4:	d83c      	bhi.n	8002440 <ADC_ConfigureBoostMode+0x144>
 80023c6:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80023ca:	d01a      	beq.n	8002402 <ADC_ConfigureBoostMode+0x106>
 80023cc:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80023d0:	d836      	bhi.n	8002440 <ADC_ConfigureBoostMode+0x144>
 80023d2:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80023d6:	d014      	beq.n	8002402 <ADC_ConfigureBoostMode+0x106>
 80023d8:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80023dc:	d830      	bhi.n	8002440 <ADC_ConfigureBoostMode+0x144>
 80023de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80023e2:	d00e      	beq.n	8002402 <ADC_ConfigureBoostMode+0x106>
 80023e4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80023e8:	d82a      	bhi.n	8002440 <ADC_ConfigureBoostMode+0x144>
 80023ea:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80023ee:	d008      	beq.n	8002402 <ADC_ConfigureBoostMode+0x106>
 80023f0:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80023f4:	d824      	bhi.n	8002440 <ADC_ConfigureBoostMode+0x144>
 80023f6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80023fa:	d002      	beq.n	8002402 <ADC_ConfigureBoostMode+0x106>
 80023fc:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002400:	d11e      	bne.n	8002440 <ADC_ConfigureBoostMode+0x144>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	0c9b      	lsrs	r3, r3, #18
 8002408:	005b      	lsls	r3, r3, #1
 800240a:	68fa      	ldr	r2, [r7, #12]
 800240c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002410:	60fb      	str	r3, [r7, #12]
        break;
 8002412:	e016      	b.n	8002442 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	091b      	lsrs	r3, r3, #4
 8002418:	60fb      	str	r3, [r7, #12]
        break;
 800241a:	e012      	b.n	8002442 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	095b      	lsrs	r3, r3, #5
 8002420:	60fb      	str	r3, [r7, #12]
        break;
 8002422:	e00e      	b.n	8002442 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	099b      	lsrs	r3, r3, #6
 8002428:	60fb      	str	r3, [r7, #12]
        break;
 800242a:	e00a      	b.n	8002442 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	09db      	lsrs	r3, r3, #7
 8002430:	60fb      	str	r3, [r7, #12]
        break;
 8002432:	e006      	b.n	8002442 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	0a1b      	lsrs	r3, r3, #8
 8002438:	60fb      	str	r3, [r7, #12]
        break;
 800243a:	e002      	b.n	8002442 <ADC_ConfigureBoostMode+0x146>
        break;
 800243c:	bf00      	nop
 800243e:	e000      	b.n	8002442 <ADC_ConfigureBoostMode+0x146>
      default:
        break;
 8002440:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8002442:	f7fe fe27 	bl	8001094 <HAL_GetREVID>
 8002446:	4603      	mov	r3, r0
 8002448:	f241 0203 	movw	r2, #4099	; 0x1003
 800244c:	4293      	cmp	r3, r2
 800244e:	d815      	bhi.n	800247c <ADC_ConfigureBoostMode+0x180>
  {
    if (freq > 20000000UL)
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	4a2b      	ldr	r2, [pc, #172]	; (8002500 <ADC_ConfigureBoostMode+0x204>)
 8002454:	4293      	cmp	r3, r2
 8002456:	d908      	bls.n	800246a <ADC_ConfigureBoostMode+0x16e>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	689a      	ldr	r2, [r3, #8]
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002466:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8002468:	e03e      	b.n	80024e8 <ADC_ConfigureBoostMode+0x1ec>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	689a      	ldr	r2, [r3, #8]
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002478:	609a      	str	r2, [r3, #8]
}
 800247a:	e035      	b.n	80024e8 <ADC_ConfigureBoostMode+0x1ec>
    freq /= 2U; /* divider by 2 for Rev.V */
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	085b      	lsrs	r3, r3, #1
 8002480:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	4a1f      	ldr	r2, [pc, #124]	; (8002504 <ADC_ConfigureBoostMode+0x208>)
 8002486:	4293      	cmp	r3, r2
 8002488:	d808      	bhi.n	800249c <ADC_ConfigureBoostMode+0x1a0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	689a      	ldr	r2, [r3, #8]
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002498:	609a      	str	r2, [r3, #8]
}
 800249a:	e025      	b.n	80024e8 <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 12500000UL)
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	4a1a      	ldr	r2, [pc, #104]	; (8002508 <ADC_ConfigureBoostMode+0x20c>)
 80024a0:	4293      	cmp	r3, r2
 80024a2:	d80a      	bhi.n	80024ba <ADC_ConfigureBoostMode+0x1be>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	689b      	ldr	r3, [r3, #8]
 80024aa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80024b6:	609a      	str	r2, [r3, #8]
}
 80024b8:	e016      	b.n	80024e8 <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 25000000UL)
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	4a13      	ldr	r2, [pc, #76]	; (800250c <ADC_ConfigureBoostMode+0x210>)
 80024be:	4293      	cmp	r3, r2
 80024c0:	d80a      	bhi.n	80024d8 <ADC_ConfigureBoostMode+0x1dc>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	689b      	ldr	r3, [r3, #8]
 80024c8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024d4:	609a      	str	r2, [r3, #8]
}
 80024d6:	e007      	b.n	80024e8 <ADC_ConfigureBoostMode+0x1ec>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	689a      	ldr	r2, [r3, #8]
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80024e6:	609a      	str	r2, [r3, #8]
}
 80024e8:	bf00      	nop
 80024ea:	3710      	adds	r7, #16
 80024ec:	46bd      	mov	sp, r7
 80024ee:	bd80      	pop	{r7, pc}
 80024f0:	40022000 	.word	0x40022000
 80024f4:	40022100 	.word	0x40022100
 80024f8:	40022300 	.word	0x40022300
 80024fc:	58026300 	.word	0x58026300
 8002500:	01312d00 	.word	0x01312d00
 8002504:	005f5e10 	.word	0x005f5e10
 8002508:	00bebc20 	.word	0x00bebc20
 800250c:	017d7840 	.word	0x017d7840

08002510 <LL_ADC_IsEnabled>:
{
 8002510:	b480      	push	{r7}
 8002512:	b083      	sub	sp, #12
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	689b      	ldr	r3, [r3, #8]
 800251c:	f003 0301 	and.w	r3, r3, #1
 8002520:	2b01      	cmp	r3, #1
 8002522:	d101      	bne.n	8002528 <LL_ADC_IsEnabled+0x18>
 8002524:	2301      	movs	r3, #1
 8002526:	e000      	b.n	800252a <LL_ADC_IsEnabled+0x1a>
 8002528:	2300      	movs	r3, #0
}
 800252a:	4618      	mov	r0, r3
 800252c:	370c      	adds	r7, #12
 800252e:	46bd      	mov	sp, r7
 8002530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002534:	4770      	bx	lr

08002536 <LL_ADC_REG_IsConversionOngoing>:
{
 8002536:	b480      	push	{r7}
 8002538:	b083      	sub	sp, #12
 800253a:	af00      	add	r7, sp, #0
 800253c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	689b      	ldr	r3, [r3, #8]
 8002542:	f003 0304 	and.w	r3, r3, #4
 8002546:	2b04      	cmp	r3, #4
 8002548:	d101      	bne.n	800254e <LL_ADC_REG_IsConversionOngoing+0x18>
 800254a:	2301      	movs	r3, #1
 800254c:	e000      	b.n	8002550 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800254e:	2300      	movs	r3, #0
}
 8002550:	4618      	mov	r0, r3
 8002552:	370c      	adds	r7, #12
 8002554:	46bd      	mov	sp, r7
 8002556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255a:	4770      	bx	lr

0800255c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 800255c:	b590      	push	{r4, r7, lr}
 800255e:	b09f      	sub	sp, #124	; 0x7c
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
 8002564:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002566:	2300      	movs	r3, #0
 8002568:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002572:	2b01      	cmp	r3, #1
 8002574:	d101      	bne.n	800257a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002576:	2302      	movs	r3, #2
 8002578:	e0be      	b.n	80026f8 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	2201      	movs	r2, #1
 800257e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8002582:	2300      	movs	r3, #0
 8002584:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8002586:	2300      	movs	r3, #0
 8002588:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4a5c      	ldr	r2, [pc, #368]	; (8002700 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002590:	4293      	cmp	r3, r2
 8002592:	d102      	bne.n	800259a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002594:	4b5b      	ldr	r3, [pc, #364]	; (8002704 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002596:	60bb      	str	r3, [r7, #8]
 8002598:	e001      	b.n	800259e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800259a:	2300      	movs	r3, #0
 800259c:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800259e:	68bb      	ldr	r3, [r7, #8]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d10b      	bne.n	80025bc <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025a8:	f043 0220 	orr.w	r2, r3, #32
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2200      	movs	r2, #0
 80025b4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 80025b8:	2301      	movs	r3, #1
 80025ba:	e09d      	b.n	80026f8 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80025bc:	68bb      	ldr	r3, [r7, #8]
 80025be:	4618      	mov	r0, r3
 80025c0:	f7ff ffb9 	bl	8002536 <LL_ADC_REG_IsConversionOngoing>
 80025c4:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	4618      	mov	r0, r3
 80025cc:	f7ff ffb3 	bl	8002536 <LL_ADC_REG_IsConversionOngoing>
 80025d0:	4603      	mov	r3, r0
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d17f      	bne.n	80026d6 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80025d6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d17c      	bne.n	80026d6 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4a47      	ldr	r2, [pc, #284]	; (8002700 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d004      	beq.n	80025f0 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4a46      	ldr	r2, [pc, #280]	; (8002704 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80025ec:	4293      	cmp	r3, r2
 80025ee:	d101      	bne.n	80025f4 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 80025f0:	4b45      	ldr	r3, [pc, #276]	; (8002708 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80025f2:	e000      	b.n	80025f6 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 80025f4:	4b45      	ldr	r3, [pc, #276]	; (800270c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80025f6:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d039      	beq.n	8002674 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8002600:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002602:	689b      	ldr	r3, [r3, #8]
 8002604:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	431a      	orrs	r2, r3
 800260e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002610:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	4a3a      	ldr	r2, [pc, #232]	; (8002700 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002618:	4293      	cmp	r3, r2
 800261a:	d004      	beq.n	8002626 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4a38      	ldr	r2, [pc, #224]	; (8002704 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002622:	4293      	cmp	r3, r2
 8002624:	d10e      	bne.n	8002644 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8002626:	4836      	ldr	r0, [pc, #216]	; (8002700 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002628:	f7ff ff72 	bl	8002510 <LL_ADC_IsEnabled>
 800262c:	4604      	mov	r4, r0
 800262e:	4835      	ldr	r0, [pc, #212]	; (8002704 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002630:	f7ff ff6e 	bl	8002510 <LL_ADC_IsEnabled>
 8002634:	4603      	mov	r3, r0
 8002636:	4323      	orrs	r3, r4
 8002638:	2b00      	cmp	r3, #0
 800263a:	bf0c      	ite	eq
 800263c:	2301      	moveq	r3, #1
 800263e:	2300      	movne	r3, #0
 8002640:	b2db      	uxtb	r3, r3
 8002642:	e008      	b.n	8002656 <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8002644:	4832      	ldr	r0, [pc, #200]	; (8002710 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8002646:	f7ff ff63 	bl	8002510 <LL_ADC_IsEnabled>
 800264a:	4603      	mov	r3, r0
 800264c:	2b00      	cmp	r3, #0
 800264e:	bf0c      	ite	eq
 8002650:	2301      	moveq	r3, #1
 8002652:	2300      	movne	r3, #0
 8002654:	b2db      	uxtb	r3, r3
 8002656:	2b00      	cmp	r3, #0
 8002658:	d047      	beq.n	80026ea <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800265a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800265c:	689a      	ldr	r2, [r3, #8]
 800265e:	4b2d      	ldr	r3, [pc, #180]	; (8002714 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8002660:	4013      	ands	r3, r2
 8002662:	683a      	ldr	r2, [r7, #0]
 8002664:	6811      	ldr	r1, [r2, #0]
 8002666:	683a      	ldr	r2, [r7, #0]
 8002668:	6892      	ldr	r2, [r2, #8]
 800266a:	430a      	orrs	r2, r1
 800266c:	431a      	orrs	r2, r3
 800266e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002670:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002672:	e03a      	b.n	80026ea <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8002674:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002676:	689b      	ldr	r3, [r3, #8]
 8002678:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800267c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800267e:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4a1e      	ldr	r2, [pc, #120]	; (8002700 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d004      	beq.n	8002694 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	4a1d      	ldr	r2, [pc, #116]	; (8002704 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002690:	4293      	cmp	r3, r2
 8002692:	d10e      	bne.n	80026b2 <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8002694:	481a      	ldr	r0, [pc, #104]	; (8002700 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002696:	f7ff ff3b 	bl	8002510 <LL_ADC_IsEnabled>
 800269a:	4604      	mov	r4, r0
 800269c:	4819      	ldr	r0, [pc, #100]	; (8002704 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800269e:	f7ff ff37 	bl	8002510 <LL_ADC_IsEnabled>
 80026a2:	4603      	mov	r3, r0
 80026a4:	4323      	orrs	r3, r4
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	bf0c      	ite	eq
 80026aa:	2301      	moveq	r3, #1
 80026ac:	2300      	movne	r3, #0
 80026ae:	b2db      	uxtb	r3, r3
 80026b0:	e008      	b.n	80026c4 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 80026b2:	4817      	ldr	r0, [pc, #92]	; (8002710 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80026b4:	f7ff ff2c 	bl	8002510 <LL_ADC_IsEnabled>
 80026b8:	4603      	mov	r3, r0
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	bf0c      	ite	eq
 80026be:	2301      	moveq	r3, #1
 80026c0:	2300      	movne	r3, #0
 80026c2:	b2db      	uxtb	r3, r3
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d010      	beq.n	80026ea <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80026c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80026ca:	689a      	ldr	r2, [r3, #8]
 80026cc:	4b11      	ldr	r3, [pc, #68]	; (8002714 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 80026ce:	4013      	ands	r3, r2
 80026d0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80026d2:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80026d4:	e009      	b.n	80026ea <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026da:	f043 0220 	orr.w	r2, r3, #32
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80026e2:	2301      	movs	r3, #1
 80026e4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80026e8:	e000      	b.n	80026ec <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80026ea:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2200      	movs	r2, #0
 80026f0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80026f4:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 80026f8:	4618      	mov	r0, r3
 80026fa:	377c      	adds	r7, #124	; 0x7c
 80026fc:	46bd      	mov	sp, r7
 80026fe:	bd90      	pop	{r4, r7, pc}
 8002700:	40022000 	.word	0x40022000
 8002704:	40022100 	.word	0x40022100
 8002708:	40022300 	.word	0x40022300
 800270c:	58026300 	.word	0x58026300
 8002710:	58026000 	.word	0x58026000
 8002714:	fffff0e0 	.word	0xfffff0e0

08002718 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002718:	b480      	push	{r7}
 800271a:	b085      	sub	sp, #20
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	f003 0307 	and.w	r3, r3, #7
 8002726:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002728:	4b0b      	ldr	r3, [pc, #44]	; (8002758 <__NVIC_SetPriorityGrouping+0x40>)
 800272a:	68db      	ldr	r3, [r3, #12]
 800272c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800272e:	68ba      	ldr	r2, [r7, #8]
 8002730:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002734:	4013      	ands	r3, r2
 8002736:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800273c:	68bb      	ldr	r3, [r7, #8]
 800273e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002740:	4b06      	ldr	r3, [pc, #24]	; (800275c <__NVIC_SetPriorityGrouping+0x44>)
 8002742:	4313      	orrs	r3, r2
 8002744:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002746:	4a04      	ldr	r2, [pc, #16]	; (8002758 <__NVIC_SetPriorityGrouping+0x40>)
 8002748:	68bb      	ldr	r3, [r7, #8]
 800274a:	60d3      	str	r3, [r2, #12]
}
 800274c:	bf00      	nop
 800274e:	3714      	adds	r7, #20
 8002750:	46bd      	mov	sp, r7
 8002752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002756:	4770      	bx	lr
 8002758:	e000ed00 	.word	0xe000ed00
 800275c:	05fa0000 	.word	0x05fa0000

08002760 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002760:	b480      	push	{r7}
 8002762:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002764:	4b04      	ldr	r3, [pc, #16]	; (8002778 <__NVIC_GetPriorityGrouping+0x18>)
 8002766:	68db      	ldr	r3, [r3, #12]
 8002768:	0a1b      	lsrs	r3, r3, #8
 800276a:	f003 0307 	and.w	r3, r3, #7
}
 800276e:	4618      	mov	r0, r3
 8002770:	46bd      	mov	sp, r7
 8002772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002776:	4770      	bx	lr
 8002778:	e000ed00 	.word	0xe000ed00

0800277c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800277c:	b480      	push	{r7}
 800277e:	b083      	sub	sp, #12
 8002780:	af00      	add	r7, sp, #0
 8002782:	4603      	mov	r3, r0
 8002784:	6039      	str	r1, [r7, #0]
 8002786:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002788:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800278c:	2b00      	cmp	r3, #0
 800278e:	db0a      	blt.n	80027a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	b2da      	uxtb	r2, r3
 8002794:	490c      	ldr	r1, [pc, #48]	; (80027c8 <__NVIC_SetPriority+0x4c>)
 8002796:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800279a:	0112      	lsls	r2, r2, #4
 800279c:	b2d2      	uxtb	r2, r2
 800279e:	440b      	add	r3, r1
 80027a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80027a4:	e00a      	b.n	80027bc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	b2da      	uxtb	r2, r3
 80027aa:	4908      	ldr	r1, [pc, #32]	; (80027cc <__NVIC_SetPriority+0x50>)
 80027ac:	88fb      	ldrh	r3, [r7, #6]
 80027ae:	f003 030f 	and.w	r3, r3, #15
 80027b2:	3b04      	subs	r3, #4
 80027b4:	0112      	lsls	r2, r2, #4
 80027b6:	b2d2      	uxtb	r2, r2
 80027b8:	440b      	add	r3, r1
 80027ba:	761a      	strb	r2, [r3, #24]
}
 80027bc:	bf00      	nop
 80027be:	370c      	adds	r7, #12
 80027c0:	46bd      	mov	sp, r7
 80027c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c6:	4770      	bx	lr
 80027c8:	e000e100 	.word	0xe000e100
 80027cc:	e000ed00 	.word	0xe000ed00

080027d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027d0:	b480      	push	{r7}
 80027d2:	b089      	sub	sp, #36	; 0x24
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	60f8      	str	r0, [r7, #12]
 80027d8:	60b9      	str	r1, [r7, #8]
 80027da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	f003 0307 	and.w	r3, r3, #7
 80027e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80027e4:	69fb      	ldr	r3, [r7, #28]
 80027e6:	f1c3 0307 	rsb	r3, r3, #7
 80027ea:	2b04      	cmp	r3, #4
 80027ec:	bf28      	it	cs
 80027ee:	2304      	movcs	r3, #4
 80027f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80027f2:	69fb      	ldr	r3, [r7, #28]
 80027f4:	3304      	adds	r3, #4
 80027f6:	2b06      	cmp	r3, #6
 80027f8:	d902      	bls.n	8002800 <NVIC_EncodePriority+0x30>
 80027fa:	69fb      	ldr	r3, [r7, #28]
 80027fc:	3b03      	subs	r3, #3
 80027fe:	e000      	b.n	8002802 <NVIC_EncodePriority+0x32>
 8002800:	2300      	movs	r3, #0
 8002802:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002804:	f04f 32ff 	mov.w	r2, #4294967295
 8002808:	69bb      	ldr	r3, [r7, #24]
 800280a:	fa02 f303 	lsl.w	r3, r2, r3
 800280e:	43da      	mvns	r2, r3
 8002810:	68bb      	ldr	r3, [r7, #8]
 8002812:	401a      	ands	r2, r3
 8002814:	697b      	ldr	r3, [r7, #20]
 8002816:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002818:	f04f 31ff 	mov.w	r1, #4294967295
 800281c:	697b      	ldr	r3, [r7, #20]
 800281e:	fa01 f303 	lsl.w	r3, r1, r3
 8002822:	43d9      	mvns	r1, r3
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002828:	4313      	orrs	r3, r2
         );
}
 800282a:	4618      	mov	r0, r3
 800282c:	3724      	adds	r7, #36	; 0x24
 800282e:	46bd      	mov	sp, r7
 8002830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002834:	4770      	bx	lr
	...

08002838 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b082      	sub	sp, #8
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	3b01      	subs	r3, #1
 8002844:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002848:	d301      	bcc.n	800284e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800284a:	2301      	movs	r3, #1
 800284c:	e00f      	b.n	800286e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800284e:	4a0a      	ldr	r2, [pc, #40]	; (8002878 <SysTick_Config+0x40>)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	3b01      	subs	r3, #1
 8002854:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002856:	210f      	movs	r1, #15
 8002858:	f04f 30ff 	mov.w	r0, #4294967295
 800285c:	f7ff ff8e 	bl	800277c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002860:	4b05      	ldr	r3, [pc, #20]	; (8002878 <SysTick_Config+0x40>)
 8002862:	2200      	movs	r2, #0
 8002864:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002866:	4b04      	ldr	r3, [pc, #16]	; (8002878 <SysTick_Config+0x40>)
 8002868:	2207      	movs	r2, #7
 800286a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800286c:	2300      	movs	r3, #0
}
 800286e:	4618      	mov	r0, r3
 8002870:	3708      	adds	r7, #8
 8002872:	46bd      	mov	sp, r7
 8002874:	bd80      	pop	{r7, pc}
 8002876:	bf00      	nop
 8002878:	e000e010 	.word	0xe000e010

0800287c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b082      	sub	sp, #8
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002884:	6878      	ldr	r0, [r7, #4]
 8002886:	f7ff ff47 	bl	8002718 <__NVIC_SetPriorityGrouping>
}
 800288a:	bf00      	nop
 800288c:	3708      	adds	r7, #8
 800288e:	46bd      	mov	sp, r7
 8002890:	bd80      	pop	{r7, pc}

08002892 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002892:	b580      	push	{r7, lr}
 8002894:	b086      	sub	sp, #24
 8002896:	af00      	add	r7, sp, #0
 8002898:	4603      	mov	r3, r0
 800289a:	60b9      	str	r1, [r7, #8]
 800289c:	607a      	str	r2, [r7, #4]
 800289e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80028a0:	f7ff ff5e 	bl	8002760 <__NVIC_GetPriorityGrouping>
 80028a4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80028a6:	687a      	ldr	r2, [r7, #4]
 80028a8:	68b9      	ldr	r1, [r7, #8]
 80028aa:	6978      	ldr	r0, [r7, #20]
 80028ac:	f7ff ff90 	bl	80027d0 <NVIC_EncodePriority>
 80028b0:	4602      	mov	r2, r0
 80028b2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80028b6:	4611      	mov	r1, r2
 80028b8:	4618      	mov	r0, r3
 80028ba:	f7ff ff5f 	bl	800277c <__NVIC_SetPriority>
}
 80028be:	bf00      	nop
 80028c0:	3718      	adds	r7, #24
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bd80      	pop	{r7, pc}

080028c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80028c6:	b580      	push	{r7, lr}
 80028c8:	b082      	sub	sp, #8
 80028ca:	af00      	add	r7, sp, #0
 80028cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80028ce:	6878      	ldr	r0, [r7, #4]
 80028d0:	f7ff ffb2 	bl	8002838 <SysTick_Config>
 80028d4:	4603      	mov	r3, r0
}
 80028d6:	4618      	mov	r0, r3
 80028d8:	3708      	adds	r7, #8
 80028da:	46bd      	mov	sp, r7
 80028dc:	bd80      	pop	{r7, pc}
	...

080028e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80028e0:	b480      	push	{r7}
 80028e2:	b089      	sub	sp, #36	; 0x24
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
 80028e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80028ea:	2300      	movs	r3, #0
 80028ec:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80028ee:	4b89      	ldr	r3, [pc, #548]	; (8002b14 <HAL_GPIO_Init+0x234>)
 80028f0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80028f2:	e194      	b.n	8002c1e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	681a      	ldr	r2, [r3, #0]
 80028f8:	2101      	movs	r1, #1
 80028fa:	69fb      	ldr	r3, [r7, #28]
 80028fc:	fa01 f303 	lsl.w	r3, r1, r3
 8002900:	4013      	ands	r3, r2
 8002902:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002904:	693b      	ldr	r3, [r7, #16]
 8002906:	2b00      	cmp	r3, #0
 8002908:	f000 8186 	beq.w	8002c18 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	2b01      	cmp	r3, #1
 8002912:	d00b      	beq.n	800292c <HAL_GPIO_Init+0x4c>
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	685b      	ldr	r3, [r3, #4]
 8002918:	2b02      	cmp	r3, #2
 800291a:	d007      	beq.n	800292c <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002920:	2b11      	cmp	r3, #17
 8002922:	d003      	beq.n	800292c <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	2b12      	cmp	r3, #18
 800292a:	d130      	bne.n	800298e <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	689b      	ldr	r3, [r3, #8]
 8002930:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002932:	69fb      	ldr	r3, [r7, #28]
 8002934:	005b      	lsls	r3, r3, #1
 8002936:	2203      	movs	r2, #3
 8002938:	fa02 f303 	lsl.w	r3, r2, r3
 800293c:	43db      	mvns	r3, r3
 800293e:	69ba      	ldr	r2, [r7, #24]
 8002940:	4013      	ands	r3, r2
 8002942:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	68da      	ldr	r2, [r3, #12]
 8002948:	69fb      	ldr	r3, [r7, #28]
 800294a:	005b      	lsls	r3, r3, #1
 800294c:	fa02 f303 	lsl.w	r3, r2, r3
 8002950:	69ba      	ldr	r2, [r7, #24]
 8002952:	4313      	orrs	r3, r2
 8002954:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	69ba      	ldr	r2, [r7, #24]
 800295a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	685b      	ldr	r3, [r3, #4]
 8002960:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002962:	2201      	movs	r2, #1
 8002964:	69fb      	ldr	r3, [r7, #28]
 8002966:	fa02 f303 	lsl.w	r3, r2, r3
 800296a:	43db      	mvns	r3, r3
 800296c:	69ba      	ldr	r2, [r7, #24]
 800296e:	4013      	ands	r3, r2
 8002970:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	091b      	lsrs	r3, r3, #4
 8002978:	f003 0201 	and.w	r2, r3, #1
 800297c:	69fb      	ldr	r3, [r7, #28]
 800297e:	fa02 f303 	lsl.w	r3, r2, r3
 8002982:	69ba      	ldr	r2, [r7, #24]
 8002984:	4313      	orrs	r3, r2
 8002986:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	69ba      	ldr	r2, [r7, #24]
 800298c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	68db      	ldr	r3, [r3, #12]
 8002992:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002994:	69fb      	ldr	r3, [r7, #28]
 8002996:	005b      	lsls	r3, r3, #1
 8002998:	2203      	movs	r2, #3
 800299a:	fa02 f303 	lsl.w	r3, r2, r3
 800299e:	43db      	mvns	r3, r3
 80029a0:	69ba      	ldr	r2, [r7, #24]
 80029a2:	4013      	ands	r3, r2
 80029a4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	689a      	ldr	r2, [r3, #8]
 80029aa:	69fb      	ldr	r3, [r7, #28]
 80029ac:	005b      	lsls	r3, r3, #1
 80029ae:	fa02 f303 	lsl.w	r3, r2, r3
 80029b2:	69ba      	ldr	r2, [r7, #24]
 80029b4:	4313      	orrs	r3, r2
 80029b6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	69ba      	ldr	r2, [r7, #24]
 80029bc:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	685b      	ldr	r3, [r3, #4]
 80029c2:	2b02      	cmp	r3, #2
 80029c4:	d003      	beq.n	80029ce <HAL_GPIO_Init+0xee>
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	2b12      	cmp	r3, #18
 80029cc:	d123      	bne.n	8002a16 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80029ce:	69fb      	ldr	r3, [r7, #28]
 80029d0:	08da      	lsrs	r2, r3, #3
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	3208      	adds	r2, #8
 80029d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80029da:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80029dc:	69fb      	ldr	r3, [r7, #28]
 80029de:	f003 0307 	and.w	r3, r3, #7
 80029e2:	009b      	lsls	r3, r3, #2
 80029e4:	220f      	movs	r2, #15
 80029e6:	fa02 f303 	lsl.w	r3, r2, r3
 80029ea:	43db      	mvns	r3, r3
 80029ec:	69ba      	ldr	r2, [r7, #24]
 80029ee:	4013      	ands	r3, r2
 80029f0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	691a      	ldr	r2, [r3, #16]
 80029f6:	69fb      	ldr	r3, [r7, #28]
 80029f8:	f003 0307 	and.w	r3, r3, #7
 80029fc:	009b      	lsls	r3, r3, #2
 80029fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002a02:	69ba      	ldr	r2, [r7, #24]
 8002a04:	4313      	orrs	r3, r2
 8002a06:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002a08:	69fb      	ldr	r3, [r7, #28]
 8002a0a:	08da      	lsrs	r2, r3, #3
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	3208      	adds	r2, #8
 8002a10:	69b9      	ldr	r1, [r7, #24]
 8002a12:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002a1c:	69fb      	ldr	r3, [r7, #28]
 8002a1e:	005b      	lsls	r3, r3, #1
 8002a20:	2203      	movs	r2, #3
 8002a22:	fa02 f303 	lsl.w	r3, r2, r3
 8002a26:	43db      	mvns	r3, r3
 8002a28:	69ba      	ldr	r2, [r7, #24]
 8002a2a:	4013      	ands	r3, r2
 8002a2c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	f003 0203 	and.w	r2, r3, #3
 8002a36:	69fb      	ldr	r3, [r7, #28]
 8002a38:	005b      	lsls	r3, r3, #1
 8002a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a3e:	69ba      	ldr	r2, [r7, #24]
 8002a40:	4313      	orrs	r3, r2
 8002a42:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	69ba      	ldr	r2, [r7, #24]
 8002a48:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	685b      	ldr	r3, [r3, #4]
 8002a4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	f000 80e0 	beq.w	8002c18 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a58:	4b2f      	ldr	r3, [pc, #188]	; (8002b18 <HAL_GPIO_Init+0x238>)
 8002a5a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002a5e:	4a2e      	ldr	r2, [pc, #184]	; (8002b18 <HAL_GPIO_Init+0x238>)
 8002a60:	f043 0302 	orr.w	r3, r3, #2
 8002a64:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002a68:	4b2b      	ldr	r3, [pc, #172]	; (8002b18 <HAL_GPIO_Init+0x238>)
 8002a6a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002a6e:	f003 0302 	and.w	r3, r3, #2
 8002a72:	60fb      	str	r3, [r7, #12]
 8002a74:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002a76:	4a29      	ldr	r2, [pc, #164]	; (8002b1c <HAL_GPIO_Init+0x23c>)
 8002a78:	69fb      	ldr	r3, [r7, #28]
 8002a7a:	089b      	lsrs	r3, r3, #2
 8002a7c:	3302      	adds	r3, #2
 8002a7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a82:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002a84:	69fb      	ldr	r3, [r7, #28]
 8002a86:	f003 0303 	and.w	r3, r3, #3
 8002a8a:	009b      	lsls	r3, r3, #2
 8002a8c:	220f      	movs	r2, #15
 8002a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a92:	43db      	mvns	r3, r3
 8002a94:	69ba      	ldr	r2, [r7, #24]
 8002a96:	4013      	ands	r3, r2
 8002a98:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	4a20      	ldr	r2, [pc, #128]	; (8002b20 <HAL_GPIO_Init+0x240>)
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d052      	beq.n	8002b48 <HAL_GPIO_Init+0x268>
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	4a1f      	ldr	r2, [pc, #124]	; (8002b24 <HAL_GPIO_Init+0x244>)
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d031      	beq.n	8002b0e <HAL_GPIO_Init+0x22e>
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	4a1e      	ldr	r2, [pc, #120]	; (8002b28 <HAL_GPIO_Init+0x248>)
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d02b      	beq.n	8002b0a <HAL_GPIO_Init+0x22a>
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	4a1d      	ldr	r2, [pc, #116]	; (8002b2c <HAL_GPIO_Init+0x24c>)
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	d025      	beq.n	8002b06 <HAL_GPIO_Init+0x226>
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	4a1c      	ldr	r2, [pc, #112]	; (8002b30 <HAL_GPIO_Init+0x250>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d01f      	beq.n	8002b02 <HAL_GPIO_Init+0x222>
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	4a1b      	ldr	r2, [pc, #108]	; (8002b34 <HAL_GPIO_Init+0x254>)
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d019      	beq.n	8002afe <HAL_GPIO_Init+0x21e>
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	4a1a      	ldr	r2, [pc, #104]	; (8002b38 <HAL_GPIO_Init+0x258>)
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	d013      	beq.n	8002afa <HAL_GPIO_Init+0x21a>
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	4a19      	ldr	r2, [pc, #100]	; (8002b3c <HAL_GPIO_Init+0x25c>)
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d00d      	beq.n	8002af6 <HAL_GPIO_Init+0x216>
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	4a18      	ldr	r2, [pc, #96]	; (8002b40 <HAL_GPIO_Init+0x260>)
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d007      	beq.n	8002af2 <HAL_GPIO_Init+0x212>
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	4a17      	ldr	r2, [pc, #92]	; (8002b44 <HAL_GPIO_Init+0x264>)
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d101      	bne.n	8002aee <HAL_GPIO_Init+0x20e>
 8002aea:	2309      	movs	r3, #9
 8002aec:	e02d      	b.n	8002b4a <HAL_GPIO_Init+0x26a>
 8002aee:	230a      	movs	r3, #10
 8002af0:	e02b      	b.n	8002b4a <HAL_GPIO_Init+0x26a>
 8002af2:	2308      	movs	r3, #8
 8002af4:	e029      	b.n	8002b4a <HAL_GPIO_Init+0x26a>
 8002af6:	2307      	movs	r3, #7
 8002af8:	e027      	b.n	8002b4a <HAL_GPIO_Init+0x26a>
 8002afa:	2306      	movs	r3, #6
 8002afc:	e025      	b.n	8002b4a <HAL_GPIO_Init+0x26a>
 8002afe:	2305      	movs	r3, #5
 8002b00:	e023      	b.n	8002b4a <HAL_GPIO_Init+0x26a>
 8002b02:	2304      	movs	r3, #4
 8002b04:	e021      	b.n	8002b4a <HAL_GPIO_Init+0x26a>
 8002b06:	2303      	movs	r3, #3
 8002b08:	e01f      	b.n	8002b4a <HAL_GPIO_Init+0x26a>
 8002b0a:	2302      	movs	r3, #2
 8002b0c:	e01d      	b.n	8002b4a <HAL_GPIO_Init+0x26a>
 8002b0e:	2301      	movs	r3, #1
 8002b10:	e01b      	b.n	8002b4a <HAL_GPIO_Init+0x26a>
 8002b12:	bf00      	nop
 8002b14:	58000080 	.word	0x58000080
 8002b18:	58024400 	.word	0x58024400
 8002b1c:	58000400 	.word	0x58000400
 8002b20:	58020000 	.word	0x58020000
 8002b24:	58020400 	.word	0x58020400
 8002b28:	58020800 	.word	0x58020800
 8002b2c:	58020c00 	.word	0x58020c00
 8002b30:	58021000 	.word	0x58021000
 8002b34:	58021400 	.word	0x58021400
 8002b38:	58021800 	.word	0x58021800
 8002b3c:	58021c00 	.word	0x58021c00
 8002b40:	58022000 	.word	0x58022000
 8002b44:	58022400 	.word	0x58022400
 8002b48:	2300      	movs	r3, #0
 8002b4a:	69fa      	ldr	r2, [r7, #28]
 8002b4c:	f002 0203 	and.w	r2, r2, #3
 8002b50:	0092      	lsls	r2, r2, #2
 8002b52:	4093      	lsls	r3, r2
 8002b54:	69ba      	ldr	r2, [r7, #24]
 8002b56:	4313      	orrs	r3, r2
 8002b58:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002b5a:	4938      	ldr	r1, [pc, #224]	; (8002c3c <HAL_GPIO_Init+0x35c>)
 8002b5c:	69fb      	ldr	r3, [r7, #28]
 8002b5e:	089b      	lsrs	r3, r3, #2
 8002b60:	3302      	adds	r3, #2
 8002b62:	69ba      	ldr	r2, [r7, #24]
 8002b64:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002b68:	697b      	ldr	r3, [r7, #20]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002b6e:	693b      	ldr	r3, [r7, #16]
 8002b70:	43db      	mvns	r3, r3
 8002b72:	69ba      	ldr	r2, [r7, #24]
 8002b74:	4013      	ands	r3, r2
 8002b76:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	685b      	ldr	r3, [r3, #4]
 8002b7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d003      	beq.n	8002b8c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002b84:	69ba      	ldr	r2, [r7, #24]
 8002b86:	693b      	ldr	r3, [r7, #16]
 8002b88:	4313      	orrs	r3, r2
 8002b8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002b8c:	697b      	ldr	r3, [r7, #20]
 8002b8e:	69ba      	ldr	r2, [r7, #24]
 8002b90:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8002b92:	697b      	ldr	r3, [r7, #20]
 8002b94:	685b      	ldr	r3, [r3, #4]
 8002b96:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002b98:	693b      	ldr	r3, [r7, #16]
 8002b9a:	43db      	mvns	r3, r3
 8002b9c:	69ba      	ldr	r2, [r7, #24]
 8002b9e:	4013      	ands	r3, r2
 8002ba0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d003      	beq.n	8002bb6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002bae:	69ba      	ldr	r2, [r7, #24]
 8002bb0:	693b      	ldr	r3, [r7, #16]
 8002bb2:	4313      	orrs	r3, r2
 8002bb4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002bb6:	697b      	ldr	r3, [r7, #20]
 8002bb8:	69ba      	ldr	r2, [r7, #24]
 8002bba:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002bbc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002bc4:	693b      	ldr	r3, [r7, #16]
 8002bc6:	43db      	mvns	r3, r3
 8002bc8:	69ba      	ldr	r2, [r7, #24]
 8002bca:	4013      	ands	r3, r2
 8002bcc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	685b      	ldr	r3, [r3, #4]
 8002bd2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d003      	beq.n	8002be2 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8002bda:	69ba      	ldr	r2, [r7, #24]
 8002bdc:	693b      	ldr	r3, [r7, #16]
 8002bde:	4313      	orrs	r3, r2
 8002be0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002be2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002be6:	69bb      	ldr	r3, [r7, #24]
 8002be8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002bea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002bf2:	693b      	ldr	r3, [r7, #16]
 8002bf4:	43db      	mvns	r3, r3
 8002bf6:	69ba      	ldr	r2, [r7, #24]
 8002bf8:	4013      	ands	r3, r2
 8002bfa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	685b      	ldr	r3, [r3, #4]
 8002c00:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d003      	beq.n	8002c10 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8002c08:	69ba      	ldr	r2, [r7, #24]
 8002c0a:	693b      	ldr	r3, [r7, #16]
 8002c0c:	4313      	orrs	r3, r2
 8002c0e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002c10:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002c14:	69bb      	ldr	r3, [r7, #24]
 8002c16:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8002c18:	69fb      	ldr	r3, [r7, #28]
 8002c1a:	3301      	adds	r3, #1
 8002c1c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	681a      	ldr	r2, [r3, #0]
 8002c22:	69fb      	ldr	r3, [r7, #28]
 8002c24:	fa22 f303 	lsr.w	r3, r2, r3
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	f47f ae63 	bne.w	80028f4 <HAL_GPIO_Init+0x14>
  }
}
 8002c2e:	bf00      	nop
 8002c30:	bf00      	nop
 8002c32:	3724      	adds	r7, #36	; 0x24
 8002c34:	46bd      	mov	sp, r7
 8002c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3a:	4770      	bx	lr
 8002c3c:	58000400 	.word	0x58000400

08002c40 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8002c40:	b480      	push	{r7}
 8002c42:	b083      	sub	sp, #12
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8002c48:	4a08      	ldr	r2, [pc, #32]	; (8002c6c <HAL_HSEM_FastTake+0x2c>)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	3320      	adds	r3, #32
 8002c4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c52:	4a07      	ldr	r2, [pc, #28]	; (8002c70 <HAL_HSEM_FastTake+0x30>)
 8002c54:	4293      	cmp	r3, r2
 8002c56:	d101      	bne.n	8002c5c <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8002c58:	2300      	movs	r3, #0
 8002c5a:	e000      	b.n	8002c5e <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8002c5c:	2301      	movs	r3, #1
}
 8002c5e:	4618      	mov	r0, r3
 8002c60:	370c      	adds	r7, #12
 8002c62:	46bd      	mov	sp, r7
 8002c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c68:	4770      	bx	lr
 8002c6a:	bf00      	nop
 8002c6c:	58026400 	.word	0x58026400
 8002c70:	80000300 	.word	0x80000300

08002c74 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8002c74:	b480      	push	{r7}
 8002c76:	b083      	sub	sp, #12
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
 8002c7c:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8002c7e:	4906      	ldr	r1, [pc, #24]	; (8002c98 <HAL_HSEM_Release+0x24>)
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8002c8c:	bf00      	nop
 8002c8e:	370c      	adds	r7, #12
 8002c90:	46bd      	mov	sp, r7
 8002c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c96:	4770      	bx	lr
 8002c98:	58026400 	.word	0x58026400

08002c9c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b082      	sub	sp, #8
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d101      	bne.n	8002cae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002caa:	2301      	movs	r3, #1
 8002cac:	e07f      	b.n	8002dae <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002cb4:	b2db      	uxtb	r3, r3
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d106      	bne.n	8002cc8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002cc2:	6878      	ldr	r0, [r7, #4]
 8002cc4:	f7fe f848 	bl	8000d58 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2224      	movs	r2, #36	; 0x24
 8002ccc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	681a      	ldr	r2, [r3, #0]
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f022 0201 	bic.w	r2, r2, #1
 8002cde:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	685a      	ldr	r2, [r3, #4]
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002cec:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	689a      	ldr	r2, [r3, #8]
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002cfc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	68db      	ldr	r3, [r3, #12]
 8002d02:	2b01      	cmp	r3, #1
 8002d04:	d107      	bne.n	8002d16 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	689a      	ldr	r2, [r3, #8]
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002d12:	609a      	str	r2, [r3, #8]
 8002d14:	e006      	b.n	8002d24 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	689a      	ldr	r2, [r3, #8]
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002d22:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	68db      	ldr	r3, [r3, #12]
 8002d28:	2b02      	cmp	r3, #2
 8002d2a:	d104      	bne.n	8002d36 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002d34:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	6859      	ldr	r1, [r3, #4]
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681a      	ldr	r2, [r3, #0]
 8002d40:	4b1d      	ldr	r3, [pc, #116]	; (8002db8 <HAL_I2C_Init+0x11c>)
 8002d42:	430b      	orrs	r3, r1
 8002d44:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	68da      	ldr	r2, [r3, #12]
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002d54:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	691a      	ldr	r2, [r3, #16]
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	695b      	ldr	r3, [r3, #20]
 8002d5e:	ea42 0103 	orr.w	r1, r2, r3
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	699b      	ldr	r3, [r3, #24]
 8002d66:	021a      	lsls	r2, r3, #8
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	430a      	orrs	r2, r1
 8002d6e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	69d9      	ldr	r1, [r3, #28]
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6a1a      	ldr	r2, [r3, #32]
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	430a      	orrs	r2, r1
 8002d7e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	681a      	ldr	r2, [r3, #0]
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f042 0201 	orr.w	r2, r2, #1
 8002d8e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2200      	movs	r2, #0
 8002d94:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2220      	movs	r2, #32
 8002d9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2200      	movs	r2, #0
 8002da2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2200      	movs	r2, #0
 8002da8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002dac:	2300      	movs	r3, #0
}
 8002dae:	4618      	mov	r0, r3
 8002db0:	3708      	adds	r7, #8
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bd80      	pop	{r7, pc}
 8002db6:	bf00      	nop
 8002db8:	02008000 	.word	0x02008000

08002dbc <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b088      	sub	sp, #32
 8002dc0:	af02      	add	r7, sp, #8
 8002dc2:	60f8      	str	r0, [r7, #12]
 8002dc4:	607a      	str	r2, [r7, #4]
 8002dc6:	461a      	mov	r2, r3
 8002dc8:	460b      	mov	r3, r1
 8002dca:	817b      	strh	r3, [r7, #10]
 8002dcc:	4613      	mov	r3, r2
 8002dce:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002dd6:	b2db      	uxtb	r3, r3
 8002dd8:	2b20      	cmp	r3, #32
 8002dda:	f040 80da 	bne.w	8002f92 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002de4:	2b01      	cmp	r3, #1
 8002de6:	d101      	bne.n	8002dec <HAL_I2C_Master_Transmit+0x30>
 8002de8:	2302      	movs	r3, #2
 8002dea:	e0d3      	b.n	8002f94 <HAL_I2C_Master_Transmit+0x1d8>
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	2201      	movs	r2, #1
 8002df0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002df4:	f7fe f91e 	bl	8001034 <HAL_GetTick>
 8002df8:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002dfa:	697b      	ldr	r3, [r7, #20]
 8002dfc:	9300      	str	r3, [sp, #0]
 8002dfe:	2319      	movs	r3, #25
 8002e00:	2201      	movs	r2, #1
 8002e02:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002e06:	68f8      	ldr	r0, [r7, #12]
 8002e08:	f000 f8f0 	bl	8002fec <I2C_WaitOnFlagUntilTimeout>
 8002e0c:	4603      	mov	r3, r0
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d001      	beq.n	8002e16 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8002e12:	2301      	movs	r3, #1
 8002e14:	e0be      	b.n	8002f94 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	2221      	movs	r2, #33	; 0x21
 8002e1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	2210      	movs	r2, #16
 8002e22:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	2200      	movs	r2, #0
 8002e2a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	687a      	ldr	r2, [r7, #4]
 8002e30:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	893a      	ldrh	r2, [r7, #8]
 8002e36:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e42:	b29b      	uxth	r3, r3
 8002e44:	2bff      	cmp	r3, #255	; 0xff
 8002e46:	d90e      	bls.n	8002e66 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	22ff      	movs	r2, #255	; 0xff
 8002e4c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e52:	b2da      	uxtb	r2, r3
 8002e54:	8979      	ldrh	r1, [r7, #10]
 8002e56:	4b51      	ldr	r3, [pc, #324]	; (8002f9c <HAL_I2C_Master_Transmit+0x1e0>)
 8002e58:	9300      	str	r3, [sp, #0]
 8002e5a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002e5e:	68f8      	ldr	r0, [r7, #12]
 8002e60:	f000 f9e6 	bl	8003230 <I2C_TransferConfig>
 8002e64:	e06c      	b.n	8002f40 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e6a:	b29a      	uxth	r2, r3
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e74:	b2da      	uxtb	r2, r3
 8002e76:	8979      	ldrh	r1, [r7, #10]
 8002e78:	4b48      	ldr	r3, [pc, #288]	; (8002f9c <HAL_I2C_Master_Transmit+0x1e0>)
 8002e7a:	9300      	str	r3, [sp, #0]
 8002e7c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002e80:	68f8      	ldr	r0, [r7, #12]
 8002e82:	f000 f9d5 	bl	8003230 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8002e86:	e05b      	b.n	8002f40 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e88:	697a      	ldr	r2, [r7, #20]
 8002e8a:	6a39      	ldr	r1, [r7, #32]
 8002e8c:	68f8      	ldr	r0, [r7, #12]
 8002e8e:	f000 f8ed 	bl	800306c <I2C_WaitOnTXISFlagUntilTimeout>
 8002e92:	4603      	mov	r3, r0
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d001      	beq.n	8002e9c <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8002e98:	2301      	movs	r3, #1
 8002e9a:	e07b      	b.n	8002f94 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ea0:	781a      	ldrb	r2, [r3, #0]
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eac:	1c5a      	adds	r2, r3, #1
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002eb6:	b29b      	uxth	r3, r3
 8002eb8:	3b01      	subs	r3, #1
 8002eba:	b29a      	uxth	r2, r3
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ec4:	3b01      	subs	r3, #1
 8002ec6:	b29a      	uxth	r2, r3
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ed0:	b29b      	uxth	r3, r3
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d034      	beq.n	8002f40 <HAL_I2C_Master_Transmit+0x184>
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d130      	bne.n	8002f40 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002ede:	697b      	ldr	r3, [r7, #20]
 8002ee0:	9300      	str	r3, [sp, #0]
 8002ee2:	6a3b      	ldr	r3, [r7, #32]
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	2180      	movs	r1, #128	; 0x80
 8002ee8:	68f8      	ldr	r0, [r7, #12]
 8002eea:	f000 f87f 	bl	8002fec <I2C_WaitOnFlagUntilTimeout>
 8002eee:	4603      	mov	r3, r0
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d001      	beq.n	8002ef8 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	e04d      	b.n	8002f94 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002efc:	b29b      	uxth	r3, r3
 8002efe:	2bff      	cmp	r3, #255	; 0xff
 8002f00:	d90e      	bls.n	8002f20 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	22ff      	movs	r2, #255	; 0xff
 8002f06:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f0c:	b2da      	uxtb	r2, r3
 8002f0e:	8979      	ldrh	r1, [r7, #10]
 8002f10:	2300      	movs	r3, #0
 8002f12:	9300      	str	r3, [sp, #0]
 8002f14:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002f18:	68f8      	ldr	r0, [r7, #12]
 8002f1a:	f000 f989 	bl	8003230 <I2C_TransferConfig>
 8002f1e:	e00f      	b.n	8002f40 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f24:	b29a      	uxth	r2, r3
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f2e:	b2da      	uxtb	r2, r3
 8002f30:	8979      	ldrh	r1, [r7, #10]
 8002f32:	2300      	movs	r3, #0
 8002f34:	9300      	str	r3, [sp, #0]
 8002f36:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002f3a:	68f8      	ldr	r0, [r7, #12]
 8002f3c:	f000 f978 	bl	8003230 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f44:	b29b      	uxth	r3, r3
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d19e      	bne.n	8002e88 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f4a:	697a      	ldr	r2, [r7, #20]
 8002f4c:	6a39      	ldr	r1, [r7, #32]
 8002f4e:	68f8      	ldr	r0, [r7, #12]
 8002f50:	f000 f8cc 	bl	80030ec <I2C_WaitOnSTOPFlagUntilTimeout>
 8002f54:	4603      	mov	r3, r0
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d001      	beq.n	8002f5e <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	e01a      	b.n	8002f94 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	2220      	movs	r2, #32
 8002f64:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	6859      	ldr	r1, [r3, #4]
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681a      	ldr	r2, [r3, #0]
 8002f70:	4b0b      	ldr	r3, [pc, #44]	; (8002fa0 <HAL_I2C_Master_Transmit+0x1e4>)
 8002f72:	400b      	ands	r3, r1
 8002f74:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	2220      	movs	r2, #32
 8002f7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	2200      	movs	r2, #0
 8002f82:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	2200      	movs	r2, #0
 8002f8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002f8e:	2300      	movs	r3, #0
 8002f90:	e000      	b.n	8002f94 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8002f92:	2302      	movs	r3, #2
  }
}
 8002f94:	4618      	mov	r0, r3
 8002f96:	3718      	adds	r7, #24
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	bd80      	pop	{r7, pc}
 8002f9c:	80002000 	.word	0x80002000
 8002fa0:	fe00e800 	.word	0xfe00e800

08002fa4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	b083      	sub	sp, #12
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	699b      	ldr	r3, [r3, #24]
 8002fb2:	f003 0302 	and.w	r3, r3, #2
 8002fb6:	2b02      	cmp	r3, #2
 8002fb8:	d103      	bne.n	8002fc2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	699b      	ldr	r3, [r3, #24]
 8002fc8:	f003 0301 	and.w	r3, r3, #1
 8002fcc:	2b01      	cmp	r3, #1
 8002fce:	d007      	beq.n	8002fe0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	699a      	ldr	r2, [r3, #24]
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f042 0201 	orr.w	r2, r2, #1
 8002fde:	619a      	str	r2, [r3, #24]
  }
}
 8002fe0:	bf00      	nop
 8002fe2:	370c      	adds	r7, #12
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fea:	4770      	bx	lr

08002fec <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b084      	sub	sp, #16
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	60f8      	str	r0, [r7, #12]
 8002ff4:	60b9      	str	r1, [r7, #8]
 8002ff6:	603b      	str	r3, [r7, #0]
 8002ff8:	4613      	mov	r3, r2
 8002ffa:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002ffc:	e022      	b.n	8003044 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003004:	d01e      	beq.n	8003044 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003006:	f7fe f815 	bl	8001034 <HAL_GetTick>
 800300a:	4602      	mov	r2, r0
 800300c:	69bb      	ldr	r3, [r7, #24]
 800300e:	1ad3      	subs	r3, r2, r3
 8003010:	683a      	ldr	r2, [r7, #0]
 8003012:	429a      	cmp	r2, r3
 8003014:	d302      	bcc.n	800301c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	2b00      	cmp	r3, #0
 800301a:	d113      	bne.n	8003044 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003020:	f043 0220 	orr.w	r2, r3, #32
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	2220      	movs	r2, #32
 800302c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	2200      	movs	r2, #0
 8003034:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	2200      	movs	r2, #0
 800303c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003040:	2301      	movs	r3, #1
 8003042:	e00f      	b.n	8003064 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	699a      	ldr	r2, [r3, #24]
 800304a:	68bb      	ldr	r3, [r7, #8]
 800304c:	4013      	ands	r3, r2
 800304e:	68ba      	ldr	r2, [r7, #8]
 8003050:	429a      	cmp	r2, r3
 8003052:	bf0c      	ite	eq
 8003054:	2301      	moveq	r3, #1
 8003056:	2300      	movne	r3, #0
 8003058:	b2db      	uxtb	r3, r3
 800305a:	461a      	mov	r2, r3
 800305c:	79fb      	ldrb	r3, [r7, #7]
 800305e:	429a      	cmp	r2, r3
 8003060:	d0cd      	beq.n	8002ffe <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003062:	2300      	movs	r3, #0
}
 8003064:	4618      	mov	r0, r3
 8003066:	3710      	adds	r7, #16
 8003068:	46bd      	mov	sp, r7
 800306a:	bd80      	pop	{r7, pc}

0800306c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b084      	sub	sp, #16
 8003070:	af00      	add	r7, sp, #0
 8003072:	60f8      	str	r0, [r7, #12]
 8003074:	60b9      	str	r1, [r7, #8]
 8003076:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003078:	e02c      	b.n	80030d4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800307a:	687a      	ldr	r2, [r7, #4]
 800307c:	68b9      	ldr	r1, [r7, #8]
 800307e:	68f8      	ldr	r0, [r7, #12]
 8003080:	f000 f870 	bl	8003164 <I2C_IsAcknowledgeFailed>
 8003084:	4603      	mov	r3, r0
 8003086:	2b00      	cmp	r3, #0
 8003088:	d001      	beq.n	800308e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800308a:	2301      	movs	r3, #1
 800308c:	e02a      	b.n	80030e4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800308e:	68bb      	ldr	r3, [r7, #8]
 8003090:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003094:	d01e      	beq.n	80030d4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003096:	f7fd ffcd 	bl	8001034 <HAL_GetTick>
 800309a:	4602      	mov	r2, r0
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	1ad3      	subs	r3, r2, r3
 80030a0:	68ba      	ldr	r2, [r7, #8]
 80030a2:	429a      	cmp	r2, r3
 80030a4:	d302      	bcc.n	80030ac <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80030a6:	68bb      	ldr	r3, [r7, #8]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d113      	bne.n	80030d4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030b0:	f043 0220 	orr.w	r2, r3, #32
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	2220      	movs	r2, #32
 80030bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	2200      	movs	r2, #0
 80030c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	2200      	movs	r2, #0
 80030cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80030d0:	2301      	movs	r3, #1
 80030d2:	e007      	b.n	80030e4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	699b      	ldr	r3, [r3, #24]
 80030da:	f003 0302 	and.w	r3, r3, #2
 80030de:	2b02      	cmp	r3, #2
 80030e0:	d1cb      	bne.n	800307a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80030e2:	2300      	movs	r3, #0
}
 80030e4:	4618      	mov	r0, r3
 80030e6:	3710      	adds	r7, #16
 80030e8:	46bd      	mov	sp, r7
 80030ea:	bd80      	pop	{r7, pc}

080030ec <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b084      	sub	sp, #16
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	60f8      	str	r0, [r7, #12]
 80030f4:	60b9      	str	r1, [r7, #8]
 80030f6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80030f8:	e028      	b.n	800314c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80030fa:	687a      	ldr	r2, [r7, #4]
 80030fc:	68b9      	ldr	r1, [r7, #8]
 80030fe:	68f8      	ldr	r0, [r7, #12]
 8003100:	f000 f830 	bl	8003164 <I2C_IsAcknowledgeFailed>
 8003104:	4603      	mov	r3, r0
 8003106:	2b00      	cmp	r3, #0
 8003108:	d001      	beq.n	800310e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800310a:	2301      	movs	r3, #1
 800310c:	e026      	b.n	800315c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800310e:	f7fd ff91 	bl	8001034 <HAL_GetTick>
 8003112:	4602      	mov	r2, r0
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	1ad3      	subs	r3, r2, r3
 8003118:	68ba      	ldr	r2, [r7, #8]
 800311a:	429a      	cmp	r2, r3
 800311c:	d302      	bcc.n	8003124 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800311e:	68bb      	ldr	r3, [r7, #8]
 8003120:	2b00      	cmp	r3, #0
 8003122:	d113      	bne.n	800314c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003128:	f043 0220 	orr.w	r2, r3, #32
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	2220      	movs	r2, #32
 8003134:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	2200      	movs	r2, #0
 800313c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	2200      	movs	r2, #0
 8003144:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003148:	2301      	movs	r3, #1
 800314a:	e007      	b.n	800315c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	699b      	ldr	r3, [r3, #24]
 8003152:	f003 0320 	and.w	r3, r3, #32
 8003156:	2b20      	cmp	r3, #32
 8003158:	d1cf      	bne.n	80030fa <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800315a:	2300      	movs	r3, #0
}
 800315c:	4618      	mov	r0, r3
 800315e:	3710      	adds	r7, #16
 8003160:	46bd      	mov	sp, r7
 8003162:	bd80      	pop	{r7, pc}

08003164 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b084      	sub	sp, #16
 8003168:	af00      	add	r7, sp, #0
 800316a:	60f8      	str	r0, [r7, #12]
 800316c:	60b9      	str	r1, [r7, #8]
 800316e:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	699b      	ldr	r3, [r3, #24]
 8003176:	f003 0310 	and.w	r3, r3, #16
 800317a:	2b10      	cmp	r3, #16
 800317c:	d151      	bne.n	8003222 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800317e:	e022      	b.n	80031c6 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003180:	68bb      	ldr	r3, [r7, #8]
 8003182:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003186:	d01e      	beq.n	80031c6 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003188:	f7fd ff54 	bl	8001034 <HAL_GetTick>
 800318c:	4602      	mov	r2, r0
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	1ad3      	subs	r3, r2, r3
 8003192:	68ba      	ldr	r2, [r7, #8]
 8003194:	429a      	cmp	r2, r3
 8003196:	d302      	bcc.n	800319e <I2C_IsAcknowledgeFailed+0x3a>
 8003198:	68bb      	ldr	r3, [r7, #8]
 800319a:	2b00      	cmp	r3, #0
 800319c:	d113      	bne.n	80031c6 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031a2:	f043 0220 	orr.w	r2, r3, #32
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	2220      	movs	r2, #32
 80031ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	2200      	movs	r2, #0
 80031b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	2200      	movs	r2, #0
 80031be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80031c2:	2301      	movs	r3, #1
 80031c4:	e02e      	b.n	8003224 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	699b      	ldr	r3, [r3, #24]
 80031cc:	f003 0320 	and.w	r3, r3, #32
 80031d0:	2b20      	cmp	r3, #32
 80031d2:	d1d5      	bne.n	8003180 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	2210      	movs	r2, #16
 80031da:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	2220      	movs	r2, #32
 80031e2:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80031e4:	68f8      	ldr	r0, [r7, #12]
 80031e6:	f7ff fedd 	bl	8002fa4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	6859      	ldr	r1, [r3, #4]
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681a      	ldr	r2, [r3, #0]
 80031f4:	4b0d      	ldr	r3, [pc, #52]	; (800322c <I2C_IsAcknowledgeFailed+0xc8>)
 80031f6:	400b      	ands	r3, r1
 80031f8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031fe:	f043 0204 	orr.w	r2, r3, #4
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	2220      	movs	r2, #32
 800320a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	2200      	movs	r2, #0
 8003212:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	2200      	movs	r2, #0
 800321a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800321e:	2301      	movs	r3, #1
 8003220:	e000      	b.n	8003224 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8003222:	2300      	movs	r3, #0
}
 8003224:	4618      	mov	r0, r3
 8003226:	3710      	adds	r7, #16
 8003228:	46bd      	mov	sp, r7
 800322a:	bd80      	pop	{r7, pc}
 800322c:	fe00e800 	.word	0xfe00e800

08003230 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003230:	b480      	push	{r7}
 8003232:	b085      	sub	sp, #20
 8003234:	af00      	add	r7, sp, #0
 8003236:	60f8      	str	r0, [r7, #12]
 8003238:	607b      	str	r3, [r7, #4]
 800323a:	460b      	mov	r3, r1
 800323c:	817b      	strh	r3, [r7, #10]
 800323e:	4613      	mov	r3, r2
 8003240:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	685a      	ldr	r2, [r3, #4]
 8003248:	69bb      	ldr	r3, [r7, #24]
 800324a:	0d5b      	lsrs	r3, r3, #21
 800324c:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003250:	4b0d      	ldr	r3, [pc, #52]	; (8003288 <I2C_TransferConfig+0x58>)
 8003252:	430b      	orrs	r3, r1
 8003254:	43db      	mvns	r3, r3
 8003256:	ea02 0103 	and.w	r1, r2, r3
 800325a:	897b      	ldrh	r3, [r7, #10]
 800325c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003260:	7a7b      	ldrb	r3, [r7, #9]
 8003262:	041b      	lsls	r3, r3, #16
 8003264:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003268:	431a      	orrs	r2, r3
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	431a      	orrs	r2, r3
 800326e:	69bb      	ldr	r3, [r7, #24]
 8003270:	431a      	orrs	r2, r3
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	430a      	orrs	r2, r1
 8003278:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800327a:	bf00      	nop
 800327c:	3714      	adds	r7, #20
 800327e:	46bd      	mov	sp, r7
 8003280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003284:	4770      	bx	lr
 8003286:	bf00      	nop
 8003288:	03ff63ff 	.word	0x03ff63ff

0800328c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800328c:	b480      	push	{r7}
 800328e:	b083      	sub	sp, #12
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
 8003294:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800329c:	b2db      	uxtb	r3, r3
 800329e:	2b20      	cmp	r3, #32
 80032a0:	d138      	bne.n	8003314 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80032a8:	2b01      	cmp	r3, #1
 80032aa:	d101      	bne.n	80032b0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80032ac:	2302      	movs	r3, #2
 80032ae:	e032      	b.n	8003316 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2201      	movs	r2, #1
 80032b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2224      	movs	r2, #36	; 0x24
 80032bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	681a      	ldr	r2, [r3, #0]
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f022 0201 	bic.w	r2, r2, #1
 80032ce:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	681a      	ldr	r2, [r3, #0]
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80032de:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	6819      	ldr	r1, [r3, #0]
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	683a      	ldr	r2, [r7, #0]
 80032ec:	430a      	orrs	r2, r1
 80032ee:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	681a      	ldr	r2, [r3, #0]
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f042 0201 	orr.w	r2, r2, #1
 80032fe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2220      	movs	r2, #32
 8003304:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2200      	movs	r2, #0
 800330c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003310:	2300      	movs	r3, #0
 8003312:	e000      	b.n	8003316 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003314:	2302      	movs	r3, #2
  }
}
 8003316:	4618      	mov	r0, r3
 8003318:	370c      	adds	r7, #12
 800331a:	46bd      	mov	sp, r7
 800331c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003320:	4770      	bx	lr

08003322 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003322:	b480      	push	{r7}
 8003324:	b085      	sub	sp, #20
 8003326:	af00      	add	r7, sp, #0
 8003328:	6078      	str	r0, [r7, #4]
 800332a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003332:	b2db      	uxtb	r3, r3
 8003334:	2b20      	cmp	r3, #32
 8003336:	d139      	bne.n	80033ac <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800333e:	2b01      	cmp	r3, #1
 8003340:	d101      	bne.n	8003346 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003342:	2302      	movs	r3, #2
 8003344:	e033      	b.n	80033ae <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2201      	movs	r2, #1
 800334a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2224      	movs	r2, #36	; 0x24
 8003352:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	681a      	ldr	r2, [r3, #0]
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f022 0201 	bic.w	r2, r2, #1
 8003364:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003374:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	021b      	lsls	r3, r3, #8
 800337a:	68fa      	ldr	r2, [r7, #12]
 800337c:	4313      	orrs	r3, r2
 800337e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	68fa      	ldr	r2, [r7, #12]
 8003386:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	681a      	ldr	r2, [r3, #0]
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f042 0201 	orr.w	r2, r2, #1
 8003396:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2220      	movs	r2, #32
 800339c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2200      	movs	r2, #0
 80033a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80033a8:	2300      	movs	r3, #0
 80033aa:	e000      	b.n	80033ae <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80033ac:	2302      	movs	r3, #2
  }
}
 80033ae:	4618      	mov	r0, r3
 80033b0:	3714      	adds	r7, #20
 80033b2:	46bd      	mov	sp, r7
 80033b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b8:	4770      	bx	lr
	...

080033bc <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b084      	sub	sp, #16
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80033c4:	4b29      	ldr	r3, [pc, #164]	; (800346c <HAL_PWREx_ConfigSupply+0xb0>)
 80033c6:	68db      	ldr	r3, [r3, #12]
 80033c8:	f003 0307 	and.w	r3, r3, #7
 80033cc:	2b06      	cmp	r3, #6
 80033ce:	d00a      	beq.n	80033e6 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80033d0:	4b26      	ldr	r3, [pc, #152]	; (800346c <HAL_PWREx_ConfigSupply+0xb0>)
 80033d2:	68db      	ldr	r3, [r3, #12]
 80033d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80033d8:	687a      	ldr	r2, [r7, #4]
 80033da:	429a      	cmp	r2, r3
 80033dc:	d001      	beq.n	80033e2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80033de:	2301      	movs	r3, #1
 80033e0:	e040      	b.n	8003464 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80033e2:	2300      	movs	r3, #0
 80033e4:	e03e      	b.n	8003464 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80033e6:	4b21      	ldr	r3, [pc, #132]	; (800346c <HAL_PWREx_ConfigSupply+0xb0>)
 80033e8:	68db      	ldr	r3, [r3, #12]
 80033ea:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 80033ee:	491f      	ldr	r1, [pc, #124]	; (800346c <HAL_PWREx_ConfigSupply+0xb0>)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	4313      	orrs	r3, r2
 80033f4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80033f6:	f7fd fe1d 	bl	8001034 <HAL_GetTick>
 80033fa:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80033fc:	e009      	b.n	8003412 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80033fe:	f7fd fe19 	bl	8001034 <HAL_GetTick>
 8003402:	4602      	mov	r2, r0
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	1ad3      	subs	r3, r2, r3
 8003408:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800340c:	d901      	bls.n	8003412 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800340e:	2301      	movs	r3, #1
 8003410:	e028      	b.n	8003464 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003412:	4b16      	ldr	r3, [pc, #88]	; (800346c <HAL_PWREx_ConfigSupply+0xb0>)
 8003414:	685b      	ldr	r3, [r3, #4]
 8003416:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800341a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800341e:	d1ee      	bne.n	80033fe <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2b1e      	cmp	r3, #30
 8003424:	d008      	beq.n	8003438 <HAL_PWREx_ConfigSupply+0x7c>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2b2e      	cmp	r3, #46	; 0x2e
 800342a:	d005      	beq.n	8003438 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2b1d      	cmp	r3, #29
 8003430:	d002      	beq.n	8003438 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2b2d      	cmp	r3, #45	; 0x2d
 8003436:	d114      	bne.n	8003462 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8003438:	f7fd fdfc 	bl	8001034 <HAL_GetTick>
 800343c:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800343e:	e009      	b.n	8003454 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003440:	f7fd fdf8 	bl	8001034 <HAL_GetTick>
 8003444:	4602      	mov	r2, r0
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	1ad3      	subs	r3, r2, r3
 800344a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800344e:	d901      	bls.n	8003454 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8003450:	2301      	movs	r3, #1
 8003452:	e007      	b.n	8003464 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8003454:	4b05      	ldr	r3, [pc, #20]	; (800346c <HAL_PWREx_ConfigSupply+0xb0>)
 8003456:	68db      	ldr	r3, [r3, #12]
 8003458:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800345c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003460:	d1ee      	bne.n	8003440 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003462:	2300      	movs	r3, #0
}
 8003464:	4618      	mov	r0, r3
 8003466:	3710      	adds	r7, #16
 8003468:	46bd      	mov	sp, r7
 800346a:	bd80      	pop	{r7, pc}
 800346c:	58024800 	.word	0x58024800

08003470 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b08c      	sub	sp, #48	; 0x30
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2b00      	cmp	r3, #0
 800347c:	d101      	bne.n	8003482 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800347e:	2301      	movs	r3, #1
 8003480:	e3ff      	b.n	8003c82 <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f003 0301 	and.w	r3, r3, #1
 800348a:	2b00      	cmp	r3, #0
 800348c:	f000 8087 	beq.w	800359e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003490:	4b99      	ldr	r3, [pc, #612]	; (80036f8 <HAL_RCC_OscConfig+0x288>)
 8003492:	691b      	ldr	r3, [r3, #16]
 8003494:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003498:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800349a:	4b97      	ldr	r3, [pc, #604]	; (80036f8 <HAL_RCC_OscConfig+0x288>)
 800349c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800349e:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80034a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034a2:	2b10      	cmp	r3, #16
 80034a4:	d007      	beq.n	80034b6 <HAL_RCC_OscConfig+0x46>
 80034a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034a8:	2b18      	cmp	r3, #24
 80034aa:	d110      	bne.n	80034ce <HAL_RCC_OscConfig+0x5e>
 80034ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034ae:	f003 0303 	and.w	r3, r3, #3
 80034b2:	2b02      	cmp	r3, #2
 80034b4:	d10b      	bne.n	80034ce <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034b6:	4b90      	ldr	r3, [pc, #576]	; (80036f8 <HAL_RCC_OscConfig+0x288>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d06c      	beq.n	800359c <HAL_RCC_OscConfig+0x12c>
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	685b      	ldr	r3, [r3, #4]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d168      	bne.n	800359c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80034ca:	2301      	movs	r3, #1
 80034cc:	e3d9      	b.n	8003c82 <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	685b      	ldr	r3, [r3, #4]
 80034d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034d6:	d106      	bne.n	80034e6 <HAL_RCC_OscConfig+0x76>
 80034d8:	4b87      	ldr	r3, [pc, #540]	; (80036f8 <HAL_RCC_OscConfig+0x288>)
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4a86      	ldr	r2, [pc, #536]	; (80036f8 <HAL_RCC_OscConfig+0x288>)
 80034de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034e2:	6013      	str	r3, [r2, #0]
 80034e4:	e02e      	b.n	8003544 <HAL_RCC_OscConfig+0xd4>
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	685b      	ldr	r3, [r3, #4]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d10c      	bne.n	8003508 <HAL_RCC_OscConfig+0x98>
 80034ee:	4b82      	ldr	r3, [pc, #520]	; (80036f8 <HAL_RCC_OscConfig+0x288>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	4a81      	ldr	r2, [pc, #516]	; (80036f8 <HAL_RCC_OscConfig+0x288>)
 80034f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034f8:	6013      	str	r3, [r2, #0]
 80034fa:	4b7f      	ldr	r3, [pc, #508]	; (80036f8 <HAL_RCC_OscConfig+0x288>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	4a7e      	ldr	r2, [pc, #504]	; (80036f8 <HAL_RCC_OscConfig+0x288>)
 8003500:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003504:	6013      	str	r3, [r2, #0]
 8003506:	e01d      	b.n	8003544 <HAL_RCC_OscConfig+0xd4>
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	685b      	ldr	r3, [r3, #4]
 800350c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003510:	d10c      	bne.n	800352c <HAL_RCC_OscConfig+0xbc>
 8003512:	4b79      	ldr	r3, [pc, #484]	; (80036f8 <HAL_RCC_OscConfig+0x288>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	4a78      	ldr	r2, [pc, #480]	; (80036f8 <HAL_RCC_OscConfig+0x288>)
 8003518:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800351c:	6013      	str	r3, [r2, #0]
 800351e:	4b76      	ldr	r3, [pc, #472]	; (80036f8 <HAL_RCC_OscConfig+0x288>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	4a75      	ldr	r2, [pc, #468]	; (80036f8 <HAL_RCC_OscConfig+0x288>)
 8003524:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003528:	6013      	str	r3, [r2, #0]
 800352a:	e00b      	b.n	8003544 <HAL_RCC_OscConfig+0xd4>
 800352c:	4b72      	ldr	r3, [pc, #456]	; (80036f8 <HAL_RCC_OscConfig+0x288>)
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	4a71      	ldr	r2, [pc, #452]	; (80036f8 <HAL_RCC_OscConfig+0x288>)
 8003532:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003536:	6013      	str	r3, [r2, #0]
 8003538:	4b6f      	ldr	r3, [pc, #444]	; (80036f8 <HAL_RCC_OscConfig+0x288>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4a6e      	ldr	r2, [pc, #440]	; (80036f8 <HAL_RCC_OscConfig+0x288>)
 800353e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003542:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	685b      	ldr	r3, [r3, #4]
 8003548:	2b00      	cmp	r3, #0
 800354a:	d013      	beq.n	8003574 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800354c:	f7fd fd72 	bl	8001034 <HAL_GetTick>
 8003550:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003552:	e008      	b.n	8003566 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003554:	f7fd fd6e 	bl	8001034 <HAL_GetTick>
 8003558:	4602      	mov	r2, r0
 800355a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800355c:	1ad3      	subs	r3, r2, r3
 800355e:	2b64      	cmp	r3, #100	; 0x64
 8003560:	d901      	bls.n	8003566 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003562:	2303      	movs	r3, #3
 8003564:	e38d      	b.n	8003c82 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003566:	4b64      	ldr	r3, [pc, #400]	; (80036f8 <HAL_RCC_OscConfig+0x288>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800356e:	2b00      	cmp	r3, #0
 8003570:	d0f0      	beq.n	8003554 <HAL_RCC_OscConfig+0xe4>
 8003572:	e014      	b.n	800359e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003574:	f7fd fd5e 	bl	8001034 <HAL_GetTick>
 8003578:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800357a:	e008      	b.n	800358e <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800357c:	f7fd fd5a 	bl	8001034 <HAL_GetTick>
 8003580:	4602      	mov	r2, r0
 8003582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003584:	1ad3      	subs	r3, r2, r3
 8003586:	2b64      	cmp	r3, #100	; 0x64
 8003588:	d901      	bls.n	800358e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800358a:	2303      	movs	r3, #3
 800358c:	e379      	b.n	8003c82 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800358e:	4b5a      	ldr	r3, [pc, #360]	; (80036f8 <HAL_RCC_OscConfig+0x288>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003596:	2b00      	cmp	r3, #0
 8003598:	d1f0      	bne.n	800357c <HAL_RCC_OscConfig+0x10c>
 800359a:	e000      	b.n	800359e <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800359c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f003 0302 	and.w	r3, r3, #2
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	f000 80ae 	beq.w	8003708 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80035ac:	4b52      	ldr	r3, [pc, #328]	; (80036f8 <HAL_RCC_OscConfig+0x288>)
 80035ae:	691b      	ldr	r3, [r3, #16]
 80035b0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80035b4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80035b6:	4b50      	ldr	r3, [pc, #320]	; (80036f8 <HAL_RCC_OscConfig+0x288>)
 80035b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035ba:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80035bc:	6a3b      	ldr	r3, [r7, #32]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d007      	beq.n	80035d2 <HAL_RCC_OscConfig+0x162>
 80035c2:	6a3b      	ldr	r3, [r7, #32]
 80035c4:	2b18      	cmp	r3, #24
 80035c6:	d13a      	bne.n	800363e <HAL_RCC_OscConfig+0x1ce>
 80035c8:	69fb      	ldr	r3, [r7, #28]
 80035ca:	f003 0303 	and.w	r3, r3, #3
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d135      	bne.n	800363e <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80035d2:	4b49      	ldr	r3, [pc, #292]	; (80036f8 <HAL_RCC_OscConfig+0x288>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f003 0304 	and.w	r3, r3, #4
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d005      	beq.n	80035ea <HAL_RCC_OscConfig+0x17a>
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	68db      	ldr	r3, [r3, #12]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d101      	bne.n	80035ea <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80035e6:	2301      	movs	r3, #1
 80035e8:	e34b      	b.n	8003c82 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035ea:	f7fd fd53 	bl	8001094 <HAL_GetREVID>
 80035ee:	4603      	mov	r3, r0
 80035f0:	f241 0203 	movw	r2, #4099	; 0x1003
 80035f4:	4293      	cmp	r3, r2
 80035f6:	d817      	bhi.n	8003628 <HAL_RCC_OscConfig+0x1b8>
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	691b      	ldr	r3, [r3, #16]
 80035fc:	2b40      	cmp	r3, #64	; 0x40
 80035fe:	d108      	bne.n	8003612 <HAL_RCC_OscConfig+0x1a2>
 8003600:	4b3d      	ldr	r3, [pc, #244]	; (80036f8 <HAL_RCC_OscConfig+0x288>)
 8003602:	685b      	ldr	r3, [r3, #4]
 8003604:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003608:	4a3b      	ldr	r2, [pc, #236]	; (80036f8 <HAL_RCC_OscConfig+0x288>)
 800360a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800360e:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003610:	e07a      	b.n	8003708 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003612:	4b39      	ldr	r3, [pc, #228]	; (80036f8 <HAL_RCC_OscConfig+0x288>)
 8003614:	685b      	ldr	r3, [r3, #4]
 8003616:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	691b      	ldr	r3, [r3, #16]
 800361e:	031b      	lsls	r3, r3, #12
 8003620:	4935      	ldr	r1, [pc, #212]	; (80036f8 <HAL_RCC_OscConfig+0x288>)
 8003622:	4313      	orrs	r3, r2
 8003624:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003626:	e06f      	b.n	8003708 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003628:	4b33      	ldr	r3, [pc, #204]	; (80036f8 <HAL_RCC_OscConfig+0x288>)
 800362a:	685b      	ldr	r3, [r3, #4]
 800362c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	691b      	ldr	r3, [r3, #16]
 8003634:	061b      	lsls	r3, r3, #24
 8003636:	4930      	ldr	r1, [pc, #192]	; (80036f8 <HAL_RCC_OscConfig+0x288>)
 8003638:	4313      	orrs	r3, r2
 800363a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800363c:	e064      	b.n	8003708 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	68db      	ldr	r3, [r3, #12]
 8003642:	2b00      	cmp	r3, #0
 8003644:	d045      	beq.n	80036d2 <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003646:	4b2c      	ldr	r3, [pc, #176]	; (80036f8 <HAL_RCC_OscConfig+0x288>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f023 0219 	bic.w	r2, r3, #25
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	68db      	ldr	r3, [r3, #12]
 8003652:	4929      	ldr	r1, [pc, #164]	; (80036f8 <HAL_RCC_OscConfig+0x288>)
 8003654:	4313      	orrs	r3, r2
 8003656:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003658:	f7fd fcec 	bl	8001034 <HAL_GetTick>
 800365c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800365e:	e008      	b.n	8003672 <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003660:	f7fd fce8 	bl	8001034 <HAL_GetTick>
 8003664:	4602      	mov	r2, r0
 8003666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003668:	1ad3      	subs	r3, r2, r3
 800366a:	2b02      	cmp	r3, #2
 800366c:	d901      	bls.n	8003672 <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 800366e:	2303      	movs	r3, #3
 8003670:	e307      	b.n	8003c82 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003672:	4b21      	ldr	r3, [pc, #132]	; (80036f8 <HAL_RCC_OscConfig+0x288>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f003 0304 	and.w	r3, r3, #4
 800367a:	2b00      	cmp	r3, #0
 800367c:	d0f0      	beq.n	8003660 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800367e:	f7fd fd09 	bl	8001094 <HAL_GetREVID>
 8003682:	4603      	mov	r3, r0
 8003684:	f241 0203 	movw	r2, #4099	; 0x1003
 8003688:	4293      	cmp	r3, r2
 800368a:	d817      	bhi.n	80036bc <HAL_RCC_OscConfig+0x24c>
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	691b      	ldr	r3, [r3, #16]
 8003690:	2b40      	cmp	r3, #64	; 0x40
 8003692:	d108      	bne.n	80036a6 <HAL_RCC_OscConfig+0x236>
 8003694:	4b18      	ldr	r3, [pc, #96]	; (80036f8 <HAL_RCC_OscConfig+0x288>)
 8003696:	685b      	ldr	r3, [r3, #4]
 8003698:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800369c:	4a16      	ldr	r2, [pc, #88]	; (80036f8 <HAL_RCC_OscConfig+0x288>)
 800369e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036a2:	6053      	str	r3, [r2, #4]
 80036a4:	e030      	b.n	8003708 <HAL_RCC_OscConfig+0x298>
 80036a6:	4b14      	ldr	r3, [pc, #80]	; (80036f8 <HAL_RCC_OscConfig+0x288>)
 80036a8:	685b      	ldr	r3, [r3, #4]
 80036aa:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	691b      	ldr	r3, [r3, #16]
 80036b2:	031b      	lsls	r3, r3, #12
 80036b4:	4910      	ldr	r1, [pc, #64]	; (80036f8 <HAL_RCC_OscConfig+0x288>)
 80036b6:	4313      	orrs	r3, r2
 80036b8:	604b      	str	r3, [r1, #4]
 80036ba:	e025      	b.n	8003708 <HAL_RCC_OscConfig+0x298>
 80036bc:	4b0e      	ldr	r3, [pc, #56]	; (80036f8 <HAL_RCC_OscConfig+0x288>)
 80036be:	685b      	ldr	r3, [r3, #4]
 80036c0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	691b      	ldr	r3, [r3, #16]
 80036c8:	061b      	lsls	r3, r3, #24
 80036ca:	490b      	ldr	r1, [pc, #44]	; (80036f8 <HAL_RCC_OscConfig+0x288>)
 80036cc:	4313      	orrs	r3, r2
 80036ce:	604b      	str	r3, [r1, #4]
 80036d0:	e01a      	b.n	8003708 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80036d2:	4b09      	ldr	r3, [pc, #36]	; (80036f8 <HAL_RCC_OscConfig+0x288>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	4a08      	ldr	r2, [pc, #32]	; (80036f8 <HAL_RCC_OscConfig+0x288>)
 80036d8:	f023 0301 	bic.w	r3, r3, #1
 80036dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036de:	f7fd fca9 	bl	8001034 <HAL_GetTick>
 80036e2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80036e4:	e00a      	b.n	80036fc <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80036e6:	f7fd fca5 	bl	8001034 <HAL_GetTick>
 80036ea:	4602      	mov	r2, r0
 80036ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ee:	1ad3      	subs	r3, r2, r3
 80036f0:	2b02      	cmp	r3, #2
 80036f2:	d903      	bls.n	80036fc <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 80036f4:	2303      	movs	r3, #3
 80036f6:	e2c4      	b.n	8003c82 <HAL_RCC_OscConfig+0x812>
 80036f8:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80036fc:	4ba4      	ldr	r3, [pc, #656]	; (8003990 <HAL_RCC_OscConfig+0x520>)
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f003 0304 	and.w	r3, r3, #4
 8003704:	2b00      	cmp	r3, #0
 8003706:	d1ee      	bne.n	80036e6 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f003 0310 	and.w	r3, r3, #16
 8003710:	2b00      	cmp	r3, #0
 8003712:	f000 80a9 	beq.w	8003868 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003716:	4b9e      	ldr	r3, [pc, #632]	; (8003990 <HAL_RCC_OscConfig+0x520>)
 8003718:	691b      	ldr	r3, [r3, #16]
 800371a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800371e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003720:	4b9b      	ldr	r3, [pc, #620]	; (8003990 <HAL_RCC_OscConfig+0x520>)
 8003722:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003724:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003726:	69bb      	ldr	r3, [r7, #24]
 8003728:	2b08      	cmp	r3, #8
 800372a:	d007      	beq.n	800373c <HAL_RCC_OscConfig+0x2cc>
 800372c:	69bb      	ldr	r3, [r7, #24]
 800372e:	2b18      	cmp	r3, #24
 8003730:	d13a      	bne.n	80037a8 <HAL_RCC_OscConfig+0x338>
 8003732:	697b      	ldr	r3, [r7, #20]
 8003734:	f003 0303 	and.w	r3, r3, #3
 8003738:	2b01      	cmp	r3, #1
 800373a:	d135      	bne.n	80037a8 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800373c:	4b94      	ldr	r3, [pc, #592]	; (8003990 <HAL_RCC_OscConfig+0x520>)
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003744:	2b00      	cmp	r3, #0
 8003746:	d005      	beq.n	8003754 <HAL_RCC_OscConfig+0x2e4>
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	69db      	ldr	r3, [r3, #28]
 800374c:	2b80      	cmp	r3, #128	; 0x80
 800374e:	d001      	beq.n	8003754 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8003750:	2301      	movs	r3, #1
 8003752:	e296      	b.n	8003c82 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003754:	f7fd fc9e 	bl	8001094 <HAL_GetREVID>
 8003758:	4603      	mov	r3, r0
 800375a:	f241 0203 	movw	r2, #4099	; 0x1003
 800375e:	4293      	cmp	r3, r2
 8003760:	d817      	bhi.n	8003792 <HAL_RCC_OscConfig+0x322>
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6a1b      	ldr	r3, [r3, #32]
 8003766:	2b20      	cmp	r3, #32
 8003768:	d108      	bne.n	800377c <HAL_RCC_OscConfig+0x30c>
 800376a:	4b89      	ldr	r3, [pc, #548]	; (8003990 <HAL_RCC_OscConfig+0x520>)
 800376c:	685b      	ldr	r3, [r3, #4]
 800376e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003772:	4a87      	ldr	r2, [pc, #540]	; (8003990 <HAL_RCC_OscConfig+0x520>)
 8003774:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003778:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800377a:	e075      	b.n	8003868 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800377c:	4b84      	ldr	r3, [pc, #528]	; (8003990 <HAL_RCC_OscConfig+0x520>)
 800377e:	685b      	ldr	r3, [r3, #4]
 8003780:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6a1b      	ldr	r3, [r3, #32]
 8003788:	069b      	lsls	r3, r3, #26
 800378a:	4981      	ldr	r1, [pc, #516]	; (8003990 <HAL_RCC_OscConfig+0x520>)
 800378c:	4313      	orrs	r3, r2
 800378e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003790:	e06a      	b.n	8003868 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003792:	4b7f      	ldr	r3, [pc, #508]	; (8003990 <HAL_RCC_OscConfig+0x520>)
 8003794:	68db      	ldr	r3, [r3, #12]
 8003796:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6a1b      	ldr	r3, [r3, #32]
 800379e:	061b      	lsls	r3, r3, #24
 80037a0:	497b      	ldr	r1, [pc, #492]	; (8003990 <HAL_RCC_OscConfig+0x520>)
 80037a2:	4313      	orrs	r3, r2
 80037a4:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80037a6:	e05f      	b.n	8003868 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	69db      	ldr	r3, [r3, #28]
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d042      	beq.n	8003836 <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80037b0:	4b77      	ldr	r3, [pc, #476]	; (8003990 <HAL_RCC_OscConfig+0x520>)
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4a76      	ldr	r2, [pc, #472]	; (8003990 <HAL_RCC_OscConfig+0x520>)
 80037b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80037ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037bc:	f7fd fc3a 	bl	8001034 <HAL_GetTick>
 80037c0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80037c2:	e008      	b.n	80037d6 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80037c4:	f7fd fc36 	bl	8001034 <HAL_GetTick>
 80037c8:	4602      	mov	r2, r0
 80037ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037cc:	1ad3      	subs	r3, r2, r3
 80037ce:	2b02      	cmp	r3, #2
 80037d0:	d901      	bls.n	80037d6 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 80037d2:	2303      	movs	r3, #3
 80037d4:	e255      	b.n	8003c82 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80037d6:	4b6e      	ldr	r3, [pc, #440]	; (8003990 <HAL_RCC_OscConfig+0x520>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d0f0      	beq.n	80037c4 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80037e2:	f7fd fc57 	bl	8001094 <HAL_GetREVID>
 80037e6:	4603      	mov	r3, r0
 80037e8:	f241 0203 	movw	r2, #4099	; 0x1003
 80037ec:	4293      	cmp	r3, r2
 80037ee:	d817      	bhi.n	8003820 <HAL_RCC_OscConfig+0x3b0>
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6a1b      	ldr	r3, [r3, #32]
 80037f4:	2b20      	cmp	r3, #32
 80037f6:	d108      	bne.n	800380a <HAL_RCC_OscConfig+0x39a>
 80037f8:	4b65      	ldr	r3, [pc, #404]	; (8003990 <HAL_RCC_OscConfig+0x520>)
 80037fa:	685b      	ldr	r3, [r3, #4]
 80037fc:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003800:	4a63      	ldr	r2, [pc, #396]	; (8003990 <HAL_RCC_OscConfig+0x520>)
 8003802:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003806:	6053      	str	r3, [r2, #4]
 8003808:	e02e      	b.n	8003868 <HAL_RCC_OscConfig+0x3f8>
 800380a:	4b61      	ldr	r3, [pc, #388]	; (8003990 <HAL_RCC_OscConfig+0x520>)
 800380c:	685b      	ldr	r3, [r3, #4]
 800380e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6a1b      	ldr	r3, [r3, #32]
 8003816:	069b      	lsls	r3, r3, #26
 8003818:	495d      	ldr	r1, [pc, #372]	; (8003990 <HAL_RCC_OscConfig+0x520>)
 800381a:	4313      	orrs	r3, r2
 800381c:	604b      	str	r3, [r1, #4]
 800381e:	e023      	b.n	8003868 <HAL_RCC_OscConfig+0x3f8>
 8003820:	4b5b      	ldr	r3, [pc, #364]	; (8003990 <HAL_RCC_OscConfig+0x520>)
 8003822:	68db      	ldr	r3, [r3, #12]
 8003824:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6a1b      	ldr	r3, [r3, #32]
 800382c:	061b      	lsls	r3, r3, #24
 800382e:	4958      	ldr	r1, [pc, #352]	; (8003990 <HAL_RCC_OscConfig+0x520>)
 8003830:	4313      	orrs	r3, r2
 8003832:	60cb      	str	r3, [r1, #12]
 8003834:	e018      	b.n	8003868 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003836:	4b56      	ldr	r3, [pc, #344]	; (8003990 <HAL_RCC_OscConfig+0x520>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	4a55      	ldr	r2, [pc, #340]	; (8003990 <HAL_RCC_OscConfig+0x520>)
 800383c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003840:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003842:	f7fd fbf7 	bl	8001034 <HAL_GetTick>
 8003846:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003848:	e008      	b.n	800385c <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800384a:	f7fd fbf3 	bl	8001034 <HAL_GetTick>
 800384e:	4602      	mov	r2, r0
 8003850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003852:	1ad3      	subs	r3, r2, r3
 8003854:	2b02      	cmp	r3, #2
 8003856:	d901      	bls.n	800385c <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8003858:	2303      	movs	r3, #3
 800385a:	e212      	b.n	8003c82 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800385c:	4b4c      	ldr	r3, [pc, #304]	; (8003990 <HAL_RCC_OscConfig+0x520>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003864:	2b00      	cmp	r3, #0
 8003866:	d1f0      	bne.n	800384a <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f003 0308 	and.w	r3, r3, #8
 8003870:	2b00      	cmp	r3, #0
 8003872:	d036      	beq.n	80038e2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	695b      	ldr	r3, [r3, #20]
 8003878:	2b00      	cmp	r3, #0
 800387a:	d019      	beq.n	80038b0 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800387c:	4b44      	ldr	r3, [pc, #272]	; (8003990 <HAL_RCC_OscConfig+0x520>)
 800387e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003880:	4a43      	ldr	r2, [pc, #268]	; (8003990 <HAL_RCC_OscConfig+0x520>)
 8003882:	f043 0301 	orr.w	r3, r3, #1
 8003886:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003888:	f7fd fbd4 	bl	8001034 <HAL_GetTick>
 800388c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800388e:	e008      	b.n	80038a2 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003890:	f7fd fbd0 	bl	8001034 <HAL_GetTick>
 8003894:	4602      	mov	r2, r0
 8003896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003898:	1ad3      	subs	r3, r2, r3
 800389a:	2b02      	cmp	r3, #2
 800389c:	d901      	bls.n	80038a2 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 800389e:	2303      	movs	r3, #3
 80038a0:	e1ef      	b.n	8003c82 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80038a2:	4b3b      	ldr	r3, [pc, #236]	; (8003990 <HAL_RCC_OscConfig+0x520>)
 80038a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038a6:	f003 0302 	and.w	r3, r3, #2
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d0f0      	beq.n	8003890 <HAL_RCC_OscConfig+0x420>
 80038ae:	e018      	b.n	80038e2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80038b0:	4b37      	ldr	r3, [pc, #220]	; (8003990 <HAL_RCC_OscConfig+0x520>)
 80038b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038b4:	4a36      	ldr	r2, [pc, #216]	; (8003990 <HAL_RCC_OscConfig+0x520>)
 80038b6:	f023 0301 	bic.w	r3, r3, #1
 80038ba:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038bc:	f7fd fbba 	bl	8001034 <HAL_GetTick>
 80038c0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80038c2:	e008      	b.n	80038d6 <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80038c4:	f7fd fbb6 	bl	8001034 <HAL_GetTick>
 80038c8:	4602      	mov	r2, r0
 80038ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038cc:	1ad3      	subs	r3, r2, r3
 80038ce:	2b02      	cmp	r3, #2
 80038d0:	d901      	bls.n	80038d6 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 80038d2:	2303      	movs	r3, #3
 80038d4:	e1d5      	b.n	8003c82 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80038d6:	4b2e      	ldr	r3, [pc, #184]	; (8003990 <HAL_RCC_OscConfig+0x520>)
 80038d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038da:	f003 0302 	and.w	r3, r3, #2
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d1f0      	bne.n	80038c4 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f003 0320 	and.w	r3, r3, #32
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d036      	beq.n	800395c <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	699b      	ldr	r3, [r3, #24]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d019      	beq.n	800392a <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80038f6:	4b26      	ldr	r3, [pc, #152]	; (8003990 <HAL_RCC_OscConfig+0x520>)
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	4a25      	ldr	r2, [pc, #148]	; (8003990 <HAL_RCC_OscConfig+0x520>)
 80038fc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003900:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003902:	f7fd fb97 	bl	8001034 <HAL_GetTick>
 8003906:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003908:	e008      	b.n	800391c <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800390a:	f7fd fb93 	bl	8001034 <HAL_GetTick>
 800390e:	4602      	mov	r2, r0
 8003910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003912:	1ad3      	subs	r3, r2, r3
 8003914:	2b02      	cmp	r3, #2
 8003916:	d901      	bls.n	800391c <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8003918:	2303      	movs	r3, #3
 800391a:	e1b2      	b.n	8003c82 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800391c:	4b1c      	ldr	r3, [pc, #112]	; (8003990 <HAL_RCC_OscConfig+0x520>)
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003924:	2b00      	cmp	r3, #0
 8003926:	d0f0      	beq.n	800390a <HAL_RCC_OscConfig+0x49a>
 8003928:	e018      	b.n	800395c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800392a:	4b19      	ldr	r3, [pc, #100]	; (8003990 <HAL_RCC_OscConfig+0x520>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	4a18      	ldr	r2, [pc, #96]	; (8003990 <HAL_RCC_OscConfig+0x520>)
 8003930:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003934:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003936:	f7fd fb7d 	bl	8001034 <HAL_GetTick>
 800393a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800393c:	e008      	b.n	8003950 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800393e:	f7fd fb79 	bl	8001034 <HAL_GetTick>
 8003942:	4602      	mov	r2, r0
 8003944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003946:	1ad3      	subs	r3, r2, r3
 8003948:	2b02      	cmp	r3, #2
 800394a:	d901      	bls.n	8003950 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 800394c:	2303      	movs	r3, #3
 800394e:	e198      	b.n	8003c82 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003950:	4b0f      	ldr	r3, [pc, #60]	; (8003990 <HAL_RCC_OscConfig+0x520>)
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003958:	2b00      	cmp	r3, #0
 800395a:	d1f0      	bne.n	800393e <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f003 0304 	and.w	r3, r3, #4
 8003964:	2b00      	cmp	r3, #0
 8003966:	f000 8085 	beq.w	8003a74 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800396a:	4b0a      	ldr	r3, [pc, #40]	; (8003994 <HAL_RCC_OscConfig+0x524>)
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	4a09      	ldr	r2, [pc, #36]	; (8003994 <HAL_RCC_OscConfig+0x524>)
 8003970:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003974:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003976:	f7fd fb5d 	bl	8001034 <HAL_GetTick>
 800397a:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800397c:	e00c      	b.n	8003998 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800397e:	f7fd fb59 	bl	8001034 <HAL_GetTick>
 8003982:	4602      	mov	r2, r0
 8003984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003986:	1ad3      	subs	r3, r2, r3
 8003988:	2b64      	cmp	r3, #100	; 0x64
 800398a:	d905      	bls.n	8003998 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 800398c:	2303      	movs	r3, #3
 800398e:	e178      	b.n	8003c82 <HAL_RCC_OscConfig+0x812>
 8003990:	58024400 	.word	0x58024400
 8003994:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003998:	4b96      	ldr	r3, [pc, #600]	; (8003bf4 <HAL_RCC_OscConfig+0x784>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d0ec      	beq.n	800397e <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	689b      	ldr	r3, [r3, #8]
 80039a8:	2b01      	cmp	r3, #1
 80039aa:	d106      	bne.n	80039ba <HAL_RCC_OscConfig+0x54a>
 80039ac:	4b92      	ldr	r3, [pc, #584]	; (8003bf8 <HAL_RCC_OscConfig+0x788>)
 80039ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039b0:	4a91      	ldr	r2, [pc, #580]	; (8003bf8 <HAL_RCC_OscConfig+0x788>)
 80039b2:	f043 0301 	orr.w	r3, r3, #1
 80039b6:	6713      	str	r3, [r2, #112]	; 0x70
 80039b8:	e02d      	b.n	8003a16 <HAL_RCC_OscConfig+0x5a6>
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	689b      	ldr	r3, [r3, #8]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d10c      	bne.n	80039dc <HAL_RCC_OscConfig+0x56c>
 80039c2:	4b8d      	ldr	r3, [pc, #564]	; (8003bf8 <HAL_RCC_OscConfig+0x788>)
 80039c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039c6:	4a8c      	ldr	r2, [pc, #560]	; (8003bf8 <HAL_RCC_OscConfig+0x788>)
 80039c8:	f023 0301 	bic.w	r3, r3, #1
 80039cc:	6713      	str	r3, [r2, #112]	; 0x70
 80039ce:	4b8a      	ldr	r3, [pc, #552]	; (8003bf8 <HAL_RCC_OscConfig+0x788>)
 80039d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039d2:	4a89      	ldr	r2, [pc, #548]	; (8003bf8 <HAL_RCC_OscConfig+0x788>)
 80039d4:	f023 0304 	bic.w	r3, r3, #4
 80039d8:	6713      	str	r3, [r2, #112]	; 0x70
 80039da:	e01c      	b.n	8003a16 <HAL_RCC_OscConfig+0x5a6>
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	689b      	ldr	r3, [r3, #8]
 80039e0:	2b05      	cmp	r3, #5
 80039e2:	d10c      	bne.n	80039fe <HAL_RCC_OscConfig+0x58e>
 80039e4:	4b84      	ldr	r3, [pc, #528]	; (8003bf8 <HAL_RCC_OscConfig+0x788>)
 80039e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039e8:	4a83      	ldr	r2, [pc, #524]	; (8003bf8 <HAL_RCC_OscConfig+0x788>)
 80039ea:	f043 0304 	orr.w	r3, r3, #4
 80039ee:	6713      	str	r3, [r2, #112]	; 0x70
 80039f0:	4b81      	ldr	r3, [pc, #516]	; (8003bf8 <HAL_RCC_OscConfig+0x788>)
 80039f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039f4:	4a80      	ldr	r2, [pc, #512]	; (8003bf8 <HAL_RCC_OscConfig+0x788>)
 80039f6:	f043 0301 	orr.w	r3, r3, #1
 80039fa:	6713      	str	r3, [r2, #112]	; 0x70
 80039fc:	e00b      	b.n	8003a16 <HAL_RCC_OscConfig+0x5a6>
 80039fe:	4b7e      	ldr	r3, [pc, #504]	; (8003bf8 <HAL_RCC_OscConfig+0x788>)
 8003a00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a02:	4a7d      	ldr	r2, [pc, #500]	; (8003bf8 <HAL_RCC_OscConfig+0x788>)
 8003a04:	f023 0301 	bic.w	r3, r3, #1
 8003a08:	6713      	str	r3, [r2, #112]	; 0x70
 8003a0a:	4b7b      	ldr	r3, [pc, #492]	; (8003bf8 <HAL_RCC_OscConfig+0x788>)
 8003a0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a0e:	4a7a      	ldr	r2, [pc, #488]	; (8003bf8 <HAL_RCC_OscConfig+0x788>)
 8003a10:	f023 0304 	bic.w	r3, r3, #4
 8003a14:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	689b      	ldr	r3, [r3, #8]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d015      	beq.n	8003a4a <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a1e:	f7fd fb09 	bl	8001034 <HAL_GetTick>
 8003a22:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003a24:	e00a      	b.n	8003a3c <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a26:	f7fd fb05 	bl	8001034 <HAL_GetTick>
 8003a2a:	4602      	mov	r2, r0
 8003a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a2e:	1ad3      	subs	r3, r2, r3
 8003a30:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a34:	4293      	cmp	r3, r2
 8003a36:	d901      	bls.n	8003a3c <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8003a38:	2303      	movs	r3, #3
 8003a3a:	e122      	b.n	8003c82 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003a3c:	4b6e      	ldr	r3, [pc, #440]	; (8003bf8 <HAL_RCC_OscConfig+0x788>)
 8003a3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a40:	f003 0302 	and.w	r3, r3, #2
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d0ee      	beq.n	8003a26 <HAL_RCC_OscConfig+0x5b6>
 8003a48:	e014      	b.n	8003a74 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a4a:	f7fd faf3 	bl	8001034 <HAL_GetTick>
 8003a4e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003a50:	e00a      	b.n	8003a68 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a52:	f7fd faef 	bl	8001034 <HAL_GetTick>
 8003a56:	4602      	mov	r2, r0
 8003a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a5a:	1ad3      	subs	r3, r2, r3
 8003a5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d901      	bls.n	8003a68 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8003a64:	2303      	movs	r3, #3
 8003a66:	e10c      	b.n	8003c82 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003a68:	4b63      	ldr	r3, [pc, #396]	; (8003bf8 <HAL_RCC_OscConfig+0x788>)
 8003a6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a6c:	f003 0302 	and.w	r3, r3, #2
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d1ee      	bne.n	8003a52 <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	f000 8101 	beq.w	8003c80 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003a7e:	4b5e      	ldr	r3, [pc, #376]	; (8003bf8 <HAL_RCC_OscConfig+0x788>)
 8003a80:	691b      	ldr	r3, [r3, #16]
 8003a82:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003a86:	2b18      	cmp	r3, #24
 8003a88:	f000 80bc 	beq.w	8003c04 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a90:	2b02      	cmp	r3, #2
 8003a92:	f040 8095 	bne.w	8003bc0 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a96:	4b58      	ldr	r3, [pc, #352]	; (8003bf8 <HAL_RCC_OscConfig+0x788>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	4a57      	ldr	r2, [pc, #348]	; (8003bf8 <HAL_RCC_OscConfig+0x788>)
 8003a9c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003aa0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003aa2:	f7fd fac7 	bl	8001034 <HAL_GetTick>
 8003aa6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003aa8:	e008      	b.n	8003abc <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003aaa:	f7fd fac3 	bl	8001034 <HAL_GetTick>
 8003aae:	4602      	mov	r2, r0
 8003ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ab2:	1ad3      	subs	r3, r2, r3
 8003ab4:	2b02      	cmp	r3, #2
 8003ab6:	d901      	bls.n	8003abc <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8003ab8:	2303      	movs	r3, #3
 8003aba:	e0e2      	b.n	8003c82 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003abc:	4b4e      	ldr	r3, [pc, #312]	; (8003bf8 <HAL_RCC_OscConfig+0x788>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d1f0      	bne.n	8003aaa <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003ac8:	4b4b      	ldr	r3, [pc, #300]	; (8003bf8 <HAL_RCC_OscConfig+0x788>)
 8003aca:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003acc:	4b4b      	ldr	r3, [pc, #300]	; (8003bfc <HAL_RCC_OscConfig+0x78c>)
 8003ace:	4013      	ands	r3, r2
 8003ad0:	687a      	ldr	r2, [r7, #4]
 8003ad2:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8003ad4:	687a      	ldr	r2, [r7, #4]
 8003ad6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003ad8:	0112      	lsls	r2, r2, #4
 8003ada:	430a      	orrs	r2, r1
 8003adc:	4946      	ldr	r1, [pc, #280]	; (8003bf8 <HAL_RCC_OscConfig+0x788>)
 8003ade:	4313      	orrs	r3, r2
 8003ae0:	628b      	str	r3, [r1, #40]	; 0x28
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ae6:	3b01      	subs	r3, #1
 8003ae8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003af0:	3b01      	subs	r3, #1
 8003af2:	025b      	lsls	r3, r3, #9
 8003af4:	b29b      	uxth	r3, r3
 8003af6:	431a      	orrs	r2, r3
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003afc:	3b01      	subs	r3, #1
 8003afe:	041b      	lsls	r3, r3, #16
 8003b00:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003b04:	431a      	orrs	r2, r3
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b0a:	3b01      	subs	r3, #1
 8003b0c:	061b      	lsls	r3, r3, #24
 8003b0e:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003b12:	4939      	ldr	r1, [pc, #228]	; (8003bf8 <HAL_RCC_OscConfig+0x788>)
 8003b14:	4313      	orrs	r3, r2
 8003b16:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8003b18:	4b37      	ldr	r3, [pc, #220]	; (8003bf8 <HAL_RCC_OscConfig+0x788>)
 8003b1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b1c:	4a36      	ldr	r2, [pc, #216]	; (8003bf8 <HAL_RCC_OscConfig+0x788>)
 8003b1e:	f023 0301 	bic.w	r3, r3, #1
 8003b22:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003b24:	4b34      	ldr	r3, [pc, #208]	; (8003bf8 <HAL_RCC_OscConfig+0x788>)
 8003b26:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003b28:	4b35      	ldr	r3, [pc, #212]	; (8003c00 <HAL_RCC_OscConfig+0x790>)
 8003b2a:	4013      	ands	r3, r2
 8003b2c:	687a      	ldr	r2, [r7, #4]
 8003b2e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003b30:	00d2      	lsls	r2, r2, #3
 8003b32:	4931      	ldr	r1, [pc, #196]	; (8003bf8 <HAL_RCC_OscConfig+0x788>)
 8003b34:	4313      	orrs	r3, r2
 8003b36:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003b38:	4b2f      	ldr	r3, [pc, #188]	; (8003bf8 <HAL_RCC_OscConfig+0x788>)
 8003b3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b3c:	f023 020c 	bic.w	r2, r3, #12
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b44:	492c      	ldr	r1, [pc, #176]	; (8003bf8 <HAL_RCC_OscConfig+0x788>)
 8003b46:	4313      	orrs	r3, r2
 8003b48:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003b4a:	4b2b      	ldr	r3, [pc, #172]	; (8003bf8 <HAL_RCC_OscConfig+0x788>)
 8003b4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b4e:	f023 0202 	bic.w	r2, r3, #2
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b56:	4928      	ldr	r1, [pc, #160]	; (8003bf8 <HAL_RCC_OscConfig+0x788>)
 8003b58:	4313      	orrs	r3, r2
 8003b5a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003b5c:	4b26      	ldr	r3, [pc, #152]	; (8003bf8 <HAL_RCC_OscConfig+0x788>)
 8003b5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b60:	4a25      	ldr	r2, [pc, #148]	; (8003bf8 <HAL_RCC_OscConfig+0x788>)
 8003b62:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b66:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b68:	4b23      	ldr	r3, [pc, #140]	; (8003bf8 <HAL_RCC_OscConfig+0x788>)
 8003b6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b6c:	4a22      	ldr	r2, [pc, #136]	; (8003bf8 <HAL_RCC_OscConfig+0x788>)
 8003b6e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b72:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003b74:	4b20      	ldr	r3, [pc, #128]	; (8003bf8 <HAL_RCC_OscConfig+0x788>)
 8003b76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b78:	4a1f      	ldr	r2, [pc, #124]	; (8003bf8 <HAL_RCC_OscConfig+0x788>)
 8003b7a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003b7e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8003b80:	4b1d      	ldr	r3, [pc, #116]	; (8003bf8 <HAL_RCC_OscConfig+0x788>)
 8003b82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b84:	4a1c      	ldr	r2, [pc, #112]	; (8003bf8 <HAL_RCC_OscConfig+0x788>)
 8003b86:	f043 0301 	orr.w	r3, r3, #1
 8003b8a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b8c:	4b1a      	ldr	r3, [pc, #104]	; (8003bf8 <HAL_RCC_OscConfig+0x788>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4a19      	ldr	r2, [pc, #100]	; (8003bf8 <HAL_RCC_OscConfig+0x788>)
 8003b92:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003b96:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b98:	f7fd fa4c 	bl	8001034 <HAL_GetTick>
 8003b9c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003b9e:	e008      	b.n	8003bb2 <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ba0:	f7fd fa48 	bl	8001034 <HAL_GetTick>
 8003ba4:	4602      	mov	r2, r0
 8003ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ba8:	1ad3      	subs	r3, r2, r3
 8003baa:	2b02      	cmp	r3, #2
 8003bac:	d901      	bls.n	8003bb2 <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 8003bae:	2303      	movs	r3, #3
 8003bb0:	e067      	b.n	8003c82 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003bb2:	4b11      	ldr	r3, [pc, #68]	; (8003bf8 <HAL_RCC_OscConfig+0x788>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d0f0      	beq.n	8003ba0 <HAL_RCC_OscConfig+0x730>
 8003bbe:	e05f      	b.n	8003c80 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bc0:	4b0d      	ldr	r3, [pc, #52]	; (8003bf8 <HAL_RCC_OscConfig+0x788>)
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4a0c      	ldr	r2, [pc, #48]	; (8003bf8 <HAL_RCC_OscConfig+0x788>)
 8003bc6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003bca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bcc:	f7fd fa32 	bl	8001034 <HAL_GetTick>
 8003bd0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003bd2:	e008      	b.n	8003be6 <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003bd4:	f7fd fa2e 	bl	8001034 <HAL_GetTick>
 8003bd8:	4602      	mov	r2, r0
 8003bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bdc:	1ad3      	subs	r3, r2, r3
 8003bde:	2b02      	cmp	r3, #2
 8003be0:	d901      	bls.n	8003be6 <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 8003be2:	2303      	movs	r3, #3
 8003be4:	e04d      	b.n	8003c82 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003be6:	4b04      	ldr	r3, [pc, #16]	; (8003bf8 <HAL_RCC_OscConfig+0x788>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d1f0      	bne.n	8003bd4 <HAL_RCC_OscConfig+0x764>
 8003bf2:	e045      	b.n	8003c80 <HAL_RCC_OscConfig+0x810>
 8003bf4:	58024800 	.word	0x58024800
 8003bf8:	58024400 	.word	0x58024400
 8003bfc:	fffffc0c 	.word	0xfffffc0c
 8003c00:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003c04:	4b21      	ldr	r3, [pc, #132]	; (8003c8c <HAL_RCC_OscConfig+0x81c>)
 8003c06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c08:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003c0a:	4b20      	ldr	r3, [pc, #128]	; (8003c8c <HAL_RCC_OscConfig+0x81c>)
 8003c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c0e:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c14:	2b01      	cmp	r3, #1
 8003c16:	d031      	beq.n	8003c7c <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c18:	693b      	ldr	r3, [r7, #16]
 8003c1a:	f003 0203 	and.w	r2, r3, #3
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c22:	429a      	cmp	r2, r3
 8003c24:	d12a      	bne.n	8003c7c <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003c26:	693b      	ldr	r3, [r7, #16]
 8003c28:	091b      	lsrs	r3, r3, #4
 8003c2a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c32:	429a      	cmp	r2, r3
 8003c34:	d122      	bne.n	8003c7c <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c40:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003c42:	429a      	cmp	r2, r3
 8003c44:	d11a      	bne.n	8003c7c <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	0a5b      	lsrs	r3, r3, #9
 8003c4a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c52:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003c54:	429a      	cmp	r2, r3
 8003c56:	d111      	bne.n	8003c7c <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	0c1b      	lsrs	r3, r3, #16
 8003c5c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c64:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003c66:	429a      	cmp	r2, r3
 8003c68:	d108      	bne.n	8003c7c <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	0e1b      	lsrs	r3, r3, #24
 8003c6e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c76:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003c78:	429a      	cmp	r2, r3
 8003c7a:	d001      	beq.n	8003c80 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8003c7c:	2301      	movs	r3, #1
 8003c7e:	e000      	b.n	8003c82 <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8003c80:	2300      	movs	r3, #0
}
 8003c82:	4618      	mov	r0, r3
 8003c84:	3730      	adds	r7, #48	; 0x30
 8003c86:	46bd      	mov	sp, r7
 8003c88:	bd80      	pop	{r7, pc}
 8003c8a:	bf00      	nop
 8003c8c:	58024400 	.word	0x58024400

08003c90 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b086      	sub	sp, #24
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
 8003c98:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d101      	bne.n	8003ca4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ca0:	2301      	movs	r3, #1
 8003ca2:	e19c      	b.n	8003fde <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003ca4:	4b8a      	ldr	r3, [pc, #552]	; (8003ed0 <HAL_RCC_ClockConfig+0x240>)
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f003 030f 	and.w	r3, r3, #15
 8003cac:	683a      	ldr	r2, [r7, #0]
 8003cae:	429a      	cmp	r2, r3
 8003cb0:	d910      	bls.n	8003cd4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cb2:	4b87      	ldr	r3, [pc, #540]	; (8003ed0 <HAL_RCC_ClockConfig+0x240>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f023 020f 	bic.w	r2, r3, #15
 8003cba:	4985      	ldr	r1, [pc, #532]	; (8003ed0 <HAL_RCC_ClockConfig+0x240>)
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	4313      	orrs	r3, r2
 8003cc0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cc2:	4b83      	ldr	r3, [pc, #524]	; (8003ed0 <HAL_RCC_ClockConfig+0x240>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f003 030f 	and.w	r3, r3, #15
 8003cca:	683a      	ldr	r2, [r7, #0]
 8003ccc:	429a      	cmp	r2, r3
 8003cce:	d001      	beq.n	8003cd4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003cd0:	2301      	movs	r3, #1
 8003cd2:	e184      	b.n	8003fde <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f003 0304 	and.w	r3, r3, #4
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d010      	beq.n	8003d02 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	691a      	ldr	r2, [r3, #16]
 8003ce4:	4b7b      	ldr	r3, [pc, #492]	; (8003ed4 <HAL_RCC_ClockConfig+0x244>)
 8003ce6:	699b      	ldr	r3, [r3, #24]
 8003ce8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003cec:	429a      	cmp	r2, r3
 8003cee:	d908      	bls.n	8003d02 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003cf0:	4b78      	ldr	r3, [pc, #480]	; (8003ed4 <HAL_RCC_ClockConfig+0x244>)
 8003cf2:	699b      	ldr	r3, [r3, #24]
 8003cf4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	691b      	ldr	r3, [r3, #16]
 8003cfc:	4975      	ldr	r1, [pc, #468]	; (8003ed4 <HAL_RCC_ClockConfig+0x244>)
 8003cfe:	4313      	orrs	r3, r2
 8003d00:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f003 0308 	and.w	r3, r3, #8
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d010      	beq.n	8003d30 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	695a      	ldr	r2, [r3, #20]
 8003d12:	4b70      	ldr	r3, [pc, #448]	; (8003ed4 <HAL_RCC_ClockConfig+0x244>)
 8003d14:	69db      	ldr	r3, [r3, #28]
 8003d16:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003d1a:	429a      	cmp	r2, r3
 8003d1c:	d908      	bls.n	8003d30 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003d1e:	4b6d      	ldr	r3, [pc, #436]	; (8003ed4 <HAL_RCC_ClockConfig+0x244>)
 8003d20:	69db      	ldr	r3, [r3, #28]
 8003d22:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	695b      	ldr	r3, [r3, #20]
 8003d2a:	496a      	ldr	r1, [pc, #424]	; (8003ed4 <HAL_RCC_ClockConfig+0x244>)
 8003d2c:	4313      	orrs	r3, r2
 8003d2e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f003 0310 	and.w	r3, r3, #16
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d010      	beq.n	8003d5e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	699a      	ldr	r2, [r3, #24]
 8003d40:	4b64      	ldr	r3, [pc, #400]	; (8003ed4 <HAL_RCC_ClockConfig+0x244>)
 8003d42:	69db      	ldr	r3, [r3, #28]
 8003d44:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003d48:	429a      	cmp	r2, r3
 8003d4a:	d908      	bls.n	8003d5e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003d4c:	4b61      	ldr	r3, [pc, #388]	; (8003ed4 <HAL_RCC_ClockConfig+0x244>)
 8003d4e:	69db      	ldr	r3, [r3, #28]
 8003d50:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	699b      	ldr	r3, [r3, #24]
 8003d58:	495e      	ldr	r1, [pc, #376]	; (8003ed4 <HAL_RCC_ClockConfig+0x244>)
 8003d5a:	4313      	orrs	r3, r2
 8003d5c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f003 0320 	and.w	r3, r3, #32
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d010      	beq.n	8003d8c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	69da      	ldr	r2, [r3, #28]
 8003d6e:	4b59      	ldr	r3, [pc, #356]	; (8003ed4 <HAL_RCC_ClockConfig+0x244>)
 8003d70:	6a1b      	ldr	r3, [r3, #32]
 8003d72:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003d76:	429a      	cmp	r2, r3
 8003d78:	d908      	bls.n	8003d8c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003d7a:	4b56      	ldr	r3, [pc, #344]	; (8003ed4 <HAL_RCC_ClockConfig+0x244>)
 8003d7c:	6a1b      	ldr	r3, [r3, #32]
 8003d7e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	69db      	ldr	r3, [r3, #28]
 8003d86:	4953      	ldr	r1, [pc, #332]	; (8003ed4 <HAL_RCC_ClockConfig+0x244>)
 8003d88:	4313      	orrs	r3, r2
 8003d8a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f003 0302 	and.w	r3, r3, #2
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d010      	beq.n	8003dba <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	68da      	ldr	r2, [r3, #12]
 8003d9c:	4b4d      	ldr	r3, [pc, #308]	; (8003ed4 <HAL_RCC_ClockConfig+0x244>)
 8003d9e:	699b      	ldr	r3, [r3, #24]
 8003da0:	f003 030f 	and.w	r3, r3, #15
 8003da4:	429a      	cmp	r2, r3
 8003da6:	d908      	bls.n	8003dba <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003da8:	4b4a      	ldr	r3, [pc, #296]	; (8003ed4 <HAL_RCC_ClockConfig+0x244>)
 8003daa:	699b      	ldr	r3, [r3, #24]
 8003dac:	f023 020f 	bic.w	r2, r3, #15
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	68db      	ldr	r3, [r3, #12]
 8003db4:	4947      	ldr	r1, [pc, #284]	; (8003ed4 <HAL_RCC_ClockConfig+0x244>)
 8003db6:	4313      	orrs	r3, r2
 8003db8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f003 0301 	and.w	r3, r3, #1
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d055      	beq.n	8003e72 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003dc6:	4b43      	ldr	r3, [pc, #268]	; (8003ed4 <HAL_RCC_ClockConfig+0x244>)
 8003dc8:	699b      	ldr	r3, [r3, #24]
 8003dca:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	689b      	ldr	r3, [r3, #8]
 8003dd2:	4940      	ldr	r1, [pc, #256]	; (8003ed4 <HAL_RCC_ClockConfig+0x244>)
 8003dd4:	4313      	orrs	r3, r2
 8003dd6:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	685b      	ldr	r3, [r3, #4]
 8003ddc:	2b02      	cmp	r3, #2
 8003dde:	d107      	bne.n	8003df0 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003de0:	4b3c      	ldr	r3, [pc, #240]	; (8003ed4 <HAL_RCC_ClockConfig+0x244>)
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d121      	bne.n	8003e30 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003dec:	2301      	movs	r3, #1
 8003dee:	e0f6      	b.n	8003fde <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	685b      	ldr	r3, [r3, #4]
 8003df4:	2b03      	cmp	r3, #3
 8003df6:	d107      	bne.n	8003e08 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003df8:	4b36      	ldr	r3, [pc, #216]	; (8003ed4 <HAL_RCC_ClockConfig+0x244>)
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d115      	bne.n	8003e30 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003e04:	2301      	movs	r3, #1
 8003e06:	e0ea      	b.n	8003fde <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	685b      	ldr	r3, [r3, #4]
 8003e0c:	2b01      	cmp	r3, #1
 8003e0e:	d107      	bne.n	8003e20 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003e10:	4b30      	ldr	r3, [pc, #192]	; (8003ed4 <HAL_RCC_ClockConfig+0x244>)
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d109      	bne.n	8003e30 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003e1c:	2301      	movs	r3, #1
 8003e1e:	e0de      	b.n	8003fde <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003e20:	4b2c      	ldr	r3, [pc, #176]	; (8003ed4 <HAL_RCC_ClockConfig+0x244>)
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f003 0304 	and.w	r3, r3, #4
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d101      	bne.n	8003e30 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003e2c:	2301      	movs	r3, #1
 8003e2e:	e0d6      	b.n	8003fde <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003e30:	4b28      	ldr	r3, [pc, #160]	; (8003ed4 <HAL_RCC_ClockConfig+0x244>)
 8003e32:	691b      	ldr	r3, [r3, #16]
 8003e34:	f023 0207 	bic.w	r2, r3, #7
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	685b      	ldr	r3, [r3, #4]
 8003e3c:	4925      	ldr	r1, [pc, #148]	; (8003ed4 <HAL_RCC_ClockConfig+0x244>)
 8003e3e:	4313      	orrs	r3, r2
 8003e40:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e42:	f7fd f8f7 	bl	8001034 <HAL_GetTick>
 8003e46:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e48:	e00a      	b.n	8003e60 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e4a:	f7fd f8f3 	bl	8001034 <HAL_GetTick>
 8003e4e:	4602      	mov	r2, r0
 8003e50:	697b      	ldr	r3, [r7, #20]
 8003e52:	1ad3      	subs	r3, r2, r3
 8003e54:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	d901      	bls.n	8003e60 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8003e5c:	2303      	movs	r3, #3
 8003e5e:	e0be      	b.n	8003fde <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e60:	4b1c      	ldr	r3, [pc, #112]	; (8003ed4 <HAL_RCC_ClockConfig+0x244>)
 8003e62:	691b      	ldr	r3, [r3, #16]
 8003e64:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	685b      	ldr	r3, [r3, #4]
 8003e6c:	00db      	lsls	r3, r3, #3
 8003e6e:	429a      	cmp	r2, r3
 8003e70:	d1eb      	bne.n	8003e4a <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f003 0302 	and.w	r3, r3, #2
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d010      	beq.n	8003ea0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	68da      	ldr	r2, [r3, #12]
 8003e82:	4b14      	ldr	r3, [pc, #80]	; (8003ed4 <HAL_RCC_ClockConfig+0x244>)
 8003e84:	699b      	ldr	r3, [r3, #24]
 8003e86:	f003 030f 	and.w	r3, r3, #15
 8003e8a:	429a      	cmp	r2, r3
 8003e8c:	d208      	bcs.n	8003ea0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e8e:	4b11      	ldr	r3, [pc, #68]	; (8003ed4 <HAL_RCC_ClockConfig+0x244>)
 8003e90:	699b      	ldr	r3, [r3, #24]
 8003e92:	f023 020f 	bic.w	r2, r3, #15
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	68db      	ldr	r3, [r3, #12]
 8003e9a:	490e      	ldr	r1, [pc, #56]	; (8003ed4 <HAL_RCC_ClockConfig+0x244>)
 8003e9c:	4313      	orrs	r3, r2
 8003e9e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003ea0:	4b0b      	ldr	r3, [pc, #44]	; (8003ed0 <HAL_RCC_ClockConfig+0x240>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f003 030f 	and.w	r3, r3, #15
 8003ea8:	683a      	ldr	r2, [r7, #0]
 8003eaa:	429a      	cmp	r2, r3
 8003eac:	d214      	bcs.n	8003ed8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003eae:	4b08      	ldr	r3, [pc, #32]	; (8003ed0 <HAL_RCC_ClockConfig+0x240>)
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f023 020f 	bic.w	r2, r3, #15
 8003eb6:	4906      	ldr	r1, [pc, #24]	; (8003ed0 <HAL_RCC_ClockConfig+0x240>)
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	4313      	orrs	r3, r2
 8003ebc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ebe:	4b04      	ldr	r3, [pc, #16]	; (8003ed0 <HAL_RCC_ClockConfig+0x240>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f003 030f 	and.w	r3, r3, #15
 8003ec6:	683a      	ldr	r2, [r7, #0]
 8003ec8:	429a      	cmp	r2, r3
 8003eca:	d005      	beq.n	8003ed8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003ecc:	2301      	movs	r3, #1
 8003ece:	e086      	b.n	8003fde <HAL_RCC_ClockConfig+0x34e>
 8003ed0:	52002000 	.word	0x52002000
 8003ed4:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f003 0304 	and.w	r3, r3, #4
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d010      	beq.n	8003f06 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	691a      	ldr	r2, [r3, #16]
 8003ee8:	4b3f      	ldr	r3, [pc, #252]	; (8003fe8 <HAL_RCC_ClockConfig+0x358>)
 8003eea:	699b      	ldr	r3, [r3, #24]
 8003eec:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003ef0:	429a      	cmp	r2, r3
 8003ef2:	d208      	bcs.n	8003f06 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003ef4:	4b3c      	ldr	r3, [pc, #240]	; (8003fe8 <HAL_RCC_ClockConfig+0x358>)
 8003ef6:	699b      	ldr	r3, [r3, #24]
 8003ef8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	691b      	ldr	r3, [r3, #16]
 8003f00:	4939      	ldr	r1, [pc, #228]	; (8003fe8 <HAL_RCC_ClockConfig+0x358>)
 8003f02:	4313      	orrs	r3, r2
 8003f04:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f003 0308 	and.w	r3, r3, #8
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d010      	beq.n	8003f34 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	695a      	ldr	r2, [r3, #20]
 8003f16:	4b34      	ldr	r3, [pc, #208]	; (8003fe8 <HAL_RCC_ClockConfig+0x358>)
 8003f18:	69db      	ldr	r3, [r3, #28]
 8003f1a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003f1e:	429a      	cmp	r2, r3
 8003f20:	d208      	bcs.n	8003f34 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003f22:	4b31      	ldr	r3, [pc, #196]	; (8003fe8 <HAL_RCC_ClockConfig+0x358>)
 8003f24:	69db      	ldr	r3, [r3, #28]
 8003f26:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	695b      	ldr	r3, [r3, #20]
 8003f2e:	492e      	ldr	r1, [pc, #184]	; (8003fe8 <HAL_RCC_ClockConfig+0x358>)
 8003f30:	4313      	orrs	r3, r2
 8003f32:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f003 0310 	and.w	r3, r3, #16
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d010      	beq.n	8003f62 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	699a      	ldr	r2, [r3, #24]
 8003f44:	4b28      	ldr	r3, [pc, #160]	; (8003fe8 <HAL_RCC_ClockConfig+0x358>)
 8003f46:	69db      	ldr	r3, [r3, #28]
 8003f48:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003f4c:	429a      	cmp	r2, r3
 8003f4e:	d208      	bcs.n	8003f62 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003f50:	4b25      	ldr	r3, [pc, #148]	; (8003fe8 <HAL_RCC_ClockConfig+0x358>)
 8003f52:	69db      	ldr	r3, [r3, #28]
 8003f54:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	699b      	ldr	r3, [r3, #24]
 8003f5c:	4922      	ldr	r1, [pc, #136]	; (8003fe8 <HAL_RCC_ClockConfig+0x358>)
 8003f5e:	4313      	orrs	r3, r2
 8003f60:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f003 0320 	and.w	r3, r3, #32
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d010      	beq.n	8003f90 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	69da      	ldr	r2, [r3, #28]
 8003f72:	4b1d      	ldr	r3, [pc, #116]	; (8003fe8 <HAL_RCC_ClockConfig+0x358>)
 8003f74:	6a1b      	ldr	r3, [r3, #32]
 8003f76:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003f7a:	429a      	cmp	r2, r3
 8003f7c:	d208      	bcs.n	8003f90 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003f7e:	4b1a      	ldr	r3, [pc, #104]	; (8003fe8 <HAL_RCC_ClockConfig+0x358>)
 8003f80:	6a1b      	ldr	r3, [r3, #32]
 8003f82:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	69db      	ldr	r3, [r3, #28]
 8003f8a:	4917      	ldr	r1, [pc, #92]	; (8003fe8 <HAL_RCC_ClockConfig+0x358>)
 8003f8c:	4313      	orrs	r3, r2
 8003f8e:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003f90:	f000 f834 	bl	8003ffc <HAL_RCC_GetSysClockFreq>
 8003f94:	4602      	mov	r2, r0
 8003f96:	4b14      	ldr	r3, [pc, #80]	; (8003fe8 <HAL_RCC_ClockConfig+0x358>)
 8003f98:	699b      	ldr	r3, [r3, #24]
 8003f9a:	0a1b      	lsrs	r3, r3, #8
 8003f9c:	f003 030f 	and.w	r3, r3, #15
 8003fa0:	4912      	ldr	r1, [pc, #72]	; (8003fec <HAL_RCC_ClockConfig+0x35c>)
 8003fa2:	5ccb      	ldrb	r3, [r1, r3]
 8003fa4:	f003 031f 	and.w	r3, r3, #31
 8003fa8:	fa22 f303 	lsr.w	r3, r2, r3
 8003fac:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003fae:	4b0e      	ldr	r3, [pc, #56]	; (8003fe8 <HAL_RCC_ClockConfig+0x358>)
 8003fb0:	699b      	ldr	r3, [r3, #24]
 8003fb2:	f003 030f 	and.w	r3, r3, #15
 8003fb6:	4a0d      	ldr	r2, [pc, #52]	; (8003fec <HAL_RCC_ClockConfig+0x35c>)
 8003fb8:	5cd3      	ldrb	r3, [r2, r3]
 8003fba:	f003 031f 	and.w	r3, r3, #31
 8003fbe:	693a      	ldr	r2, [r7, #16]
 8003fc0:	fa22 f303 	lsr.w	r3, r2, r3
 8003fc4:	4a0a      	ldr	r2, [pc, #40]	; (8003ff0 <HAL_RCC_ClockConfig+0x360>)
 8003fc6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003fc8:	4a0a      	ldr	r2, [pc, #40]	; (8003ff4 <HAL_RCC_ClockConfig+0x364>)
 8003fca:	693b      	ldr	r3, [r7, #16]
 8003fcc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8003fce:	4b0a      	ldr	r3, [pc, #40]	; (8003ff8 <HAL_RCC_ClockConfig+0x368>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	f7fc ffe4 	bl	8000fa0 <HAL_InitTick>
 8003fd8:	4603      	mov	r3, r0
 8003fda:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003fdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fde:	4618      	mov	r0, r3
 8003fe0:	3718      	adds	r7, #24
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	bd80      	pop	{r7, pc}
 8003fe6:	bf00      	nop
 8003fe8:	58024400 	.word	0x58024400
 8003fec:	08008f54 	.word	0x08008f54
 8003ff0:	24000004 	.word	0x24000004
 8003ff4:	24000000 	.word	0x24000000
 8003ff8:	24000008 	.word	0x24000008

08003ffc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ffc:	b480      	push	{r7}
 8003ffe:	b089      	sub	sp, #36	; 0x24
 8004000:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004002:	4bb3      	ldr	r3, [pc, #716]	; (80042d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004004:	691b      	ldr	r3, [r3, #16]
 8004006:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800400a:	2b18      	cmp	r3, #24
 800400c:	f200 8155 	bhi.w	80042ba <HAL_RCC_GetSysClockFreq+0x2be>
 8004010:	a201      	add	r2, pc, #4	; (adr r2, 8004018 <HAL_RCC_GetSysClockFreq+0x1c>)
 8004012:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004016:	bf00      	nop
 8004018:	0800407d 	.word	0x0800407d
 800401c:	080042bb 	.word	0x080042bb
 8004020:	080042bb 	.word	0x080042bb
 8004024:	080042bb 	.word	0x080042bb
 8004028:	080042bb 	.word	0x080042bb
 800402c:	080042bb 	.word	0x080042bb
 8004030:	080042bb 	.word	0x080042bb
 8004034:	080042bb 	.word	0x080042bb
 8004038:	080040a3 	.word	0x080040a3
 800403c:	080042bb 	.word	0x080042bb
 8004040:	080042bb 	.word	0x080042bb
 8004044:	080042bb 	.word	0x080042bb
 8004048:	080042bb 	.word	0x080042bb
 800404c:	080042bb 	.word	0x080042bb
 8004050:	080042bb 	.word	0x080042bb
 8004054:	080042bb 	.word	0x080042bb
 8004058:	080040a9 	.word	0x080040a9
 800405c:	080042bb 	.word	0x080042bb
 8004060:	080042bb 	.word	0x080042bb
 8004064:	080042bb 	.word	0x080042bb
 8004068:	080042bb 	.word	0x080042bb
 800406c:	080042bb 	.word	0x080042bb
 8004070:	080042bb 	.word	0x080042bb
 8004074:	080042bb 	.word	0x080042bb
 8004078:	080040af 	.word	0x080040af
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800407c:	4b94      	ldr	r3, [pc, #592]	; (80042d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f003 0320 	and.w	r3, r3, #32
 8004084:	2b00      	cmp	r3, #0
 8004086:	d009      	beq.n	800409c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004088:	4b91      	ldr	r3, [pc, #580]	; (80042d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	08db      	lsrs	r3, r3, #3
 800408e:	f003 0303 	and.w	r3, r3, #3
 8004092:	4a90      	ldr	r2, [pc, #576]	; (80042d4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004094:	fa22 f303 	lsr.w	r3, r2, r3
 8004098:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800409a:	e111      	b.n	80042c0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800409c:	4b8d      	ldr	r3, [pc, #564]	; (80042d4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800409e:	61bb      	str	r3, [r7, #24]
    break;
 80040a0:	e10e      	b.n	80042c0 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80040a2:	4b8d      	ldr	r3, [pc, #564]	; (80042d8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80040a4:	61bb      	str	r3, [r7, #24]
    break;
 80040a6:	e10b      	b.n	80042c0 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80040a8:	4b8c      	ldr	r3, [pc, #560]	; (80042dc <HAL_RCC_GetSysClockFreq+0x2e0>)
 80040aa:	61bb      	str	r3, [r7, #24]
    break;
 80040ac:	e108      	b.n	80042c0 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80040ae:	4b88      	ldr	r3, [pc, #544]	; (80042d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80040b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040b2:	f003 0303 	and.w	r3, r3, #3
 80040b6:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80040b8:	4b85      	ldr	r3, [pc, #532]	; (80042d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80040ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040bc:	091b      	lsrs	r3, r3, #4
 80040be:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80040c2:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80040c4:	4b82      	ldr	r3, [pc, #520]	; (80042d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80040c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040c8:	f003 0301 	and.w	r3, r3, #1
 80040cc:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80040ce:	4b80      	ldr	r3, [pc, #512]	; (80042d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80040d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040d2:	08db      	lsrs	r3, r3, #3
 80040d4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80040d8:	68fa      	ldr	r2, [r7, #12]
 80040da:	fb02 f303 	mul.w	r3, r2, r3
 80040de:	ee07 3a90 	vmov	s15, r3
 80040e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80040e6:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80040ea:	693b      	ldr	r3, [r7, #16]
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	f000 80e1 	beq.w	80042b4 <HAL_RCC_GetSysClockFreq+0x2b8>
 80040f2:	697b      	ldr	r3, [r7, #20]
 80040f4:	2b02      	cmp	r3, #2
 80040f6:	f000 8083 	beq.w	8004200 <HAL_RCC_GetSysClockFreq+0x204>
 80040fa:	697b      	ldr	r3, [r7, #20]
 80040fc:	2b02      	cmp	r3, #2
 80040fe:	f200 80a1 	bhi.w	8004244 <HAL_RCC_GetSysClockFreq+0x248>
 8004102:	697b      	ldr	r3, [r7, #20]
 8004104:	2b00      	cmp	r3, #0
 8004106:	d003      	beq.n	8004110 <HAL_RCC_GetSysClockFreq+0x114>
 8004108:	697b      	ldr	r3, [r7, #20]
 800410a:	2b01      	cmp	r3, #1
 800410c:	d056      	beq.n	80041bc <HAL_RCC_GetSysClockFreq+0x1c0>
 800410e:	e099      	b.n	8004244 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004110:	4b6f      	ldr	r3, [pc, #444]	; (80042d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f003 0320 	and.w	r3, r3, #32
 8004118:	2b00      	cmp	r3, #0
 800411a:	d02d      	beq.n	8004178 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800411c:	4b6c      	ldr	r3, [pc, #432]	; (80042d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	08db      	lsrs	r3, r3, #3
 8004122:	f003 0303 	and.w	r3, r3, #3
 8004126:	4a6b      	ldr	r2, [pc, #428]	; (80042d4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004128:	fa22 f303 	lsr.w	r3, r2, r3
 800412c:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	ee07 3a90 	vmov	s15, r3
 8004134:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004138:	693b      	ldr	r3, [r7, #16]
 800413a:	ee07 3a90 	vmov	s15, r3
 800413e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004142:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004146:	4b62      	ldr	r3, [pc, #392]	; (80042d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800414a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800414e:	ee07 3a90 	vmov	s15, r3
 8004152:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004156:	ed97 6a02 	vldr	s12, [r7, #8]
 800415a:	eddf 5a61 	vldr	s11, [pc, #388]	; 80042e0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800415e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004162:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004166:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800416a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800416e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004172:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8004176:	e087      	b.n	8004288 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004178:	693b      	ldr	r3, [r7, #16]
 800417a:	ee07 3a90 	vmov	s15, r3
 800417e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004182:	eddf 6a58 	vldr	s13, [pc, #352]	; 80042e4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8004186:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800418a:	4b51      	ldr	r3, [pc, #324]	; (80042d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800418c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800418e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004192:	ee07 3a90 	vmov	s15, r3
 8004196:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800419a:	ed97 6a02 	vldr	s12, [r7, #8]
 800419e:	eddf 5a50 	vldr	s11, [pc, #320]	; 80042e0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80041a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80041a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80041aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80041ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80041b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80041b6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80041ba:	e065      	b.n	8004288 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80041bc:	693b      	ldr	r3, [r7, #16]
 80041be:	ee07 3a90 	vmov	s15, r3
 80041c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80041c6:	eddf 6a48 	vldr	s13, [pc, #288]	; 80042e8 <HAL_RCC_GetSysClockFreq+0x2ec>
 80041ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80041ce:	4b40      	ldr	r3, [pc, #256]	; (80042d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80041d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80041d6:	ee07 3a90 	vmov	s15, r3
 80041da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80041de:	ed97 6a02 	vldr	s12, [r7, #8]
 80041e2:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80042e0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80041e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80041ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80041ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80041f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80041f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80041fa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80041fe:	e043      	b.n	8004288 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004200:	693b      	ldr	r3, [r7, #16]
 8004202:	ee07 3a90 	vmov	s15, r3
 8004206:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800420a:	eddf 6a38 	vldr	s13, [pc, #224]	; 80042ec <HAL_RCC_GetSysClockFreq+0x2f0>
 800420e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004212:	4b2f      	ldr	r3, [pc, #188]	; (80042d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004216:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800421a:	ee07 3a90 	vmov	s15, r3
 800421e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004222:	ed97 6a02 	vldr	s12, [r7, #8]
 8004226:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80042e0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800422a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800422e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004232:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004236:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800423a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800423e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004242:	e021      	b.n	8004288 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004244:	693b      	ldr	r3, [r7, #16]
 8004246:	ee07 3a90 	vmov	s15, r3
 800424a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800424e:	eddf 6a26 	vldr	s13, [pc, #152]	; 80042e8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004252:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004256:	4b1e      	ldr	r3, [pc, #120]	; (80042d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800425a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800425e:	ee07 3a90 	vmov	s15, r3
 8004262:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004266:	ed97 6a02 	vldr	s12, [r7, #8]
 800426a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80042e0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800426e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004272:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004276:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800427a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800427e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004282:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004286:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8004288:	4b11      	ldr	r3, [pc, #68]	; (80042d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800428a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800428c:	0a5b      	lsrs	r3, r3, #9
 800428e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004292:	3301      	adds	r3, #1
 8004294:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	ee07 3a90 	vmov	s15, r3
 800429c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80042a0:	edd7 6a07 	vldr	s13, [r7, #28]
 80042a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80042a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80042ac:	ee17 3a90 	vmov	r3, s15
 80042b0:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80042b2:	e005      	b.n	80042c0 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80042b4:	2300      	movs	r3, #0
 80042b6:	61bb      	str	r3, [r7, #24]
    break;
 80042b8:	e002      	b.n	80042c0 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80042ba:	4b07      	ldr	r3, [pc, #28]	; (80042d8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80042bc:	61bb      	str	r3, [r7, #24]
    break;
 80042be:	bf00      	nop
  }

  return sysclockfreq;
 80042c0:	69bb      	ldr	r3, [r7, #24]
}
 80042c2:	4618      	mov	r0, r3
 80042c4:	3724      	adds	r7, #36	; 0x24
 80042c6:	46bd      	mov	sp, r7
 80042c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042cc:	4770      	bx	lr
 80042ce:	bf00      	nop
 80042d0:	58024400 	.word	0x58024400
 80042d4:	03d09000 	.word	0x03d09000
 80042d8:	003d0900 	.word	0x003d0900
 80042dc:	017d7840 	.word	0x017d7840
 80042e0:	46000000 	.word	0x46000000
 80042e4:	4c742400 	.word	0x4c742400
 80042e8:	4a742400 	.word	0x4a742400
 80042ec:	4bbebc20 	.word	0x4bbebc20

080042f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b082      	sub	sp, #8
 80042f4:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80042f6:	f7ff fe81 	bl	8003ffc <HAL_RCC_GetSysClockFreq>
 80042fa:	4602      	mov	r2, r0
 80042fc:	4b10      	ldr	r3, [pc, #64]	; (8004340 <HAL_RCC_GetHCLKFreq+0x50>)
 80042fe:	699b      	ldr	r3, [r3, #24]
 8004300:	0a1b      	lsrs	r3, r3, #8
 8004302:	f003 030f 	and.w	r3, r3, #15
 8004306:	490f      	ldr	r1, [pc, #60]	; (8004344 <HAL_RCC_GetHCLKFreq+0x54>)
 8004308:	5ccb      	ldrb	r3, [r1, r3]
 800430a:	f003 031f 	and.w	r3, r3, #31
 800430e:	fa22 f303 	lsr.w	r3, r2, r3
 8004312:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004314:	4b0a      	ldr	r3, [pc, #40]	; (8004340 <HAL_RCC_GetHCLKFreq+0x50>)
 8004316:	699b      	ldr	r3, [r3, #24]
 8004318:	f003 030f 	and.w	r3, r3, #15
 800431c:	4a09      	ldr	r2, [pc, #36]	; (8004344 <HAL_RCC_GetHCLKFreq+0x54>)
 800431e:	5cd3      	ldrb	r3, [r2, r3]
 8004320:	f003 031f 	and.w	r3, r3, #31
 8004324:	687a      	ldr	r2, [r7, #4]
 8004326:	fa22 f303 	lsr.w	r3, r2, r3
 800432a:	4a07      	ldr	r2, [pc, #28]	; (8004348 <HAL_RCC_GetHCLKFreq+0x58>)
 800432c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800432e:	4a07      	ldr	r2, [pc, #28]	; (800434c <HAL_RCC_GetHCLKFreq+0x5c>)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8004334:	4b04      	ldr	r3, [pc, #16]	; (8004348 <HAL_RCC_GetHCLKFreq+0x58>)
 8004336:	681b      	ldr	r3, [r3, #0]
}
 8004338:	4618      	mov	r0, r3
 800433a:	3708      	adds	r7, #8
 800433c:	46bd      	mov	sp, r7
 800433e:	bd80      	pop	{r7, pc}
 8004340:	58024400 	.word	0x58024400
 8004344:	08008f54 	.word	0x08008f54
 8004348:	24000004 	.word	0x24000004
 800434c:	24000000 	.word	0x24000000

08004350 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004350:	b580      	push	{r7, lr}
 8004352:	b086      	sub	sp, #24
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004358:	2300      	movs	r3, #0
 800435a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800435c:	2300      	movs	r3, #0
 800435e:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004368:	2b00      	cmp	r3, #0
 800436a:	d03f      	beq.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004370:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004374:	d02a      	beq.n	80043cc <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004376:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800437a:	d824      	bhi.n	80043c6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800437c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004380:	d018      	beq.n	80043b4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004382:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004386:	d81e      	bhi.n	80043c6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004388:	2b00      	cmp	r3, #0
 800438a:	d003      	beq.n	8004394 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800438c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004390:	d007      	beq.n	80043a2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004392:	e018      	b.n	80043c6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004394:	4bab      	ldr	r3, [pc, #684]	; (8004644 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004396:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004398:	4aaa      	ldr	r2, [pc, #680]	; (8004644 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800439a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800439e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80043a0:	e015      	b.n	80043ce <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	3304      	adds	r3, #4
 80043a6:	2102      	movs	r1, #2
 80043a8:	4618      	mov	r0, r3
 80043aa:	f001 fff3 	bl	8006394 <RCCEx_PLL2_Config>
 80043ae:	4603      	mov	r3, r0
 80043b0:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80043b2:	e00c      	b.n	80043ce <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	3324      	adds	r3, #36	; 0x24
 80043b8:	2102      	movs	r1, #2
 80043ba:	4618      	mov	r0, r3
 80043bc:	f002 f89c 	bl	80064f8 <RCCEx_PLL3_Config>
 80043c0:	4603      	mov	r3, r0
 80043c2:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80043c4:	e003      	b.n	80043ce <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80043c6:	2301      	movs	r3, #1
 80043c8:	75fb      	strb	r3, [r7, #23]
      break;
 80043ca:	e000      	b.n	80043ce <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80043cc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80043ce:	7dfb      	ldrb	r3, [r7, #23]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d109      	bne.n	80043e8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80043d4:	4b9b      	ldr	r3, [pc, #620]	; (8004644 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80043d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043d8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80043e0:	4998      	ldr	r1, [pc, #608]	; (8004644 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80043e2:	4313      	orrs	r3, r2
 80043e4:	650b      	str	r3, [r1, #80]	; 0x50
 80043e6:	e001      	b.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043e8:	7dfb      	ldrb	r3, [r7, #23]
 80043ea:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d03d      	beq.n	8004474 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043fc:	2b04      	cmp	r3, #4
 80043fe:	d826      	bhi.n	800444e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8004400:	a201      	add	r2, pc, #4	; (adr r2, 8004408 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8004402:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004406:	bf00      	nop
 8004408:	0800441d 	.word	0x0800441d
 800440c:	0800442b 	.word	0x0800442b
 8004410:	0800443d 	.word	0x0800443d
 8004414:	08004455 	.word	0x08004455
 8004418:	08004455 	.word	0x08004455
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800441c:	4b89      	ldr	r3, [pc, #548]	; (8004644 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800441e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004420:	4a88      	ldr	r2, [pc, #544]	; (8004644 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004422:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004426:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004428:	e015      	b.n	8004456 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	3304      	adds	r3, #4
 800442e:	2100      	movs	r1, #0
 8004430:	4618      	mov	r0, r3
 8004432:	f001 ffaf 	bl	8006394 <RCCEx_PLL2_Config>
 8004436:	4603      	mov	r3, r0
 8004438:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800443a:	e00c      	b.n	8004456 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	3324      	adds	r3, #36	; 0x24
 8004440:	2100      	movs	r1, #0
 8004442:	4618      	mov	r0, r3
 8004444:	f002 f858 	bl	80064f8 <RCCEx_PLL3_Config>
 8004448:	4603      	mov	r3, r0
 800444a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800444c:	e003      	b.n	8004456 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800444e:	2301      	movs	r3, #1
 8004450:	75fb      	strb	r3, [r7, #23]
      break;
 8004452:	e000      	b.n	8004456 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8004454:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004456:	7dfb      	ldrb	r3, [r7, #23]
 8004458:	2b00      	cmp	r3, #0
 800445a:	d109      	bne.n	8004470 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800445c:	4b79      	ldr	r3, [pc, #484]	; (8004644 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800445e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004460:	f023 0207 	bic.w	r2, r3, #7
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004468:	4976      	ldr	r1, [pc, #472]	; (8004644 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800446a:	4313      	orrs	r3, r2
 800446c:	650b      	str	r3, [r1, #80]	; 0x50
 800446e:	e001      	b.n	8004474 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004470:	7dfb      	ldrb	r3, [r7, #23]
 8004472:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800447c:	2b00      	cmp	r3, #0
 800447e:	d042      	beq.n	8004506 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004484:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004488:	d02b      	beq.n	80044e2 <HAL_RCCEx_PeriphCLKConfig+0x192>
 800448a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800448e:	d825      	bhi.n	80044dc <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8004490:	2bc0      	cmp	r3, #192	; 0xc0
 8004492:	d028      	beq.n	80044e6 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004494:	2bc0      	cmp	r3, #192	; 0xc0
 8004496:	d821      	bhi.n	80044dc <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8004498:	2b80      	cmp	r3, #128	; 0x80
 800449a:	d016      	beq.n	80044ca <HAL_RCCEx_PeriphCLKConfig+0x17a>
 800449c:	2b80      	cmp	r3, #128	; 0x80
 800449e:	d81d      	bhi.n	80044dc <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d002      	beq.n	80044aa <HAL_RCCEx_PeriphCLKConfig+0x15a>
 80044a4:	2b40      	cmp	r3, #64	; 0x40
 80044a6:	d007      	beq.n	80044b8 <HAL_RCCEx_PeriphCLKConfig+0x168>
 80044a8:	e018      	b.n	80044dc <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80044aa:	4b66      	ldr	r3, [pc, #408]	; (8004644 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80044ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044ae:	4a65      	ldr	r2, [pc, #404]	; (8004644 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80044b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80044b4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80044b6:	e017      	b.n	80044e8 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	3304      	adds	r3, #4
 80044bc:	2100      	movs	r1, #0
 80044be:	4618      	mov	r0, r3
 80044c0:	f001 ff68 	bl	8006394 <RCCEx_PLL2_Config>
 80044c4:	4603      	mov	r3, r0
 80044c6:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80044c8:	e00e      	b.n	80044e8 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	3324      	adds	r3, #36	; 0x24
 80044ce:	2100      	movs	r1, #0
 80044d0:	4618      	mov	r0, r3
 80044d2:	f002 f811 	bl	80064f8 <RCCEx_PLL3_Config>
 80044d6:	4603      	mov	r3, r0
 80044d8:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80044da:	e005      	b.n	80044e8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80044dc:	2301      	movs	r3, #1
 80044de:	75fb      	strb	r3, [r7, #23]
      break;
 80044e0:	e002      	b.n	80044e8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80044e2:	bf00      	nop
 80044e4:	e000      	b.n	80044e8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80044e6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80044e8:	7dfb      	ldrb	r3, [r7, #23]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d109      	bne.n	8004502 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80044ee:	4b55      	ldr	r3, [pc, #340]	; (8004644 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80044f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044f2:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044fa:	4952      	ldr	r1, [pc, #328]	; (8004644 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80044fc:	4313      	orrs	r3, r2
 80044fe:	650b      	str	r3, [r1, #80]	; 0x50
 8004500:	e001      	b.n	8004506 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004502:	7dfb      	ldrb	r3, [r7, #23]
 8004504:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800450e:	2b00      	cmp	r3, #0
 8004510:	d049      	beq.n	80045a6 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004518:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800451c:	d030      	beq.n	8004580 <HAL_RCCEx_PeriphCLKConfig+0x230>
 800451e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004522:	d82a      	bhi.n	800457a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8004524:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004528:	d02c      	beq.n	8004584 <HAL_RCCEx_PeriphCLKConfig+0x234>
 800452a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800452e:	d824      	bhi.n	800457a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8004530:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004534:	d018      	beq.n	8004568 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8004536:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800453a:	d81e      	bhi.n	800457a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800453c:	2b00      	cmp	r3, #0
 800453e:	d003      	beq.n	8004548 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8004540:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004544:	d007      	beq.n	8004556 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8004546:	e018      	b.n	800457a <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004548:	4b3e      	ldr	r3, [pc, #248]	; (8004644 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800454a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800454c:	4a3d      	ldr	r2, [pc, #244]	; (8004644 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800454e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004552:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004554:	e017      	b.n	8004586 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	3304      	adds	r3, #4
 800455a:	2100      	movs	r1, #0
 800455c:	4618      	mov	r0, r3
 800455e:	f001 ff19 	bl	8006394 <RCCEx_PLL2_Config>
 8004562:	4603      	mov	r3, r0
 8004564:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8004566:	e00e      	b.n	8004586 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	3324      	adds	r3, #36	; 0x24
 800456c:	2100      	movs	r1, #0
 800456e:	4618      	mov	r0, r3
 8004570:	f001 ffc2 	bl	80064f8 <RCCEx_PLL3_Config>
 8004574:	4603      	mov	r3, r0
 8004576:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004578:	e005      	b.n	8004586 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800457a:	2301      	movs	r3, #1
 800457c:	75fb      	strb	r3, [r7, #23]
      break;
 800457e:	e002      	b.n	8004586 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8004580:	bf00      	nop
 8004582:	e000      	b.n	8004586 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8004584:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004586:	7dfb      	ldrb	r3, [r7, #23]
 8004588:	2b00      	cmp	r3, #0
 800458a:	d10a      	bne.n	80045a2 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800458c:	4b2d      	ldr	r3, [pc, #180]	; (8004644 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800458e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004590:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800459a:	492a      	ldr	r1, [pc, #168]	; (8004644 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800459c:	4313      	orrs	r3, r2
 800459e:	658b      	str	r3, [r1, #88]	; 0x58
 80045a0:	e001      	b.n	80045a6 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045a2:	7dfb      	ldrb	r3, [r7, #23]
 80045a4:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d04c      	beq.n	800464c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80045b8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80045bc:	d030      	beq.n	8004620 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 80045be:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80045c2:	d82a      	bhi.n	800461a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80045c4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80045c8:	d02c      	beq.n	8004624 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 80045ca:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80045ce:	d824      	bhi.n	800461a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80045d0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80045d4:	d018      	beq.n	8004608 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 80045d6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80045da:	d81e      	bhi.n	800461a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d003      	beq.n	80045e8 <HAL_RCCEx_PeriphCLKConfig+0x298>
 80045e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80045e4:	d007      	beq.n	80045f6 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 80045e6:	e018      	b.n	800461a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80045e8:	4b16      	ldr	r3, [pc, #88]	; (8004644 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80045ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045ec:	4a15      	ldr	r2, [pc, #84]	; (8004644 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80045ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80045f2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80045f4:	e017      	b.n	8004626 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	3304      	adds	r3, #4
 80045fa:	2100      	movs	r1, #0
 80045fc:	4618      	mov	r0, r3
 80045fe:	f001 fec9 	bl	8006394 <RCCEx_PLL2_Config>
 8004602:	4603      	mov	r3, r0
 8004604:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8004606:	e00e      	b.n	8004626 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	3324      	adds	r3, #36	; 0x24
 800460c:	2100      	movs	r1, #0
 800460e:	4618      	mov	r0, r3
 8004610:	f001 ff72 	bl	80064f8 <RCCEx_PLL3_Config>
 8004614:	4603      	mov	r3, r0
 8004616:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004618:	e005      	b.n	8004626 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800461a:	2301      	movs	r3, #1
 800461c:	75fb      	strb	r3, [r7, #23]
      break;
 800461e:	e002      	b.n	8004626 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8004620:	bf00      	nop
 8004622:	e000      	b.n	8004626 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8004624:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004626:	7dfb      	ldrb	r3, [r7, #23]
 8004628:	2b00      	cmp	r3, #0
 800462a:	d10d      	bne.n	8004648 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800462c:	4b05      	ldr	r3, [pc, #20]	; (8004644 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800462e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004630:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800463a:	4902      	ldr	r1, [pc, #8]	; (8004644 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800463c:	4313      	orrs	r3, r2
 800463e:	658b      	str	r3, [r1, #88]	; 0x58
 8004640:	e004      	b.n	800464c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8004642:	bf00      	nop
 8004644:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004648:	7dfb      	ldrb	r3, [r7, #23]
 800464a:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004654:	2b00      	cmp	r3, #0
 8004656:	d032      	beq.n	80046be <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800465c:	2b30      	cmp	r3, #48	; 0x30
 800465e:	d01c      	beq.n	800469a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8004660:	2b30      	cmp	r3, #48	; 0x30
 8004662:	d817      	bhi.n	8004694 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8004664:	2b20      	cmp	r3, #32
 8004666:	d00c      	beq.n	8004682 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8004668:	2b20      	cmp	r3, #32
 800466a:	d813      	bhi.n	8004694 <HAL_RCCEx_PeriphCLKConfig+0x344>
 800466c:	2b00      	cmp	r3, #0
 800466e:	d016      	beq.n	800469e <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8004670:	2b10      	cmp	r3, #16
 8004672:	d10f      	bne.n	8004694 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004674:	4baf      	ldr	r3, [pc, #700]	; (8004934 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004676:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004678:	4aae      	ldr	r2, [pc, #696]	; (8004934 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800467a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800467e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8004680:	e00e      	b.n	80046a0 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	3304      	adds	r3, #4
 8004686:	2102      	movs	r1, #2
 8004688:	4618      	mov	r0, r3
 800468a:	f001 fe83 	bl	8006394 <RCCEx_PLL2_Config>
 800468e:	4603      	mov	r3, r0
 8004690:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8004692:	e005      	b.n	80046a0 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8004694:	2301      	movs	r3, #1
 8004696:	75fb      	strb	r3, [r7, #23]
      break;
 8004698:	e002      	b.n	80046a0 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 800469a:	bf00      	nop
 800469c:	e000      	b.n	80046a0 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 800469e:	bf00      	nop
    }

    if(ret == HAL_OK)
 80046a0:	7dfb      	ldrb	r3, [r7, #23]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d109      	bne.n	80046ba <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80046a6:	4ba3      	ldr	r3, [pc, #652]	; (8004934 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80046a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046aa:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046b2:	49a0      	ldr	r1, [pc, #640]	; (8004934 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80046b4:	4313      	orrs	r3, r2
 80046b6:	64cb      	str	r3, [r1, #76]	; 0x4c
 80046b8:	e001      	b.n	80046be <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046ba:	7dfb      	ldrb	r3, [r7, #23]
 80046bc:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d047      	beq.n	800475a <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046ce:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80046d2:	d030      	beq.n	8004736 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 80046d4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80046d8:	d82a      	bhi.n	8004730 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80046da:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80046de:	d02c      	beq.n	800473a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 80046e0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80046e4:	d824      	bhi.n	8004730 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80046e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80046ea:	d018      	beq.n	800471e <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 80046ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80046f0:	d81e      	bhi.n	8004730 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d003      	beq.n	80046fe <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 80046f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046fa:	d007      	beq.n	800470c <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 80046fc:	e018      	b.n	8004730 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80046fe:	4b8d      	ldr	r3, [pc, #564]	; (8004934 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004700:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004702:	4a8c      	ldr	r2, [pc, #560]	; (8004934 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004704:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004708:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800470a:	e017      	b.n	800473c <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	3304      	adds	r3, #4
 8004710:	2100      	movs	r1, #0
 8004712:	4618      	mov	r0, r3
 8004714:	f001 fe3e 	bl	8006394 <RCCEx_PLL2_Config>
 8004718:	4603      	mov	r3, r0
 800471a:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800471c:	e00e      	b.n	800473c <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	3324      	adds	r3, #36	; 0x24
 8004722:	2100      	movs	r1, #0
 8004724:	4618      	mov	r0, r3
 8004726:	f001 fee7 	bl	80064f8 <RCCEx_PLL3_Config>
 800472a:	4603      	mov	r3, r0
 800472c:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800472e:	e005      	b.n	800473c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004730:	2301      	movs	r3, #1
 8004732:	75fb      	strb	r3, [r7, #23]
      break;
 8004734:	e002      	b.n	800473c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8004736:	bf00      	nop
 8004738:	e000      	b.n	800473c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 800473a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800473c:	7dfb      	ldrb	r3, [r7, #23]
 800473e:	2b00      	cmp	r3, #0
 8004740:	d109      	bne.n	8004756 <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004742:	4b7c      	ldr	r3, [pc, #496]	; (8004934 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004744:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004746:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800474e:	4979      	ldr	r1, [pc, #484]	; (8004934 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004750:	4313      	orrs	r3, r2
 8004752:	650b      	str	r3, [r1, #80]	; 0x50
 8004754:	e001      	b.n	800475a <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004756:	7dfb      	ldrb	r3, [r7, #23]
 8004758:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004762:	2b00      	cmp	r3, #0
 8004764:	d049      	beq.n	80047fa <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800476a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800476e:	d02e      	beq.n	80047ce <HAL_RCCEx_PeriphCLKConfig+0x47e>
 8004770:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004774:	d828      	bhi.n	80047c8 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8004776:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800477a:	d02a      	beq.n	80047d2 <HAL_RCCEx_PeriphCLKConfig+0x482>
 800477c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004780:	d822      	bhi.n	80047c8 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8004782:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004786:	d026      	beq.n	80047d6 <HAL_RCCEx_PeriphCLKConfig+0x486>
 8004788:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800478c:	d81c      	bhi.n	80047c8 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800478e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004792:	d010      	beq.n	80047b6 <HAL_RCCEx_PeriphCLKConfig+0x466>
 8004794:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004798:	d816      	bhi.n	80047c8 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800479a:	2b00      	cmp	r3, #0
 800479c:	d01d      	beq.n	80047da <HAL_RCCEx_PeriphCLKConfig+0x48a>
 800479e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047a2:	d111      	bne.n	80047c8 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	3304      	adds	r3, #4
 80047a8:	2101      	movs	r1, #1
 80047aa:	4618      	mov	r0, r3
 80047ac:	f001 fdf2 	bl	8006394 <RCCEx_PLL2_Config>
 80047b0:	4603      	mov	r3, r0
 80047b2:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80047b4:	e012      	b.n	80047dc <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	3324      	adds	r3, #36	; 0x24
 80047ba:	2101      	movs	r1, #1
 80047bc:	4618      	mov	r0, r3
 80047be:	f001 fe9b 	bl	80064f8 <RCCEx_PLL3_Config>
 80047c2:	4603      	mov	r3, r0
 80047c4:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80047c6:	e009      	b.n	80047dc <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80047c8:	2301      	movs	r3, #1
 80047ca:	75fb      	strb	r3, [r7, #23]
      break;
 80047cc:	e006      	b.n	80047dc <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80047ce:	bf00      	nop
 80047d0:	e004      	b.n	80047dc <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80047d2:	bf00      	nop
 80047d4:	e002      	b.n	80047dc <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80047d6:	bf00      	nop
 80047d8:	e000      	b.n	80047dc <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80047da:	bf00      	nop
    }

    if(ret == HAL_OK)
 80047dc:	7dfb      	ldrb	r3, [r7, #23]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d109      	bne.n	80047f6 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80047e2:	4b54      	ldr	r3, [pc, #336]	; (8004934 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80047e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047e6:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047ee:	4951      	ldr	r1, [pc, #324]	; (8004934 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80047f0:	4313      	orrs	r3, r2
 80047f2:	650b      	str	r3, [r1, #80]	; 0x50
 80047f4:	e001      	b.n	80047fa <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047f6:	7dfb      	ldrb	r3, [r7, #23]
 80047f8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004802:	2b00      	cmp	r3, #0
 8004804:	d04b      	beq.n	800489e <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800480c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004810:	d02e      	beq.n	8004870 <HAL_RCCEx_PeriphCLKConfig+0x520>
 8004812:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004816:	d828      	bhi.n	800486a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8004818:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800481c:	d02a      	beq.n	8004874 <HAL_RCCEx_PeriphCLKConfig+0x524>
 800481e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004822:	d822      	bhi.n	800486a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8004824:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004828:	d026      	beq.n	8004878 <HAL_RCCEx_PeriphCLKConfig+0x528>
 800482a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800482e:	d81c      	bhi.n	800486a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8004830:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004834:	d010      	beq.n	8004858 <HAL_RCCEx_PeriphCLKConfig+0x508>
 8004836:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800483a:	d816      	bhi.n	800486a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800483c:	2b00      	cmp	r3, #0
 800483e:	d01d      	beq.n	800487c <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8004840:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004844:	d111      	bne.n	800486a <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	3304      	adds	r3, #4
 800484a:	2101      	movs	r1, #1
 800484c:	4618      	mov	r0, r3
 800484e:	f001 fda1 	bl	8006394 <RCCEx_PLL2_Config>
 8004852:	4603      	mov	r3, r0
 8004854:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8004856:	e012      	b.n	800487e <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	3324      	adds	r3, #36	; 0x24
 800485c:	2101      	movs	r1, #1
 800485e:	4618      	mov	r0, r3
 8004860:	f001 fe4a 	bl	80064f8 <RCCEx_PLL3_Config>
 8004864:	4603      	mov	r3, r0
 8004866:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8004868:	e009      	b.n	800487e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800486a:	2301      	movs	r3, #1
 800486c:	75fb      	strb	r3, [r7, #23]
      break;
 800486e:	e006      	b.n	800487e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8004870:	bf00      	nop
 8004872:	e004      	b.n	800487e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8004874:	bf00      	nop
 8004876:	e002      	b.n	800487e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8004878:	bf00      	nop
 800487a:	e000      	b.n	800487e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800487c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800487e:	7dfb      	ldrb	r3, [r7, #23]
 8004880:	2b00      	cmp	r3, #0
 8004882:	d10a      	bne.n	800489a <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004884:	4b2b      	ldr	r3, [pc, #172]	; (8004934 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004886:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004888:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004892:	4928      	ldr	r1, [pc, #160]	; (8004934 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004894:	4313      	orrs	r3, r2
 8004896:	658b      	str	r3, [r1, #88]	; 0x58
 8004898:	e001      	b.n	800489e <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800489a:	7dfb      	ldrb	r3, [r7, #23]
 800489c:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d02f      	beq.n	800490a <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80048ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80048b2:	d00e      	beq.n	80048d2 <HAL_RCCEx_PeriphCLKConfig+0x582>
 80048b4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80048b8:	d814      	bhi.n	80048e4 <HAL_RCCEx_PeriphCLKConfig+0x594>
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d015      	beq.n	80048ea <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80048be:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80048c2:	d10f      	bne.n	80048e4 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80048c4:	4b1b      	ldr	r3, [pc, #108]	; (8004934 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80048c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048c8:	4a1a      	ldr	r2, [pc, #104]	; (8004934 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80048ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80048ce:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80048d0:	e00c      	b.n	80048ec <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	3304      	adds	r3, #4
 80048d6:	2101      	movs	r1, #1
 80048d8:	4618      	mov	r0, r3
 80048da:	f001 fd5b 	bl	8006394 <RCCEx_PLL2_Config>
 80048de:	4603      	mov	r3, r0
 80048e0:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80048e2:	e003      	b.n	80048ec <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80048e4:	2301      	movs	r3, #1
 80048e6:	75fb      	strb	r3, [r7, #23]
      break;
 80048e8:	e000      	b.n	80048ec <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 80048ea:	bf00      	nop
    }

    if(ret == HAL_OK)
 80048ec:	7dfb      	ldrb	r3, [r7, #23]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d109      	bne.n	8004906 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80048f2:	4b10      	ldr	r3, [pc, #64]	; (8004934 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80048f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048f6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80048fe:	490d      	ldr	r1, [pc, #52]	; (8004934 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004900:	4313      	orrs	r3, r2
 8004902:	650b      	str	r3, [r1, #80]	; 0x50
 8004904:	e001      	b.n	800490a <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004906:	7dfb      	ldrb	r3, [r7, #23]
 8004908:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004912:	2b00      	cmp	r3, #0
 8004914:	d033      	beq.n	800497e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800491a:	2b03      	cmp	r3, #3
 800491c:	d81c      	bhi.n	8004958 <HAL_RCCEx_PeriphCLKConfig+0x608>
 800491e:	a201      	add	r2, pc, #4	; (adr r2, 8004924 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 8004920:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004924:	0800495f 	.word	0x0800495f
 8004928:	08004939 	.word	0x08004939
 800492c:	08004947 	.word	0x08004947
 8004930:	0800495f 	.word	0x0800495f
 8004934:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004938:	4bb8      	ldr	r3, [pc, #736]	; (8004c1c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800493a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800493c:	4ab7      	ldr	r2, [pc, #732]	; (8004c1c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800493e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004942:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8004944:	e00c      	b.n	8004960 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	3304      	adds	r3, #4
 800494a:	2102      	movs	r1, #2
 800494c:	4618      	mov	r0, r3
 800494e:	f001 fd21 	bl	8006394 <RCCEx_PLL2_Config>
 8004952:	4603      	mov	r3, r0
 8004954:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8004956:	e003      	b.n	8004960 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8004958:	2301      	movs	r3, #1
 800495a:	75fb      	strb	r3, [r7, #23]
      break;
 800495c:	e000      	b.n	8004960 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 800495e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004960:	7dfb      	ldrb	r3, [r7, #23]
 8004962:	2b00      	cmp	r3, #0
 8004964:	d109      	bne.n	800497a <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8004966:	4bad      	ldr	r3, [pc, #692]	; (8004c1c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004968:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800496a:	f023 0203 	bic.w	r2, r3, #3
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004972:	49aa      	ldr	r1, [pc, #680]	; (8004c1c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004974:	4313      	orrs	r3, r2
 8004976:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004978:	e001      	b.n	800497e <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800497a:	7dfb      	ldrb	r3, [r7, #23]
 800497c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004986:	2b00      	cmp	r3, #0
 8004988:	f000 8086 	beq.w	8004a98 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800498c:	4ba4      	ldr	r3, [pc, #656]	; (8004c20 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	4aa3      	ldr	r2, [pc, #652]	; (8004c20 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8004992:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004996:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004998:	f7fc fb4c 	bl	8001034 <HAL_GetTick>
 800499c:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800499e:	e009      	b.n	80049b4 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80049a0:	f7fc fb48 	bl	8001034 <HAL_GetTick>
 80049a4:	4602      	mov	r2, r0
 80049a6:	693b      	ldr	r3, [r7, #16]
 80049a8:	1ad3      	subs	r3, r2, r3
 80049aa:	2b64      	cmp	r3, #100	; 0x64
 80049ac:	d902      	bls.n	80049b4 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 80049ae:	2303      	movs	r3, #3
 80049b0:	75fb      	strb	r3, [r7, #23]
        break;
 80049b2:	e005      	b.n	80049c0 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80049b4:	4b9a      	ldr	r3, [pc, #616]	; (8004c20 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d0ef      	beq.n	80049a0 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 80049c0:	7dfb      	ldrb	r3, [r7, #23]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d166      	bne.n	8004a94 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80049c6:	4b95      	ldr	r3, [pc, #596]	; (8004c1c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80049c8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80049d0:	4053      	eors	r3, r2
 80049d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d013      	beq.n	8004a02 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80049da:	4b90      	ldr	r3, [pc, #576]	; (8004c1c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80049dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80049e2:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80049e4:	4b8d      	ldr	r3, [pc, #564]	; (8004c1c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80049e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049e8:	4a8c      	ldr	r2, [pc, #560]	; (8004c1c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80049ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049ee:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80049f0:	4b8a      	ldr	r3, [pc, #552]	; (8004c1c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80049f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049f4:	4a89      	ldr	r2, [pc, #548]	; (8004c1c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80049f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80049fa:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80049fc:	4a87      	ldr	r2, [pc, #540]	; (8004c1c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004a08:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a0c:	d115      	bne.n	8004a3a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a0e:	f7fc fb11 	bl	8001034 <HAL_GetTick>
 8004a12:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004a14:	e00b      	b.n	8004a2e <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a16:	f7fc fb0d 	bl	8001034 <HAL_GetTick>
 8004a1a:	4602      	mov	r2, r0
 8004a1c:	693b      	ldr	r3, [r7, #16]
 8004a1e:	1ad3      	subs	r3, r2, r3
 8004a20:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a24:	4293      	cmp	r3, r2
 8004a26:	d902      	bls.n	8004a2e <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8004a28:	2303      	movs	r3, #3
 8004a2a:	75fb      	strb	r3, [r7, #23]
            break;
 8004a2c:	e005      	b.n	8004a3a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004a2e:	4b7b      	ldr	r3, [pc, #492]	; (8004c1c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004a30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a32:	f003 0302 	and.w	r3, r3, #2
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d0ed      	beq.n	8004a16 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8004a3a:	7dfb      	ldrb	r3, [r7, #23]
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d126      	bne.n	8004a8e <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004a46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a4a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004a4e:	d10d      	bne.n	8004a6c <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8004a50:	4b72      	ldr	r3, [pc, #456]	; (8004c1c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004a52:	691b      	ldr	r3, [r3, #16]
 8004a54:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004a5e:	0919      	lsrs	r1, r3, #4
 8004a60:	4b70      	ldr	r3, [pc, #448]	; (8004c24 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 8004a62:	400b      	ands	r3, r1
 8004a64:	496d      	ldr	r1, [pc, #436]	; (8004c1c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004a66:	4313      	orrs	r3, r2
 8004a68:	610b      	str	r3, [r1, #16]
 8004a6a:	e005      	b.n	8004a78 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8004a6c:	4b6b      	ldr	r3, [pc, #428]	; (8004c1c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004a6e:	691b      	ldr	r3, [r3, #16]
 8004a70:	4a6a      	ldr	r2, [pc, #424]	; (8004c1c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004a72:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004a76:	6113      	str	r3, [r2, #16]
 8004a78:	4b68      	ldr	r3, [pc, #416]	; (8004c1c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004a7a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004a82:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a86:	4965      	ldr	r1, [pc, #404]	; (8004c1c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004a88:	4313      	orrs	r3, r2
 8004a8a:	670b      	str	r3, [r1, #112]	; 0x70
 8004a8c:	e004      	b.n	8004a98 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004a8e:	7dfb      	ldrb	r3, [r7, #23]
 8004a90:	75bb      	strb	r3, [r7, #22]
 8004a92:	e001      	b.n	8004a98 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a94:	7dfb      	ldrb	r3, [r7, #23]
 8004a96:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f003 0301 	and.w	r3, r3, #1
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d07e      	beq.n	8004ba2 <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004aa8:	2b28      	cmp	r3, #40	; 0x28
 8004aaa:	d867      	bhi.n	8004b7c <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8004aac:	a201      	add	r2, pc, #4	; (adr r2, 8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8004aae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ab2:	bf00      	nop
 8004ab4:	08004b83 	.word	0x08004b83
 8004ab8:	08004b7d 	.word	0x08004b7d
 8004abc:	08004b7d 	.word	0x08004b7d
 8004ac0:	08004b7d 	.word	0x08004b7d
 8004ac4:	08004b7d 	.word	0x08004b7d
 8004ac8:	08004b7d 	.word	0x08004b7d
 8004acc:	08004b7d 	.word	0x08004b7d
 8004ad0:	08004b7d 	.word	0x08004b7d
 8004ad4:	08004b59 	.word	0x08004b59
 8004ad8:	08004b7d 	.word	0x08004b7d
 8004adc:	08004b7d 	.word	0x08004b7d
 8004ae0:	08004b7d 	.word	0x08004b7d
 8004ae4:	08004b7d 	.word	0x08004b7d
 8004ae8:	08004b7d 	.word	0x08004b7d
 8004aec:	08004b7d 	.word	0x08004b7d
 8004af0:	08004b7d 	.word	0x08004b7d
 8004af4:	08004b6b 	.word	0x08004b6b
 8004af8:	08004b7d 	.word	0x08004b7d
 8004afc:	08004b7d 	.word	0x08004b7d
 8004b00:	08004b7d 	.word	0x08004b7d
 8004b04:	08004b7d 	.word	0x08004b7d
 8004b08:	08004b7d 	.word	0x08004b7d
 8004b0c:	08004b7d 	.word	0x08004b7d
 8004b10:	08004b7d 	.word	0x08004b7d
 8004b14:	08004b83 	.word	0x08004b83
 8004b18:	08004b7d 	.word	0x08004b7d
 8004b1c:	08004b7d 	.word	0x08004b7d
 8004b20:	08004b7d 	.word	0x08004b7d
 8004b24:	08004b7d 	.word	0x08004b7d
 8004b28:	08004b7d 	.word	0x08004b7d
 8004b2c:	08004b7d 	.word	0x08004b7d
 8004b30:	08004b7d 	.word	0x08004b7d
 8004b34:	08004b83 	.word	0x08004b83
 8004b38:	08004b7d 	.word	0x08004b7d
 8004b3c:	08004b7d 	.word	0x08004b7d
 8004b40:	08004b7d 	.word	0x08004b7d
 8004b44:	08004b7d 	.word	0x08004b7d
 8004b48:	08004b7d 	.word	0x08004b7d
 8004b4c:	08004b7d 	.word	0x08004b7d
 8004b50:	08004b7d 	.word	0x08004b7d
 8004b54:	08004b83 	.word	0x08004b83
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	3304      	adds	r3, #4
 8004b5c:	2101      	movs	r1, #1
 8004b5e:	4618      	mov	r0, r3
 8004b60:	f001 fc18 	bl	8006394 <RCCEx_PLL2_Config>
 8004b64:	4603      	mov	r3, r0
 8004b66:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8004b68:	e00c      	b.n	8004b84 <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	3324      	adds	r3, #36	; 0x24
 8004b6e:	2101      	movs	r1, #1
 8004b70:	4618      	mov	r0, r3
 8004b72:	f001 fcc1 	bl	80064f8 <RCCEx_PLL3_Config>
 8004b76:	4603      	mov	r3, r0
 8004b78:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8004b7a:	e003      	b.n	8004b84 <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004b7c:	2301      	movs	r3, #1
 8004b7e:	75fb      	strb	r3, [r7, #23]
      break;
 8004b80:	e000      	b.n	8004b84 <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 8004b82:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004b84:	7dfb      	ldrb	r3, [r7, #23]
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d109      	bne.n	8004b9e <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004b8a:	4b24      	ldr	r3, [pc, #144]	; (8004c1c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004b8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b8e:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004b96:	4921      	ldr	r1, [pc, #132]	; (8004c1c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004b98:	4313      	orrs	r3, r2
 8004b9a:	654b      	str	r3, [r1, #84]	; 0x54
 8004b9c:	e001      	b.n	8004ba2 <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b9e:	7dfb      	ldrb	r3, [r7, #23]
 8004ba0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f003 0302 	and.w	r3, r3, #2
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d03e      	beq.n	8004c2c <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004bb2:	2b05      	cmp	r3, #5
 8004bb4:	d820      	bhi.n	8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 8004bb6:	a201      	add	r2, pc, #4	; (adr r2, 8004bbc <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 8004bb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bbc:	08004bff 	.word	0x08004bff
 8004bc0:	08004bd5 	.word	0x08004bd5
 8004bc4:	08004be7 	.word	0x08004be7
 8004bc8:	08004bff 	.word	0x08004bff
 8004bcc:	08004bff 	.word	0x08004bff
 8004bd0:	08004bff 	.word	0x08004bff
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	3304      	adds	r3, #4
 8004bd8:	2101      	movs	r1, #1
 8004bda:	4618      	mov	r0, r3
 8004bdc:	f001 fbda 	bl	8006394 <RCCEx_PLL2_Config>
 8004be0:	4603      	mov	r3, r0
 8004be2:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8004be4:	e00c      	b.n	8004c00 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	3324      	adds	r3, #36	; 0x24
 8004bea:	2101      	movs	r1, #1
 8004bec:	4618      	mov	r0, r3
 8004bee:	f001 fc83 	bl	80064f8 <RCCEx_PLL3_Config>
 8004bf2:	4603      	mov	r3, r0
 8004bf4:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8004bf6:	e003      	b.n	8004c00 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004bf8:	2301      	movs	r3, #1
 8004bfa:	75fb      	strb	r3, [r7, #23]
      break;
 8004bfc:	e000      	b.n	8004c00 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 8004bfe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004c00:	7dfb      	ldrb	r3, [r7, #23]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d110      	bne.n	8004c28 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004c06:	4b05      	ldr	r3, [pc, #20]	; (8004c1c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004c08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c0a:	f023 0207 	bic.w	r2, r3, #7
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c12:	4902      	ldr	r1, [pc, #8]	; (8004c1c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004c14:	4313      	orrs	r3, r2
 8004c16:	654b      	str	r3, [r1, #84]	; 0x54
 8004c18:	e008      	b.n	8004c2c <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 8004c1a:	bf00      	nop
 8004c1c:	58024400 	.word	0x58024400
 8004c20:	58024800 	.word	0x58024800
 8004c24:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c28:	7dfb      	ldrb	r3, [r7, #23]
 8004c2a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f003 0304 	and.w	r3, r3, #4
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d039      	beq.n	8004cac <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c3e:	2b05      	cmp	r3, #5
 8004c40:	d820      	bhi.n	8004c84 <HAL_RCCEx_PeriphCLKConfig+0x934>
 8004c42:	a201      	add	r2, pc, #4	; (adr r2, 8004c48 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 8004c44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c48:	08004c8b 	.word	0x08004c8b
 8004c4c:	08004c61 	.word	0x08004c61
 8004c50:	08004c73 	.word	0x08004c73
 8004c54:	08004c8b 	.word	0x08004c8b
 8004c58:	08004c8b 	.word	0x08004c8b
 8004c5c:	08004c8b 	.word	0x08004c8b
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	3304      	adds	r3, #4
 8004c64:	2101      	movs	r1, #1
 8004c66:	4618      	mov	r0, r3
 8004c68:	f001 fb94 	bl	8006394 <RCCEx_PLL2_Config>
 8004c6c:	4603      	mov	r3, r0
 8004c6e:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8004c70:	e00c      	b.n	8004c8c <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	3324      	adds	r3, #36	; 0x24
 8004c76:	2101      	movs	r1, #1
 8004c78:	4618      	mov	r0, r3
 8004c7a:	f001 fc3d 	bl	80064f8 <RCCEx_PLL3_Config>
 8004c7e:	4603      	mov	r3, r0
 8004c80:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8004c82:	e003      	b.n	8004c8c <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004c84:	2301      	movs	r3, #1
 8004c86:	75fb      	strb	r3, [r7, #23]
      break;
 8004c88:	e000      	b.n	8004c8c <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 8004c8a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004c8c:	7dfb      	ldrb	r3, [r7, #23]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d10a      	bne.n	8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004c92:	4bb7      	ldr	r3, [pc, #732]	; (8004f70 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004c94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c96:	f023 0207 	bic.w	r2, r3, #7
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ca0:	49b3      	ldr	r1, [pc, #716]	; (8004f70 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004ca2:	4313      	orrs	r3, r2
 8004ca4:	658b      	str	r3, [r1, #88]	; 0x58
 8004ca6:	e001      	b.n	8004cac <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ca8:	7dfb      	ldrb	r3, [r7, #23]
 8004caa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f003 0320 	and.w	r3, r3, #32
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d04b      	beq.n	8004d50 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004cbe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004cc2:	d02e      	beq.n	8004d22 <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 8004cc4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004cc8:	d828      	bhi.n	8004d1c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8004cca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cce:	d02a      	beq.n	8004d26 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8004cd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cd4:	d822      	bhi.n	8004d1c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8004cd6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004cda:	d026      	beq.n	8004d2a <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8004cdc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004ce0:	d81c      	bhi.n	8004d1c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8004ce2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004ce6:	d010      	beq.n	8004d0a <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 8004ce8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004cec:	d816      	bhi.n	8004d1c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d01d      	beq.n	8004d2e <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8004cf2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004cf6:	d111      	bne.n	8004d1c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	3304      	adds	r3, #4
 8004cfc:	2100      	movs	r1, #0
 8004cfe:	4618      	mov	r0, r3
 8004d00:	f001 fb48 	bl	8006394 <RCCEx_PLL2_Config>
 8004d04:	4603      	mov	r3, r0
 8004d06:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8004d08:	e012      	b.n	8004d30 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	3324      	adds	r3, #36	; 0x24
 8004d0e:	2102      	movs	r1, #2
 8004d10:	4618      	mov	r0, r3
 8004d12:	f001 fbf1 	bl	80064f8 <RCCEx_PLL3_Config>
 8004d16:	4603      	mov	r3, r0
 8004d18:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8004d1a:	e009      	b.n	8004d30 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004d1c:	2301      	movs	r3, #1
 8004d1e:	75fb      	strb	r3, [r7, #23]
      break;
 8004d20:	e006      	b.n	8004d30 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8004d22:	bf00      	nop
 8004d24:	e004      	b.n	8004d30 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8004d26:	bf00      	nop
 8004d28:	e002      	b.n	8004d30 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8004d2a:	bf00      	nop
 8004d2c:	e000      	b.n	8004d30 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8004d2e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004d30:	7dfb      	ldrb	r3, [r7, #23]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d10a      	bne.n	8004d4c <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004d36:	4b8e      	ldr	r3, [pc, #568]	; (8004f70 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004d38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d3a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004d44:	498a      	ldr	r1, [pc, #552]	; (8004f70 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004d46:	4313      	orrs	r3, r2
 8004d48:	654b      	str	r3, [r1, #84]	; 0x54
 8004d4a:	e001      	b.n	8004d50 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d4c:	7dfb      	ldrb	r3, [r7, #23]
 8004d4e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d04b      	beq.n	8004df4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004d62:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004d66:	d02e      	beq.n	8004dc6 <HAL_RCCEx_PeriphCLKConfig+0xa76>
 8004d68:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004d6c:	d828      	bhi.n	8004dc0 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8004d6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d72:	d02a      	beq.n	8004dca <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8004d74:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d78:	d822      	bhi.n	8004dc0 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8004d7a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004d7e:	d026      	beq.n	8004dce <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8004d80:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004d84:	d81c      	bhi.n	8004dc0 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8004d86:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d8a:	d010      	beq.n	8004dae <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 8004d8c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d90:	d816      	bhi.n	8004dc0 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d01d      	beq.n	8004dd2 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8004d96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d9a:	d111      	bne.n	8004dc0 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	3304      	adds	r3, #4
 8004da0:	2100      	movs	r1, #0
 8004da2:	4618      	mov	r0, r3
 8004da4:	f001 faf6 	bl	8006394 <RCCEx_PLL2_Config>
 8004da8:	4603      	mov	r3, r0
 8004daa:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8004dac:	e012      	b.n	8004dd4 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	3324      	adds	r3, #36	; 0x24
 8004db2:	2102      	movs	r1, #2
 8004db4:	4618      	mov	r0, r3
 8004db6:	f001 fb9f 	bl	80064f8 <RCCEx_PLL3_Config>
 8004dba:	4603      	mov	r3, r0
 8004dbc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8004dbe:	e009      	b.n	8004dd4 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004dc0:	2301      	movs	r3, #1
 8004dc2:	75fb      	strb	r3, [r7, #23]
      break;
 8004dc4:	e006      	b.n	8004dd4 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8004dc6:	bf00      	nop
 8004dc8:	e004      	b.n	8004dd4 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8004dca:	bf00      	nop
 8004dcc:	e002      	b.n	8004dd4 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8004dce:	bf00      	nop
 8004dd0:	e000      	b.n	8004dd4 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8004dd2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004dd4:	7dfb      	ldrb	r3, [r7, #23]
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d10a      	bne.n	8004df0 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004dda:	4b65      	ldr	r3, [pc, #404]	; (8004f70 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004ddc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004dde:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004de8:	4961      	ldr	r1, [pc, #388]	; (8004f70 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004dea:	4313      	orrs	r3, r2
 8004dec:	658b      	str	r3, [r1, #88]	; 0x58
 8004dee:	e001      	b.n	8004df4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004df0:	7dfb      	ldrb	r3, [r7, #23]
 8004df2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d04b      	beq.n	8004e98 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004e06:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004e0a:	d02e      	beq.n	8004e6a <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 8004e0c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004e10:	d828      	bhi.n	8004e64 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8004e12:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e16:	d02a      	beq.n	8004e6e <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 8004e18:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e1c:	d822      	bhi.n	8004e64 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8004e1e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004e22:	d026      	beq.n	8004e72 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8004e24:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004e28:	d81c      	bhi.n	8004e64 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8004e2a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004e2e:	d010      	beq.n	8004e52 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8004e30:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004e34:	d816      	bhi.n	8004e64 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d01d      	beq.n	8004e76 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8004e3a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e3e:	d111      	bne.n	8004e64 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	3304      	adds	r3, #4
 8004e44:	2100      	movs	r1, #0
 8004e46:	4618      	mov	r0, r3
 8004e48:	f001 faa4 	bl	8006394 <RCCEx_PLL2_Config>
 8004e4c:	4603      	mov	r3, r0
 8004e4e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8004e50:	e012      	b.n	8004e78 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	3324      	adds	r3, #36	; 0x24
 8004e56:	2102      	movs	r1, #2
 8004e58:	4618      	mov	r0, r3
 8004e5a:	f001 fb4d 	bl	80064f8 <RCCEx_PLL3_Config>
 8004e5e:	4603      	mov	r3, r0
 8004e60:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8004e62:	e009      	b.n	8004e78 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004e64:	2301      	movs	r3, #1
 8004e66:	75fb      	strb	r3, [r7, #23]
      break;
 8004e68:	e006      	b.n	8004e78 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8004e6a:	bf00      	nop
 8004e6c:	e004      	b.n	8004e78 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8004e6e:	bf00      	nop
 8004e70:	e002      	b.n	8004e78 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8004e72:	bf00      	nop
 8004e74:	e000      	b.n	8004e78 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8004e76:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004e78:	7dfb      	ldrb	r3, [r7, #23]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d10a      	bne.n	8004e94 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004e7e:	4b3c      	ldr	r3, [pc, #240]	; (8004f70 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004e80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e82:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004e8c:	4938      	ldr	r1, [pc, #224]	; (8004f70 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004e8e:	4313      	orrs	r3, r2
 8004e90:	658b      	str	r3, [r1, #88]	; 0x58
 8004e92:	e001      	b.n	8004e98 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e94:	7dfb      	ldrb	r3, [r7, #23]
 8004e96:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f003 0308 	and.w	r3, r3, #8
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d01a      	beq.n	8004eda <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004eaa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004eae:	d10a      	bne.n	8004ec6 <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	3324      	adds	r3, #36	; 0x24
 8004eb4:	2102      	movs	r1, #2
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	f001 fb1e 	bl	80064f8 <RCCEx_PLL3_Config>
 8004ebc:	4603      	mov	r3, r0
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d001      	beq.n	8004ec6 <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 8004ec2:	2301      	movs	r3, #1
 8004ec4:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004ec6:	4b2a      	ldr	r3, [pc, #168]	; (8004f70 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004ec8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004eca:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004ed4:	4926      	ldr	r1, [pc, #152]	; (8004f70 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004ed6:	4313      	orrs	r3, r2
 8004ed8:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f003 0310 	and.w	r3, r3, #16
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d01a      	beq.n	8004f1c <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004eec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ef0:	d10a      	bne.n	8004f08 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	3324      	adds	r3, #36	; 0x24
 8004ef6:	2102      	movs	r1, #2
 8004ef8:	4618      	mov	r0, r3
 8004efa:	f001 fafd 	bl	80064f8 <RCCEx_PLL3_Config>
 8004efe:	4603      	mov	r3, r0
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d001      	beq.n	8004f08 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 8004f04:	2301      	movs	r3, #1
 8004f06:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004f08:	4b19      	ldr	r3, [pc, #100]	; (8004f70 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004f0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f0c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f16:	4916      	ldr	r1, [pc, #88]	; (8004f70 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004f18:	4313      	orrs	r3, r2
 8004f1a:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d036      	beq.n	8004f96 <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004f2e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004f32:	d01f      	beq.n	8004f74 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8004f34:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004f38:	d817      	bhi.n	8004f6a <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d003      	beq.n	8004f46 <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 8004f3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f42:	d009      	beq.n	8004f58 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8004f44:	e011      	b.n	8004f6a <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	3304      	adds	r3, #4
 8004f4a:	2100      	movs	r1, #0
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	f001 fa21 	bl	8006394 <RCCEx_PLL2_Config>
 8004f52:	4603      	mov	r3, r0
 8004f54:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8004f56:	e00e      	b.n	8004f76 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	3324      	adds	r3, #36	; 0x24
 8004f5c:	2102      	movs	r1, #2
 8004f5e:	4618      	mov	r0, r3
 8004f60:	f001 faca 	bl	80064f8 <RCCEx_PLL3_Config>
 8004f64:	4603      	mov	r3, r0
 8004f66:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8004f68:	e005      	b.n	8004f76 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004f6a:	2301      	movs	r3, #1
 8004f6c:	75fb      	strb	r3, [r7, #23]
      break;
 8004f6e:	e002      	b.n	8004f76 <HAL_RCCEx_PeriphCLKConfig+0xc26>
 8004f70:	58024400 	.word	0x58024400
      break;
 8004f74:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004f76:	7dfb      	ldrb	r3, [r7, #23]
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d10a      	bne.n	8004f92 <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004f7c:	4b93      	ldr	r3, [pc, #588]	; (80051cc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004f7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f80:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004f8a:	4990      	ldr	r1, [pc, #576]	; (80051cc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004f8c:	4313      	orrs	r3, r2
 8004f8e:	658b      	str	r3, [r1, #88]	; 0x58
 8004f90:	e001      	b.n	8004f96 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f92:	7dfb      	ldrb	r3, [r7, #23]
 8004f94:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d033      	beq.n	800500a <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004fa8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004fac:	d01c      	beq.n	8004fe8 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 8004fae:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004fb2:	d816      	bhi.n	8004fe2 <HAL_RCCEx_PeriphCLKConfig+0xc92>
 8004fb4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004fb8:	d003      	beq.n	8004fc2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
 8004fba:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004fbe:	d007      	beq.n	8004fd0 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 8004fc0:	e00f      	b.n	8004fe2 <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004fc2:	4b82      	ldr	r3, [pc, #520]	; (80051cc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004fc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fc6:	4a81      	ldr	r2, [pc, #516]	; (80051cc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004fc8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004fcc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8004fce:	e00c      	b.n	8004fea <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	3324      	adds	r3, #36	; 0x24
 8004fd4:	2101      	movs	r1, #1
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	f001 fa8e 	bl	80064f8 <RCCEx_PLL3_Config>
 8004fdc:	4603      	mov	r3, r0
 8004fde:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8004fe0:	e003      	b.n	8004fea <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004fe2:	2301      	movs	r3, #1
 8004fe4:	75fb      	strb	r3, [r7, #23]
      break;
 8004fe6:	e000      	b.n	8004fea <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 8004fe8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004fea:	7dfb      	ldrb	r3, [r7, #23]
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d10a      	bne.n	8005006 <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004ff0:	4b76      	ldr	r3, [pc, #472]	; (80051cc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004ff2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ff4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ffe:	4973      	ldr	r1, [pc, #460]	; (80051cc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005000:	4313      	orrs	r3, r2
 8005002:	654b      	str	r3, [r1, #84]	; 0x54
 8005004:	e001      	b.n	800500a <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005006:	7dfb      	ldrb	r3, [r7, #23]
 8005008:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005012:	2b00      	cmp	r3, #0
 8005014:	d029      	beq.n	800506a <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800501a:	2b00      	cmp	r3, #0
 800501c:	d003      	beq.n	8005026 <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 800501e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005022:	d007      	beq.n	8005034 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 8005024:	e00f      	b.n	8005046 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005026:	4b69      	ldr	r3, [pc, #420]	; (80051cc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005028:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800502a:	4a68      	ldr	r2, [pc, #416]	; (80051cc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800502c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005030:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8005032:	e00b      	b.n	800504c <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	3304      	adds	r3, #4
 8005038:	2102      	movs	r1, #2
 800503a:	4618      	mov	r0, r3
 800503c:	f001 f9aa 	bl	8006394 <RCCEx_PLL2_Config>
 8005040:	4603      	mov	r3, r0
 8005042:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8005044:	e002      	b.n	800504c <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 8005046:	2301      	movs	r3, #1
 8005048:	75fb      	strb	r3, [r7, #23]
      break;
 800504a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800504c:	7dfb      	ldrb	r3, [r7, #23]
 800504e:	2b00      	cmp	r3, #0
 8005050:	d109      	bne.n	8005066 <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8005052:	4b5e      	ldr	r3, [pc, #376]	; (80051cc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005054:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005056:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800505e:	495b      	ldr	r1, [pc, #364]	; (80051cc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005060:	4313      	orrs	r3, r2
 8005062:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005064:	e001      	b.n	800506a <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005066:	7dfb      	ldrb	r3, [r7, #23]
 8005068:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005072:	2b00      	cmp	r3, #0
 8005074:	d00a      	beq.n	800508c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	3324      	adds	r3, #36	; 0x24
 800507a:	2102      	movs	r1, #2
 800507c:	4618      	mov	r0, r3
 800507e:	f001 fa3b 	bl	80064f8 <RCCEx_PLL3_Config>
 8005082:	4603      	mov	r3, r0
 8005084:	2b00      	cmp	r3, #0
 8005086:	d001      	beq.n	800508c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 8005088:	2301      	movs	r3, #1
 800508a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005094:	2b00      	cmp	r3, #0
 8005096:	d030      	beq.n	80050fa <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800509c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80050a0:	d017      	beq.n	80050d2 <HAL_RCCEx_PeriphCLKConfig+0xd82>
 80050a2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80050a6:	d811      	bhi.n	80050cc <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 80050a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80050ac:	d013      	beq.n	80050d6 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 80050ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80050b2:	d80b      	bhi.n	80050cc <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d010      	beq.n	80050da <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 80050b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80050bc:	d106      	bne.n	80050cc <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80050be:	4b43      	ldr	r3, [pc, #268]	; (80051cc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80050c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050c2:	4a42      	ldr	r2, [pc, #264]	; (80051cc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80050c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80050c8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80050ca:	e007      	b.n	80050dc <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80050cc:	2301      	movs	r3, #1
 80050ce:	75fb      	strb	r3, [r7, #23]
      break;
 80050d0:	e004      	b.n	80050dc <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 80050d2:	bf00      	nop
 80050d4:	e002      	b.n	80050dc <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 80050d6:	bf00      	nop
 80050d8:	e000      	b.n	80050dc <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 80050da:	bf00      	nop
    }

    if(ret == HAL_OK)
 80050dc:	7dfb      	ldrb	r3, [r7, #23]
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d109      	bne.n	80050f6 <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80050e2:	4b3a      	ldr	r3, [pc, #232]	; (80051cc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80050e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050e6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80050ee:	4937      	ldr	r1, [pc, #220]	; (80051cc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80050f0:	4313      	orrs	r3, r2
 80050f2:	654b      	str	r3, [r1, #84]	; 0x54
 80050f4:	e001      	b.n	80050fa <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050f6:	7dfb      	ldrb	r3, [r7, #23]
 80050f8:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005102:	2b00      	cmp	r3, #0
 8005104:	d008      	beq.n	8005118 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005106:	4b31      	ldr	r3, [pc, #196]	; (80051cc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005108:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800510a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005112:	492e      	ldr	r1, [pc, #184]	; (80051cc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005114:	4313      	orrs	r3, r2
 8005116:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005120:	2b00      	cmp	r3, #0
 8005122:	d009      	beq.n	8005138 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8005124:	4b29      	ldr	r3, [pc, #164]	; (80051cc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005126:	691b      	ldr	r3, [r3, #16]
 8005128:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005132:	4926      	ldr	r1, [pc, #152]	; (80051cc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005134:	4313      	orrs	r3, r2
 8005136:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005140:	2b00      	cmp	r3, #0
 8005142:	d008      	beq.n	8005156 <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005144:	4b21      	ldr	r3, [pc, #132]	; (80051cc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005146:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005148:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005150:	491e      	ldr	r1, [pc, #120]	; (80051cc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005152:	4313      	orrs	r3, r2
 8005154:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800515e:	2b00      	cmp	r3, #0
 8005160:	d00d      	beq.n	800517e <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005162:	4b1a      	ldr	r3, [pc, #104]	; (80051cc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005164:	691b      	ldr	r3, [r3, #16]
 8005166:	4a19      	ldr	r2, [pc, #100]	; (80051cc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005168:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800516c:	6113      	str	r3, [r2, #16]
 800516e:	4b17      	ldr	r3, [pc, #92]	; (80051cc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005170:	691a      	ldr	r2, [r3, #16]
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8005178:	4914      	ldr	r1, [pc, #80]	; (80051cc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800517a:	4313      	orrs	r3, r2
 800517c:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	2b00      	cmp	r3, #0
 8005184:	da08      	bge.n	8005198 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8005186:	4b11      	ldr	r3, [pc, #68]	; (80051cc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005188:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800518a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005192:	490e      	ldr	r1, [pc, #56]	; (80051cc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005194:	4313      	orrs	r3, r2
 8005196:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d009      	beq.n	80051b8 <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80051a4:	4b09      	ldr	r3, [pc, #36]	; (80051cc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80051a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051a8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051b2:	4906      	ldr	r1, [pc, #24]	; (80051cc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80051b4:	4313      	orrs	r3, r2
 80051b6:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 80051b8:	7dbb      	ldrb	r3, [r7, #22]
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d101      	bne.n	80051c2 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 80051be:	2300      	movs	r3, #0
 80051c0:	e000      	b.n	80051c4 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 80051c2:	2301      	movs	r3, #1
}
 80051c4:	4618      	mov	r0, r3
 80051c6:	3718      	adds	r7, #24
 80051c8:	46bd      	mov	sp, r7
 80051ca:	bd80      	pop	{r7, pc}
 80051cc:	58024400 	.word	0x58024400

080051d0 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80051d0:	b580      	push	{r7, lr}
 80051d2:	b090      	sub	sp, #64	; 0x40
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80051de:	f040 8095 	bne.w	800530c <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 80051e2:	4bae      	ldr	r3, [pc, #696]	; (800549c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80051e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051e6:	f003 0307 	and.w	r3, r3, #7
 80051ea:	633b      	str	r3, [r7, #48]	; 0x30
 80051ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051ee:	2b04      	cmp	r3, #4
 80051f0:	f200 8088 	bhi.w	8005304 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 80051f4:	a201      	add	r2, pc, #4	; (adr r2, 80051fc <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 80051f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051fa:	bf00      	nop
 80051fc:	08005211 	.word	0x08005211
 8005200:	08005239 	.word	0x08005239
 8005204:	08005261 	.word	0x08005261
 8005208:	080052fd 	.word	0x080052fd
 800520c:	08005289 	.word	0x08005289

      switch (saiclocksource)
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005210:	4ba2      	ldr	r3, [pc, #648]	; (800549c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005218:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800521c:	d108      	bne.n	8005230 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800521e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005222:	4618      	mov	r0, r3
 8005224:	f000 ff64 	bl	80060f0 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 8005228:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800522a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800522c:	f000 bc95 	b.w	8005b5a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8005230:	2300      	movs	r3, #0
 8005232:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005234:	f000 bc91 	b.w	8005b5a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005238:	4b98      	ldr	r3, [pc, #608]	; (800549c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005240:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005244:	d108      	bne.n	8005258 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005246:	f107 0318 	add.w	r3, r7, #24
 800524a:	4618      	mov	r0, r3
 800524c:	f000 fca8 	bl	8005ba0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005250:	69bb      	ldr	r3, [r7, #24]
 8005252:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005254:	f000 bc81 	b.w	8005b5a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8005258:	2300      	movs	r3, #0
 800525a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800525c:	f000 bc7d 	b.w	8005b5a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005260:	4b8e      	ldr	r3, [pc, #568]	; (800549c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005268:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800526c:	d108      	bne.n	8005280 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800526e:	f107 030c 	add.w	r3, r7, #12
 8005272:	4618      	mov	r0, r3
 8005274:	f000 fde8 	bl	8005e48 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800527c:	f000 bc6d 	b.w	8005b5a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8005280:	2300      	movs	r3, #0
 8005282:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005284:	f000 bc69 	b.w	8005b5a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8005288:	4b84      	ldr	r3, [pc, #528]	; (800549c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800528a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800528c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005290:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005292:	4b82      	ldr	r3, [pc, #520]	; (800549c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f003 0304 	and.w	r3, r3, #4
 800529a:	2b04      	cmp	r3, #4
 800529c:	d10c      	bne.n	80052b8 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 800529e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d109      	bne.n	80052b8 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80052a4:	4b7d      	ldr	r3, [pc, #500]	; (800549c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	08db      	lsrs	r3, r3, #3
 80052aa:	f003 0303 	and.w	r3, r3, #3
 80052ae:	4a7c      	ldr	r2, [pc, #496]	; (80054a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 80052b0:	fa22 f303 	lsr.w	r3, r2, r3
 80052b4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80052b6:	e01f      	b.n	80052f8 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80052b8:	4b78      	ldr	r3, [pc, #480]	; (800549c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80052c4:	d106      	bne.n	80052d4 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 80052c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052c8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80052cc:	d102      	bne.n	80052d4 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80052ce:	4b75      	ldr	r3, [pc, #468]	; (80054a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 80052d0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80052d2:	e011      	b.n	80052f8 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80052d4:	4b71      	ldr	r3, [pc, #452]	; (800549c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052dc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80052e0:	d106      	bne.n	80052f0 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 80052e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80052e8:	d102      	bne.n	80052f0 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80052ea:	4b6f      	ldr	r3, [pc, #444]	; (80054a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 80052ec:	63fb      	str	r3, [r7, #60]	; 0x3c
 80052ee:	e003      	b.n	80052f8 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80052f0:	2300      	movs	r3, #0
 80052f2:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80052f4:	f000 bc31 	b.w	8005b5a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80052f8:	f000 bc2f 	b.w	8005b5a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80052fc:	4b6b      	ldr	r3, [pc, #428]	; (80054ac <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 80052fe:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005300:	f000 bc2b 	b.w	8005b5a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 8005304:	2300      	movs	r3, #0
 8005306:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005308:	f000 bc27 	b.w	8005b5a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005312:	f040 8095 	bne.w	8005440 <HAL_RCCEx_GetPeriphCLKFreq+0x270>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 8005316:	4b61      	ldr	r3, [pc, #388]	; (800549c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8005318:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800531a:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800531e:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8005320:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005322:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005326:	d04d      	beq.n	80053c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 8005328:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800532a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800532e:	f200 8084 	bhi.w	800543a <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8005332:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005334:	2bc0      	cmp	r3, #192	; 0xc0
 8005336:	d07d      	beq.n	8005434 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 8005338:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800533a:	2bc0      	cmp	r3, #192	; 0xc0
 800533c:	d87d      	bhi.n	800543a <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800533e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005340:	2b80      	cmp	r3, #128	; 0x80
 8005342:	d02d      	beq.n	80053a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 8005344:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005346:	2b80      	cmp	r3, #128	; 0x80
 8005348:	d877      	bhi.n	800543a <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800534a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800534c:	2b00      	cmp	r3, #0
 800534e:	d003      	beq.n	8005358 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
 8005350:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005352:	2b40      	cmp	r3, #64	; 0x40
 8005354:	d012      	beq.n	800537c <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 8005356:	e070      	b.n	800543a <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
      {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005358:	4b50      	ldr	r3, [pc, #320]	; (800549c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005360:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005364:	d107      	bne.n	8005376 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005366:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800536a:	4618      	mov	r0, r3
 800536c:	f000 fec0 	bl	80060f0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005370:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005372:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005374:	e3f1      	b.n	8005b5a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8005376:	2300      	movs	r3, #0
 8005378:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800537a:	e3ee      	b.n	8005b5a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800537c:	4b47      	ldr	r3, [pc, #284]	; (800549c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005384:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005388:	d107      	bne.n	800539a <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800538a:	f107 0318 	add.w	r3, r7, #24
 800538e:	4618      	mov	r0, r3
 8005390:	f000 fc06 	bl	8005ba0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005394:	69bb      	ldr	r3, [r7, #24]
 8005396:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005398:	e3df      	b.n	8005b5a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800539a:	2300      	movs	r3, #0
 800539c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800539e:	e3dc      	b.n	8005b5a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80053a0:	4b3e      	ldr	r3, [pc, #248]	; (800549c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80053a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80053ac:	d107      	bne.n	80053be <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80053ae:	f107 030c 	add.w	r3, r7, #12
 80053b2:	4618      	mov	r0, r3
 80053b4:	f000 fd48 	bl	8005e48 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80053bc:	e3cd      	b.n	8005b5a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80053be:	2300      	movs	r3, #0
 80053c0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80053c2:	e3ca      	b.n	8005b5a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80053c4:	4b35      	ldr	r3, [pc, #212]	; (800549c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80053c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053c8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80053cc:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80053ce:	4b33      	ldr	r3, [pc, #204]	; (800549c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f003 0304 	and.w	r3, r3, #4
 80053d6:	2b04      	cmp	r3, #4
 80053d8:	d10c      	bne.n	80053f4 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
 80053da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d109      	bne.n	80053f4 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80053e0:	4b2e      	ldr	r3, [pc, #184]	; (800549c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	08db      	lsrs	r3, r3, #3
 80053e6:	f003 0303 	and.w	r3, r3, #3
 80053ea:	4a2d      	ldr	r2, [pc, #180]	; (80054a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 80053ec:	fa22 f303 	lsr.w	r3, r2, r3
 80053f0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80053f2:	e01e      	b.n	8005432 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80053f4:	4b29      	ldr	r3, [pc, #164]	; (800549c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005400:	d106      	bne.n	8005410 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 8005402:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005404:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005408:	d102      	bne.n	8005410 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800540a:	4b26      	ldr	r3, [pc, #152]	; (80054a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 800540c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800540e:	e010      	b.n	8005432 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005410:	4b22      	ldr	r3, [pc, #136]	; (800549c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005418:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800541c:	d106      	bne.n	800542c <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 800541e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005420:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005424:	d102      	bne.n	800542c <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8005426:	4b20      	ldr	r3, [pc, #128]	; (80054a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 8005428:	63fb      	str	r3, [r7, #60]	; 0x3c
 800542a:	e002      	b.n	8005432 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800542c:	2300      	movs	r3, #0
 800542e:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8005430:	e393      	b.n	8005b5a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8005432:	e392      	b.n	8005b5a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8005434:	4b1d      	ldr	r3, [pc, #116]	; (80054ac <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8005436:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005438:	e38f      	b.n	8005b5a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 800543a:	2300      	movs	r3, #0
 800543c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800543e:	e38c      	b.n	8005b5a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005446:	f040 80a7 	bne.w	8005598 <HAL_RCCEx_GetPeriphCLKFreq+0x3c8>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 800544a:	4b14      	ldr	r3, [pc, #80]	; (800549c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800544c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800544e:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8005452:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8005454:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005456:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800545a:	d05f      	beq.n	800551c <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 800545c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800545e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005462:	f200 8096 	bhi.w	8005592 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8005466:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005468:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800546c:	f000 808e 	beq.w	800558c <HAL_RCCEx_GetPeriphCLKFreq+0x3bc>
 8005470:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005472:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005476:	f200 808c 	bhi.w	8005592 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 800547a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800547c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005480:	d03a      	beq.n	80054f8 <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 8005482:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005484:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005488:	f200 8083 	bhi.w	8005592 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 800548c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800548e:	2b00      	cmp	r3, #0
 8005490:	d00e      	beq.n	80054b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>
 8005492:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005494:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005498:	d01c      	beq.n	80054d4 <HAL_RCCEx_GetPeriphCLKFreq+0x304>
 800549a:	e07a      	b.n	8005592 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 800549c:	58024400 	.word	0x58024400
 80054a0:	03d09000 	.word	0x03d09000
 80054a4:	003d0900 	.word	0x003d0900
 80054a8:	017d7840 	.word	0x017d7840
 80054ac:	00bb8000 	.word	0x00bb8000
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80054b0:	4baa      	ldr	r3, [pc, #680]	; (800575c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054b8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80054bc:	d107      	bne.n	80054ce <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80054be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80054c2:	4618      	mov	r0, r3
 80054c4:	f000 fe14 	bl	80060f0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80054c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054ca:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80054cc:	e345      	b.n	8005b5a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80054ce:	2300      	movs	r3, #0
 80054d0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80054d2:	e342      	b.n	8005b5a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80054d4:	4ba1      	ldr	r3, [pc, #644]	; (800575c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80054dc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80054e0:	d107      	bne.n	80054f2 <HAL_RCCEx_GetPeriphCLKFreq+0x322>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80054e2:	f107 0318 	add.w	r3, r7, #24
 80054e6:	4618      	mov	r0, r3
 80054e8:	f000 fb5a 	bl	8005ba0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80054ec:	69bb      	ldr	r3, [r7, #24]
 80054ee:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80054f0:	e333      	b.n	8005b5a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80054f2:	2300      	movs	r3, #0
 80054f4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80054f6:	e330      	b.n	8005b5a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80054f8:	4b98      	ldr	r3, [pc, #608]	; (800575c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005500:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005504:	d107      	bne.n	8005516 <HAL_RCCEx_GetPeriphCLKFreq+0x346>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005506:	f107 030c 	add.w	r3, r7, #12
 800550a:	4618      	mov	r0, r3
 800550c:	f000 fc9c 	bl	8005e48 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005514:	e321      	b.n	8005b5a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8005516:	2300      	movs	r3, #0
 8005518:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800551a:	e31e      	b.n	8005b5a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800551c:	4b8f      	ldr	r3, [pc, #572]	; (800575c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800551e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005520:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005524:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005526:	4b8d      	ldr	r3, [pc, #564]	; (800575c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f003 0304 	and.w	r3, r3, #4
 800552e:	2b04      	cmp	r3, #4
 8005530:	d10c      	bne.n	800554c <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
 8005532:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005534:	2b00      	cmp	r3, #0
 8005536:	d109      	bne.n	800554c <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005538:	4b88      	ldr	r3, [pc, #544]	; (800575c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	08db      	lsrs	r3, r3, #3
 800553e:	f003 0303 	and.w	r3, r3, #3
 8005542:	4a87      	ldr	r2, [pc, #540]	; (8005760 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005544:	fa22 f303 	lsr.w	r3, r2, r3
 8005548:	63fb      	str	r3, [r7, #60]	; 0x3c
 800554a:	e01e      	b.n	800558a <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800554c:	4b83      	ldr	r3, [pc, #524]	; (800575c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005554:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005558:	d106      	bne.n	8005568 <HAL_RCCEx_GetPeriphCLKFreq+0x398>
 800555a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800555c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005560:	d102      	bne.n	8005568 <HAL_RCCEx_GetPeriphCLKFreq+0x398>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8005562:	4b80      	ldr	r3, [pc, #512]	; (8005764 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8005564:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005566:	e010      	b.n	800558a <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005568:	4b7c      	ldr	r3, [pc, #496]	; (800575c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005570:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005574:	d106      	bne.n	8005584 <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
 8005576:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005578:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800557c:	d102      	bne.n	8005584 <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800557e:	4b7a      	ldr	r3, [pc, #488]	; (8005768 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8005580:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005582:	e002      	b.n	800558a <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8005584:	2300      	movs	r3, #0
 8005586:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8005588:	e2e7      	b.n	8005b5a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800558a:	e2e6      	b.n	8005b5a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800558c:	4b77      	ldr	r3, [pc, #476]	; (800576c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800558e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005590:	e2e3      	b.n	8005b5a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 8005592:	2300      	movs	r3, #0
 8005594:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005596:	e2e0      	b.n	8005b5a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800559e:	f040 809c 	bne.w	80056da <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 80055a2:	4b6e      	ldr	r3, [pc, #440]	; (800575c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80055a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055a6:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 80055aa:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80055ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055ae:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80055b2:	d054      	beq.n	800565e <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
 80055b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055b6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80055ba:	f200 808b 	bhi.w	80056d4 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 80055be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055c0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80055c4:	f000 8083 	beq.w	80056ce <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
 80055c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055ca:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80055ce:	f200 8081 	bhi.w	80056d4 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 80055d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055d4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80055d8:	d02f      	beq.n	800563a <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 80055da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055dc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80055e0:	d878      	bhi.n	80056d4 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 80055e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d004      	beq.n	80055f2 <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 80055e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055ea:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80055ee:	d012      	beq.n	8005616 <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 80055f0:	e070      	b.n	80056d4 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80055f2:	4b5a      	ldr	r3, [pc, #360]	; (800575c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055fa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80055fe:	d107      	bne.n	8005610 <HAL_RCCEx_GetPeriphCLKFreq+0x440>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005600:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005604:	4618      	mov	r0, r3
 8005606:	f000 fd73 	bl	80060f0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800560a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800560c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800560e:	e2a4      	b.n	8005b5a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8005610:	2300      	movs	r3, #0
 8005612:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005614:	e2a1      	b.n	8005b5a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005616:	4b51      	ldr	r3, [pc, #324]	; (800575c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800561e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005622:	d107      	bne.n	8005634 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005624:	f107 0318 	add.w	r3, r7, #24
 8005628:	4618      	mov	r0, r3
 800562a:	f000 fab9 	bl	8005ba0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800562e:	69bb      	ldr	r3, [r7, #24]
 8005630:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 8005632:	e292      	b.n	8005b5a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8005634:	2300      	movs	r3, #0
 8005636:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005638:	e28f      	b.n	8005b5a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800563a:	4b48      	ldr	r3, [pc, #288]	; (800575c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005642:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005646:	d107      	bne.n	8005658 <HAL_RCCEx_GetPeriphCLKFreq+0x488>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005648:	f107 030c 	add.w	r3, r7, #12
 800564c:	4618      	mov	r0, r3
 800564e:	f000 fbfb 	bl	8005e48 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005656:	e280      	b.n	8005b5a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8005658:	2300      	movs	r3, #0
 800565a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800565c:	e27d      	b.n	8005b5a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800565e:	4b3f      	ldr	r3, [pc, #252]	; (800575c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005660:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005662:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005666:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005668:	4b3c      	ldr	r3, [pc, #240]	; (800575c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f003 0304 	and.w	r3, r3, #4
 8005670:	2b04      	cmp	r3, #4
 8005672:	d10c      	bne.n	800568e <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 8005674:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005676:	2b00      	cmp	r3, #0
 8005678:	d109      	bne.n	800568e <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800567a:	4b38      	ldr	r3, [pc, #224]	; (800575c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	08db      	lsrs	r3, r3, #3
 8005680:	f003 0303 	and.w	r3, r3, #3
 8005684:	4a36      	ldr	r2, [pc, #216]	; (8005760 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005686:	fa22 f303 	lsr.w	r3, r2, r3
 800568a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800568c:	e01e      	b.n	80056cc <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800568e:	4b33      	ldr	r3, [pc, #204]	; (800575c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005696:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800569a:	d106      	bne.n	80056aa <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
 800569c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800569e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80056a2:	d102      	bne.n	80056aa <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80056a4:	4b2f      	ldr	r3, [pc, #188]	; (8005764 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 80056a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80056a8:	e010      	b.n	80056cc <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80056aa:	4b2c      	ldr	r3, [pc, #176]	; (800575c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056b2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80056b6:	d106      	bne.n	80056c6 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 80056b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80056be:	d102      	bne.n	80056c6 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80056c0:	4b29      	ldr	r3, [pc, #164]	; (8005768 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80056c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80056c4:	e002      	b.n	80056cc <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80056c6:	2300      	movs	r3, #0
 80056c8:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80056ca:	e246      	b.n	8005b5a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80056cc:	e245      	b.n	8005b5a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80056ce:	4b27      	ldr	r3, [pc, #156]	; (800576c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80056d0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80056d2:	e242      	b.n	8005b5a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 80056d4:	2300      	movs	r3, #0
 80056d6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80056d8:	e23f      	b.n	8005b5a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056e0:	f040 80a8 	bne.w	8005834 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 80056e4:	4b1d      	ldr	r3, [pc, #116]	; (800575c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80056e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056e8:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80056ec:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80056ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056f0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80056f4:	d060      	beq.n	80057b8 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
 80056f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056f8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80056fc:	f200 8097 	bhi.w	800582e <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 8005700:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005702:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005706:	f000 808f 	beq.w	8005828 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
 800570a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800570c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005710:	f200 808d 	bhi.w	800582e <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 8005714:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005716:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800571a:	d03b      	beq.n	8005794 <HAL_RCCEx_GetPeriphCLKFreq+0x5c4>
 800571c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800571e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005722:	f200 8084 	bhi.w	800582e <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 8005726:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005728:	2b00      	cmp	r3, #0
 800572a:	d004      	beq.n	8005736 <HAL_RCCEx_GetPeriphCLKFreq+0x566>
 800572c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800572e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005732:	d01d      	beq.n	8005770 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>
 8005734:	e07b      	b.n	800582e <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005736:	4b09      	ldr	r3, [pc, #36]	; (800575c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800573e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005742:	d107      	bne.n	8005754 <HAL_RCCEx_GetPeriphCLKFreq+0x584>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005744:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005748:	4618      	mov	r0, r3
 800574a:	f000 fcd1 	bl	80060f0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800574e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005750:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005752:	e202      	b.n	8005b5a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8005754:	2300      	movs	r3, #0
 8005756:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005758:	e1ff      	b.n	8005b5a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800575a:	bf00      	nop
 800575c:	58024400 	.word	0x58024400
 8005760:	03d09000 	.word	0x03d09000
 8005764:	003d0900 	.word	0x003d0900
 8005768:	017d7840 	.word	0x017d7840
 800576c:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005770:	4ba3      	ldr	r3, [pc, #652]	; (8005a00 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005778:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800577c:	d107      	bne.n	800578e <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800577e:	f107 0318 	add.w	r3, r7, #24
 8005782:	4618      	mov	r0, r3
 8005784:	f000 fa0c 	bl	8005ba0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005788:	69bb      	ldr	r3, [r7, #24]
 800578a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800578c:	e1e5      	b.n	8005b5a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800578e:	2300      	movs	r3, #0
 8005790:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005792:	e1e2      	b.n	8005b5a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005794:	4b9a      	ldr	r3, [pc, #616]	; (8005a00 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800579c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80057a0:	d107      	bne.n	80057b2 <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80057a2:	f107 030c 	add.w	r3, r7, #12
 80057a6:	4618      	mov	r0, r3
 80057a8:	f000 fb4e 	bl	8005e48 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80057b0:	e1d3      	b.n	8005b5a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80057b2:	2300      	movs	r3, #0
 80057b4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80057b6:	e1d0      	b.n	8005b5a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80057b8:	4b91      	ldr	r3, [pc, #580]	; (8005a00 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80057ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057bc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80057c0:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80057c2:	4b8f      	ldr	r3, [pc, #572]	; (8005a00 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	f003 0304 	and.w	r3, r3, #4
 80057ca:	2b04      	cmp	r3, #4
 80057cc:	d10c      	bne.n	80057e8 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
 80057ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d109      	bne.n	80057e8 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80057d4:	4b8a      	ldr	r3, [pc, #552]	; (8005a00 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	08db      	lsrs	r3, r3, #3
 80057da:	f003 0303 	and.w	r3, r3, #3
 80057de:	4a89      	ldr	r2, [pc, #548]	; (8005a04 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80057e0:	fa22 f303 	lsr.w	r3, r2, r3
 80057e4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80057e6:	e01e      	b.n	8005826 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80057e8:	4b85      	ldr	r3, [pc, #532]	; (8005a00 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80057f4:	d106      	bne.n	8005804 <HAL_RCCEx_GetPeriphCLKFreq+0x634>
 80057f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057f8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80057fc:	d102      	bne.n	8005804 <HAL_RCCEx_GetPeriphCLKFreq+0x634>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80057fe:	4b82      	ldr	r3, [pc, #520]	; (8005a08 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8005800:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005802:	e010      	b.n	8005826 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005804:	4b7e      	ldr	r3, [pc, #504]	; (8005a00 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800580c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005810:	d106      	bne.n	8005820 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8005812:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005814:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005818:	d102      	bne.n	8005820 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800581a:	4b7c      	ldr	r3, [pc, #496]	; (8005a0c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800581c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800581e:	e002      	b.n	8005826 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8005820:	2300      	movs	r3, #0
 8005822:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8005824:	e199      	b.n	8005b5a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8005826:	e198      	b.n	8005b5a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8005828:	4b79      	ldr	r3, [pc, #484]	; (8005a10 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800582a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800582c:	e195      	b.n	8005b5a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 800582e:	2300      	movs	r3, #0
 8005830:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005832:	e192      	b.n	8005b5a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800583a:	d173      	bne.n	8005924 <HAL_RCCEx_GetPeriphCLKFreq+0x754>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 800583c:	4b70      	ldr	r3, [pc, #448]	; (8005a00 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800583e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005840:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005844:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8005846:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005848:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800584c:	d02f      	beq.n	80058ae <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
 800584e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005850:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005854:	d863      	bhi.n	800591e <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
 8005856:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005858:	2b00      	cmp	r3, #0
 800585a:	d004      	beq.n	8005866 <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 800585c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800585e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005862:	d012      	beq.n	800588a <HAL_RCCEx_GetPeriphCLKFreq+0x6ba>
 8005864:	e05b      	b.n	800591e <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005866:	4b66      	ldr	r3, [pc, #408]	; (8005a00 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800586e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005872:	d107      	bne.n	8005884 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005874:	f107 0318 	add.w	r3, r7, #24
 8005878:	4618      	mov	r0, r3
 800587a:	f000 f991 	bl	8005ba0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800587e:	69bb      	ldr	r3, [r7, #24]
 8005880:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005882:	e16a      	b.n	8005b5a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8005884:	2300      	movs	r3, #0
 8005886:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005888:	e167      	b.n	8005b5a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800588a:	4b5d      	ldr	r3, [pc, #372]	; (8005a00 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005892:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005896:	d107      	bne.n	80058a8 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005898:	f107 030c 	add.w	r3, r7, #12
 800589c:	4618      	mov	r0, r3
 800589e:	f000 fad3 	bl	8005e48 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80058a2:	697b      	ldr	r3, [r7, #20]
 80058a4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80058a6:	e158      	b.n	8005b5a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80058a8:	2300      	movs	r3, #0
 80058aa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80058ac:	e155      	b.n	8005b5a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80058ae:	4b54      	ldr	r3, [pc, #336]	; (8005a00 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80058b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80058b2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80058b6:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80058b8:	4b51      	ldr	r3, [pc, #324]	; (8005a00 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	f003 0304 	and.w	r3, r3, #4
 80058c0:	2b04      	cmp	r3, #4
 80058c2:	d10c      	bne.n	80058de <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
 80058c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d109      	bne.n	80058de <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80058ca:	4b4d      	ldr	r3, [pc, #308]	; (8005a00 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	08db      	lsrs	r3, r3, #3
 80058d0:	f003 0303 	and.w	r3, r3, #3
 80058d4:	4a4b      	ldr	r2, [pc, #300]	; (8005a04 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80058d6:	fa22 f303 	lsr.w	r3, r2, r3
 80058da:	63fb      	str	r3, [r7, #60]	; 0x3c
 80058dc:	e01e      	b.n	800591c <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80058de:	4b48      	ldr	r3, [pc, #288]	; (8005a00 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80058ea:	d106      	bne.n	80058fa <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
 80058ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058ee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80058f2:	d102      	bne.n	80058fa <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80058f4:	4b44      	ldr	r3, [pc, #272]	; (8005a08 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 80058f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80058f8:	e010      	b.n	800591c <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80058fa:	4b41      	ldr	r3, [pc, #260]	; (8005a00 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005902:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005906:	d106      	bne.n	8005916 <HAL_RCCEx_GetPeriphCLKFreq+0x746>
 8005908:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800590a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800590e:	d102      	bne.n	8005916 <HAL_RCCEx_GetPeriphCLKFreq+0x746>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8005910:	4b3e      	ldr	r3, [pc, #248]	; (8005a0c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8005912:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005914:	e002      	b.n	800591c <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8005916:	2300      	movs	r3, #0
 8005918:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800591a:	e11e      	b.n	8005b5a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800591c:	e11d      	b.n	8005b5a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 800591e:	2300      	movs	r3, #0
 8005920:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005922:	e11a      	b.n	8005b5a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800592a:	d133      	bne.n	8005994 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 800592c:	4b34      	ldr	r3, [pc, #208]	; (8005a00 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800592e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005930:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005934:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8005936:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005938:	2b00      	cmp	r3, #0
 800593a:	d004      	beq.n	8005946 <HAL_RCCEx_GetPeriphCLKFreq+0x776>
 800593c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800593e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005942:	d012      	beq.n	800596a <HAL_RCCEx_GetPeriphCLKFreq+0x79a>
 8005944:	e023      	b.n	800598e <HAL_RCCEx_GetPeriphCLKFreq+0x7be>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005946:	4b2e      	ldr	r3, [pc, #184]	; (8005a00 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800594e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005952:	d107      	bne.n	8005964 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005954:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005958:	4618      	mov	r0, r3
 800595a:	f000 fbc9 	bl	80060f0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800595e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005960:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005962:	e0fa      	b.n	8005b5a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005964:	2300      	movs	r3, #0
 8005966:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005968:	e0f7      	b.n	8005b5a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800596a:	4b25      	ldr	r3, [pc, #148]	; (8005a00 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005972:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005976:	d107      	bne.n	8005988 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005978:	f107 0318 	add.w	r3, r7, #24
 800597c:	4618      	mov	r0, r3
 800597e:	f000 f90f 	bl	8005ba0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8005982:	6a3b      	ldr	r3, [r7, #32]
 8005984:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005986:	e0e8      	b.n	8005b5a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005988:	2300      	movs	r3, #0
 800598a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800598c:	e0e5      	b.n	8005b5a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 800598e:	2300      	movs	r3, #0
 8005990:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005992:	e0e2      	b.n	8005b5a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800599a:	f040 808f 	bne.w	8005abc <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 800599e:	4b18      	ldr	r3, [pc, #96]	; (8005a00 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80059a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059a2:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 80059a6:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80059a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059aa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80059ae:	d075      	beq.n	8005a9c <HAL_RCCEx_GetPeriphCLKFreq+0x8cc>
 80059b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059b2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80059b6:	d87e      	bhi.n	8005ab6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 80059b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059be:	d060      	beq.n	8005a82 <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
 80059c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059c6:	d876      	bhi.n	8005ab6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 80059c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059ca:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80059ce:	d045      	beq.n	8005a5c <HAL_RCCEx_GetPeriphCLKFreq+0x88c>
 80059d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059d2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80059d6:	d86e      	bhi.n	8005ab6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 80059d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059da:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80059de:	d02b      	beq.n	8005a38 <HAL_RCCEx_GetPeriphCLKFreq+0x868>
 80059e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059e2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80059e6:	d866      	bhi.n	8005ab6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 80059e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d004      	beq.n	80059f8 <HAL_RCCEx_GetPeriphCLKFreq+0x828>
 80059ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059f0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80059f4:	d00e      	beq.n	8005a14 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 80059f6:	e05e      	b.n	8005ab6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 80059f8:	f000 f8bc 	bl	8005b74 <HAL_RCCEx_GetD3PCLK1Freq>
 80059fc:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 80059fe:	e0ac      	b.n	8005b5a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8005a00:	58024400 	.word	0x58024400
 8005a04:	03d09000 	.word	0x03d09000
 8005a08:	003d0900 	.word	0x003d0900
 8005a0c:	017d7840 	.word	0x017d7840
 8005a10:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005a14:	4b53      	ldr	r3, [pc, #332]	; (8005b64 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005a1c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005a20:	d107      	bne.n	8005a32 <HAL_RCCEx_GetPeriphCLKFreq+0x862>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005a22:	f107 0318 	add.w	r3, r7, #24
 8005a26:	4618      	mov	r0, r3
 8005a28:	f000 f8ba 	bl	8005ba0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005a2c:	69fb      	ldr	r3, [r7, #28]
 8005a2e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005a30:	e093      	b.n	8005b5a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005a32:	2300      	movs	r3, #0
 8005a34:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005a36:	e090      	b.n	8005b5a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005a38:	4b4a      	ldr	r3, [pc, #296]	; (8005b64 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005a40:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005a44:	d107      	bne.n	8005a56 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005a46:	f107 030c 	add.w	r3, r7, #12
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	f000 f9fc 	bl	8005e48 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8005a50:	693b      	ldr	r3, [r7, #16]
 8005a52:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005a54:	e081      	b.n	8005b5a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005a56:	2300      	movs	r3, #0
 8005a58:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005a5a:	e07e      	b.n	8005b5a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005a5c:	4b41      	ldr	r3, [pc, #260]	; (8005b64 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	f003 0304 	and.w	r3, r3, #4
 8005a64:	2b04      	cmp	r3, #4
 8005a66:	d109      	bne.n	8005a7c <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005a68:	4b3e      	ldr	r3, [pc, #248]	; (8005b64 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	08db      	lsrs	r3, r3, #3
 8005a6e:	f003 0303 	and.w	r3, r3, #3
 8005a72:	4a3d      	ldr	r2, [pc, #244]	; (8005b68 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 8005a74:	fa22 f303 	lsr.w	r3, r2, r3
 8005a78:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005a7a:	e06e      	b.n	8005b5a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005a7c:	2300      	movs	r3, #0
 8005a7e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005a80:	e06b      	b.n	8005b5a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8005a82:	4b38      	ldr	r3, [pc, #224]	; (8005b64 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a8a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a8e:	d102      	bne.n	8005a96 <HAL_RCCEx_GetPeriphCLKFreq+0x8c6>
         {
          frequency = CSI_VALUE;
 8005a90:	4b36      	ldr	r3, [pc, #216]	; (8005b6c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8005a92:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005a94:	e061      	b.n	8005b5a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8005a96:	2300      	movs	r3, #0
 8005a98:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005a9a:	e05e      	b.n	8005b5a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005a9c:	4b31      	ldr	r3, [pc, #196]	; (8005b64 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005aa4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005aa8:	d102      	bne.n	8005ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x8e0>
         {
          frequency = HSE_VALUE;
 8005aaa:	4b31      	ldr	r3, [pc, #196]	; (8005b70 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8005aac:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005aae:	e054      	b.n	8005b5a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005ab0:	2300      	movs	r3, #0
 8005ab2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005ab4:	e051      	b.n	8005b5a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 8005ab6:	2300      	movs	r3, #0
 8005ab8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005aba:	e04e      	b.n	8005b5a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ac2:	d148      	bne.n	8005b56 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 8005ac4:	4b27      	ldr	r3, [pc, #156]	; (8005b64 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8005ac6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ac8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005acc:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8005ace:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ad0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005ad4:	d02a      	beq.n	8005b2c <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 8005ad6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ad8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005adc:	d838      	bhi.n	8005b50 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 8005ade:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d004      	beq.n	8005aee <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 8005ae4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ae6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005aea:	d00d      	beq.n	8005b08 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 8005aec:	e030      	b.n	8005b50 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005aee:	4b1d      	ldr	r3, [pc, #116]	; (8005b64 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005af6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005afa:	d102      	bne.n	8005b02 <HAL_RCCEx_GetPeriphCLKFreq+0x932>
         {
          frequency = HSE_VALUE;
 8005afc:	4b1c      	ldr	r3, [pc, #112]	; (8005b70 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8005afe:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005b00:	e02b      	b.n	8005b5a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005b02:	2300      	movs	r3, #0
 8005b04:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005b06:	e028      	b.n	8005b5a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005b08:	4b16      	ldr	r3, [pc, #88]	; (8005b64 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b10:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005b14:	d107      	bne.n	8005b26 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005b16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	f000 fae8 	bl	80060f0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005b20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b22:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005b24:	e019      	b.n	8005b5a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005b26:	2300      	movs	r3, #0
 8005b28:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005b2a:	e016      	b.n	8005b5a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005b2c:	4b0d      	ldr	r3, [pc, #52]	; (8005b64 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005b34:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005b38:	d107      	bne.n	8005b4a <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005b3a:	f107 0318 	add.w	r3, r7, #24
 8005b3e:	4618      	mov	r0, r3
 8005b40:	f000 f82e 	bl	8005ba0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005b44:	69fb      	ldr	r3, [r7, #28]
 8005b46:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005b48:	e007      	b.n	8005b5a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005b4a:	2300      	movs	r3, #0
 8005b4c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005b4e:	e004      	b.n	8005b5a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 8005b50:	2300      	movs	r3, #0
 8005b52:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005b54:	e001      	b.n	8005b5a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else
    {
      frequency = 0;
 8005b56:	2300      	movs	r3, #0
 8005b58:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 8005b5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8005b5c:	4618      	mov	r0, r3
 8005b5e:	3740      	adds	r7, #64	; 0x40
 8005b60:	46bd      	mov	sp, r7
 8005b62:	bd80      	pop	{r7, pc}
 8005b64:	58024400 	.word	0x58024400
 8005b68:	03d09000 	.word	0x03d09000
 8005b6c:	003d0900 	.word	0x003d0900
 8005b70:	017d7840 	.word	0x017d7840

08005b74 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8005b74:	b580      	push	{r7, lr}
 8005b76:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8005b78:	f7fe fbba 	bl	80042f0 <HAL_RCC_GetHCLKFreq>
 8005b7c:	4602      	mov	r2, r0
 8005b7e:	4b06      	ldr	r3, [pc, #24]	; (8005b98 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8005b80:	6a1b      	ldr	r3, [r3, #32]
 8005b82:	091b      	lsrs	r3, r3, #4
 8005b84:	f003 0307 	and.w	r3, r3, #7
 8005b88:	4904      	ldr	r1, [pc, #16]	; (8005b9c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8005b8a:	5ccb      	ldrb	r3, [r1, r3]
 8005b8c:	f003 031f 	and.w	r3, r3, #31
 8005b90:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8005b94:	4618      	mov	r0, r3
 8005b96:	bd80      	pop	{r7, pc}
 8005b98:	58024400 	.word	0x58024400
 8005b9c:	08008f54 	.word	0x08008f54

08005ba0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8005ba0:	b480      	push	{r7}
 8005ba2:	b089      	sub	sp, #36	; 0x24
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005ba8:	4ba1      	ldr	r3, [pc, #644]	; (8005e30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005baa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bac:	f003 0303 	and.w	r3, r3, #3
 8005bb0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8005bb2:	4b9f      	ldr	r3, [pc, #636]	; (8005e30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005bb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bb6:	0b1b      	lsrs	r3, r3, #12
 8005bb8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005bbc:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8005bbe:	4b9c      	ldr	r3, [pc, #624]	; (8005e30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005bc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bc2:	091b      	lsrs	r3, r3, #4
 8005bc4:	f003 0301 	and.w	r3, r3, #1
 8005bc8:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8005bca:	4b99      	ldr	r3, [pc, #612]	; (8005e30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005bcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bce:	08db      	lsrs	r3, r3, #3
 8005bd0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005bd4:	693a      	ldr	r2, [r7, #16]
 8005bd6:	fb02 f303 	mul.w	r3, r2, r3
 8005bda:	ee07 3a90 	vmov	s15, r3
 8005bde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005be2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8005be6:	697b      	ldr	r3, [r7, #20]
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	f000 8111 	beq.w	8005e10 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8005bee:	69bb      	ldr	r3, [r7, #24]
 8005bf0:	2b02      	cmp	r3, #2
 8005bf2:	f000 8083 	beq.w	8005cfc <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8005bf6:	69bb      	ldr	r3, [r7, #24]
 8005bf8:	2b02      	cmp	r3, #2
 8005bfa:	f200 80a1 	bhi.w	8005d40 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8005bfe:	69bb      	ldr	r3, [r7, #24]
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d003      	beq.n	8005c0c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8005c04:	69bb      	ldr	r3, [r7, #24]
 8005c06:	2b01      	cmp	r3, #1
 8005c08:	d056      	beq.n	8005cb8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8005c0a:	e099      	b.n	8005d40 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005c0c:	4b88      	ldr	r3, [pc, #544]	; (8005e30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	f003 0320 	and.w	r3, r3, #32
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d02d      	beq.n	8005c74 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005c18:	4b85      	ldr	r3, [pc, #532]	; (8005e30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	08db      	lsrs	r3, r3, #3
 8005c1e:	f003 0303 	and.w	r3, r3, #3
 8005c22:	4a84      	ldr	r2, [pc, #528]	; (8005e34 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8005c24:	fa22 f303 	lsr.w	r3, r2, r3
 8005c28:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005c2a:	68bb      	ldr	r3, [r7, #8]
 8005c2c:	ee07 3a90 	vmov	s15, r3
 8005c30:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c34:	697b      	ldr	r3, [r7, #20]
 8005c36:	ee07 3a90 	vmov	s15, r3
 8005c3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c42:	4b7b      	ldr	r3, [pc, #492]	; (8005e30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005c44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c4a:	ee07 3a90 	vmov	s15, r3
 8005c4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c52:	ed97 6a03 	vldr	s12, [r7, #12]
 8005c56:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005e38 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005c5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005c5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005c62:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005c66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005c6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c6e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8005c72:	e087      	b.n	8005d84 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005c74:	697b      	ldr	r3, [r7, #20]
 8005c76:	ee07 3a90 	vmov	s15, r3
 8005c7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c7e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005e3c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8005c82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c86:	4b6a      	ldr	r3, [pc, #424]	; (8005e30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005c88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c8e:	ee07 3a90 	vmov	s15, r3
 8005c92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c96:	ed97 6a03 	vldr	s12, [r7, #12]
 8005c9a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005e38 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005c9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005ca2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005ca6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005caa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005cae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005cb2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005cb6:	e065      	b.n	8005d84 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005cb8:	697b      	ldr	r3, [r7, #20]
 8005cba:	ee07 3a90 	vmov	s15, r3
 8005cbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005cc2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005e40 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005cc6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005cca:	4b59      	ldr	r3, [pc, #356]	; (8005e30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005ccc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005cd2:	ee07 3a90 	vmov	s15, r3
 8005cd6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005cda:	ed97 6a03 	vldr	s12, [r7, #12]
 8005cde:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005e38 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005ce2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005ce6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005cea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005cee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005cf2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005cf6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005cfa:	e043      	b.n	8005d84 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005cfc:	697b      	ldr	r3, [r7, #20]
 8005cfe:	ee07 3a90 	vmov	s15, r3
 8005d02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d06:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005e44 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8005d0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d0e:	4b48      	ldr	r3, [pc, #288]	; (8005e30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005d10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d16:	ee07 3a90 	vmov	s15, r3
 8005d1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d1e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005d22:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005e38 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005d26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d2e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005d32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d3a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005d3e:	e021      	b.n	8005d84 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005d40:	697b      	ldr	r3, [r7, #20]
 8005d42:	ee07 3a90 	vmov	s15, r3
 8005d46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d4a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005e40 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005d4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d52:	4b37      	ldr	r3, [pc, #220]	; (8005e30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005d54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d5a:	ee07 3a90 	vmov	s15, r3
 8005d5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d62:	ed97 6a03 	vldr	s12, [r7, #12]
 8005d66:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005e38 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005d6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d72:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005d76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d7e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005d82:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8005d84:	4b2a      	ldr	r3, [pc, #168]	; (8005e30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005d86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d88:	0a5b      	lsrs	r3, r3, #9
 8005d8a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005d8e:	ee07 3a90 	vmov	s15, r3
 8005d92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d96:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005d9a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005d9e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005da2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005da6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005daa:	ee17 2a90 	vmov	r2, s15
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8005db2:	4b1f      	ldr	r3, [pc, #124]	; (8005e30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005db4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005db6:	0c1b      	lsrs	r3, r3, #16
 8005db8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005dbc:	ee07 3a90 	vmov	s15, r3
 8005dc0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005dc4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005dc8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005dcc:	edd7 6a07 	vldr	s13, [r7, #28]
 8005dd0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005dd4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005dd8:	ee17 2a90 	vmov	r2, s15
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8005de0:	4b13      	ldr	r3, [pc, #76]	; (8005e30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005de2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005de4:	0e1b      	lsrs	r3, r3, #24
 8005de6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005dea:	ee07 3a90 	vmov	s15, r3
 8005dee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005df2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005df6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005dfa:	edd7 6a07 	vldr	s13, [r7, #28]
 8005dfe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005e02:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005e06:	ee17 2a90 	vmov	r2, s15
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005e0e:	e008      	b.n	8005e22 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	2200      	movs	r2, #0
 8005e14:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	2200      	movs	r2, #0
 8005e1a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	2200      	movs	r2, #0
 8005e20:	609a      	str	r2, [r3, #8]
}
 8005e22:	bf00      	nop
 8005e24:	3724      	adds	r7, #36	; 0x24
 8005e26:	46bd      	mov	sp, r7
 8005e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2c:	4770      	bx	lr
 8005e2e:	bf00      	nop
 8005e30:	58024400 	.word	0x58024400
 8005e34:	03d09000 	.word	0x03d09000
 8005e38:	46000000 	.word	0x46000000
 8005e3c:	4c742400 	.word	0x4c742400
 8005e40:	4a742400 	.word	0x4a742400
 8005e44:	4bbebc20 	.word	0x4bbebc20

08005e48 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8005e48:	b480      	push	{r7}
 8005e4a:	b089      	sub	sp, #36	; 0x24
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005e50:	4ba1      	ldr	r3, [pc, #644]	; (80060d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005e52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e54:	f003 0303 	and.w	r3, r3, #3
 8005e58:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8005e5a:	4b9f      	ldr	r3, [pc, #636]	; (80060d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005e5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e5e:	0d1b      	lsrs	r3, r3, #20
 8005e60:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005e64:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8005e66:	4b9c      	ldr	r3, [pc, #624]	; (80060d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005e68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e6a:	0a1b      	lsrs	r3, r3, #8
 8005e6c:	f003 0301 	and.w	r3, r3, #1
 8005e70:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8005e72:	4b99      	ldr	r3, [pc, #612]	; (80060d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005e74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e76:	08db      	lsrs	r3, r3, #3
 8005e78:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005e7c:	693a      	ldr	r2, [r7, #16]
 8005e7e:	fb02 f303 	mul.w	r3, r2, r3
 8005e82:	ee07 3a90 	vmov	s15, r3
 8005e86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e8a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8005e8e:	697b      	ldr	r3, [r7, #20]
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	f000 8111 	beq.w	80060b8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8005e96:	69bb      	ldr	r3, [r7, #24]
 8005e98:	2b02      	cmp	r3, #2
 8005e9a:	f000 8083 	beq.w	8005fa4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8005e9e:	69bb      	ldr	r3, [r7, #24]
 8005ea0:	2b02      	cmp	r3, #2
 8005ea2:	f200 80a1 	bhi.w	8005fe8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8005ea6:	69bb      	ldr	r3, [r7, #24]
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d003      	beq.n	8005eb4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8005eac:	69bb      	ldr	r3, [r7, #24]
 8005eae:	2b01      	cmp	r3, #1
 8005eb0:	d056      	beq.n	8005f60 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8005eb2:	e099      	b.n	8005fe8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005eb4:	4b88      	ldr	r3, [pc, #544]	; (80060d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	f003 0320 	and.w	r3, r3, #32
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d02d      	beq.n	8005f1c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005ec0:	4b85      	ldr	r3, [pc, #532]	; (80060d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	08db      	lsrs	r3, r3, #3
 8005ec6:	f003 0303 	and.w	r3, r3, #3
 8005eca:	4a84      	ldr	r2, [pc, #528]	; (80060dc <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8005ecc:	fa22 f303 	lsr.w	r3, r2, r3
 8005ed0:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005ed2:	68bb      	ldr	r3, [r7, #8]
 8005ed4:	ee07 3a90 	vmov	s15, r3
 8005ed8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005edc:	697b      	ldr	r3, [r7, #20]
 8005ede:	ee07 3a90 	vmov	s15, r3
 8005ee2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ee6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005eea:	4b7b      	ldr	r3, [pc, #492]	; (80060d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ef2:	ee07 3a90 	vmov	s15, r3
 8005ef6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005efa:	ed97 6a03 	vldr	s12, [r7, #12]
 8005efe:	eddf 5a78 	vldr	s11, [pc, #480]	; 80060e0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005f02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f0a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005f0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f16:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8005f1a:	e087      	b.n	800602c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005f1c:	697b      	ldr	r3, [r7, #20]
 8005f1e:	ee07 3a90 	vmov	s15, r3
 8005f22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f26:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80060e4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8005f2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f2e:	4b6a      	ldr	r3, [pc, #424]	; (80060d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f36:	ee07 3a90 	vmov	s15, r3
 8005f3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f3e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005f42:	eddf 5a67 	vldr	s11, [pc, #412]	; 80060e0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005f46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f4e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005f52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f5a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005f5e:	e065      	b.n	800602c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005f60:	697b      	ldr	r3, [r7, #20]
 8005f62:	ee07 3a90 	vmov	s15, r3
 8005f66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f6a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80060e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005f6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f72:	4b59      	ldr	r3, [pc, #356]	; (80060d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f7a:	ee07 3a90 	vmov	s15, r3
 8005f7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f82:	ed97 6a03 	vldr	s12, [r7, #12]
 8005f86:	eddf 5a56 	vldr	s11, [pc, #344]	; 80060e0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005f8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f92:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005f96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f9e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005fa2:	e043      	b.n	800602c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005fa4:	697b      	ldr	r3, [r7, #20]
 8005fa6:	ee07 3a90 	vmov	s15, r3
 8005faa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fae:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80060ec <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8005fb2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005fb6:	4b48      	ldr	r3, [pc, #288]	; (80060d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005fbe:	ee07 3a90 	vmov	s15, r3
 8005fc2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005fc6:	ed97 6a03 	vldr	s12, [r7, #12]
 8005fca:	eddf 5a45 	vldr	s11, [pc, #276]	; 80060e0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005fce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005fd2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005fd6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005fda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005fde:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005fe2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005fe6:	e021      	b.n	800602c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005fe8:	697b      	ldr	r3, [r7, #20]
 8005fea:	ee07 3a90 	vmov	s15, r3
 8005fee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ff2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80060e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005ff6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ffa:	4b37      	ldr	r3, [pc, #220]	; (80060d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ffe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006002:	ee07 3a90 	vmov	s15, r3
 8006006:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800600a:	ed97 6a03 	vldr	s12, [r7, #12]
 800600e:	eddf 5a34 	vldr	s11, [pc, #208]	; 80060e0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006012:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006016:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800601a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800601e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006022:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006026:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800602a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800602c:	4b2a      	ldr	r3, [pc, #168]	; (80060d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800602e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006030:	0a5b      	lsrs	r3, r3, #9
 8006032:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006036:	ee07 3a90 	vmov	s15, r3
 800603a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800603e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006042:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006046:	edd7 6a07 	vldr	s13, [r7, #28]
 800604a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800604e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006052:	ee17 2a90 	vmov	r2, s15
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800605a:	4b1f      	ldr	r3, [pc, #124]	; (80060d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800605c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800605e:	0c1b      	lsrs	r3, r3, #16
 8006060:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006064:	ee07 3a90 	vmov	s15, r3
 8006068:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800606c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006070:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006074:	edd7 6a07 	vldr	s13, [r7, #28]
 8006078:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800607c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006080:	ee17 2a90 	vmov	r2, s15
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8006088:	4b13      	ldr	r3, [pc, #76]	; (80060d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800608a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800608c:	0e1b      	lsrs	r3, r3, #24
 800608e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006092:	ee07 3a90 	vmov	s15, r3
 8006096:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800609a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800609e:	ee37 7a87 	vadd.f32	s14, s15, s14
 80060a2:	edd7 6a07 	vldr	s13, [r7, #28]
 80060a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80060aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80060ae:	ee17 2a90 	vmov	r2, s15
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80060b6:	e008      	b.n	80060ca <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	2200      	movs	r2, #0
 80060bc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	2200      	movs	r2, #0
 80060c2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	2200      	movs	r2, #0
 80060c8:	609a      	str	r2, [r3, #8]
}
 80060ca:	bf00      	nop
 80060cc:	3724      	adds	r7, #36	; 0x24
 80060ce:	46bd      	mov	sp, r7
 80060d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d4:	4770      	bx	lr
 80060d6:	bf00      	nop
 80060d8:	58024400 	.word	0x58024400
 80060dc:	03d09000 	.word	0x03d09000
 80060e0:	46000000 	.word	0x46000000
 80060e4:	4c742400 	.word	0x4c742400
 80060e8:	4a742400 	.word	0x4a742400
 80060ec:	4bbebc20 	.word	0x4bbebc20

080060f0 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 80060f0:	b480      	push	{r7}
 80060f2:	b089      	sub	sp, #36	; 0x24
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80060f8:	4ba0      	ldr	r3, [pc, #640]	; (800637c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80060fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060fc:	f003 0303 	and.w	r3, r3, #3
 8006100:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8006102:	4b9e      	ldr	r3, [pc, #632]	; (800637c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006104:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006106:	091b      	lsrs	r3, r3, #4
 8006108:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800610c:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800610e:	4b9b      	ldr	r3, [pc, #620]	; (800637c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006110:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006112:	f003 0301 	and.w	r3, r3, #1
 8006116:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8006118:	4b98      	ldr	r3, [pc, #608]	; (800637c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800611a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800611c:	08db      	lsrs	r3, r3, #3
 800611e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006122:	693a      	ldr	r2, [r7, #16]
 8006124:	fb02 f303 	mul.w	r3, r2, r3
 8006128:	ee07 3a90 	vmov	s15, r3
 800612c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006130:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8006134:	697b      	ldr	r3, [r7, #20]
 8006136:	2b00      	cmp	r3, #0
 8006138:	f000 8111 	beq.w	800635e <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800613c:	69bb      	ldr	r3, [r7, #24]
 800613e:	2b02      	cmp	r3, #2
 8006140:	f000 8083 	beq.w	800624a <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8006144:	69bb      	ldr	r3, [r7, #24]
 8006146:	2b02      	cmp	r3, #2
 8006148:	f200 80a1 	bhi.w	800628e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800614c:	69bb      	ldr	r3, [r7, #24]
 800614e:	2b00      	cmp	r3, #0
 8006150:	d003      	beq.n	800615a <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8006152:	69bb      	ldr	r3, [r7, #24]
 8006154:	2b01      	cmp	r3, #1
 8006156:	d056      	beq.n	8006206 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8006158:	e099      	b.n	800628e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800615a:	4b88      	ldr	r3, [pc, #544]	; (800637c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	f003 0320 	and.w	r3, r3, #32
 8006162:	2b00      	cmp	r3, #0
 8006164:	d02d      	beq.n	80061c2 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006166:	4b85      	ldr	r3, [pc, #532]	; (800637c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	08db      	lsrs	r3, r3, #3
 800616c:	f003 0303 	and.w	r3, r3, #3
 8006170:	4a83      	ldr	r2, [pc, #524]	; (8006380 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8006172:	fa22 f303 	lsr.w	r3, r2, r3
 8006176:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006178:	68bb      	ldr	r3, [r7, #8]
 800617a:	ee07 3a90 	vmov	s15, r3
 800617e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006182:	697b      	ldr	r3, [r7, #20]
 8006184:	ee07 3a90 	vmov	s15, r3
 8006188:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800618c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006190:	4b7a      	ldr	r3, [pc, #488]	; (800637c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006192:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006194:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006198:	ee07 3a90 	vmov	s15, r3
 800619c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80061a0:	ed97 6a03 	vldr	s12, [r7, #12]
 80061a4:	eddf 5a77 	vldr	s11, [pc, #476]	; 8006384 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80061a8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80061ac:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80061b0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80061b4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80061b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80061bc:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80061c0:	e087      	b.n	80062d2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80061c2:	697b      	ldr	r3, [r7, #20]
 80061c4:	ee07 3a90 	vmov	s15, r3
 80061c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061cc:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8006388 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80061d0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80061d4:	4b69      	ldr	r3, [pc, #420]	; (800637c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80061d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80061dc:	ee07 3a90 	vmov	s15, r3
 80061e0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80061e4:	ed97 6a03 	vldr	s12, [r7, #12]
 80061e8:	eddf 5a66 	vldr	s11, [pc, #408]	; 8006384 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80061ec:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80061f0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80061f4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80061f8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80061fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006200:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006204:	e065      	b.n	80062d2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006206:	697b      	ldr	r3, [r7, #20]
 8006208:	ee07 3a90 	vmov	s15, r3
 800620c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006210:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800638c <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8006214:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006218:	4b58      	ldr	r3, [pc, #352]	; (800637c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800621a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800621c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006220:	ee07 3a90 	vmov	s15, r3
 8006224:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006228:	ed97 6a03 	vldr	s12, [r7, #12]
 800622c:	eddf 5a55 	vldr	s11, [pc, #340]	; 8006384 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006230:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006234:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006238:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800623c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006240:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006244:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006248:	e043      	b.n	80062d2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800624a:	697b      	ldr	r3, [r7, #20]
 800624c:	ee07 3a90 	vmov	s15, r3
 8006250:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006254:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8006390 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8006258:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800625c:	4b47      	ldr	r3, [pc, #284]	; (800637c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800625e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006260:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006264:	ee07 3a90 	vmov	s15, r3
 8006268:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800626c:	ed97 6a03 	vldr	s12, [r7, #12]
 8006270:	eddf 5a44 	vldr	s11, [pc, #272]	; 8006384 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006274:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006278:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800627c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006280:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006284:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006288:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800628c:	e021      	b.n	80062d2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800628e:	697b      	ldr	r3, [r7, #20]
 8006290:	ee07 3a90 	vmov	s15, r3
 8006294:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006298:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8006388 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800629c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80062a0:	4b36      	ldr	r3, [pc, #216]	; (800637c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80062a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80062a8:	ee07 3a90 	vmov	s15, r3
 80062ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80062b0:	ed97 6a03 	vldr	s12, [r7, #12]
 80062b4:	eddf 5a33 	vldr	s11, [pc, #204]	; 8006384 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80062b8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80062bc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80062c0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80062c4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80062c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80062cc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80062d0:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 80062d2:	4b2a      	ldr	r3, [pc, #168]	; (800637c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80062d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062d6:	0a5b      	lsrs	r3, r3, #9
 80062d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80062dc:	ee07 3a90 	vmov	s15, r3
 80062e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062e4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80062e8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80062ec:	edd7 6a07 	vldr	s13, [r7, #28]
 80062f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80062f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80062f8:	ee17 2a90 	vmov	r2, s15
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8006300:	4b1e      	ldr	r3, [pc, #120]	; (800637c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006302:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006304:	0c1b      	lsrs	r3, r3, #16
 8006306:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800630a:	ee07 3a90 	vmov	s15, r3
 800630e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006312:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006316:	ee37 7a87 	vadd.f32	s14, s15, s14
 800631a:	edd7 6a07 	vldr	s13, [r7, #28]
 800631e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006322:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006326:	ee17 2a90 	vmov	r2, s15
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 800632e:	4b13      	ldr	r3, [pc, #76]	; (800637c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006332:	0e1b      	lsrs	r3, r3, #24
 8006334:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006338:	ee07 3a90 	vmov	s15, r3
 800633c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006340:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006344:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006348:	edd7 6a07 	vldr	s13, [r7, #28]
 800634c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006350:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006354:	ee17 2a90 	vmov	r2, s15
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800635c:	e008      	b.n	8006370 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	2200      	movs	r2, #0
 8006362:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	2200      	movs	r2, #0
 8006368:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	2200      	movs	r2, #0
 800636e:	609a      	str	r2, [r3, #8]
}
 8006370:	bf00      	nop
 8006372:	3724      	adds	r7, #36	; 0x24
 8006374:	46bd      	mov	sp, r7
 8006376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637a:	4770      	bx	lr
 800637c:	58024400 	.word	0x58024400
 8006380:	03d09000 	.word	0x03d09000
 8006384:	46000000 	.word	0x46000000
 8006388:	4c742400 	.word	0x4c742400
 800638c:	4a742400 	.word	0x4a742400
 8006390:	4bbebc20 	.word	0x4bbebc20

08006394 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8006394:	b580      	push	{r7, lr}
 8006396:	b084      	sub	sp, #16
 8006398:	af00      	add	r7, sp, #0
 800639a:	6078      	str	r0, [r7, #4]
 800639c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800639e:	2300      	movs	r3, #0
 80063a0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80063a2:	4b53      	ldr	r3, [pc, #332]	; (80064f0 <RCCEx_PLL2_Config+0x15c>)
 80063a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063a6:	f003 0303 	and.w	r3, r3, #3
 80063aa:	2b03      	cmp	r3, #3
 80063ac:	d101      	bne.n	80063b2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80063ae:	2301      	movs	r3, #1
 80063b0:	e099      	b.n	80064e6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80063b2:	4b4f      	ldr	r3, [pc, #316]	; (80064f0 <RCCEx_PLL2_Config+0x15c>)
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	4a4e      	ldr	r2, [pc, #312]	; (80064f0 <RCCEx_PLL2_Config+0x15c>)
 80063b8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80063bc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80063be:	f7fa fe39 	bl	8001034 <HAL_GetTick>
 80063c2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80063c4:	e008      	b.n	80063d8 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80063c6:	f7fa fe35 	bl	8001034 <HAL_GetTick>
 80063ca:	4602      	mov	r2, r0
 80063cc:	68bb      	ldr	r3, [r7, #8]
 80063ce:	1ad3      	subs	r3, r2, r3
 80063d0:	2b02      	cmp	r3, #2
 80063d2:	d901      	bls.n	80063d8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80063d4:	2303      	movs	r3, #3
 80063d6:	e086      	b.n	80064e6 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80063d8:	4b45      	ldr	r3, [pc, #276]	; (80064f0 <RCCEx_PLL2_Config+0x15c>)
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d1f0      	bne.n	80063c6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80063e4:	4b42      	ldr	r3, [pc, #264]	; (80064f0 <RCCEx_PLL2_Config+0x15c>)
 80063e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063e8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	031b      	lsls	r3, r3, #12
 80063f2:	493f      	ldr	r1, [pc, #252]	; (80064f0 <RCCEx_PLL2_Config+0x15c>)
 80063f4:	4313      	orrs	r3, r2
 80063f6:	628b      	str	r3, [r1, #40]	; 0x28
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	685b      	ldr	r3, [r3, #4]
 80063fc:	3b01      	subs	r3, #1
 80063fe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	689b      	ldr	r3, [r3, #8]
 8006406:	3b01      	subs	r3, #1
 8006408:	025b      	lsls	r3, r3, #9
 800640a:	b29b      	uxth	r3, r3
 800640c:	431a      	orrs	r2, r3
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	68db      	ldr	r3, [r3, #12]
 8006412:	3b01      	subs	r3, #1
 8006414:	041b      	lsls	r3, r3, #16
 8006416:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800641a:	431a      	orrs	r2, r3
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	691b      	ldr	r3, [r3, #16]
 8006420:	3b01      	subs	r3, #1
 8006422:	061b      	lsls	r3, r3, #24
 8006424:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006428:	4931      	ldr	r1, [pc, #196]	; (80064f0 <RCCEx_PLL2_Config+0x15c>)
 800642a:	4313      	orrs	r3, r2
 800642c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800642e:	4b30      	ldr	r3, [pc, #192]	; (80064f0 <RCCEx_PLL2_Config+0x15c>)
 8006430:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006432:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	695b      	ldr	r3, [r3, #20]
 800643a:	492d      	ldr	r1, [pc, #180]	; (80064f0 <RCCEx_PLL2_Config+0x15c>)
 800643c:	4313      	orrs	r3, r2
 800643e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8006440:	4b2b      	ldr	r3, [pc, #172]	; (80064f0 <RCCEx_PLL2_Config+0x15c>)
 8006442:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006444:	f023 0220 	bic.w	r2, r3, #32
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	699b      	ldr	r3, [r3, #24]
 800644c:	4928      	ldr	r1, [pc, #160]	; (80064f0 <RCCEx_PLL2_Config+0x15c>)
 800644e:	4313      	orrs	r3, r2
 8006450:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8006452:	4b27      	ldr	r3, [pc, #156]	; (80064f0 <RCCEx_PLL2_Config+0x15c>)
 8006454:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006456:	4a26      	ldr	r2, [pc, #152]	; (80064f0 <RCCEx_PLL2_Config+0x15c>)
 8006458:	f023 0310 	bic.w	r3, r3, #16
 800645c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800645e:	4b24      	ldr	r3, [pc, #144]	; (80064f0 <RCCEx_PLL2_Config+0x15c>)
 8006460:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006462:	4b24      	ldr	r3, [pc, #144]	; (80064f4 <RCCEx_PLL2_Config+0x160>)
 8006464:	4013      	ands	r3, r2
 8006466:	687a      	ldr	r2, [r7, #4]
 8006468:	69d2      	ldr	r2, [r2, #28]
 800646a:	00d2      	lsls	r2, r2, #3
 800646c:	4920      	ldr	r1, [pc, #128]	; (80064f0 <RCCEx_PLL2_Config+0x15c>)
 800646e:	4313      	orrs	r3, r2
 8006470:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8006472:	4b1f      	ldr	r3, [pc, #124]	; (80064f0 <RCCEx_PLL2_Config+0x15c>)
 8006474:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006476:	4a1e      	ldr	r2, [pc, #120]	; (80064f0 <RCCEx_PLL2_Config+0x15c>)
 8006478:	f043 0310 	orr.w	r3, r3, #16
 800647c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800647e:	683b      	ldr	r3, [r7, #0]
 8006480:	2b00      	cmp	r3, #0
 8006482:	d106      	bne.n	8006492 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8006484:	4b1a      	ldr	r3, [pc, #104]	; (80064f0 <RCCEx_PLL2_Config+0x15c>)
 8006486:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006488:	4a19      	ldr	r2, [pc, #100]	; (80064f0 <RCCEx_PLL2_Config+0x15c>)
 800648a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800648e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006490:	e00f      	b.n	80064b2 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8006492:	683b      	ldr	r3, [r7, #0]
 8006494:	2b01      	cmp	r3, #1
 8006496:	d106      	bne.n	80064a6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8006498:	4b15      	ldr	r3, [pc, #84]	; (80064f0 <RCCEx_PLL2_Config+0x15c>)
 800649a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800649c:	4a14      	ldr	r2, [pc, #80]	; (80064f0 <RCCEx_PLL2_Config+0x15c>)
 800649e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80064a2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80064a4:	e005      	b.n	80064b2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80064a6:	4b12      	ldr	r3, [pc, #72]	; (80064f0 <RCCEx_PLL2_Config+0x15c>)
 80064a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064aa:	4a11      	ldr	r2, [pc, #68]	; (80064f0 <RCCEx_PLL2_Config+0x15c>)
 80064ac:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80064b0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80064b2:	4b0f      	ldr	r3, [pc, #60]	; (80064f0 <RCCEx_PLL2_Config+0x15c>)
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	4a0e      	ldr	r2, [pc, #56]	; (80064f0 <RCCEx_PLL2_Config+0x15c>)
 80064b8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80064bc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80064be:	f7fa fdb9 	bl	8001034 <HAL_GetTick>
 80064c2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80064c4:	e008      	b.n	80064d8 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80064c6:	f7fa fdb5 	bl	8001034 <HAL_GetTick>
 80064ca:	4602      	mov	r2, r0
 80064cc:	68bb      	ldr	r3, [r7, #8]
 80064ce:	1ad3      	subs	r3, r2, r3
 80064d0:	2b02      	cmp	r3, #2
 80064d2:	d901      	bls.n	80064d8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80064d4:	2303      	movs	r3, #3
 80064d6:	e006      	b.n	80064e6 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80064d8:	4b05      	ldr	r3, [pc, #20]	; (80064f0 <RCCEx_PLL2_Config+0x15c>)
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d0f0      	beq.n	80064c6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80064e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80064e6:	4618      	mov	r0, r3
 80064e8:	3710      	adds	r7, #16
 80064ea:	46bd      	mov	sp, r7
 80064ec:	bd80      	pop	{r7, pc}
 80064ee:	bf00      	nop
 80064f0:	58024400 	.word	0x58024400
 80064f4:	ffff0007 	.word	0xffff0007

080064f8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80064f8:	b580      	push	{r7, lr}
 80064fa:	b084      	sub	sp, #16
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	6078      	str	r0, [r7, #4]
 8006500:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006502:	2300      	movs	r3, #0
 8006504:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006506:	4b53      	ldr	r3, [pc, #332]	; (8006654 <RCCEx_PLL3_Config+0x15c>)
 8006508:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800650a:	f003 0303 	and.w	r3, r3, #3
 800650e:	2b03      	cmp	r3, #3
 8006510:	d101      	bne.n	8006516 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8006512:	2301      	movs	r3, #1
 8006514:	e099      	b.n	800664a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8006516:	4b4f      	ldr	r3, [pc, #316]	; (8006654 <RCCEx_PLL3_Config+0x15c>)
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	4a4e      	ldr	r2, [pc, #312]	; (8006654 <RCCEx_PLL3_Config+0x15c>)
 800651c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006520:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006522:	f7fa fd87 	bl	8001034 <HAL_GetTick>
 8006526:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006528:	e008      	b.n	800653c <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800652a:	f7fa fd83 	bl	8001034 <HAL_GetTick>
 800652e:	4602      	mov	r2, r0
 8006530:	68bb      	ldr	r3, [r7, #8]
 8006532:	1ad3      	subs	r3, r2, r3
 8006534:	2b02      	cmp	r3, #2
 8006536:	d901      	bls.n	800653c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006538:	2303      	movs	r3, #3
 800653a:	e086      	b.n	800664a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800653c:	4b45      	ldr	r3, [pc, #276]	; (8006654 <RCCEx_PLL3_Config+0x15c>)
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006544:	2b00      	cmp	r3, #0
 8006546:	d1f0      	bne.n	800652a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8006548:	4b42      	ldr	r3, [pc, #264]	; (8006654 <RCCEx_PLL3_Config+0x15c>)
 800654a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800654c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	051b      	lsls	r3, r3, #20
 8006556:	493f      	ldr	r1, [pc, #252]	; (8006654 <RCCEx_PLL3_Config+0x15c>)
 8006558:	4313      	orrs	r3, r2
 800655a:	628b      	str	r3, [r1, #40]	; 0x28
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	685b      	ldr	r3, [r3, #4]
 8006560:	3b01      	subs	r3, #1
 8006562:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	689b      	ldr	r3, [r3, #8]
 800656a:	3b01      	subs	r3, #1
 800656c:	025b      	lsls	r3, r3, #9
 800656e:	b29b      	uxth	r3, r3
 8006570:	431a      	orrs	r2, r3
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	68db      	ldr	r3, [r3, #12]
 8006576:	3b01      	subs	r3, #1
 8006578:	041b      	lsls	r3, r3, #16
 800657a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800657e:	431a      	orrs	r2, r3
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	691b      	ldr	r3, [r3, #16]
 8006584:	3b01      	subs	r3, #1
 8006586:	061b      	lsls	r3, r3, #24
 8006588:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800658c:	4931      	ldr	r1, [pc, #196]	; (8006654 <RCCEx_PLL3_Config+0x15c>)
 800658e:	4313      	orrs	r3, r2
 8006590:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8006592:	4b30      	ldr	r3, [pc, #192]	; (8006654 <RCCEx_PLL3_Config+0x15c>)
 8006594:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006596:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	695b      	ldr	r3, [r3, #20]
 800659e:	492d      	ldr	r1, [pc, #180]	; (8006654 <RCCEx_PLL3_Config+0x15c>)
 80065a0:	4313      	orrs	r3, r2
 80065a2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80065a4:	4b2b      	ldr	r3, [pc, #172]	; (8006654 <RCCEx_PLL3_Config+0x15c>)
 80065a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065a8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	699b      	ldr	r3, [r3, #24]
 80065b0:	4928      	ldr	r1, [pc, #160]	; (8006654 <RCCEx_PLL3_Config+0x15c>)
 80065b2:	4313      	orrs	r3, r2
 80065b4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80065b6:	4b27      	ldr	r3, [pc, #156]	; (8006654 <RCCEx_PLL3_Config+0x15c>)
 80065b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065ba:	4a26      	ldr	r2, [pc, #152]	; (8006654 <RCCEx_PLL3_Config+0x15c>)
 80065bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80065c0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80065c2:	4b24      	ldr	r3, [pc, #144]	; (8006654 <RCCEx_PLL3_Config+0x15c>)
 80065c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80065c6:	4b24      	ldr	r3, [pc, #144]	; (8006658 <RCCEx_PLL3_Config+0x160>)
 80065c8:	4013      	ands	r3, r2
 80065ca:	687a      	ldr	r2, [r7, #4]
 80065cc:	69d2      	ldr	r2, [r2, #28]
 80065ce:	00d2      	lsls	r2, r2, #3
 80065d0:	4920      	ldr	r1, [pc, #128]	; (8006654 <RCCEx_PLL3_Config+0x15c>)
 80065d2:	4313      	orrs	r3, r2
 80065d4:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80065d6:	4b1f      	ldr	r3, [pc, #124]	; (8006654 <RCCEx_PLL3_Config+0x15c>)
 80065d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065da:	4a1e      	ldr	r2, [pc, #120]	; (8006654 <RCCEx_PLL3_Config+0x15c>)
 80065dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80065e0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80065e2:	683b      	ldr	r3, [r7, #0]
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d106      	bne.n	80065f6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80065e8:	4b1a      	ldr	r3, [pc, #104]	; (8006654 <RCCEx_PLL3_Config+0x15c>)
 80065ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065ec:	4a19      	ldr	r2, [pc, #100]	; (8006654 <RCCEx_PLL3_Config+0x15c>)
 80065ee:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80065f2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80065f4:	e00f      	b.n	8006616 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80065f6:	683b      	ldr	r3, [r7, #0]
 80065f8:	2b01      	cmp	r3, #1
 80065fa:	d106      	bne.n	800660a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80065fc:	4b15      	ldr	r3, [pc, #84]	; (8006654 <RCCEx_PLL3_Config+0x15c>)
 80065fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006600:	4a14      	ldr	r2, [pc, #80]	; (8006654 <RCCEx_PLL3_Config+0x15c>)
 8006602:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006606:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006608:	e005      	b.n	8006616 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800660a:	4b12      	ldr	r3, [pc, #72]	; (8006654 <RCCEx_PLL3_Config+0x15c>)
 800660c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800660e:	4a11      	ldr	r2, [pc, #68]	; (8006654 <RCCEx_PLL3_Config+0x15c>)
 8006610:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006614:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8006616:	4b0f      	ldr	r3, [pc, #60]	; (8006654 <RCCEx_PLL3_Config+0x15c>)
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	4a0e      	ldr	r2, [pc, #56]	; (8006654 <RCCEx_PLL3_Config+0x15c>)
 800661c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006620:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006622:	f7fa fd07 	bl	8001034 <HAL_GetTick>
 8006626:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006628:	e008      	b.n	800663c <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800662a:	f7fa fd03 	bl	8001034 <HAL_GetTick>
 800662e:	4602      	mov	r2, r0
 8006630:	68bb      	ldr	r3, [r7, #8]
 8006632:	1ad3      	subs	r3, r2, r3
 8006634:	2b02      	cmp	r3, #2
 8006636:	d901      	bls.n	800663c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006638:	2303      	movs	r3, #3
 800663a:	e006      	b.n	800664a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800663c:	4b05      	ldr	r3, [pc, #20]	; (8006654 <RCCEx_PLL3_Config+0x15c>)
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006644:	2b00      	cmp	r3, #0
 8006646:	d0f0      	beq.n	800662a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8006648:	7bfb      	ldrb	r3, [r7, #15]
}
 800664a:	4618      	mov	r0, r3
 800664c:	3710      	adds	r7, #16
 800664e:	46bd      	mov	sp, r7
 8006650:	bd80      	pop	{r7, pc}
 8006652:	bf00      	nop
 8006654:	58024400 	.word	0x58024400
 8006658:	ffff0007 	.word	0xffff0007

0800665c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800665c:	b580      	push	{r7, lr}
 800665e:	b08a      	sub	sp, #40	; 0x28
 8006660:	af00      	add	r7, sp, #0
 8006662:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006664:	2300      	movs	r3, #0
 8006666:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006668:	f001 fa9e 	bl	8007ba8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800666c:	4b5b      	ldr	r3, [pc, #364]	; (80067dc <pvPortMalloc+0x180>)
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	2b00      	cmp	r3, #0
 8006672:	d101      	bne.n	8006678 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006674:	f000 f920 	bl	80068b8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006678:	4b59      	ldr	r3, [pc, #356]	; (80067e0 <pvPortMalloc+0x184>)
 800667a:	681a      	ldr	r2, [r3, #0]
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	4013      	ands	r3, r2
 8006680:	2b00      	cmp	r3, #0
 8006682:	f040 8093 	bne.w	80067ac <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	2b00      	cmp	r3, #0
 800668a:	d01d      	beq.n	80066c8 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800668c:	2208      	movs	r2, #8
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	4413      	add	r3, r2
 8006692:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	f003 0307 	and.w	r3, r3, #7
 800669a:	2b00      	cmp	r3, #0
 800669c:	d014      	beq.n	80066c8 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	f023 0307 	bic.w	r3, r3, #7
 80066a4:	3308      	adds	r3, #8
 80066a6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	f003 0307 	and.w	r3, r3, #7
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d00a      	beq.n	80066c8 <pvPortMalloc+0x6c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80066b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066b6:	f383 8811 	msr	BASEPRI, r3
 80066ba:	f3bf 8f6f 	isb	sy
 80066be:	f3bf 8f4f 	dsb	sy
 80066c2:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80066c4:	bf00      	nop
 80066c6:	e7fe      	b.n	80066c6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d06e      	beq.n	80067ac <pvPortMalloc+0x150>
 80066ce:	4b45      	ldr	r3, [pc, #276]	; (80067e4 <pvPortMalloc+0x188>)
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	687a      	ldr	r2, [r7, #4]
 80066d4:	429a      	cmp	r2, r3
 80066d6:	d869      	bhi.n	80067ac <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80066d8:	4b43      	ldr	r3, [pc, #268]	; (80067e8 <pvPortMalloc+0x18c>)
 80066da:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80066dc:	4b42      	ldr	r3, [pc, #264]	; (80067e8 <pvPortMalloc+0x18c>)
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80066e2:	e004      	b.n	80066ee <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80066e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066e6:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80066e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80066ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066f0:	685b      	ldr	r3, [r3, #4]
 80066f2:	687a      	ldr	r2, [r7, #4]
 80066f4:	429a      	cmp	r2, r3
 80066f6:	d903      	bls.n	8006700 <pvPortMalloc+0xa4>
 80066f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d1f1      	bne.n	80066e4 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006700:	4b36      	ldr	r3, [pc, #216]	; (80067dc <pvPortMalloc+0x180>)
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006706:	429a      	cmp	r2, r3
 8006708:	d050      	beq.n	80067ac <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800670a:	6a3b      	ldr	r3, [r7, #32]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	2208      	movs	r2, #8
 8006710:	4413      	add	r3, r2
 8006712:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006716:	681a      	ldr	r2, [r3, #0]
 8006718:	6a3b      	ldr	r3, [r7, #32]
 800671a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800671c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800671e:	685a      	ldr	r2, [r3, #4]
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	1ad2      	subs	r2, r2, r3
 8006724:	2308      	movs	r3, #8
 8006726:	005b      	lsls	r3, r3, #1
 8006728:	429a      	cmp	r2, r3
 800672a:	d91f      	bls.n	800676c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800672c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	4413      	add	r3, r2
 8006732:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006734:	69bb      	ldr	r3, [r7, #24]
 8006736:	f003 0307 	and.w	r3, r3, #7
 800673a:	2b00      	cmp	r3, #0
 800673c:	d00a      	beq.n	8006754 <pvPortMalloc+0xf8>
	__asm volatile
 800673e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006742:	f383 8811 	msr	BASEPRI, r3
 8006746:	f3bf 8f6f 	isb	sy
 800674a:	f3bf 8f4f 	dsb	sy
 800674e:	613b      	str	r3, [r7, #16]
}
 8006750:	bf00      	nop
 8006752:	e7fe      	b.n	8006752 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006756:	685a      	ldr	r2, [r3, #4]
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	1ad2      	subs	r2, r2, r3
 800675c:	69bb      	ldr	r3, [r7, #24]
 800675e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006762:	687a      	ldr	r2, [r7, #4]
 8006764:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006766:	69b8      	ldr	r0, [r7, #24]
 8006768:	f000 f908 	bl	800697c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800676c:	4b1d      	ldr	r3, [pc, #116]	; (80067e4 <pvPortMalloc+0x188>)
 800676e:	681a      	ldr	r2, [r3, #0]
 8006770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006772:	685b      	ldr	r3, [r3, #4]
 8006774:	1ad3      	subs	r3, r2, r3
 8006776:	4a1b      	ldr	r2, [pc, #108]	; (80067e4 <pvPortMalloc+0x188>)
 8006778:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800677a:	4b1a      	ldr	r3, [pc, #104]	; (80067e4 <pvPortMalloc+0x188>)
 800677c:	681a      	ldr	r2, [r3, #0]
 800677e:	4b1b      	ldr	r3, [pc, #108]	; (80067ec <pvPortMalloc+0x190>)
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	429a      	cmp	r2, r3
 8006784:	d203      	bcs.n	800678e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006786:	4b17      	ldr	r3, [pc, #92]	; (80067e4 <pvPortMalloc+0x188>)
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	4a18      	ldr	r2, [pc, #96]	; (80067ec <pvPortMalloc+0x190>)
 800678c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800678e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006790:	685a      	ldr	r2, [r3, #4]
 8006792:	4b13      	ldr	r3, [pc, #76]	; (80067e0 <pvPortMalloc+0x184>)
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	431a      	orrs	r2, r3
 8006798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800679a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800679c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800679e:	2200      	movs	r2, #0
 80067a0:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80067a2:	4b13      	ldr	r3, [pc, #76]	; (80067f0 <pvPortMalloc+0x194>)
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	3301      	adds	r3, #1
 80067a8:	4a11      	ldr	r2, [pc, #68]	; (80067f0 <pvPortMalloc+0x194>)
 80067aa:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80067ac:	f001 fa0a 	bl	8007bc4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80067b0:	69fb      	ldr	r3, [r7, #28]
 80067b2:	f003 0307 	and.w	r3, r3, #7
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d00a      	beq.n	80067d0 <pvPortMalloc+0x174>
	__asm volatile
 80067ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067be:	f383 8811 	msr	BASEPRI, r3
 80067c2:	f3bf 8f6f 	isb	sy
 80067c6:	f3bf 8f4f 	dsb	sy
 80067ca:	60fb      	str	r3, [r7, #12]
}
 80067cc:	bf00      	nop
 80067ce:	e7fe      	b.n	80067ce <pvPortMalloc+0x172>
	return pvReturn;
 80067d0:	69fb      	ldr	r3, [r7, #28]
}
 80067d2:	4618      	mov	r0, r3
 80067d4:	3728      	adds	r7, #40	; 0x28
 80067d6:	46bd      	mov	sp, r7
 80067d8:	bd80      	pop	{r7, pc}
 80067da:	bf00      	nop
 80067dc:	24003f54 	.word	0x24003f54
 80067e0:	24003f68 	.word	0x24003f68
 80067e4:	24003f58 	.word	0x24003f58
 80067e8:	24003f4c 	.word	0x24003f4c
 80067ec:	24003f5c 	.word	0x24003f5c
 80067f0:	24003f60 	.word	0x24003f60

080067f4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80067f4:	b580      	push	{r7, lr}
 80067f6:	b086      	sub	sp, #24
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	2b00      	cmp	r3, #0
 8006804:	d04d      	beq.n	80068a2 <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006806:	2308      	movs	r3, #8
 8006808:	425b      	negs	r3, r3
 800680a:	697a      	ldr	r2, [r7, #20]
 800680c:	4413      	add	r3, r2
 800680e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006810:	697b      	ldr	r3, [r7, #20]
 8006812:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006814:	693b      	ldr	r3, [r7, #16]
 8006816:	685a      	ldr	r2, [r3, #4]
 8006818:	4b24      	ldr	r3, [pc, #144]	; (80068ac <vPortFree+0xb8>)
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	4013      	ands	r3, r2
 800681e:	2b00      	cmp	r3, #0
 8006820:	d10a      	bne.n	8006838 <vPortFree+0x44>
	__asm volatile
 8006822:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006826:	f383 8811 	msr	BASEPRI, r3
 800682a:	f3bf 8f6f 	isb	sy
 800682e:	f3bf 8f4f 	dsb	sy
 8006832:	60fb      	str	r3, [r7, #12]
}
 8006834:	bf00      	nop
 8006836:	e7fe      	b.n	8006836 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006838:	693b      	ldr	r3, [r7, #16]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	2b00      	cmp	r3, #0
 800683e:	d00a      	beq.n	8006856 <vPortFree+0x62>
	__asm volatile
 8006840:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006844:	f383 8811 	msr	BASEPRI, r3
 8006848:	f3bf 8f6f 	isb	sy
 800684c:	f3bf 8f4f 	dsb	sy
 8006850:	60bb      	str	r3, [r7, #8]
}
 8006852:	bf00      	nop
 8006854:	e7fe      	b.n	8006854 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006856:	693b      	ldr	r3, [r7, #16]
 8006858:	685a      	ldr	r2, [r3, #4]
 800685a:	4b14      	ldr	r3, [pc, #80]	; (80068ac <vPortFree+0xb8>)
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	4013      	ands	r3, r2
 8006860:	2b00      	cmp	r3, #0
 8006862:	d01e      	beq.n	80068a2 <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006864:	693b      	ldr	r3, [r7, #16]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	2b00      	cmp	r3, #0
 800686a:	d11a      	bne.n	80068a2 <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800686c:	693b      	ldr	r3, [r7, #16]
 800686e:	685a      	ldr	r2, [r3, #4]
 8006870:	4b0e      	ldr	r3, [pc, #56]	; (80068ac <vPortFree+0xb8>)
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	43db      	mvns	r3, r3
 8006876:	401a      	ands	r2, r3
 8006878:	693b      	ldr	r3, [r7, #16]
 800687a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800687c:	f001 f994 	bl	8007ba8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006880:	693b      	ldr	r3, [r7, #16]
 8006882:	685a      	ldr	r2, [r3, #4]
 8006884:	4b0a      	ldr	r3, [pc, #40]	; (80068b0 <vPortFree+0xbc>)
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	4413      	add	r3, r2
 800688a:	4a09      	ldr	r2, [pc, #36]	; (80068b0 <vPortFree+0xbc>)
 800688c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800688e:	6938      	ldr	r0, [r7, #16]
 8006890:	f000 f874 	bl	800697c <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006894:	4b07      	ldr	r3, [pc, #28]	; (80068b4 <vPortFree+0xc0>)
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	3301      	adds	r3, #1
 800689a:	4a06      	ldr	r2, [pc, #24]	; (80068b4 <vPortFree+0xc0>)
 800689c:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800689e:	f001 f991 	bl	8007bc4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80068a2:	bf00      	nop
 80068a4:	3718      	adds	r7, #24
 80068a6:	46bd      	mov	sp, r7
 80068a8:	bd80      	pop	{r7, pc}
 80068aa:	bf00      	nop
 80068ac:	24003f68 	.word	0x24003f68
 80068b0:	24003f58 	.word	0x24003f58
 80068b4:	24003f64 	.word	0x24003f64

080068b8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80068b8:	b480      	push	{r7}
 80068ba:	b085      	sub	sp, #20
 80068bc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80068be:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80068c2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80068c4:	4b27      	ldr	r3, [pc, #156]	; (8006964 <prvHeapInit+0xac>)
 80068c6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	f003 0307 	and.w	r3, r3, #7
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d00c      	beq.n	80068ec <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	3307      	adds	r3, #7
 80068d6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	f023 0307 	bic.w	r3, r3, #7
 80068de:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80068e0:	68ba      	ldr	r2, [r7, #8]
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	1ad3      	subs	r3, r2, r3
 80068e6:	4a1f      	ldr	r2, [pc, #124]	; (8006964 <prvHeapInit+0xac>)
 80068e8:	4413      	add	r3, r2
 80068ea:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80068f0:	4a1d      	ldr	r2, [pc, #116]	; (8006968 <prvHeapInit+0xb0>)
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80068f6:	4b1c      	ldr	r3, [pc, #112]	; (8006968 <prvHeapInit+0xb0>)
 80068f8:	2200      	movs	r2, #0
 80068fa:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	68ba      	ldr	r2, [r7, #8]
 8006900:	4413      	add	r3, r2
 8006902:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006904:	2208      	movs	r2, #8
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	1a9b      	subs	r3, r3, r2
 800690a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	f023 0307 	bic.w	r3, r3, #7
 8006912:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	4a15      	ldr	r2, [pc, #84]	; (800696c <prvHeapInit+0xb4>)
 8006918:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800691a:	4b14      	ldr	r3, [pc, #80]	; (800696c <prvHeapInit+0xb4>)
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	2200      	movs	r2, #0
 8006920:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006922:	4b12      	ldr	r3, [pc, #72]	; (800696c <prvHeapInit+0xb4>)
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	2200      	movs	r2, #0
 8006928:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800692e:	683b      	ldr	r3, [r7, #0]
 8006930:	68fa      	ldr	r2, [r7, #12]
 8006932:	1ad2      	subs	r2, r2, r3
 8006934:	683b      	ldr	r3, [r7, #0]
 8006936:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006938:	4b0c      	ldr	r3, [pc, #48]	; (800696c <prvHeapInit+0xb4>)
 800693a:	681a      	ldr	r2, [r3, #0]
 800693c:	683b      	ldr	r3, [r7, #0]
 800693e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006940:	683b      	ldr	r3, [r7, #0]
 8006942:	685b      	ldr	r3, [r3, #4]
 8006944:	4a0a      	ldr	r2, [pc, #40]	; (8006970 <prvHeapInit+0xb8>)
 8006946:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006948:	683b      	ldr	r3, [r7, #0]
 800694a:	685b      	ldr	r3, [r3, #4]
 800694c:	4a09      	ldr	r2, [pc, #36]	; (8006974 <prvHeapInit+0xbc>)
 800694e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006950:	4b09      	ldr	r3, [pc, #36]	; (8006978 <prvHeapInit+0xc0>)
 8006952:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006956:	601a      	str	r2, [r3, #0]
}
 8006958:	bf00      	nop
 800695a:	3714      	adds	r7, #20
 800695c:	46bd      	mov	sp, r7
 800695e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006962:	4770      	bx	lr
 8006964:	2400034c 	.word	0x2400034c
 8006968:	24003f4c 	.word	0x24003f4c
 800696c:	24003f54 	.word	0x24003f54
 8006970:	24003f5c 	.word	0x24003f5c
 8006974:	24003f58 	.word	0x24003f58
 8006978:	24003f68 	.word	0x24003f68

0800697c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800697c:	b480      	push	{r7}
 800697e:	b085      	sub	sp, #20
 8006980:	af00      	add	r7, sp, #0
 8006982:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006984:	4b28      	ldr	r3, [pc, #160]	; (8006a28 <prvInsertBlockIntoFreeList+0xac>)
 8006986:	60fb      	str	r3, [r7, #12]
 8006988:	e002      	b.n	8006990 <prvInsertBlockIntoFreeList+0x14>
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	60fb      	str	r3, [r7, #12]
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	687a      	ldr	r2, [r7, #4]
 8006996:	429a      	cmp	r2, r3
 8006998:	d8f7      	bhi.n	800698a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	685b      	ldr	r3, [r3, #4]
 80069a2:	68ba      	ldr	r2, [r7, #8]
 80069a4:	4413      	add	r3, r2
 80069a6:	687a      	ldr	r2, [r7, #4]
 80069a8:	429a      	cmp	r2, r3
 80069aa:	d108      	bne.n	80069be <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	685a      	ldr	r2, [r3, #4]
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	685b      	ldr	r3, [r3, #4]
 80069b4:	441a      	add	r2, r3
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	685b      	ldr	r3, [r3, #4]
 80069c6:	68ba      	ldr	r2, [r7, #8]
 80069c8:	441a      	add	r2, r3
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	429a      	cmp	r2, r3
 80069d0:	d118      	bne.n	8006a04 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	681a      	ldr	r2, [r3, #0]
 80069d6:	4b15      	ldr	r3, [pc, #84]	; (8006a2c <prvInsertBlockIntoFreeList+0xb0>)
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	429a      	cmp	r2, r3
 80069dc:	d00d      	beq.n	80069fa <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	685a      	ldr	r2, [r3, #4]
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	685b      	ldr	r3, [r3, #4]
 80069e8:	441a      	add	r2, r3
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	681a      	ldr	r2, [r3, #0]
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	601a      	str	r2, [r3, #0]
 80069f8:	e008      	b.n	8006a0c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80069fa:	4b0c      	ldr	r3, [pc, #48]	; (8006a2c <prvInsertBlockIntoFreeList+0xb0>)
 80069fc:	681a      	ldr	r2, [r3, #0]
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	601a      	str	r2, [r3, #0]
 8006a02:	e003      	b.n	8006a0c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	681a      	ldr	r2, [r3, #0]
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006a0c:	68fa      	ldr	r2, [r7, #12]
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	429a      	cmp	r2, r3
 8006a12:	d002      	beq.n	8006a1a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	687a      	ldr	r2, [r7, #4]
 8006a18:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006a1a:	bf00      	nop
 8006a1c:	3714      	adds	r7, #20
 8006a1e:	46bd      	mov	sp, r7
 8006a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a24:	4770      	bx	lr
 8006a26:	bf00      	nop
 8006a28:	24003f4c 	.word	0x24003f4c
 8006a2c:	24003f54 	.word	0x24003f54

08006a30 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006a30:	b480      	push	{r7}
 8006a32:	b083      	sub	sp, #12
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	f103 0208 	add.w	r2, r3, #8
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	f04f 32ff 	mov.w	r2, #4294967295
 8006a48:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	f103 0208 	add.w	r2, r3, #8
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	f103 0208 	add.w	r2, r3, #8
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	2200      	movs	r2, #0
 8006a62:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006a64:	bf00      	nop
 8006a66:	370c      	adds	r7, #12
 8006a68:	46bd      	mov	sp, r7
 8006a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a6e:	4770      	bx	lr

08006a70 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006a70:	b480      	push	{r7}
 8006a72:	b083      	sub	sp, #12
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	2200      	movs	r2, #0
 8006a7c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006a7e:	bf00      	nop
 8006a80:	370c      	adds	r7, #12
 8006a82:	46bd      	mov	sp, r7
 8006a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a88:	4770      	bx	lr

08006a8a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006a8a:	b480      	push	{r7}
 8006a8c:	b085      	sub	sp, #20
 8006a8e:	af00      	add	r7, sp, #0
 8006a90:	6078      	str	r0, [r7, #4]
 8006a92:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	685b      	ldr	r3, [r3, #4]
 8006a98:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006a9a:	683b      	ldr	r3, [r7, #0]
 8006a9c:	68fa      	ldr	r2, [r7, #12]
 8006a9e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	689a      	ldr	r2, [r3, #8]
 8006aa4:	683b      	ldr	r3, [r7, #0]
 8006aa6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	689b      	ldr	r3, [r3, #8]
 8006aac:	683a      	ldr	r2, [r7, #0]
 8006aae:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	683a      	ldr	r2, [r7, #0]
 8006ab4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006ab6:	683b      	ldr	r3, [r7, #0]
 8006ab8:	687a      	ldr	r2, [r7, #4]
 8006aba:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	1c5a      	adds	r2, r3, #1
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	601a      	str	r2, [r3, #0]
}
 8006ac6:	bf00      	nop
 8006ac8:	3714      	adds	r7, #20
 8006aca:	46bd      	mov	sp, r7
 8006acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad0:	4770      	bx	lr

08006ad2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006ad2:	b480      	push	{r7}
 8006ad4:	b085      	sub	sp, #20
 8006ad6:	af00      	add	r7, sp, #0
 8006ad8:	6078      	str	r0, [r7, #4]
 8006ada:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006adc:	683b      	ldr	r3, [r7, #0]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006ae2:	68bb      	ldr	r3, [r7, #8]
 8006ae4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ae8:	d103      	bne.n	8006af2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	691b      	ldr	r3, [r3, #16]
 8006aee:	60fb      	str	r3, [r7, #12]
 8006af0:	e00c      	b.n	8006b0c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	3308      	adds	r3, #8
 8006af6:	60fb      	str	r3, [r7, #12]
 8006af8:	e002      	b.n	8006b00 <vListInsert+0x2e>
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	685b      	ldr	r3, [r3, #4]
 8006afe:	60fb      	str	r3, [r7, #12]
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	685b      	ldr	r3, [r3, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	68ba      	ldr	r2, [r7, #8]
 8006b08:	429a      	cmp	r2, r3
 8006b0a:	d2f6      	bcs.n	8006afa <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	685a      	ldr	r2, [r3, #4]
 8006b10:	683b      	ldr	r3, [r7, #0]
 8006b12:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006b14:	683b      	ldr	r3, [r7, #0]
 8006b16:	685b      	ldr	r3, [r3, #4]
 8006b18:	683a      	ldr	r2, [r7, #0]
 8006b1a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006b1c:	683b      	ldr	r3, [r7, #0]
 8006b1e:	68fa      	ldr	r2, [r7, #12]
 8006b20:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	683a      	ldr	r2, [r7, #0]
 8006b26:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006b28:	683b      	ldr	r3, [r7, #0]
 8006b2a:	687a      	ldr	r2, [r7, #4]
 8006b2c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	1c5a      	adds	r2, r3, #1
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	601a      	str	r2, [r3, #0]
}
 8006b38:	bf00      	nop
 8006b3a:	3714      	adds	r7, #20
 8006b3c:	46bd      	mov	sp, r7
 8006b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b42:	4770      	bx	lr

08006b44 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006b44:	b480      	push	{r7}
 8006b46:	b085      	sub	sp, #20
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	691b      	ldr	r3, [r3, #16]
 8006b50:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	685b      	ldr	r3, [r3, #4]
 8006b56:	687a      	ldr	r2, [r7, #4]
 8006b58:	6892      	ldr	r2, [r2, #8]
 8006b5a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	689b      	ldr	r3, [r3, #8]
 8006b60:	687a      	ldr	r2, [r7, #4]
 8006b62:	6852      	ldr	r2, [r2, #4]
 8006b64:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	685b      	ldr	r3, [r3, #4]
 8006b6a:	687a      	ldr	r2, [r7, #4]
 8006b6c:	429a      	cmp	r2, r3
 8006b6e:	d103      	bne.n	8006b78 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	689a      	ldr	r2, [r3, #8]
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	2200      	movs	r2, #0
 8006b7c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	1e5a      	subs	r2, r3, #1
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	681b      	ldr	r3, [r3, #0]
}
 8006b8c:	4618      	mov	r0, r3
 8006b8e:	3714      	adds	r7, #20
 8006b90:	46bd      	mov	sp, r7
 8006b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b96:	4770      	bx	lr

08006b98 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006b98:	b480      	push	{r7}
 8006b9a:	b085      	sub	sp, #20
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	60f8      	str	r0, [r7, #12]
 8006ba0:	60b9      	str	r1, [r7, #8]
 8006ba2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	3b04      	subs	r3, #4
 8006ba8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006bb0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	3b04      	subs	r3, #4
 8006bb6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006bb8:	68bb      	ldr	r3, [r7, #8]
 8006bba:	f023 0201 	bic.w	r2, r3, #1
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	3b04      	subs	r3, #4
 8006bc6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006bc8:	4a0c      	ldr	r2, [pc, #48]	; (8006bfc <pxPortInitialiseStack+0x64>)
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	3b14      	subs	r3, #20
 8006bd2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006bd4:	687a      	ldr	r2, [r7, #4]
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	3b04      	subs	r3, #4
 8006bde:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	f06f 0202 	mvn.w	r2, #2
 8006be6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	3b20      	subs	r3, #32
 8006bec:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006bee:	68fb      	ldr	r3, [r7, #12]
}
 8006bf0:	4618      	mov	r0, r3
 8006bf2:	3714      	adds	r7, #20
 8006bf4:	46bd      	mov	sp, r7
 8006bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bfa:	4770      	bx	lr
 8006bfc:	08006c01 	.word	0x08006c01

08006c00 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006c00:	b480      	push	{r7}
 8006c02:	b085      	sub	sp, #20
 8006c04:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006c06:	2300      	movs	r3, #0
 8006c08:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006c0a:	4b12      	ldr	r3, [pc, #72]	; (8006c54 <prvTaskExitError+0x54>)
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c12:	d00a      	beq.n	8006c2a <prvTaskExitError+0x2a>
	__asm volatile
 8006c14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c18:	f383 8811 	msr	BASEPRI, r3
 8006c1c:	f3bf 8f6f 	isb	sy
 8006c20:	f3bf 8f4f 	dsb	sy
 8006c24:	60fb      	str	r3, [r7, #12]
}
 8006c26:	bf00      	nop
 8006c28:	e7fe      	b.n	8006c28 <prvTaskExitError+0x28>
	__asm volatile
 8006c2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c2e:	f383 8811 	msr	BASEPRI, r3
 8006c32:	f3bf 8f6f 	isb	sy
 8006c36:	f3bf 8f4f 	dsb	sy
 8006c3a:	60bb      	str	r3, [r7, #8]
}
 8006c3c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006c3e:	bf00      	nop
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d0fc      	beq.n	8006c40 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006c46:	bf00      	nop
 8006c48:	bf00      	nop
 8006c4a:	3714      	adds	r7, #20
 8006c4c:	46bd      	mov	sp, r7
 8006c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c52:	4770      	bx	lr
 8006c54:	24000010 	.word	0x24000010
	...

08006c60 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006c60:	4b07      	ldr	r3, [pc, #28]	; (8006c80 <pxCurrentTCBConst2>)
 8006c62:	6819      	ldr	r1, [r3, #0]
 8006c64:	6808      	ldr	r0, [r1, #0]
 8006c66:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c6a:	f380 8809 	msr	PSP, r0
 8006c6e:	f3bf 8f6f 	isb	sy
 8006c72:	f04f 0000 	mov.w	r0, #0
 8006c76:	f380 8811 	msr	BASEPRI, r0
 8006c7a:	4770      	bx	lr
 8006c7c:	f3af 8000 	nop.w

08006c80 <pxCurrentTCBConst2>:
 8006c80:	24003f74 	.word	0x24003f74
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006c84:	bf00      	nop
 8006c86:	bf00      	nop

08006c88 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006c88:	4808      	ldr	r0, [pc, #32]	; (8006cac <prvPortStartFirstTask+0x24>)
 8006c8a:	6800      	ldr	r0, [r0, #0]
 8006c8c:	6800      	ldr	r0, [r0, #0]
 8006c8e:	f380 8808 	msr	MSP, r0
 8006c92:	f04f 0000 	mov.w	r0, #0
 8006c96:	f380 8814 	msr	CONTROL, r0
 8006c9a:	b662      	cpsie	i
 8006c9c:	b661      	cpsie	f
 8006c9e:	f3bf 8f4f 	dsb	sy
 8006ca2:	f3bf 8f6f 	isb	sy
 8006ca6:	df00      	svc	0
 8006ca8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006caa:	bf00      	nop
 8006cac:	e000ed08 	.word	0xe000ed08

08006cb0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006cb0:	b580      	push	{r7, lr}
 8006cb2:	b086      	sub	sp, #24
 8006cb4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006cb6:	4b46      	ldr	r3, [pc, #280]	; (8006dd0 <xPortStartScheduler+0x120>)
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	4a46      	ldr	r2, [pc, #280]	; (8006dd4 <xPortStartScheduler+0x124>)
 8006cbc:	4293      	cmp	r3, r2
 8006cbe:	d10a      	bne.n	8006cd6 <xPortStartScheduler+0x26>
	__asm volatile
 8006cc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cc4:	f383 8811 	msr	BASEPRI, r3
 8006cc8:	f3bf 8f6f 	isb	sy
 8006ccc:	f3bf 8f4f 	dsb	sy
 8006cd0:	613b      	str	r3, [r7, #16]
}
 8006cd2:	bf00      	nop
 8006cd4:	e7fe      	b.n	8006cd4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006cd6:	4b3e      	ldr	r3, [pc, #248]	; (8006dd0 <xPortStartScheduler+0x120>)
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	4a3f      	ldr	r2, [pc, #252]	; (8006dd8 <xPortStartScheduler+0x128>)
 8006cdc:	4293      	cmp	r3, r2
 8006cde:	d10a      	bne.n	8006cf6 <xPortStartScheduler+0x46>
	__asm volatile
 8006ce0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ce4:	f383 8811 	msr	BASEPRI, r3
 8006ce8:	f3bf 8f6f 	isb	sy
 8006cec:	f3bf 8f4f 	dsb	sy
 8006cf0:	60fb      	str	r3, [r7, #12]
}
 8006cf2:	bf00      	nop
 8006cf4:	e7fe      	b.n	8006cf4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006cf6:	4b39      	ldr	r3, [pc, #228]	; (8006ddc <xPortStartScheduler+0x12c>)
 8006cf8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006cfa:	697b      	ldr	r3, [r7, #20]
 8006cfc:	781b      	ldrb	r3, [r3, #0]
 8006cfe:	b2db      	uxtb	r3, r3
 8006d00:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006d02:	697b      	ldr	r3, [r7, #20]
 8006d04:	22ff      	movs	r2, #255	; 0xff
 8006d06:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006d08:	697b      	ldr	r3, [r7, #20]
 8006d0a:	781b      	ldrb	r3, [r3, #0]
 8006d0c:	b2db      	uxtb	r3, r3
 8006d0e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006d10:	78fb      	ldrb	r3, [r7, #3]
 8006d12:	b2db      	uxtb	r3, r3
 8006d14:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006d18:	b2da      	uxtb	r2, r3
 8006d1a:	4b31      	ldr	r3, [pc, #196]	; (8006de0 <xPortStartScheduler+0x130>)
 8006d1c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006d1e:	4b31      	ldr	r3, [pc, #196]	; (8006de4 <xPortStartScheduler+0x134>)
 8006d20:	2207      	movs	r2, #7
 8006d22:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006d24:	e009      	b.n	8006d3a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8006d26:	4b2f      	ldr	r3, [pc, #188]	; (8006de4 <xPortStartScheduler+0x134>)
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	3b01      	subs	r3, #1
 8006d2c:	4a2d      	ldr	r2, [pc, #180]	; (8006de4 <xPortStartScheduler+0x134>)
 8006d2e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006d30:	78fb      	ldrb	r3, [r7, #3]
 8006d32:	b2db      	uxtb	r3, r3
 8006d34:	005b      	lsls	r3, r3, #1
 8006d36:	b2db      	uxtb	r3, r3
 8006d38:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006d3a:	78fb      	ldrb	r3, [r7, #3]
 8006d3c:	b2db      	uxtb	r3, r3
 8006d3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d42:	2b80      	cmp	r3, #128	; 0x80
 8006d44:	d0ef      	beq.n	8006d26 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006d46:	4b27      	ldr	r3, [pc, #156]	; (8006de4 <xPortStartScheduler+0x134>)
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	f1c3 0307 	rsb	r3, r3, #7
 8006d4e:	2b04      	cmp	r3, #4
 8006d50:	d00a      	beq.n	8006d68 <xPortStartScheduler+0xb8>
	__asm volatile
 8006d52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d56:	f383 8811 	msr	BASEPRI, r3
 8006d5a:	f3bf 8f6f 	isb	sy
 8006d5e:	f3bf 8f4f 	dsb	sy
 8006d62:	60bb      	str	r3, [r7, #8]
}
 8006d64:	bf00      	nop
 8006d66:	e7fe      	b.n	8006d66 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006d68:	4b1e      	ldr	r3, [pc, #120]	; (8006de4 <xPortStartScheduler+0x134>)
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	021b      	lsls	r3, r3, #8
 8006d6e:	4a1d      	ldr	r2, [pc, #116]	; (8006de4 <xPortStartScheduler+0x134>)
 8006d70:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006d72:	4b1c      	ldr	r3, [pc, #112]	; (8006de4 <xPortStartScheduler+0x134>)
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006d7a:	4a1a      	ldr	r2, [pc, #104]	; (8006de4 <xPortStartScheduler+0x134>)
 8006d7c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	b2da      	uxtb	r2, r3
 8006d82:	697b      	ldr	r3, [r7, #20]
 8006d84:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006d86:	4b18      	ldr	r3, [pc, #96]	; (8006de8 <xPortStartScheduler+0x138>)
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	4a17      	ldr	r2, [pc, #92]	; (8006de8 <xPortStartScheduler+0x138>)
 8006d8c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006d90:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006d92:	4b15      	ldr	r3, [pc, #84]	; (8006de8 <xPortStartScheduler+0x138>)
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	4a14      	ldr	r2, [pc, #80]	; (8006de8 <xPortStartScheduler+0x138>)
 8006d98:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006d9c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006d9e:	f000 f8dd 	bl	8006f5c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006da2:	4b12      	ldr	r3, [pc, #72]	; (8006dec <xPortStartScheduler+0x13c>)
 8006da4:	2200      	movs	r2, #0
 8006da6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006da8:	f000 f8fc 	bl	8006fa4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006dac:	4b10      	ldr	r3, [pc, #64]	; (8006df0 <xPortStartScheduler+0x140>)
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	4a0f      	ldr	r2, [pc, #60]	; (8006df0 <xPortStartScheduler+0x140>)
 8006db2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006db6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006db8:	f7ff ff66 	bl	8006c88 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006dbc:	f001 f856 	bl	8007e6c <vTaskSwitchContext>
	prvTaskExitError();
 8006dc0:	f7ff ff1e 	bl	8006c00 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006dc4:	2300      	movs	r3, #0
}
 8006dc6:	4618      	mov	r0, r3
 8006dc8:	3718      	adds	r7, #24
 8006dca:	46bd      	mov	sp, r7
 8006dcc:	bd80      	pop	{r7, pc}
 8006dce:	bf00      	nop
 8006dd0:	e000ed00 	.word	0xe000ed00
 8006dd4:	410fc271 	.word	0x410fc271
 8006dd8:	410fc270 	.word	0x410fc270
 8006ddc:	e000e400 	.word	0xe000e400
 8006de0:	24003f6c 	.word	0x24003f6c
 8006de4:	24003f70 	.word	0x24003f70
 8006de8:	e000ed20 	.word	0xe000ed20
 8006dec:	24000010 	.word	0x24000010
 8006df0:	e000ef34 	.word	0xe000ef34

08006df4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006df4:	b480      	push	{r7}
 8006df6:	b083      	sub	sp, #12
 8006df8:	af00      	add	r7, sp, #0
	__asm volatile
 8006dfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dfe:	f383 8811 	msr	BASEPRI, r3
 8006e02:	f3bf 8f6f 	isb	sy
 8006e06:	f3bf 8f4f 	dsb	sy
 8006e0a:	607b      	str	r3, [r7, #4]
}
 8006e0c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006e0e:	4b0f      	ldr	r3, [pc, #60]	; (8006e4c <vPortEnterCritical+0x58>)
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	3301      	adds	r3, #1
 8006e14:	4a0d      	ldr	r2, [pc, #52]	; (8006e4c <vPortEnterCritical+0x58>)
 8006e16:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006e18:	4b0c      	ldr	r3, [pc, #48]	; (8006e4c <vPortEnterCritical+0x58>)
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	2b01      	cmp	r3, #1
 8006e1e:	d10f      	bne.n	8006e40 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006e20:	4b0b      	ldr	r3, [pc, #44]	; (8006e50 <vPortEnterCritical+0x5c>)
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	b2db      	uxtb	r3, r3
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d00a      	beq.n	8006e40 <vPortEnterCritical+0x4c>
	__asm volatile
 8006e2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e2e:	f383 8811 	msr	BASEPRI, r3
 8006e32:	f3bf 8f6f 	isb	sy
 8006e36:	f3bf 8f4f 	dsb	sy
 8006e3a:	603b      	str	r3, [r7, #0]
}
 8006e3c:	bf00      	nop
 8006e3e:	e7fe      	b.n	8006e3e <vPortEnterCritical+0x4a>
	}
}
 8006e40:	bf00      	nop
 8006e42:	370c      	adds	r7, #12
 8006e44:	46bd      	mov	sp, r7
 8006e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e4a:	4770      	bx	lr
 8006e4c:	24000010 	.word	0x24000010
 8006e50:	e000ed04 	.word	0xe000ed04

08006e54 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006e54:	b480      	push	{r7}
 8006e56:	b083      	sub	sp, #12
 8006e58:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006e5a:	4b12      	ldr	r3, [pc, #72]	; (8006ea4 <vPortExitCritical+0x50>)
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d10a      	bne.n	8006e78 <vPortExitCritical+0x24>
	__asm volatile
 8006e62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e66:	f383 8811 	msr	BASEPRI, r3
 8006e6a:	f3bf 8f6f 	isb	sy
 8006e6e:	f3bf 8f4f 	dsb	sy
 8006e72:	607b      	str	r3, [r7, #4]
}
 8006e74:	bf00      	nop
 8006e76:	e7fe      	b.n	8006e76 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006e78:	4b0a      	ldr	r3, [pc, #40]	; (8006ea4 <vPortExitCritical+0x50>)
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	3b01      	subs	r3, #1
 8006e7e:	4a09      	ldr	r2, [pc, #36]	; (8006ea4 <vPortExitCritical+0x50>)
 8006e80:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006e82:	4b08      	ldr	r3, [pc, #32]	; (8006ea4 <vPortExitCritical+0x50>)
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d105      	bne.n	8006e96 <vPortExitCritical+0x42>
 8006e8a:	2300      	movs	r3, #0
 8006e8c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006e8e:	683b      	ldr	r3, [r7, #0]
 8006e90:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006e94:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006e96:	bf00      	nop
 8006e98:	370c      	adds	r7, #12
 8006e9a:	46bd      	mov	sp, r7
 8006e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea0:	4770      	bx	lr
 8006ea2:	bf00      	nop
 8006ea4:	24000010 	.word	0x24000010
	...

08006eb0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006eb0:	f3ef 8009 	mrs	r0, PSP
 8006eb4:	f3bf 8f6f 	isb	sy
 8006eb8:	4b15      	ldr	r3, [pc, #84]	; (8006f10 <pxCurrentTCBConst>)
 8006eba:	681a      	ldr	r2, [r3, #0]
 8006ebc:	f01e 0f10 	tst.w	lr, #16
 8006ec0:	bf08      	it	eq
 8006ec2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006ec6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006eca:	6010      	str	r0, [r2, #0]
 8006ecc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006ed0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006ed4:	f380 8811 	msr	BASEPRI, r0
 8006ed8:	f3bf 8f4f 	dsb	sy
 8006edc:	f3bf 8f6f 	isb	sy
 8006ee0:	f000 ffc4 	bl	8007e6c <vTaskSwitchContext>
 8006ee4:	f04f 0000 	mov.w	r0, #0
 8006ee8:	f380 8811 	msr	BASEPRI, r0
 8006eec:	bc09      	pop	{r0, r3}
 8006eee:	6819      	ldr	r1, [r3, #0]
 8006ef0:	6808      	ldr	r0, [r1, #0]
 8006ef2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ef6:	f01e 0f10 	tst.w	lr, #16
 8006efa:	bf08      	it	eq
 8006efc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006f00:	f380 8809 	msr	PSP, r0
 8006f04:	f3bf 8f6f 	isb	sy
 8006f08:	4770      	bx	lr
 8006f0a:	bf00      	nop
 8006f0c:	f3af 8000 	nop.w

08006f10 <pxCurrentTCBConst>:
 8006f10:	24003f74 	.word	0x24003f74
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006f14:	bf00      	nop
 8006f16:	bf00      	nop

08006f18 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006f18:	b580      	push	{r7, lr}
 8006f1a:	b082      	sub	sp, #8
 8006f1c:	af00      	add	r7, sp, #0
	__asm volatile
 8006f1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f22:	f383 8811 	msr	BASEPRI, r3
 8006f26:	f3bf 8f6f 	isb	sy
 8006f2a:	f3bf 8f4f 	dsb	sy
 8006f2e:	607b      	str	r3, [r7, #4]
}
 8006f30:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006f32:	f000 fee3 	bl	8007cfc <xTaskIncrementTick>
 8006f36:	4603      	mov	r3, r0
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d003      	beq.n	8006f44 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006f3c:	4b06      	ldr	r3, [pc, #24]	; (8006f58 <xPortSysTickHandler+0x40>)
 8006f3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f42:	601a      	str	r2, [r3, #0]
 8006f44:	2300      	movs	r3, #0
 8006f46:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006f48:	683b      	ldr	r3, [r7, #0]
 8006f4a:	f383 8811 	msr	BASEPRI, r3
}
 8006f4e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006f50:	bf00      	nop
 8006f52:	3708      	adds	r7, #8
 8006f54:	46bd      	mov	sp, r7
 8006f56:	bd80      	pop	{r7, pc}
 8006f58:	e000ed04 	.word	0xe000ed04

08006f5c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006f5c:	b480      	push	{r7}
 8006f5e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006f60:	4b0b      	ldr	r3, [pc, #44]	; (8006f90 <vPortSetupTimerInterrupt+0x34>)
 8006f62:	2200      	movs	r2, #0
 8006f64:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006f66:	4b0b      	ldr	r3, [pc, #44]	; (8006f94 <vPortSetupTimerInterrupt+0x38>)
 8006f68:	2200      	movs	r2, #0
 8006f6a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006f6c:	4b0a      	ldr	r3, [pc, #40]	; (8006f98 <vPortSetupTimerInterrupt+0x3c>)
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	4a0a      	ldr	r2, [pc, #40]	; (8006f9c <vPortSetupTimerInterrupt+0x40>)
 8006f72:	fba2 2303 	umull	r2, r3, r2, r3
 8006f76:	099b      	lsrs	r3, r3, #6
 8006f78:	4a09      	ldr	r2, [pc, #36]	; (8006fa0 <vPortSetupTimerInterrupt+0x44>)
 8006f7a:	3b01      	subs	r3, #1
 8006f7c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006f7e:	4b04      	ldr	r3, [pc, #16]	; (8006f90 <vPortSetupTimerInterrupt+0x34>)
 8006f80:	2207      	movs	r2, #7
 8006f82:	601a      	str	r2, [r3, #0]
}
 8006f84:	bf00      	nop
 8006f86:	46bd      	mov	sp, r7
 8006f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f8c:	4770      	bx	lr
 8006f8e:	bf00      	nop
 8006f90:	e000e010 	.word	0xe000e010
 8006f94:	e000e018 	.word	0xe000e018
 8006f98:	24000000 	.word	0x24000000
 8006f9c:	10624dd3 	.word	0x10624dd3
 8006fa0:	e000e014 	.word	0xe000e014

08006fa4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006fa4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006fb4 <vPortEnableVFP+0x10>
 8006fa8:	6801      	ldr	r1, [r0, #0]
 8006faa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006fae:	6001      	str	r1, [r0, #0]
 8006fb0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006fb2:	bf00      	nop
 8006fb4:	e000ed88 	.word	0xe000ed88

08006fb8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006fb8:	b580      	push	{r7, lr}
 8006fba:	b084      	sub	sp, #16
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	6078      	str	r0, [r7, #4]
 8006fc0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d10a      	bne.n	8006fe2 <xQueueGenericReset+0x2a>
	__asm volatile
 8006fcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fd0:	f383 8811 	msr	BASEPRI, r3
 8006fd4:	f3bf 8f6f 	isb	sy
 8006fd8:	f3bf 8f4f 	dsb	sy
 8006fdc:	60bb      	str	r3, [r7, #8]
}
 8006fde:	bf00      	nop
 8006fe0:	e7fe      	b.n	8006fe0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006fe2:	f7ff ff07 	bl	8006df4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	681a      	ldr	r2, [r3, #0]
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006fee:	68f9      	ldr	r1, [r7, #12]
 8006ff0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006ff2:	fb01 f303 	mul.w	r3, r1, r3
 8006ff6:	441a      	add	r2, r3
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	2200      	movs	r2, #0
 8007000:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	681a      	ldr	r2, [r3, #0]
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	681a      	ldr	r2, [r3, #0]
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007012:	3b01      	subs	r3, #1
 8007014:	68f9      	ldr	r1, [r7, #12]
 8007016:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007018:	fb01 f303 	mul.w	r3, r1, r3
 800701c:	441a      	add	r2, r3
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	22ff      	movs	r2, #255	; 0xff
 8007026:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	22ff      	movs	r2, #255	; 0xff
 800702e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8007032:	683b      	ldr	r3, [r7, #0]
 8007034:	2b00      	cmp	r3, #0
 8007036:	d114      	bne.n	8007062 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	691b      	ldr	r3, [r3, #16]
 800703c:	2b00      	cmp	r3, #0
 800703e:	d01a      	beq.n	8007076 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	3310      	adds	r3, #16
 8007044:	4618      	mov	r0, r3
 8007046:	f000 ff97 	bl	8007f78 <xTaskRemoveFromEventList>
 800704a:	4603      	mov	r3, r0
 800704c:	2b00      	cmp	r3, #0
 800704e:	d012      	beq.n	8007076 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007050:	4b0c      	ldr	r3, [pc, #48]	; (8007084 <xQueueGenericReset+0xcc>)
 8007052:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007056:	601a      	str	r2, [r3, #0]
 8007058:	f3bf 8f4f 	dsb	sy
 800705c:	f3bf 8f6f 	isb	sy
 8007060:	e009      	b.n	8007076 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	3310      	adds	r3, #16
 8007066:	4618      	mov	r0, r3
 8007068:	f7ff fce2 	bl	8006a30 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	3324      	adds	r3, #36	; 0x24
 8007070:	4618      	mov	r0, r3
 8007072:	f7ff fcdd 	bl	8006a30 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007076:	f7ff feed 	bl	8006e54 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800707a:	2301      	movs	r3, #1
}
 800707c:	4618      	mov	r0, r3
 800707e:	3710      	adds	r7, #16
 8007080:	46bd      	mov	sp, r7
 8007082:	bd80      	pop	{r7, pc}
 8007084:	e000ed04 	.word	0xe000ed04

08007088 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8007088:	b580      	push	{r7, lr}
 800708a:	b08a      	sub	sp, #40	; 0x28
 800708c:	af02      	add	r7, sp, #8
 800708e:	60f8      	str	r0, [r7, #12]
 8007090:	60b9      	str	r1, [r7, #8]
 8007092:	4613      	mov	r3, r2
 8007094:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	2b00      	cmp	r3, #0
 800709a:	d10a      	bne.n	80070b2 <xQueueGenericCreate+0x2a>
	__asm volatile
 800709c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070a0:	f383 8811 	msr	BASEPRI, r3
 80070a4:	f3bf 8f6f 	isb	sy
 80070a8:	f3bf 8f4f 	dsb	sy
 80070ac:	613b      	str	r3, [r7, #16]
}
 80070ae:	bf00      	nop
 80070b0:	e7fe      	b.n	80070b0 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	68ba      	ldr	r2, [r7, #8]
 80070b6:	fb02 f303 	mul.w	r3, r2, r3
 80070ba:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80070bc:	69fb      	ldr	r3, [r7, #28]
 80070be:	3348      	adds	r3, #72	; 0x48
 80070c0:	4618      	mov	r0, r3
 80070c2:	f7ff facb 	bl	800665c <pvPortMalloc>
 80070c6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80070c8:	69bb      	ldr	r3, [r7, #24]
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d011      	beq.n	80070f2 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80070ce:	69bb      	ldr	r3, [r7, #24]
 80070d0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80070d2:	697b      	ldr	r3, [r7, #20]
 80070d4:	3348      	adds	r3, #72	; 0x48
 80070d6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80070d8:	69bb      	ldr	r3, [r7, #24]
 80070da:	2200      	movs	r2, #0
 80070dc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80070e0:	79fa      	ldrb	r2, [r7, #7]
 80070e2:	69bb      	ldr	r3, [r7, #24]
 80070e4:	9300      	str	r3, [sp, #0]
 80070e6:	4613      	mov	r3, r2
 80070e8:	697a      	ldr	r2, [r7, #20]
 80070ea:	68b9      	ldr	r1, [r7, #8]
 80070ec:	68f8      	ldr	r0, [r7, #12]
 80070ee:	f000 f805 	bl	80070fc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80070f2:	69bb      	ldr	r3, [r7, #24]
	}
 80070f4:	4618      	mov	r0, r3
 80070f6:	3720      	adds	r7, #32
 80070f8:	46bd      	mov	sp, r7
 80070fa:	bd80      	pop	{r7, pc}

080070fc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80070fc:	b580      	push	{r7, lr}
 80070fe:	b084      	sub	sp, #16
 8007100:	af00      	add	r7, sp, #0
 8007102:	60f8      	str	r0, [r7, #12]
 8007104:	60b9      	str	r1, [r7, #8]
 8007106:	607a      	str	r2, [r7, #4]
 8007108:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800710a:	68bb      	ldr	r3, [r7, #8]
 800710c:	2b00      	cmp	r3, #0
 800710e:	d103      	bne.n	8007118 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007110:	69bb      	ldr	r3, [r7, #24]
 8007112:	69ba      	ldr	r2, [r7, #24]
 8007114:	601a      	str	r2, [r3, #0]
 8007116:	e002      	b.n	800711e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007118:	69bb      	ldr	r3, [r7, #24]
 800711a:	687a      	ldr	r2, [r7, #4]
 800711c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800711e:	69bb      	ldr	r3, [r7, #24]
 8007120:	68fa      	ldr	r2, [r7, #12]
 8007122:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007124:	69bb      	ldr	r3, [r7, #24]
 8007126:	68ba      	ldr	r2, [r7, #8]
 8007128:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800712a:	2101      	movs	r1, #1
 800712c:	69b8      	ldr	r0, [r7, #24]
 800712e:	f7ff ff43 	bl	8006fb8 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007132:	bf00      	nop
 8007134:	3710      	adds	r7, #16
 8007136:	46bd      	mov	sp, r7
 8007138:	bd80      	pop	{r7, pc}
	...

0800713c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800713c:	b580      	push	{r7, lr}
 800713e:	b08e      	sub	sp, #56	; 0x38
 8007140:	af00      	add	r7, sp, #0
 8007142:	60f8      	str	r0, [r7, #12]
 8007144:	60b9      	str	r1, [r7, #8]
 8007146:	607a      	str	r2, [r7, #4]
 8007148:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800714a:	2300      	movs	r3, #0
 800714c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007152:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007154:	2b00      	cmp	r3, #0
 8007156:	d10a      	bne.n	800716e <xQueueGenericSend+0x32>
	__asm volatile
 8007158:	f04f 0350 	mov.w	r3, #80	; 0x50
 800715c:	f383 8811 	msr	BASEPRI, r3
 8007160:	f3bf 8f6f 	isb	sy
 8007164:	f3bf 8f4f 	dsb	sy
 8007168:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800716a:	bf00      	nop
 800716c:	e7fe      	b.n	800716c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800716e:	68bb      	ldr	r3, [r7, #8]
 8007170:	2b00      	cmp	r3, #0
 8007172:	d103      	bne.n	800717c <xQueueGenericSend+0x40>
 8007174:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007176:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007178:	2b00      	cmp	r3, #0
 800717a:	d101      	bne.n	8007180 <xQueueGenericSend+0x44>
 800717c:	2301      	movs	r3, #1
 800717e:	e000      	b.n	8007182 <xQueueGenericSend+0x46>
 8007180:	2300      	movs	r3, #0
 8007182:	2b00      	cmp	r3, #0
 8007184:	d10a      	bne.n	800719c <xQueueGenericSend+0x60>
	__asm volatile
 8007186:	f04f 0350 	mov.w	r3, #80	; 0x50
 800718a:	f383 8811 	msr	BASEPRI, r3
 800718e:	f3bf 8f6f 	isb	sy
 8007192:	f3bf 8f4f 	dsb	sy
 8007196:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007198:	bf00      	nop
 800719a:	e7fe      	b.n	800719a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800719c:	683b      	ldr	r3, [r7, #0]
 800719e:	2b02      	cmp	r3, #2
 80071a0:	d103      	bne.n	80071aa <xQueueGenericSend+0x6e>
 80071a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071a6:	2b01      	cmp	r3, #1
 80071a8:	d101      	bne.n	80071ae <xQueueGenericSend+0x72>
 80071aa:	2301      	movs	r3, #1
 80071ac:	e000      	b.n	80071b0 <xQueueGenericSend+0x74>
 80071ae:	2300      	movs	r3, #0
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d10a      	bne.n	80071ca <xQueueGenericSend+0x8e>
	__asm volatile
 80071b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071b8:	f383 8811 	msr	BASEPRI, r3
 80071bc:	f3bf 8f6f 	isb	sy
 80071c0:	f3bf 8f4f 	dsb	sy
 80071c4:	623b      	str	r3, [r7, #32]
}
 80071c6:	bf00      	nop
 80071c8:	e7fe      	b.n	80071c8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80071ca:	f001 f895 	bl	80082f8 <xTaskGetSchedulerState>
 80071ce:	4603      	mov	r3, r0
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d102      	bne.n	80071da <xQueueGenericSend+0x9e>
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d101      	bne.n	80071de <xQueueGenericSend+0xa2>
 80071da:	2301      	movs	r3, #1
 80071dc:	e000      	b.n	80071e0 <xQueueGenericSend+0xa4>
 80071de:	2300      	movs	r3, #0
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d10a      	bne.n	80071fa <xQueueGenericSend+0xbe>
	__asm volatile
 80071e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071e8:	f383 8811 	msr	BASEPRI, r3
 80071ec:	f3bf 8f6f 	isb	sy
 80071f0:	f3bf 8f4f 	dsb	sy
 80071f4:	61fb      	str	r3, [r7, #28]
}
 80071f6:	bf00      	nop
 80071f8:	e7fe      	b.n	80071f8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80071fa:	f7ff fdfb 	bl	8006df4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80071fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007200:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007202:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007204:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007206:	429a      	cmp	r2, r3
 8007208:	d302      	bcc.n	8007210 <xQueueGenericSend+0xd4>
 800720a:	683b      	ldr	r3, [r7, #0]
 800720c:	2b02      	cmp	r3, #2
 800720e:	d129      	bne.n	8007264 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007210:	683a      	ldr	r2, [r7, #0]
 8007212:	68b9      	ldr	r1, [r7, #8]
 8007214:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007216:	f000 f96f 	bl	80074f8 <prvCopyDataToQueue>
 800721a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800721c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800721e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007220:	2b00      	cmp	r3, #0
 8007222:	d010      	beq.n	8007246 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007224:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007226:	3324      	adds	r3, #36	; 0x24
 8007228:	4618      	mov	r0, r3
 800722a:	f000 fea5 	bl	8007f78 <xTaskRemoveFromEventList>
 800722e:	4603      	mov	r3, r0
 8007230:	2b00      	cmp	r3, #0
 8007232:	d013      	beq.n	800725c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007234:	4b3f      	ldr	r3, [pc, #252]	; (8007334 <xQueueGenericSend+0x1f8>)
 8007236:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800723a:	601a      	str	r2, [r3, #0]
 800723c:	f3bf 8f4f 	dsb	sy
 8007240:	f3bf 8f6f 	isb	sy
 8007244:	e00a      	b.n	800725c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007246:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007248:	2b00      	cmp	r3, #0
 800724a:	d007      	beq.n	800725c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800724c:	4b39      	ldr	r3, [pc, #228]	; (8007334 <xQueueGenericSend+0x1f8>)
 800724e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007252:	601a      	str	r2, [r3, #0]
 8007254:	f3bf 8f4f 	dsb	sy
 8007258:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800725c:	f7ff fdfa 	bl	8006e54 <vPortExitCritical>
				return pdPASS;
 8007260:	2301      	movs	r3, #1
 8007262:	e063      	b.n	800732c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	2b00      	cmp	r3, #0
 8007268:	d103      	bne.n	8007272 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800726a:	f7ff fdf3 	bl	8006e54 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800726e:	2300      	movs	r3, #0
 8007270:	e05c      	b.n	800732c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007272:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007274:	2b00      	cmp	r3, #0
 8007276:	d106      	bne.n	8007286 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007278:	f107 0314 	add.w	r3, r7, #20
 800727c:	4618      	mov	r0, r3
 800727e:	f000 fedd 	bl	800803c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007282:	2301      	movs	r3, #1
 8007284:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007286:	f7ff fde5 	bl	8006e54 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800728a:	f000 fc8d 	bl	8007ba8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800728e:	f7ff fdb1 	bl	8006df4 <vPortEnterCritical>
 8007292:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007294:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007298:	b25b      	sxtb	r3, r3
 800729a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800729e:	d103      	bne.n	80072a8 <xQueueGenericSend+0x16c>
 80072a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072a2:	2200      	movs	r2, #0
 80072a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80072a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072aa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80072ae:	b25b      	sxtb	r3, r3
 80072b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072b4:	d103      	bne.n	80072be <xQueueGenericSend+0x182>
 80072b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072b8:	2200      	movs	r2, #0
 80072ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80072be:	f7ff fdc9 	bl	8006e54 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80072c2:	1d3a      	adds	r2, r7, #4
 80072c4:	f107 0314 	add.w	r3, r7, #20
 80072c8:	4611      	mov	r1, r2
 80072ca:	4618      	mov	r0, r3
 80072cc:	f000 fecc 	bl	8008068 <xTaskCheckForTimeOut>
 80072d0:	4603      	mov	r3, r0
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d124      	bne.n	8007320 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80072d6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80072d8:	f000 fa06 	bl	80076e8 <prvIsQueueFull>
 80072dc:	4603      	mov	r3, r0
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d018      	beq.n	8007314 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80072e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072e4:	3310      	adds	r3, #16
 80072e6:	687a      	ldr	r2, [r7, #4]
 80072e8:	4611      	mov	r1, r2
 80072ea:	4618      	mov	r0, r3
 80072ec:	f000 fe20 	bl	8007f30 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80072f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80072f2:	f000 f991 	bl	8007618 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80072f6:	f000 fc65 	bl	8007bc4 <xTaskResumeAll>
 80072fa:	4603      	mov	r3, r0
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	f47f af7c 	bne.w	80071fa <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8007302:	4b0c      	ldr	r3, [pc, #48]	; (8007334 <xQueueGenericSend+0x1f8>)
 8007304:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007308:	601a      	str	r2, [r3, #0]
 800730a:	f3bf 8f4f 	dsb	sy
 800730e:	f3bf 8f6f 	isb	sy
 8007312:	e772      	b.n	80071fa <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007314:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007316:	f000 f97f 	bl	8007618 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800731a:	f000 fc53 	bl	8007bc4 <xTaskResumeAll>
 800731e:	e76c      	b.n	80071fa <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007320:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007322:	f000 f979 	bl	8007618 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007326:	f000 fc4d 	bl	8007bc4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800732a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800732c:	4618      	mov	r0, r3
 800732e:	3738      	adds	r7, #56	; 0x38
 8007330:	46bd      	mov	sp, r7
 8007332:	bd80      	pop	{r7, pc}
 8007334:	e000ed04 	.word	0xe000ed04

08007338 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007338:	b580      	push	{r7, lr}
 800733a:	b08c      	sub	sp, #48	; 0x30
 800733c:	af00      	add	r7, sp, #0
 800733e:	60f8      	str	r0, [r7, #12]
 8007340:	60b9      	str	r1, [r7, #8]
 8007342:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007344:	2300      	movs	r3, #0
 8007346:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800734c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800734e:	2b00      	cmp	r3, #0
 8007350:	d10a      	bne.n	8007368 <xQueueReceive+0x30>
	__asm volatile
 8007352:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007356:	f383 8811 	msr	BASEPRI, r3
 800735a:	f3bf 8f6f 	isb	sy
 800735e:	f3bf 8f4f 	dsb	sy
 8007362:	623b      	str	r3, [r7, #32]
}
 8007364:	bf00      	nop
 8007366:	e7fe      	b.n	8007366 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007368:	68bb      	ldr	r3, [r7, #8]
 800736a:	2b00      	cmp	r3, #0
 800736c:	d103      	bne.n	8007376 <xQueueReceive+0x3e>
 800736e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007372:	2b00      	cmp	r3, #0
 8007374:	d101      	bne.n	800737a <xQueueReceive+0x42>
 8007376:	2301      	movs	r3, #1
 8007378:	e000      	b.n	800737c <xQueueReceive+0x44>
 800737a:	2300      	movs	r3, #0
 800737c:	2b00      	cmp	r3, #0
 800737e:	d10a      	bne.n	8007396 <xQueueReceive+0x5e>
	__asm volatile
 8007380:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007384:	f383 8811 	msr	BASEPRI, r3
 8007388:	f3bf 8f6f 	isb	sy
 800738c:	f3bf 8f4f 	dsb	sy
 8007390:	61fb      	str	r3, [r7, #28]
}
 8007392:	bf00      	nop
 8007394:	e7fe      	b.n	8007394 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007396:	f000 ffaf 	bl	80082f8 <xTaskGetSchedulerState>
 800739a:	4603      	mov	r3, r0
 800739c:	2b00      	cmp	r3, #0
 800739e:	d102      	bne.n	80073a6 <xQueueReceive+0x6e>
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d101      	bne.n	80073aa <xQueueReceive+0x72>
 80073a6:	2301      	movs	r3, #1
 80073a8:	e000      	b.n	80073ac <xQueueReceive+0x74>
 80073aa:	2300      	movs	r3, #0
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d10a      	bne.n	80073c6 <xQueueReceive+0x8e>
	__asm volatile
 80073b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073b4:	f383 8811 	msr	BASEPRI, r3
 80073b8:	f3bf 8f6f 	isb	sy
 80073bc:	f3bf 8f4f 	dsb	sy
 80073c0:	61bb      	str	r3, [r7, #24]
}
 80073c2:	bf00      	nop
 80073c4:	e7fe      	b.n	80073c4 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80073c6:	f7ff fd15 	bl	8006df4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80073ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073ce:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80073d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d01f      	beq.n	8007416 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80073d6:	68b9      	ldr	r1, [r7, #8]
 80073d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80073da:	f000 f8f7 	bl	80075cc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80073de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073e0:	1e5a      	subs	r2, r3, #1
 80073e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073e4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80073e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073e8:	691b      	ldr	r3, [r3, #16]
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d00f      	beq.n	800740e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80073ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073f0:	3310      	adds	r3, #16
 80073f2:	4618      	mov	r0, r3
 80073f4:	f000 fdc0 	bl	8007f78 <xTaskRemoveFromEventList>
 80073f8:	4603      	mov	r3, r0
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d007      	beq.n	800740e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80073fe:	4b3d      	ldr	r3, [pc, #244]	; (80074f4 <xQueueReceive+0x1bc>)
 8007400:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007404:	601a      	str	r2, [r3, #0]
 8007406:	f3bf 8f4f 	dsb	sy
 800740a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800740e:	f7ff fd21 	bl	8006e54 <vPortExitCritical>
				return pdPASS;
 8007412:	2301      	movs	r3, #1
 8007414:	e069      	b.n	80074ea <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	2b00      	cmp	r3, #0
 800741a:	d103      	bne.n	8007424 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800741c:	f7ff fd1a 	bl	8006e54 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007420:	2300      	movs	r3, #0
 8007422:	e062      	b.n	80074ea <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007424:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007426:	2b00      	cmp	r3, #0
 8007428:	d106      	bne.n	8007438 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800742a:	f107 0310 	add.w	r3, r7, #16
 800742e:	4618      	mov	r0, r3
 8007430:	f000 fe04 	bl	800803c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007434:	2301      	movs	r3, #1
 8007436:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007438:	f7ff fd0c 	bl	8006e54 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800743c:	f000 fbb4 	bl	8007ba8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007440:	f7ff fcd8 	bl	8006df4 <vPortEnterCritical>
 8007444:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007446:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800744a:	b25b      	sxtb	r3, r3
 800744c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007450:	d103      	bne.n	800745a <xQueueReceive+0x122>
 8007452:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007454:	2200      	movs	r2, #0
 8007456:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800745a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800745c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007460:	b25b      	sxtb	r3, r3
 8007462:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007466:	d103      	bne.n	8007470 <xQueueReceive+0x138>
 8007468:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800746a:	2200      	movs	r2, #0
 800746c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007470:	f7ff fcf0 	bl	8006e54 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007474:	1d3a      	adds	r2, r7, #4
 8007476:	f107 0310 	add.w	r3, r7, #16
 800747a:	4611      	mov	r1, r2
 800747c:	4618      	mov	r0, r3
 800747e:	f000 fdf3 	bl	8008068 <xTaskCheckForTimeOut>
 8007482:	4603      	mov	r3, r0
 8007484:	2b00      	cmp	r3, #0
 8007486:	d123      	bne.n	80074d0 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007488:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800748a:	f000 f917 	bl	80076bc <prvIsQueueEmpty>
 800748e:	4603      	mov	r3, r0
 8007490:	2b00      	cmp	r3, #0
 8007492:	d017      	beq.n	80074c4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007494:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007496:	3324      	adds	r3, #36	; 0x24
 8007498:	687a      	ldr	r2, [r7, #4]
 800749a:	4611      	mov	r1, r2
 800749c:	4618      	mov	r0, r3
 800749e:	f000 fd47 	bl	8007f30 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80074a2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80074a4:	f000 f8b8 	bl	8007618 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80074a8:	f000 fb8c 	bl	8007bc4 <xTaskResumeAll>
 80074ac:	4603      	mov	r3, r0
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d189      	bne.n	80073c6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80074b2:	4b10      	ldr	r3, [pc, #64]	; (80074f4 <xQueueReceive+0x1bc>)
 80074b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80074b8:	601a      	str	r2, [r3, #0]
 80074ba:	f3bf 8f4f 	dsb	sy
 80074be:	f3bf 8f6f 	isb	sy
 80074c2:	e780      	b.n	80073c6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80074c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80074c6:	f000 f8a7 	bl	8007618 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80074ca:	f000 fb7b 	bl	8007bc4 <xTaskResumeAll>
 80074ce:	e77a      	b.n	80073c6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80074d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80074d2:	f000 f8a1 	bl	8007618 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80074d6:	f000 fb75 	bl	8007bc4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80074da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80074dc:	f000 f8ee 	bl	80076bc <prvIsQueueEmpty>
 80074e0:	4603      	mov	r3, r0
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	f43f af6f 	beq.w	80073c6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80074e8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80074ea:	4618      	mov	r0, r3
 80074ec:	3730      	adds	r7, #48	; 0x30
 80074ee:	46bd      	mov	sp, r7
 80074f0:	bd80      	pop	{r7, pc}
 80074f2:	bf00      	nop
 80074f4:	e000ed04 	.word	0xe000ed04

080074f8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80074f8:	b580      	push	{r7, lr}
 80074fa:	b086      	sub	sp, #24
 80074fc:	af00      	add	r7, sp, #0
 80074fe:	60f8      	str	r0, [r7, #12]
 8007500:	60b9      	str	r1, [r7, #8]
 8007502:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007504:	2300      	movs	r3, #0
 8007506:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800750c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007512:	2b00      	cmp	r3, #0
 8007514:	d10d      	bne.n	8007532 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	2b00      	cmp	r3, #0
 800751c:	d14d      	bne.n	80075ba <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	689b      	ldr	r3, [r3, #8]
 8007522:	4618      	mov	r0, r3
 8007524:	f000 ff06 	bl	8008334 <xTaskPriorityDisinherit>
 8007528:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	2200      	movs	r2, #0
 800752e:	609a      	str	r2, [r3, #8]
 8007530:	e043      	b.n	80075ba <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	2b00      	cmp	r3, #0
 8007536:	d119      	bne.n	800756c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	6858      	ldr	r0, [r3, #4]
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007540:	461a      	mov	r2, r3
 8007542:	68b9      	ldr	r1, [r7, #8]
 8007544:	f001 f80e 	bl	8008564 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	685a      	ldr	r2, [r3, #4]
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007550:	441a      	add	r2, r3
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	685a      	ldr	r2, [r3, #4]
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	689b      	ldr	r3, [r3, #8]
 800755e:	429a      	cmp	r2, r3
 8007560:	d32b      	bcc.n	80075ba <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	681a      	ldr	r2, [r3, #0]
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	605a      	str	r2, [r3, #4]
 800756a:	e026      	b.n	80075ba <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	68d8      	ldr	r0, [r3, #12]
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007574:	461a      	mov	r2, r3
 8007576:	68b9      	ldr	r1, [r7, #8]
 8007578:	f000 fff4 	bl	8008564 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	68da      	ldr	r2, [r3, #12]
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007584:	425b      	negs	r3, r3
 8007586:	441a      	add	r2, r3
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	68da      	ldr	r2, [r3, #12]
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	429a      	cmp	r2, r3
 8007596:	d207      	bcs.n	80075a8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	689a      	ldr	r2, [r3, #8]
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075a0:	425b      	negs	r3, r3
 80075a2:	441a      	add	r2, r3
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	2b02      	cmp	r3, #2
 80075ac:	d105      	bne.n	80075ba <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80075ae:	693b      	ldr	r3, [r7, #16]
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d002      	beq.n	80075ba <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80075b4:	693b      	ldr	r3, [r7, #16]
 80075b6:	3b01      	subs	r3, #1
 80075b8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80075ba:	693b      	ldr	r3, [r7, #16]
 80075bc:	1c5a      	adds	r2, r3, #1
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80075c2:	697b      	ldr	r3, [r7, #20]
}
 80075c4:	4618      	mov	r0, r3
 80075c6:	3718      	adds	r7, #24
 80075c8:	46bd      	mov	sp, r7
 80075ca:	bd80      	pop	{r7, pc}

080075cc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80075cc:	b580      	push	{r7, lr}
 80075ce:	b082      	sub	sp, #8
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	6078      	str	r0, [r7, #4]
 80075d4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d018      	beq.n	8007610 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	68da      	ldr	r2, [r3, #12]
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075e6:	441a      	add	r2, r3
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	68da      	ldr	r2, [r3, #12]
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	689b      	ldr	r3, [r3, #8]
 80075f4:	429a      	cmp	r2, r3
 80075f6:	d303      	bcc.n	8007600 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681a      	ldr	r2, [r3, #0]
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	68d9      	ldr	r1, [r3, #12]
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007608:	461a      	mov	r2, r3
 800760a:	6838      	ldr	r0, [r7, #0]
 800760c:	f000 ffaa 	bl	8008564 <memcpy>
	}
}
 8007610:	bf00      	nop
 8007612:	3708      	adds	r7, #8
 8007614:	46bd      	mov	sp, r7
 8007616:	bd80      	pop	{r7, pc}

08007618 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007618:	b580      	push	{r7, lr}
 800761a:	b084      	sub	sp, #16
 800761c:	af00      	add	r7, sp, #0
 800761e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007620:	f7ff fbe8 	bl	8006df4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800762a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800762c:	e011      	b.n	8007652 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007632:	2b00      	cmp	r3, #0
 8007634:	d012      	beq.n	800765c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	3324      	adds	r3, #36	; 0x24
 800763a:	4618      	mov	r0, r3
 800763c:	f000 fc9c 	bl	8007f78 <xTaskRemoveFromEventList>
 8007640:	4603      	mov	r3, r0
 8007642:	2b00      	cmp	r3, #0
 8007644:	d001      	beq.n	800764a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007646:	f000 fd71 	bl	800812c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800764a:	7bfb      	ldrb	r3, [r7, #15]
 800764c:	3b01      	subs	r3, #1
 800764e:	b2db      	uxtb	r3, r3
 8007650:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007652:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007656:	2b00      	cmp	r3, #0
 8007658:	dce9      	bgt.n	800762e <prvUnlockQueue+0x16>
 800765a:	e000      	b.n	800765e <prvUnlockQueue+0x46>
					break;
 800765c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	22ff      	movs	r2, #255	; 0xff
 8007662:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8007666:	f7ff fbf5 	bl	8006e54 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800766a:	f7ff fbc3 	bl	8006df4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007674:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007676:	e011      	b.n	800769c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	691b      	ldr	r3, [r3, #16]
 800767c:	2b00      	cmp	r3, #0
 800767e:	d012      	beq.n	80076a6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	3310      	adds	r3, #16
 8007684:	4618      	mov	r0, r3
 8007686:	f000 fc77 	bl	8007f78 <xTaskRemoveFromEventList>
 800768a:	4603      	mov	r3, r0
 800768c:	2b00      	cmp	r3, #0
 800768e:	d001      	beq.n	8007694 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007690:	f000 fd4c 	bl	800812c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007694:	7bbb      	ldrb	r3, [r7, #14]
 8007696:	3b01      	subs	r3, #1
 8007698:	b2db      	uxtb	r3, r3
 800769a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800769c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	dce9      	bgt.n	8007678 <prvUnlockQueue+0x60>
 80076a4:	e000      	b.n	80076a8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80076a6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	22ff      	movs	r2, #255	; 0xff
 80076ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80076b0:	f7ff fbd0 	bl	8006e54 <vPortExitCritical>
}
 80076b4:	bf00      	nop
 80076b6:	3710      	adds	r7, #16
 80076b8:	46bd      	mov	sp, r7
 80076ba:	bd80      	pop	{r7, pc}

080076bc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80076bc:	b580      	push	{r7, lr}
 80076be:	b084      	sub	sp, #16
 80076c0:	af00      	add	r7, sp, #0
 80076c2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80076c4:	f7ff fb96 	bl	8006df4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d102      	bne.n	80076d6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80076d0:	2301      	movs	r3, #1
 80076d2:	60fb      	str	r3, [r7, #12]
 80076d4:	e001      	b.n	80076da <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80076d6:	2300      	movs	r3, #0
 80076d8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80076da:	f7ff fbbb 	bl	8006e54 <vPortExitCritical>

	return xReturn;
 80076de:	68fb      	ldr	r3, [r7, #12]
}
 80076e0:	4618      	mov	r0, r3
 80076e2:	3710      	adds	r7, #16
 80076e4:	46bd      	mov	sp, r7
 80076e6:	bd80      	pop	{r7, pc}

080076e8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80076e8:	b580      	push	{r7, lr}
 80076ea:	b084      	sub	sp, #16
 80076ec:	af00      	add	r7, sp, #0
 80076ee:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80076f0:	f7ff fb80 	bl	8006df4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076fc:	429a      	cmp	r2, r3
 80076fe:	d102      	bne.n	8007706 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007700:	2301      	movs	r3, #1
 8007702:	60fb      	str	r3, [r7, #12]
 8007704:	e001      	b.n	800770a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007706:	2300      	movs	r3, #0
 8007708:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800770a:	f7ff fba3 	bl	8006e54 <vPortExitCritical>

	return xReturn;
 800770e:	68fb      	ldr	r3, [r7, #12]
}
 8007710:	4618      	mov	r0, r3
 8007712:	3710      	adds	r7, #16
 8007714:	46bd      	mov	sp, r7
 8007716:	bd80      	pop	{r7, pc}

08007718 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007718:	b580      	push	{r7, lr}
 800771a:	b08e      	sub	sp, #56	; 0x38
 800771c:	af04      	add	r7, sp, #16
 800771e:	60f8      	str	r0, [r7, #12]
 8007720:	60b9      	str	r1, [r7, #8]
 8007722:	607a      	str	r2, [r7, #4]
 8007724:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007726:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007728:	2b00      	cmp	r3, #0
 800772a:	d10a      	bne.n	8007742 <xTaskCreateStatic+0x2a>
	__asm volatile
 800772c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007730:	f383 8811 	msr	BASEPRI, r3
 8007734:	f3bf 8f6f 	isb	sy
 8007738:	f3bf 8f4f 	dsb	sy
 800773c:	623b      	str	r3, [r7, #32]
}
 800773e:	bf00      	nop
 8007740:	e7fe      	b.n	8007740 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007742:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007744:	2b00      	cmp	r3, #0
 8007746:	d10a      	bne.n	800775e <xTaskCreateStatic+0x46>
	__asm volatile
 8007748:	f04f 0350 	mov.w	r3, #80	; 0x50
 800774c:	f383 8811 	msr	BASEPRI, r3
 8007750:	f3bf 8f6f 	isb	sy
 8007754:	f3bf 8f4f 	dsb	sy
 8007758:	61fb      	str	r3, [r7, #28]
}
 800775a:	bf00      	nop
 800775c:	e7fe      	b.n	800775c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800775e:	23b4      	movs	r3, #180	; 0xb4
 8007760:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007762:	693b      	ldr	r3, [r7, #16]
 8007764:	2bb4      	cmp	r3, #180	; 0xb4
 8007766:	d00a      	beq.n	800777e <xTaskCreateStatic+0x66>
	__asm volatile
 8007768:	f04f 0350 	mov.w	r3, #80	; 0x50
 800776c:	f383 8811 	msr	BASEPRI, r3
 8007770:	f3bf 8f6f 	isb	sy
 8007774:	f3bf 8f4f 	dsb	sy
 8007778:	61bb      	str	r3, [r7, #24]
}
 800777a:	bf00      	nop
 800777c:	e7fe      	b.n	800777c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800777e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007780:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007782:	2b00      	cmp	r3, #0
 8007784:	d01e      	beq.n	80077c4 <xTaskCreateStatic+0xac>
 8007786:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007788:	2b00      	cmp	r3, #0
 800778a:	d01b      	beq.n	80077c4 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800778c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800778e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007792:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007794:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007798:	2202      	movs	r2, #2
 800779a:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800779e:	2300      	movs	r3, #0
 80077a0:	9303      	str	r3, [sp, #12]
 80077a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077a4:	9302      	str	r3, [sp, #8]
 80077a6:	f107 0314 	add.w	r3, r7, #20
 80077aa:	9301      	str	r3, [sp, #4]
 80077ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077ae:	9300      	str	r3, [sp, #0]
 80077b0:	683b      	ldr	r3, [r7, #0]
 80077b2:	687a      	ldr	r2, [r7, #4]
 80077b4:	68b9      	ldr	r1, [r7, #8]
 80077b6:	68f8      	ldr	r0, [r7, #12]
 80077b8:	f000 f850 	bl	800785c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80077bc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80077be:	f000 f8eb 	bl	8007998 <prvAddNewTaskToReadyList>
 80077c2:	e001      	b.n	80077c8 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80077c4:	2300      	movs	r3, #0
 80077c6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80077c8:	697b      	ldr	r3, [r7, #20]
	}
 80077ca:	4618      	mov	r0, r3
 80077cc:	3728      	adds	r7, #40	; 0x28
 80077ce:	46bd      	mov	sp, r7
 80077d0:	bd80      	pop	{r7, pc}

080077d2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80077d2:	b580      	push	{r7, lr}
 80077d4:	b08c      	sub	sp, #48	; 0x30
 80077d6:	af04      	add	r7, sp, #16
 80077d8:	60f8      	str	r0, [r7, #12]
 80077da:	60b9      	str	r1, [r7, #8]
 80077dc:	603b      	str	r3, [r7, #0]
 80077de:	4613      	mov	r3, r2
 80077e0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80077e2:	88fb      	ldrh	r3, [r7, #6]
 80077e4:	009b      	lsls	r3, r3, #2
 80077e6:	4618      	mov	r0, r3
 80077e8:	f7fe ff38 	bl	800665c <pvPortMalloc>
 80077ec:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80077ee:	697b      	ldr	r3, [r7, #20]
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d00e      	beq.n	8007812 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80077f4:	20b4      	movs	r0, #180	; 0xb4
 80077f6:	f7fe ff31 	bl	800665c <pvPortMalloc>
 80077fa:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80077fc:	69fb      	ldr	r3, [r7, #28]
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d003      	beq.n	800780a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007802:	69fb      	ldr	r3, [r7, #28]
 8007804:	697a      	ldr	r2, [r7, #20]
 8007806:	631a      	str	r2, [r3, #48]	; 0x30
 8007808:	e005      	b.n	8007816 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800780a:	6978      	ldr	r0, [r7, #20]
 800780c:	f7fe fff2 	bl	80067f4 <vPortFree>
 8007810:	e001      	b.n	8007816 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007812:	2300      	movs	r3, #0
 8007814:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007816:	69fb      	ldr	r3, [r7, #28]
 8007818:	2b00      	cmp	r3, #0
 800781a:	d017      	beq.n	800784c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800781c:	69fb      	ldr	r3, [r7, #28]
 800781e:	2200      	movs	r2, #0
 8007820:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007824:	88fa      	ldrh	r2, [r7, #6]
 8007826:	2300      	movs	r3, #0
 8007828:	9303      	str	r3, [sp, #12]
 800782a:	69fb      	ldr	r3, [r7, #28]
 800782c:	9302      	str	r3, [sp, #8]
 800782e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007830:	9301      	str	r3, [sp, #4]
 8007832:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007834:	9300      	str	r3, [sp, #0]
 8007836:	683b      	ldr	r3, [r7, #0]
 8007838:	68b9      	ldr	r1, [r7, #8]
 800783a:	68f8      	ldr	r0, [r7, #12]
 800783c:	f000 f80e 	bl	800785c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007840:	69f8      	ldr	r0, [r7, #28]
 8007842:	f000 f8a9 	bl	8007998 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007846:	2301      	movs	r3, #1
 8007848:	61bb      	str	r3, [r7, #24]
 800784a:	e002      	b.n	8007852 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800784c:	f04f 33ff 	mov.w	r3, #4294967295
 8007850:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007852:	69bb      	ldr	r3, [r7, #24]
	}
 8007854:	4618      	mov	r0, r3
 8007856:	3720      	adds	r7, #32
 8007858:	46bd      	mov	sp, r7
 800785a:	bd80      	pop	{r7, pc}

0800785c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800785c:	b580      	push	{r7, lr}
 800785e:	b088      	sub	sp, #32
 8007860:	af00      	add	r7, sp, #0
 8007862:	60f8      	str	r0, [r7, #12]
 8007864:	60b9      	str	r1, [r7, #8]
 8007866:	607a      	str	r2, [r7, #4]
 8007868:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800786a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800786c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800786e:	6879      	ldr	r1, [r7, #4]
 8007870:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8007874:	440b      	add	r3, r1
 8007876:	009b      	lsls	r3, r3, #2
 8007878:	4413      	add	r3, r2
 800787a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800787c:	69bb      	ldr	r3, [r7, #24]
 800787e:	f023 0307 	bic.w	r3, r3, #7
 8007882:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007884:	69bb      	ldr	r3, [r7, #24]
 8007886:	f003 0307 	and.w	r3, r3, #7
 800788a:	2b00      	cmp	r3, #0
 800788c:	d00a      	beq.n	80078a4 <prvInitialiseNewTask+0x48>
	__asm volatile
 800788e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007892:	f383 8811 	msr	BASEPRI, r3
 8007896:	f3bf 8f6f 	isb	sy
 800789a:	f3bf 8f4f 	dsb	sy
 800789e:	617b      	str	r3, [r7, #20]
}
 80078a0:	bf00      	nop
 80078a2:	e7fe      	b.n	80078a2 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80078a4:	68bb      	ldr	r3, [r7, #8]
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d01f      	beq.n	80078ea <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80078aa:	2300      	movs	r3, #0
 80078ac:	61fb      	str	r3, [r7, #28]
 80078ae:	e012      	b.n	80078d6 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80078b0:	68ba      	ldr	r2, [r7, #8]
 80078b2:	69fb      	ldr	r3, [r7, #28]
 80078b4:	4413      	add	r3, r2
 80078b6:	7819      	ldrb	r1, [r3, #0]
 80078b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80078ba:	69fb      	ldr	r3, [r7, #28]
 80078bc:	4413      	add	r3, r2
 80078be:	3334      	adds	r3, #52	; 0x34
 80078c0:	460a      	mov	r2, r1
 80078c2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80078c4:	68ba      	ldr	r2, [r7, #8]
 80078c6:	69fb      	ldr	r3, [r7, #28]
 80078c8:	4413      	add	r3, r2
 80078ca:	781b      	ldrb	r3, [r3, #0]
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d006      	beq.n	80078de <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80078d0:	69fb      	ldr	r3, [r7, #28]
 80078d2:	3301      	adds	r3, #1
 80078d4:	61fb      	str	r3, [r7, #28]
 80078d6:	69fb      	ldr	r3, [r7, #28]
 80078d8:	2b0f      	cmp	r3, #15
 80078da:	d9e9      	bls.n	80078b0 <prvInitialiseNewTask+0x54>
 80078dc:	e000      	b.n	80078e0 <prvInitialiseNewTask+0x84>
			{
				break;
 80078de:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80078e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078e2:	2200      	movs	r2, #0
 80078e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80078e8:	e003      	b.n	80078f2 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80078ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078ec:	2200      	movs	r2, #0
 80078ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80078f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078f4:	2b06      	cmp	r3, #6
 80078f6:	d901      	bls.n	80078fc <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80078f8:	2306      	movs	r3, #6
 80078fa:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80078fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007900:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007902:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007904:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007906:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8007908:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800790a:	2200      	movs	r2, #0
 800790c:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800790e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007910:	3304      	adds	r3, #4
 8007912:	4618      	mov	r0, r3
 8007914:	f7ff f8ac 	bl	8006a70 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007918:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800791a:	3318      	adds	r3, #24
 800791c:	4618      	mov	r0, r3
 800791e:	f7ff f8a7 	bl	8006a70 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007922:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007924:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007926:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007928:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800792a:	f1c3 0207 	rsb	r2, r3, #7
 800792e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007930:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007932:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007934:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007936:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007938:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800793a:	2200      	movs	r2, #0
 800793c:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007940:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007942:	2200      	movs	r2, #0
 8007944:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8007948:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800794a:	334c      	adds	r3, #76	; 0x4c
 800794c:	2260      	movs	r2, #96	; 0x60
 800794e:	2100      	movs	r1, #0
 8007950:	4618      	mov	r0, r3
 8007952:	f000 fe15 	bl	8008580 <memset>
 8007956:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007958:	4a0c      	ldr	r2, [pc, #48]	; (800798c <prvInitialiseNewTask+0x130>)
 800795a:	651a      	str	r2, [r3, #80]	; 0x50
 800795c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800795e:	4a0c      	ldr	r2, [pc, #48]	; (8007990 <prvInitialiseNewTask+0x134>)
 8007960:	655a      	str	r2, [r3, #84]	; 0x54
 8007962:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007964:	4a0b      	ldr	r2, [pc, #44]	; (8007994 <prvInitialiseNewTask+0x138>)
 8007966:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007968:	683a      	ldr	r2, [r7, #0]
 800796a:	68f9      	ldr	r1, [r7, #12]
 800796c:	69b8      	ldr	r0, [r7, #24]
 800796e:	f7ff f913 	bl	8006b98 <pxPortInitialiseStack>
 8007972:	4602      	mov	r2, r0
 8007974:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007976:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007978:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800797a:	2b00      	cmp	r3, #0
 800797c:	d002      	beq.n	8007984 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800797e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007980:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007982:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007984:	bf00      	nop
 8007986:	3720      	adds	r7, #32
 8007988:	46bd      	mov	sp, r7
 800798a:	bd80      	pop	{r7, pc}
 800798c:	08008f84 	.word	0x08008f84
 8007990:	08008fa4 	.word	0x08008fa4
 8007994:	08008f64 	.word	0x08008f64

08007998 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007998:	b580      	push	{r7, lr}
 800799a:	b082      	sub	sp, #8
 800799c:	af00      	add	r7, sp, #0
 800799e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80079a0:	f7ff fa28 	bl	8006df4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80079a4:	4b2a      	ldr	r3, [pc, #168]	; (8007a50 <prvAddNewTaskToReadyList+0xb8>)
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	3301      	adds	r3, #1
 80079aa:	4a29      	ldr	r2, [pc, #164]	; (8007a50 <prvAddNewTaskToReadyList+0xb8>)
 80079ac:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80079ae:	4b29      	ldr	r3, [pc, #164]	; (8007a54 <prvAddNewTaskToReadyList+0xbc>)
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d109      	bne.n	80079ca <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80079b6:	4a27      	ldr	r2, [pc, #156]	; (8007a54 <prvAddNewTaskToReadyList+0xbc>)
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80079bc:	4b24      	ldr	r3, [pc, #144]	; (8007a50 <prvAddNewTaskToReadyList+0xb8>)
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	2b01      	cmp	r3, #1
 80079c2:	d110      	bne.n	80079e6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80079c4:	f000 fbd6 	bl	8008174 <prvInitialiseTaskLists>
 80079c8:	e00d      	b.n	80079e6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80079ca:	4b23      	ldr	r3, [pc, #140]	; (8007a58 <prvAddNewTaskToReadyList+0xc0>)
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d109      	bne.n	80079e6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80079d2:	4b20      	ldr	r3, [pc, #128]	; (8007a54 <prvAddNewTaskToReadyList+0xbc>)
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079dc:	429a      	cmp	r2, r3
 80079de:	d802      	bhi.n	80079e6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80079e0:	4a1c      	ldr	r2, [pc, #112]	; (8007a54 <prvAddNewTaskToReadyList+0xbc>)
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80079e6:	4b1d      	ldr	r3, [pc, #116]	; (8007a5c <prvAddNewTaskToReadyList+0xc4>)
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	3301      	adds	r3, #1
 80079ec:	4a1b      	ldr	r2, [pc, #108]	; (8007a5c <prvAddNewTaskToReadyList+0xc4>)
 80079ee:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079f4:	2201      	movs	r2, #1
 80079f6:	409a      	lsls	r2, r3
 80079f8:	4b19      	ldr	r3, [pc, #100]	; (8007a60 <prvAddNewTaskToReadyList+0xc8>)
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	4313      	orrs	r3, r2
 80079fe:	4a18      	ldr	r2, [pc, #96]	; (8007a60 <prvAddNewTaskToReadyList+0xc8>)
 8007a00:	6013      	str	r3, [r2, #0]
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a06:	4613      	mov	r3, r2
 8007a08:	009b      	lsls	r3, r3, #2
 8007a0a:	4413      	add	r3, r2
 8007a0c:	009b      	lsls	r3, r3, #2
 8007a0e:	4a15      	ldr	r2, [pc, #84]	; (8007a64 <prvAddNewTaskToReadyList+0xcc>)
 8007a10:	441a      	add	r2, r3
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	3304      	adds	r3, #4
 8007a16:	4619      	mov	r1, r3
 8007a18:	4610      	mov	r0, r2
 8007a1a:	f7ff f836 	bl	8006a8a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007a1e:	f7ff fa19 	bl	8006e54 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007a22:	4b0d      	ldr	r3, [pc, #52]	; (8007a58 <prvAddNewTaskToReadyList+0xc0>)
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d00e      	beq.n	8007a48 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007a2a:	4b0a      	ldr	r3, [pc, #40]	; (8007a54 <prvAddNewTaskToReadyList+0xbc>)
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a34:	429a      	cmp	r2, r3
 8007a36:	d207      	bcs.n	8007a48 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007a38:	4b0b      	ldr	r3, [pc, #44]	; (8007a68 <prvAddNewTaskToReadyList+0xd0>)
 8007a3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a3e:	601a      	str	r2, [r3, #0]
 8007a40:	f3bf 8f4f 	dsb	sy
 8007a44:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007a48:	bf00      	nop
 8007a4a:	3708      	adds	r7, #8
 8007a4c:	46bd      	mov	sp, r7
 8007a4e:	bd80      	pop	{r7, pc}
 8007a50:	24004074 	.word	0x24004074
 8007a54:	24003f74 	.word	0x24003f74
 8007a58:	24004080 	.word	0x24004080
 8007a5c:	24004090 	.word	0x24004090
 8007a60:	2400407c 	.word	0x2400407c
 8007a64:	24003f78 	.word	0x24003f78
 8007a68:	e000ed04 	.word	0xe000ed04

08007a6c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007a6c:	b580      	push	{r7, lr}
 8007a6e:	b084      	sub	sp, #16
 8007a70:	af00      	add	r7, sp, #0
 8007a72:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007a74:	2300      	movs	r3, #0
 8007a76:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d017      	beq.n	8007aae <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007a7e:	4b13      	ldr	r3, [pc, #76]	; (8007acc <vTaskDelay+0x60>)
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d00a      	beq.n	8007a9c <vTaskDelay+0x30>
	__asm volatile
 8007a86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a8a:	f383 8811 	msr	BASEPRI, r3
 8007a8e:	f3bf 8f6f 	isb	sy
 8007a92:	f3bf 8f4f 	dsb	sy
 8007a96:	60bb      	str	r3, [r7, #8]
}
 8007a98:	bf00      	nop
 8007a9a:	e7fe      	b.n	8007a9a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007a9c:	f000 f884 	bl	8007ba8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007aa0:	2100      	movs	r1, #0
 8007aa2:	6878      	ldr	r0, [r7, #4]
 8007aa4:	f000 fccc 	bl	8008440 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007aa8:	f000 f88c 	bl	8007bc4 <xTaskResumeAll>
 8007aac:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d107      	bne.n	8007ac4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8007ab4:	4b06      	ldr	r3, [pc, #24]	; (8007ad0 <vTaskDelay+0x64>)
 8007ab6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007aba:	601a      	str	r2, [r3, #0]
 8007abc:	f3bf 8f4f 	dsb	sy
 8007ac0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007ac4:	bf00      	nop
 8007ac6:	3710      	adds	r7, #16
 8007ac8:	46bd      	mov	sp, r7
 8007aca:	bd80      	pop	{r7, pc}
 8007acc:	2400409c 	.word	0x2400409c
 8007ad0:	e000ed04 	.word	0xe000ed04

08007ad4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007ad4:	b580      	push	{r7, lr}
 8007ad6:	b08a      	sub	sp, #40	; 0x28
 8007ad8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007ada:	2300      	movs	r3, #0
 8007adc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007ade:	2300      	movs	r3, #0
 8007ae0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007ae2:	463a      	mov	r2, r7
 8007ae4:	1d39      	adds	r1, r7, #4
 8007ae6:	f107 0308 	add.w	r3, r7, #8
 8007aea:	4618      	mov	r0, r3
 8007aec:	f7f8 fce2 	bl	80004b4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007af0:	6839      	ldr	r1, [r7, #0]
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	68ba      	ldr	r2, [r7, #8]
 8007af6:	9202      	str	r2, [sp, #8]
 8007af8:	9301      	str	r3, [sp, #4]
 8007afa:	2300      	movs	r3, #0
 8007afc:	9300      	str	r3, [sp, #0]
 8007afe:	2300      	movs	r3, #0
 8007b00:	460a      	mov	r2, r1
 8007b02:	4921      	ldr	r1, [pc, #132]	; (8007b88 <vTaskStartScheduler+0xb4>)
 8007b04:	4821      	ldr	r0, [pc, #132]	; (8007b8c <vTaskStartScheduler+0xb8>)
 8007b06:	f7ff fe07 	bl	8007718 <xTaskCreateStatic>
 8007b0a:	4603      	mov	r3, r0
 8007b0c:	4a20      	ldr	r2, [pc, #128]	; (8007b90 <vTaskStartScheduler+0xbc>)
 8007b0e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007b10:	4b1f      	ldr	r3, [pc, #124]	; (8007b90 <vTaskStartScheduler+0xbc>)
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d002      	beq.n	8007b1e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007b18:	2301      	movs	r3, #1
 8007b1a:	617b      	str	r3, [r7, #20]
 8007b1c:	e001      	b.n	8007b22 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007b1e:	2300      	movs	r3, #0
 8007b20:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007b22:	697b      	ldr	r3, [r7, #20]
 8007b24:	2b01      	cmp	r3, #1
 8007b26:	d11b      	bne.n	8007b60 <vTaskStartScheduler+0x8c>
	__asm volatile
 8007b28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b2c:	f383 8811 	msr	BASEPRI, r3
 8007b30:	f3bf 8f6f 	isb	sy
 8007b34:	f3bf 8f4f 	dsb	sy
 8007b38:	613b      	str	r3, [r7, #16]
}
 8007b3a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007b3c:	4b15      	ldr	r3, [pc, #84]	; (8007b94 <vTaskStartScheduler+0xc0>)
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	334c      	adds	r3, #76	; 0x4c
 8007b42:	4a15      	ldr	r2, [pc, #84]	; (8007b98 <vTaskStartScheduler+0xc4>)
 8007b44:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007b46:	4b15      	ldr	r3, [pc, #84]	; (8007b9c <vTaskStartScheduler+0xc8>)
 8007b48:	f04f 32ff 	mov.w	r2, #4294967295
 8007b4c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007b4e:	4b14      	ldr	r3, [pc, #80]	; (8007ba0 <vTaskStartScheduler+0xcc>)
 8007b50:	2201      	movs	r2, #1
 8007b52:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007b54:	4b13      	ldr	r3, [pc, #76]	; (8007ba4 <vTaskStartScheduler+0xd0>)
 8007b56:	2200      	movs	r2, #0
 8007b58:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007b5a:	f7ff f8a9 	bl	8006cb0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007b5e:	e00e      	b.n	8007b7e <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007b60:	697b      	ldr	r3, [r7, #20]
 8007b62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b66:	d10a      	bne.n	8007b7e <vTaskStartScheduler+0xaa>
	__asm volatile
 8007b68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b6c:	f383 8811 	msr	BASEPRI, r3
 8007b70:	f3bf 8f6f 	isb	sy
 8007b74:	f3bf 8f4f 	dsb	sy
 8007b78:	60fb      	str	r3, [r7, #12]
}
 8007b7a:	bf00      	nop
 8007b7c:	e7fe      	b.n	8007b7c <vTaskStartScheduler+0xa8>
}
 8007b7e:	bf00      	nop
 8007b80:	3718      	adds	r7, #24
 8007b82:	46bd      	mov	sp, r7
 8007b84:	bd80      	pop	{r7, pc}
 8007b86:	bf00      	nop
 8007b88:	08008f4c 	.word	0x08008f4c
 8007b8c:	08008145 	.word	0x08008145
 8007b90:	24004098 	.word	0x24004098
 8007b94:	24003f74 	.word	0x24003f74
 8007b98:	24000014 	.word	0x24000014
 8007b9c:	24004094 	.word	0x24004094
 8007ba0:	24004080 	.word	0x24004080
 8007ba4:	24004078 	.word	0x24004078

08007ba8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007ba8:	b480      	push	{r7}
 8007baa:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007bac:	4b04      	ldr	r3, [pc, #16]	; (8007bc0 <vTaskSuspendAll+0x18>)
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	3301      	adds	r3, #1
 8007bb2:	4a03      	ldr	r2, [pc, #12]	; (8007bc0 <vTaskSuspendAll+0x18>)
 8007bb4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8007bb6:	bf00      	nop
 8007bb8:	46bd      	mov	sp, r7
 8007bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bbe:	4770      	bx	lr
 8007bc0:	2400409c 	.word	0x2400409c

08007bc4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007bc4:	b580      	push	{r7, lr}
 8007bc6:	b084      	sub	sp, #16
 8007bc8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007bca:	2300      	movs	r3, #0
 8007bcc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007bce:	2300      	movs	r3, #0
 8007bd0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007bd2:	4b41      	ldr	r3, [pc, #260]	; (8007cd8 <xTaskResumeAll+0x114>)
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d10a      	bne.n	8007bf0 <xTaskResumeAll+0x2c>
	__asm volatile
 8007bda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bde:	f383 8811 	msr	BASEPRI, r3
 8007be2:	f3bf 8f6f 	isb	sy
 8007be6:	f3bf 8f4f 	dsb	sy
 8007bea:	603b      	str	r3, [r7, #0]
}
 8007bec:	bf00      	nop
 8007bee:	e7fe      	b.n	8007bee <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007bf0:	f7ff f900 	bl	8006df4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007bf4:	4b38      	ldr	r3, [pc, #224]	; (8007cd8 <xTaskResumeAll+0x114>)
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	3b01      	subs	r3, #1
 8007bfa:	4a37      	ldr	r2, [pc, #220]	; (8007cd8 <xTaskResumeAll+0x114>)
 8007bfc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007bfe:	4b36      	ldr	r3, [pc, #216]	; (8007cd8 <xTaskResumeAll+0x114>)
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d161      	bne.n	8007cca <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007c06:	4b35      	ldr	r3, [pc, #212]	; (8007cdc <xTaskResumeAll+0x118>)
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d05d      	beq.n	8007cca <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007c0e:	e02e      	b.n	8007c6e <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007c10:	4b33      	ldr	r3, [pc, #204]	; (8007ce0 <xTaskResumeAll+0x11c>)
 8007c12:	68db      	ldr	r3, [r3, #12]
 8007c14:	68db      	ldr	r3, [r3, #12]
 8007c16:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	3318      	adds	r3, #24
 8007c1c:	4618      	mov	r0, r3
 8007c1e:	f7fe ff91 	bl	8006b44 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	3304      	adds	r3, #4
 8007c26:	4618      	mov	r0, r3
 8007c28:	f7fe ff8c 	bl	8006b44 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c30:	2201      	movs	r2, #1
 8007c32:	409a      	lsls	r2, r3
 8007c34:	4b2b      	ldr	r3, [pc, #172]	; (8007ce4 <xTaskResumeAll+0x120>)
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	4313      	orrs	r3, r2
 8007c3a:	4a2a      	ldr	r2, [pc, #168]	; (8007ce4 <xTaskResumeAll+0x120>)
 8007c3c:	6013      	str	r3, [r2, #0]
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c42:	4613      	mov	r3, r2
 8007c44:	009b      	lsls	r3, r3, #2
 8007c46:	4413      	add	r3, r2
 8007c48:	009b      	lsls	r3, r3, #2
 8007c4a:	4a27      	ldr	r2, [pc, #156]	; (8007ce8 <xTaskResumeAll+0x124>)
 8007c4c:	441a      	add	r2, r3
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	3304      	adds	r3, #4
 8007c52:	4619      	mov	r1, r3
 8007c54:	4610      	mov	r0, r2
 8007c56:	f7fe ff18 	bl	8006a8a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c5e:	4b23      	ldr	r3, [pc, #140]	; (8007cec <xTaskResumeAll+0x128>)
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c64:	429a      	cmp	r2, r3
 8007c66:	d302      	bcc.n	8007c6e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8007c68:	4b21      	ldr	r3, [pc, #132]	; (8007cf0 <xTaskResumeAll+0x12c>)
 8007c6a:	2201      	movs	r2, #1
 8007c6c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007c6e:	4b1c      	ldr	r3, [pc, #112]	; (8007ce0 <xTaskResumeAll+0x11c>)
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d1cc      	bne.n	8007c10 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d001      	beq.n	8007c80 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007c7c:	f000 fb1c 	bl	80082b8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007c80:	4b1c      	ldr	r3, [pc, #112]	; (8007cf4 <xTaskResumeAll+0x130>)
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d010      	beq.n	8007cae <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007c8c:	f000 f836 	bl	8007cfc <xTaskIncrementTick>
 8007c90:	4603      	mov	r3, r0
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d002      	beq.n	8007c9c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8007c96:	4b16      	ldr	r3, [pc, #88]	; (8007cf0 <xTaskResumeAll+0x12c>)
 8007c98:	2201      	movs	r2, #1
 8007c9a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	3b01      	subs	r3, #1
 8007ca0:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d1f1      	bne.n	8007c8c <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8007ca8:	4b12      	ldr	r3, [pc, #72]	; (8007cf4 <xTaskResumeAll+0x130>)
 8007caa:	2200      	movs	r2, #0
 8007cac:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007cae:	4b10      	ldr	r3, [pc, #64]	; (8007cf0 <xTaskResumeAll+0x12c>)
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d009      	beq.n	8007cca <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007cb6:	2301      	movs	r3, #1
 8007cb8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007cba:	4b0f      	ldr	r3, [pc, #60]	; (8007cf8 <xTaskResumeAll+0x134>)
 8007cbc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007cc0:	601a      	str	r2, [r3, #0]
 8007cc2:	f3bf 8f4f 	dsb	sy
 8007cc6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007cca:	f7ff f8c3 	bl	8006e54 <vPortExitCritical>

	return xAlreadyYielded;
 8007cce:	68bb      	ldr	r3, [r7, #8]
}
 8007cd0:	4618      	mov	r0, r3
 8007cd2:	3710      	adds	r7, #16
 8007cd4:	46bd      	mov	sp, r7
 8007cd6:	bd80      	pop	{r7, pc}
 8007cd8:	2400409c 	.word	0x2400409c
 8007cdc:	24004074 	.word	0x24004074
 8007ce0:	24004034 	.word	0x24004034
 8007ce4:	2400407c 	.word	0x2400407c
 8007ce8:	24003f78 	.word	0x24003f78
 8007cec:	24003f74 	.word	0x24003f74
 8007cf0:	24004088 	.word	0x24004088
 8007cf4:	24004084 	.word	0x24004084
 8007cf8:	e000ed04 	.word	0xe000ed04

08007cfc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007cfc:	b580      	push	{r7, lr}
 8007cfe:	b086      	sub	sp, #24
 8007d00:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007d02:	2300      	movs	r3, #0
 8007d04:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007d06:	4b4e      	ldr	r3, [pc, #312]	; (8007e40 <xTaskIncrementTick+0x144>)
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	f040 808e 	bne.w	8007e2c <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007d10:	4b4c      	ldr	r3, [pc, #304]	; (8007e44 <xTaskIncrementTick+0x148>)
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	3301      	adds	r3, #1
 8007d16:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007d18:	4a4a      	ldr	r2, [pc, #296]	; (8007e44 <xTaskIncrementTick+0x148>)
 8007d1a:	693b      	ldr	r3, [r7, #16]
 8007d1c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007d1e:	693b      	ldr	r3, [r7, #16]
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d120      	bne.n	8007d66 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8007d24:	4b48      	ldr	r3, [pc, #288]	; (8007e48 <xTaskIncrementTick+0x14c>)
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d00a      	beq.n	8007d44 <xTaskIncrementTick+0x48>
	__asm volatile
 8007d2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d32:	f383 8811 	msr	BASEPRI, r3
 8007d36:	f3bf 8f6f 	isb	sy
 8007d3a:	f3bf 8f4f 	dsb	sy
 8007d3e:	603b      	str	r3, [r7, #0]
}
 8007d40:	bf00      	nop
 8007d42:	e7fe      	b.n	8007d42 <xTaskIncrementTick+0x46>
 8007d44:	4b40      	ldr	r3, [pc, #256]	; (8007e48 <xTaskIncrementTick+0x14c>)
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	60fb      	str	r3, [r7, #12]
 8007d4a:	4b40      	ldr	r3, [pc, #256]	; (8007e4c <xTaskIncrementTick+0x150>)
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	4a3e      	ldr	r2, [pc, #248]	; (8007e48 <xTaskIncrementTick+0x14c>)
 8007d50:	6013      	str	r3, [r2, #0]
 8007d52:	4a3e      	ldr	r2, [pc, #248]	; (8007e4c <xTaskIncrementTick+0x150>)
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	6013      	str	r3, [r2, #0]
 8007d58:	4b3d      	ldr	r3, [pc, #244]	; (8007e50 <xTaskIncrementTick+0x154>)
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	3301      	adds	r3, #1
 8007d5e:	4a3c      	ldr	r2, [pc, #240]	; (8007e50 <xTaskIncrementTick+0x154>)
 8007d60:	6013      	str	r3, [r2, #0]
 8007d62:	f000 faa9 	bl	80082b8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007d66:	4b3b      	ldr	r3, [pc, #236]	; (8007e54 <xTaskIncrementTick+0x158>)
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	693a      	ldr	r2, [r7, #16]
 8007d6c:	429a      	cmp	r2, r3
 8007d6e:	d348      	bcc.n	8007e02 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007d70:	4b35      	ldr	r3, [pc, #212]	; (8007e48 <xTaskIncrementTick+0x14c>)
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d104      	bne.n	8007d84 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007d7a:	4b36      	ldr	r3, [pc, #216]	; (8007e54 <xTaskIncrementTick+0x158>)
 8007d7c:	f04f 32ff 	mov.w	r2, #4294967295
 8007d80:	601a      	str	r2, [r3, #0]
					break;
 8007d82:	e03e      	b.n	8007e02 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007d84:	4b30      	ldr	r3, [pc, #192]	; (8007e48 <xTaskIncrementTick+0x14c>)
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	68db      	ldr	r3, [r3, #12]
 8007d8a:	68db      	ldr	r3, [r3, #12]
 8007d8c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007d8e:	68bb      	ldr	r3, [r7, #8]
 8007d90:	685b      	ldr	r3, [r3, #4]
 8007d92:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007d94:	693a      	ldr	r2, [r7, #16]
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	429a      	cmp	r2, r3
 8007d9a:	d203      	bcs.n	8007da4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007d9c:	4a2d      	ldr	r2, [pc, #180]	; (8007e54 <xTaskIncrementTick+0x158>)
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007da2:	e02e      	b.n	8007e02 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007da4:	68bb      	ldr	r3, [r7, #8]
 8007da6:	3304      	adds	r3, #4
 8007da8:	4618      	mov	r0, r3
 8007daa:	f7fe fecb 	bl	8006b44 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007dae:	68bb      	ldr	r3, [r7, #8]
 8007db0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d004      	beq.n	8007dc0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007db6:	68bb      	ldr	r3, [r7, #8]
 8007db8:	3318      	adds	r3, #24
 8007dba:	4618      	mov	r0, r3
 8007dbc:	f7fe fec2 	bl	8006b44 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007dc0:	68bb      	ldr	r3, [r7, #8]
 8007dc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dc4:	2201      	movs	r2, #1
 8007dc6:	409a      	lsls	r2, r3
 8007dc8:	4b23      	ldr	r3, [pc, #140]	; (8007e58 <xTaskIncrementTick+0x15c>)
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	4313      	orrs	r3, r2
 8007dce:	4a22      	ldr	r2, [pc, #136]	; (8007e58 <xTaskIncrementTick+0x15c>)
 8007dd0:	6013      	str	r3, [r2, #0]
 8007dd2:	68bb      	ldr	r3, [r7, #8]
 8007dd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007dd6:	4613      	mov	r3, r2
 8007dd8:	009b      	lsls	r3, r3, #2
 8007dda:	4413      	add	r3, r2
 8007ddc:	009b      	lsls	r3, r3, #2
 8007dde:	4a1f      	ldr	r2, [pc, #124]	; (8007e5c <xTaskIncrementTick+0x160>)
 8007de0:	441a      	add	r2, r3
 8007de2:	68bb      	ldr	r3, [r7, #8]
 8007de4:	3304      	adds	r3, #4
 8007de6:	4619      	mov	r1, r3
 8007de8:	4610      	mov	r0, r2
 8007dea:	f7fe fe4e 	bl	8006a8a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007dee:	68bb      	ldr	r3, [r7, #8]
 8007df0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007df2:	4b1b      	ldr	r3, [pc, #108]	; (8007e60 <xTaskIncrementTick+0x164>)
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007df8:	429a      	cmp	r2, r3
 8007dfa:	d3b9      	bcc.n	8007d70 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8007dfc:	2301      	movs	r3, #1
 8007dfe:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007e00:	e7b6      	b.n	8007d70 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007e02:	4b17      	ldr	r3, [pc, #92]	; (8007e60 <xTaskIncrementTick+0x164>)
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e08:	4914      	ldr	r1, [pc, #80]	; (8007e5c <xTaskIncrementTick+0x160>)
 8007e0a:	4613      	mov	r3, r2
 8007e0c:	009b      	lsls	r3, r3, #2
 8007e0e:	4413      	add	r3, r2
 8007e10:	009b      	lsls	r3, r3, #2
 8007e12:	440b      	add	r3, r1
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	2b01      	cmp	r3, #1
 8007e18:	d901      	bls.n	8007e1e <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8007e1a:	2301      	movs	r3, #1
 8007e1c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007e1e:	4b11      	ldr	r3, [pc, #68]	; (8007e64 <xTaskIncrementTick+0x168>)
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d007      	beq.n	8007e36 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8007e26:	2301      	movs	r3, #1
 8007e28:	617b      	str	r3, [r7, #20]
 8007e2a:	e004      	b.n	8007e36 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007e2c:	4b0e      	ldr	r3, [pc, #56]	; (8007e68 <xTaskIncrementTick+0x16c>)
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	3301      	adds	r3, #1
 8007e32:	4a0d      	ldr	r2, [pc, #52]	; (8007e68 <xTaskIncrementTick+0x16c>)
 8007e34:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007e36:	697b      	ldr	r3, [r7, #20]
}
 8007e38:	4618      	mov	r0, r3
 8007e3a:	3718      	adds	r7, #24
 8007e3c:	46bd      	mov	sp, r7
 8007e3e:	bd80      	pop	{r7, pc}
 8007e40:	2400409c 	.word	0x2400409c
 8007e44:	24004078 	.word	0x24004078
 8007e48:	2400402c 	.word	0x2400402c
 8007e4c:	24004030 	.word	0x24004030
 8007e50:	2400408c 	.word	0x2400408c
 8007e54:	24004094 	.word	0x24004094
 8007e58:	2400407c 	.word	0x2400407c
 8007e5c:	24003f78 	.word	0x24003f78
 8007e60:	24003f74 	.word	0x24003f74
 8007e64:	24004088 	.word	0x24004088
 8007e68:	24004084 	.word	0x24004084

08007e6c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007e6c:	b480      	push	{r7}
 8007e6e:	b087      	sub	sp, #28
 8007e70:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007e72:	4b29      	ldr	r3, [pc, #164]	; (8007f18 <vTaskSwitchContext+0xac>)
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d003      	beq.n	8007e82 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007e7a:	4b28      	ldr	r3, [pc, #160]	; (8007f1c <vTaskSwitchContext+0xb0>)
 8007e7c:	2201      	movs	r2, #1
 8007e7e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007e80:	e044      	b.n	8007f0c <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8007e82:	4b26      	ldr	r3, [pc, #152]	; (8007f1c <vTaskSwitchContext+0xb0>)
 8007e84:	2200      	movs	r2, #0
 8007e86:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007e88:	4b25      	ldr	r3, [pc, #148]	; (8007f20 <vTaskSwitchContext+0xb4>)
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	fab3 f383 	clz	r3, r3
 8007e94:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8007e96:	7afb      	ldrb	r3, [r7, #11]
 8007e98:	f1c3 031f 	rsb	r3, r3, #31
 8007e9c:	617b      	str	r3, [r7, #20]
 8007e9e:	4921      	ldr	r1, [pc, #132]	; (8007f24 <vTaskSwitchContext+0xb8>)
 8007ea0:	697a      	ldr	r2, [r7, #20]
 8007ea2:	4613      	mov	r3, r2
 8007ea4:	009b      	lsls	r3, r3, #2
 8007ea6:	4413      	add	r3, r2
 8007ea8:	009b      	lsls	r3, r3, #2
 8007eaa:	440b      	add	r3, r1
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d10a      	bne.n	8007ec8 <vTaskSwitchContext+0x5c>
	__asm volatile
 8007eb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007eb6:	f383 8811 	msr	BASEPRI, r3
 8007eba:	f3bf 8f6f 	isb	sy
 8007ebe:	f3bf 8f4f 	dsb	sy
 8007ec2:	607b      	str	r3, [r7, #4]
}
 8007ec4:	bf00      	nop
 8007ec6:	e7fe      	b.n	8007ec6 <vTaskSwitchContext+0x5a>
 8007ec8:	697a      	ldr	r2, [r7, #20]
 8007eca:	4613      	mov	r3, r2
 8007ecc:	009b      	lsls	r3, r3, #2
 8007ece:	4413      	add	r3, r2
 8007ed0:	009b      	lsls	r3, r3, #2
 8007ed2:	4a14      	ldr	r2, [pc, #80]	; (8007f24 <vTaskSwitchContext+0xb8>)
 8007ed4:	4413      	add	r3, r2
 8007ed6:	613b      	str	r3, [r7, #16]
 8007ed8:	693b      	ldr	r3, [r7, #16]
 8007eda:	685b      	ldr	r3, [r3, #4]
 8007edc:	685a      	ldr	r2, [r3, #4]
 8007ede:	693b      	ldr	r3, [r7, #16]
 8007ee0:	605a      	str	r2, [r3, #4]
 8007ee2:	693b      	ldr	r3, [r7, #16]
 8007ee4:	685a      	ldr	r2, [r3, #4]
 8007ee6:	693b      	ldr	r3, [r7, #16]
 8007ee8:	3308      	adds	r3, #8
 8007eea:	429a      	cmp	r2, r3
 8007eec:	d104      	bne.n	8007ef8 <vTaskSwitchContext+0x8c>
 8007eee:	693b      	ldr	r3, [r7, #16]
 8007ef0:	685b      	ldr	r3, [r3, #4]
 8007ef2:	685a      	ldr	r2, [r3, #4]
 8007ef4:	693b      	ldr	r3, [r7, #16]
 8007ef6:	605a      	str	r2, [r3, #4]
 8007ef8:	693b      	ldr	r3, [r7, #16]
 8007efa:	685b      	ldr	r3, [r3, #4]
 8007efc:	68db      	ldr	r3, [r3, #12]
 8007efe:	4a0a      	ldr	r2, [pc, #40]	; (8007f28 <vTaskSwitchContext+0xbc>)
 8007f00:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007f02:	4b09      	ldr	r3, [pc, #36]	; (8007f28 <vTaskSwitchContext+0xbc>)
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	334c      	adds	r3, #76	; 0x4c
 8007f08:	4a08      	ldr	r2, [pc, #32]	; (8007f2c <vTaskSwitchContext+0xc0>)
 8007f0a:	6013      	str	r3, [r2, #0]
}
 8007f0c:	bf00      	nop
 8007f0e:	371c      	adds	r7, #28
 8007f10:	46bd      	mov	sp, r7
 8007f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f16:	4770      	bx	lr
 8007f18:	2400409c 	.word	0x2400409c
 8007f1c:	24004088 	.word	0x24004088
 8007f20:	2400407c 	.word	0x2400407c
 8007f24:	24003f78 	.word	0x24003f78
 8007f28:	24003f74 	.word	0x24003f74
 8007f2c:	24000014 	.word	0x24000014

08007f30 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007f30:	b580      	push	{r7, lr}
 8007f32:	b084      	sub	sp, #16
 8007f34:	af00      	add	r7, sp, #0
 8007f36:	6078      	str	r0, [r7, #4]
 8007f38:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d10a      	bne.n	8007f56 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8007f40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f44:	f383 8811 	msr	BASEPRI, r3
 8007f48:	f3bf 8f6f 	isb	sy
 8007f4c:	f3bf 8f4f 	dsb	sy
 8007f50:	60fb      	str	r3, [r7, #12]
}
 8007f52:	bf00      	nop
 8007f54:	e7fe      	b.n	8007f54 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007f56:	4b07      	ldr	r3, [pc, #28]	; (8007f74 <vTaskPlaceOnEventList+0x44>)
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	3318      	adds	r3, #24
 8007f5c:	4619      	mov	r1, r3
 8007f5e:	6878      	ldr	r0, [r7, #4]
 8007f60:	f7fe fdb7 	bl	8006ad2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007f64:	2101      	movs	r1, #1
 8007f66:	6838      	ldr	r0, [r7, #0]
 8007f68:	f000 fa6a 	bl	8008440 <prvAddCurrentTaskToDelayedList>
}
 8007f6c:	bf00      	nop
 8007f6e:	3710      	adds	r7, #16
 8007f70:	46bd      	mov	sp, r7
 8007f72:	bd80      	pop	{r7, pc}
 8007f74:	24003f74 	.word	0x24003f74

08007f78 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007f78:	b580      	push	{r7, lr}
 8007f7a:	b086      	sub	sp, #24
 8007f7c:	af00      	add	r7, sp, #0
 8007f7e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	68db      	ldr	r3, [r3, #12]
 8007f84:	68db      	ldr	r3, [r3, #12]
 8007f86:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007f88:	693b      	ldr	r3, [r7, #16]
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d10a      	bne.n	8007fa4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8007f8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f92:	f383 8811 	msr	BASEPRI, r3
 8007f96:	f3bf 8f6f 	isb	sy
 8007f9a:	f3bf 8f4f 	dsb	sy
 8007f9e:	60fb      	str	r3, [r7, #12]
}
 8007fa0:	bf00      	nop
 8007fa2:	e7fe      	b.n	8007fa2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007fa4:	693b      	ldr	r3, [r7, #16]
 8007fa6:	3318      	adds	r3, #24
 8007fa8:	4618      	mov	r0, r3
 8007faa:	f7fe fdcb 	bl	8006b44 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007fae:	4b1d      	ldr	r3, [pc, #116]	; (8008024 <xTaskRemoveFromEventList+0xac>)
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d11c      	bne.n	8007ff0 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007fb6:	693b      	ldr	r3, [r7, #16]
 8007fb8:	3304      	adds	r3, #4
 8007fba:	4618      	mov	r0, r3
 8007fbc:	f7fe fdc2 	bl	8006b44 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007fc0:	693b      	ldr	r3, [r7, #16]
 8007fc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fc4:	2201      	movs	r2, #1
 8007fc6:	409a      	lsls	r2, r3
 8007fc8:	4b17      	ldr	r3, [pc, #92]	; (8008028 <xTaskRemoveFromEventList+0xb0>)
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	4313      	orrs	r3, r2
 8007fce:	4a16      	ldr	r2, [pc, #88]	; (8008028 <xTaskRemoveFromEventList+0xb0>)
 8007fd0:	6013      	str	r3, [r2, #0]
 8007fd2:	693b      	ldr	r3, [r7, #16]
 8007fd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007fd6:	4613      	mov	r3, r2
 8007fd8:	009b      	lsls	r3, r3, #2
 8007fda:	4413      	add	r3, r2
 8007fdc:	009b      	lsls	r3, r3, #2
 8007fde:	4a13      	ldr	r2, [pc, #76]	; (800802c <xTaskRemoveFromEventList+0xb4>)
 8007fe0:	441a      	add	r2, r3
 8007fe2:	693b      	ldr	r3, [r7, #16]
 8007fe4:	3304      	adds	r3, #4
 8007fe6:	4619      	mov	r1, r3
 8007fe8:	4610      	mov	r0, r2
 8007fea:	f7fe fd4e 	bl	8006a8a <vListInsertEnd>
 8007fee:	e005      	b.n	8007ffc <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007ff0:	693b      	ldr	r3, [r7, #16]
 8007ff2:	3318      	adds	r3, #24
 8007ff4:	4619      	mov	r1, r3
 8007ff6:	480e      	ldr	r0, [pc, #56]	; (8008030 <xTaskRemoveFromEventList+0xb8>)
 8007ff8:	f7fe fd47 	bl	8006a8a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007ffc:	693b      	ldr	r3, [r7, #16]
 8007ffe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008000:	4b0c      	ldr	r3, [pc, #48]	; (8008034 <xTaskRemoveFromEventList+0xbc>)
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008006:	429a      	cmp	r2, r3
 8008008:	d905      	bls.n	8008016 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800800a:	2301      	movs	r3, #1
 800800c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800800e:	4b0a      	ldr	r3, [pc, #40]	; (8008038 <xTaskRemoveFromEventList+0xc0>)
 8008010:	2201      	movs	r2, #1
 8008012:	601a      	str	r2, [r3, #0]
 8008014:	e001      	b.n	800801a <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8008016:	2300      	movs	r3, #0
 8008018:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800801a:	697b      	ldr	r3, [r7, #20]
}
 800801c:	4618      	mov	r0, r3
 800801e:	3718      	adds	r7, #24
 8008020:	46bd      	mov	sp, r7
 8008022:	bd80      	pop	{r7, pc}
 8008024:	2400409c 	.word	0x2400409c
 8008028:	2400407c 	.word	0x2400407c
 800802c:	24003f78 	.word	0x24003f78
 8008030:	24004034 	.word	0x24004034
 8008034:	24003f74 	.word	0x24003f74
 8008038:	24004088 	.word	0x24004088

0800803c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800803c:	b480      	push	{r7}
 800803e:	b083      	sub	sp, #12
 8008040:	af00      	add	r7, sp, #0
 8008042:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008044:	4b06      	ldr	r3, [pc, #24]	; (8008060 <vTaskInternalSetTimeOutState+0x24>)
 8008046:	681a      	ldr	r2, [r3, #0]
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800804c:	4b05      	ldr	r3, [pc, #20]	; (8008064 <vTaskInternalSetTimeOutState+0x28>)
 800804e:	681a      	ldr	r2, [r3, #0]
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	605a      	str	r2, [r3, #4]
}
 8008054:	bf00      	nop
 8008056:	370c      	adds	r7, #12
 8008058:	46bd      	mov	sp, r7
 800805a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800805e:	4770      	bx	lr
 8008060:	2400408c 	.word	0x2400408c
 8008064:	24004078 	.word	0x24004078

08008068 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008068:	b580      	push	{r7, lr}
 800806a:	b088      	sub	sp, #32
 800806c:	af00      	add	r7, sp, #0
 800806e:	6078      	str	r0, [r7, #4]
 8008070:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	2b00      	cmp	r3, #0
 8008076:	d10a      	bne.n	800808e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8008078:	f04f 0350 	mov.w	r3, #80	; 0x50
 800807c:	f383 8811 	msr	BASEPRI, r3
 8008080:	f3bf 8f6f 	isb	sy
 8008084:	f3bf 8f4f 	dsb	sy
 8008088:	613b      	str	r3, [r7, #16]
}
 800808a:	bf00      	nop
 800808c:	e7fe      	b.n	800808c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800808e:	683b      	ldr	r3, [r7, #0]
 8008090:	2b00      	cmp	r3, #0
 8008092:	d10a      	bne.n	80080aa <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8008094:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008098:	f383 8811 	msr	BASEPRI, r3
 800809c:	f3bf 8f6f 	isb	sy
 80080a0:	f3bf 8f4f 	dsb	sy
 80080a4:	60fb      	str	r3, [r7, #12]
}
 80080a6:	bf00      	nop
 80080a8:	e7fe      	b.n	80080a8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80080aa:	f7fe fea3 	bl	8006df4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80080ae:	4b1d      	ldr	r3, [pc, #116]	; (8008124 <xTaskCheckForTimeOut+0xbc>)
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	685b      	ldr	r3, [r3, #4]
 80080b8:	69ba      	ldr	r2, [r7, #24]
 80080ba:	1ad3      	subs	r3, r2, r3
 80080bc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80080be:	683b      	ldr	r3, [r7, #0]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080c6:	d102      	bne.n	80080ce <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80080c8:	2300      	movs	r3, #0
 80080ca:	61fb      	str	r3, [r7, #28]
 80080cc:	e023      	b.n	8008116 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	681a      	ldr	r2, [r3, #0]
 80080d2:	4b15      	ldr	r3, [pc, #84]	; (8008128 <xTaskCheckForTimeOut+0xc0>)
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	429a      	cmp	r2, r3
 80080d8:	d007      	beq.n	80080ea <xTaskCheckForTimeOut+0x82>
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	685b      	ldr	r3, [r3, #4]
 80080de:	69ba      	ldr	r2, [r7, #24]
 80080e0:	429a      	cmp	r2, r3
 80080e2:	d302      	bcc.n	80080ea <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80080e4:	2301      	movs	r3, #1
 80080e6:	61fb      	str	r3, [r7, #28]
 80080e8:	e015      	b.n	8008116 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80080ea:	683b      	ldr	r3, [r7, #0]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	697a      	ldr	r2, [r7, #20]
 80080f0:	429a      	cmp	r2, r3
 80080f2:	d20b      	bcs.n	800810c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80080f4:	683b      	ldr	r3, [r7, #0]
 80080f6:	681a      	ldr	r2, [r3, #0]
 80080f8:	697b      	ldr	r3, [r7, #20]
 80080fa:	1ad2      	subs	r2, r2, r3
 80080fc:	683b      	ldr	r3, [r7, #0]
 80080fe:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008100:	6878      	ldr	r0, [r7, #4]
 8008102:	f7ff ff9b 	bl	800803c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008106:	2300      	movs	r3, #0
 8008108:	61fb      	str	r3, [r7, #28]
 800810a:	e004      	b.n	8008116 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800810c:	683b      	ldr	r3, [r7, #0]
 800810e:	2200      	movs	r2, #0
 8008110:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008112:	2301      	movs	r3, #1
 8008114:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008116:	f7fe fe9d 	bl	8006e54 <vPortExitCritical>

	return xReturn;
 800811a:	69fb      	ldr	r3, [r7, #28]
}
 800811c:	4618      	mov	r0, r3
 800811e:	3720      	adds	r7, #32
 8008120:	46bd      	mov	sp, r7
 8008122:	bd80      	pop	{r7, pc}
 8008124:	24004078 	.word	0x24004078
 8008128:	2400408c 	.word	0x2400408c

0800812c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800812c:	b480      	push	{r7}
 800812e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008130:	4b03      	ldr	r3, [pc, #12]	; (8008140 <vTaskMissedYield+0x14>)
 8008132:	2201      	movs	r2, #1
 8008134:	601a      	str	r2, [r3, #0]
}
 8008136:	bf00      	nop
 8008138:	46bd      	mov	sp, r7
 800813a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800813e:	4770      	bx	lr
 8008140:	24004088 	.word	0x24004088

08008144 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008144:	b580      	push	{r7, lr}
 8008146:	b082      	sub	sp, #8
 8008148:	af00      	add	r7, sp, #0
 800814a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800814c:	f000 f852 	bl	80081f4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008150:	4b06      	ldr	r3, [pc, #24]	; (800816c <prvIdleTask+0x28>)
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	2b01      	cmp	r3, #1
 8008156:	d9f9      	bls.n	800814c <prvIdleTask+0x8>
			{
				taskYIELD();
 8008158:	4b05      	ldr	r3, [pc, #20]	; (8008170 <prvIdleTask+0x2c>)
 800815a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800815e:	601a      	str	r2, [r3, #0]
 8008160:	f3bf 8f4f 	dsb	sy
 8008164:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008168:	e7f0      	b.n	800814c <prvIdleTask+0x8>
 800816a:	bf00      	nop
 800816c:	24003f78 	.word	0x24003f78
 8008170:	e000ed04 	.word	0xe000ed04

08008174 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008174:	b580      	push	{r7, lr}
 8008176:	b082      	sub	sp, #8
 8008178:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800817a:	2300      	movs	r3, #0
 800817c:	607b      	str	r3, [r7, #4]
 800817e:	e00c      	b.n	800819a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008180:	687a      	ldr	r2, [r7, #4]
 8008182:	4613      	mov	r3, r2
 8008184:	009b      	lsls	r3, r3, #2
 8008186:	4413      	add	r3, r2
 8008188:	009b      	lsls	r3, r3, #2
 800818a:	4a12      	ldr	r2, [pc, #72]	; (80081d4 <prvInitialiseTaskLists+0x60>)
 800818c:	4413      	add	r3, r2
 800818e:	4618      	mov	r0, r3
 8008190:	f7fe fc4e 	bl	8006a30 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	3301      	adds	r3, #1
 8008198:	607b      	str	r3, [r7, #4]
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	2b06      	cmp	r3, #6
 800819e:	d9ef      	bls.n	8008180 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80081a0:	480d      	ldr	r0, [pc, #52]	; (80081d8 <prvInitialiseTaskLists+0x64>)
 80081a2:	f7fe fc45 	bl	8006a30 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80081a6:	480d      	ldr	r0, [pc, #52]	; (80081dc <prvInitialiseTaskLists+0x68>)
 80081a8:	f7fe fc42 	bl	8006a30 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80081ac:	480c      	ldr	r0, [pc, #48]	; (80081e0 <prvInitialiseTaskLists+0x6c>)
 80081ae:	f7fe fc3f 	bl	8006a30 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80081b2:	480c      	ldr	r0, [pc, #48]	; (80081e4 <prvInitialiseTaskLists+0x70>)
 80081b4:	f7fe fc3c 	bl	8006a30 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80081b8:	480b      	ldr	r0, [pc, #44]	; (80081e8 <prvInitialiseTaskLists+0x74>)
 80081ba:	f7fe fc39 	bl	8006a30 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80081be:	4b0b      	ldr	r3, [pc, #44]	; (80081ec <prvInitialiseTaskLists+0x78>)
 80081c0:	4a05      	ldr	r2, [pc, #20]	; (80081d8 <prvInitialiseTaskLists+0x64>)
 80081c2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80081c4:	4b0a      	ldr	r3, [pc, #40]	; (80081f0 <prvInitialiseTaskLists+0x7c>)
 80081c6:	4a05      	ldr	r2, [pc, #20]	; (80081dc <prvInitialiseTaskLists+0x68>)
 80081c8:	601a      	str	r2, [r3, #0]
}
 80081ca:	bf00      	nop
 80081cc:	3708      	adds	r7, #8
 80081ce:	46bd      	mov	sp, r7
 80081d0:	bd80      	pop	{r7, pc}
 80081d2:	bf00      	nop
 80081d4:	24003f78 	.word	0x24003f78
 80081d8:	24004004 	.word	0x24004004
 80081dc:	24004018 	.word	0x24004018
 80081e0:	24004034 	.word	0x24004034
 80081e4:	24004048 	.word	0x24004048
 80081e8:	24004060 	.word	0x24004060
 80081ec:	2400402c 	.word	0x2400402c
 80081f0:	24004030 	.word	0x24004030

080081f4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80081f4:	b580      	push	{r7, lr}
 80081f6:	b082      	sub	sp, #8
 80081f8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80081fa:	e019      	b.n	8008230 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80081fc:	f7fe fdfa 	bl	8006df4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008200:	4b10      	ldr	r3, [pc, #64]	; (8008244 <prvCheckTasksWaitingTermination+0x50>)
 8008202:	68db      	ldr	r3, [r3, #12]
 8008204:	68db      	ldr	r3, [r3, #12]
 8008206:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	3304      	adds	r3, #4
 800820c:	4618      	mov	r0, r3
 800820e:	f7fe fc99 	bl	8006b44 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008212:	4b0d      	ldr	r3, [pc, #52]	; (8008248 <prvCheckTasksWaitingTermination+0x54>)
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	3b01      	subs	r3, #1
 8008218:	4a0b      	ldr	r2, [pc, #44]	; (8008248 <prvCheckTasksWaitingTermination+0x54>)
 800821a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800821c:	4b0b      	ldr	r3, [pc, #44]	; (800824c <prvCheckTasksWaitingTermination+0x58>)
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	3b01      	subs	r3, #1
 8008222:	4a0a      	ldr	r2, [pc, #40]	; (800824c <prvCheckTasksWaitingTermination+0x58>)
 8008224:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008226:	f7fe fe15 	bl	8006e54 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800822a:	6878      	ldr	r0, [r7, #4]
 800822c:	f000 f810 	bl	8008250 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008230:	4b06      	ldr	r3, [pc, #24]	; (800824c <prvCheckTasksWaitingTermination+0x58>)
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	2b00      	cmp	r3, #0
 8008236:	d1e1      	bne.n	80081fc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008238:	bf00      	nop
 800823a:	bf00      	nop
 800823c:	3708      	adds	r7, #8
 800823e:	46bd      	mov	sp, r7
 8008240:	bd80      	pop	{r7, pc}
 8008242:	bf00      	nop
 8008244:	24004048 	.word	0x24004048
 8008248:	24004074 	.word	0x24004074
 800824c:	2400405c 	.word	0x2400405c

08008250 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008250:	b580      	push	{r7, lr}
 8008252:	b084      	sub	sp, #16
 8008254:	af00      	add	r7, sp, #0
 8008256:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	334c      	adds	r3, #76	; 0x4c
 800825c:	4618      	mov	r0, r3
 800825e:	f000 f9ff 	bl	8008660 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8008268:	2b00      	cmp	r3, #0
 800826a:	d108      	bne.n	800827e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008270:	4618      	mov	r0, r3
 8008272:	f7fe fabf 	bl	80067f4 <vPortFree>
				vPortFree( pxTCB );
 8008276:	6878      	ldr	r0, [r7, #4]
 8008278:	f7fe fabc 	bl	80067f4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800827c:	e018      	b.n	80082b0 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8008284:	2b01      	cmp	r3, #1
 8008286:	d103      	bne.n	8008290 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8008288:	6878      	ldr	r0, [r7, #4]
 800828a:	f7fe fab3 	bl	80067f4 <vPortFree>
	}
 800828e:	e00f      	b.n	80082b0 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8008296:	2b02      	cmp	r3, #2
 8008298:	d00a      	beq.n	80082b0 <prvDeleteTCB+0x60>
	__asm volatile
 800829a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800829e:	f383 8811 	msr	BASEPRI, r3
 80082a2:	f3bf 8f6f 	isb	sy
 80082a6:	f3bf 8f4f 	dsb	sy
 80082aa:	60fb      	str	r3, [r7, #12]
}
 80082ac:	bf00      	nop
 80082ae:	e7fe      	b.n	80082ae <prvDeleteTCB+0x5e>
	}
 80082b0:	bf00      	nop
 80082b2:	3710      	adds	r7, #16
 80082b4:	46bd      	mov	sp, r7
 80082b6:	bd80      	pop	{r7, pc}

080082b8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80082b8:	b480      	push	{r7}
 80082ba:	b083      	sub	sp, #12
 80082bc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80082be:	4b0c      	ldr	r3, [pc, #48]	; (80082f0 <prvResetNextTaskUnblockTime+0x38>)
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d104      	bne.n	80082d2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80082c8:	4b0a      	ldr	r3, [pc, #40]	; (80082f4 <prvResetNextTaskUnblockTime+0x3c>)
 80082ca:	f04f 32ff 	mov.w	r2, #4294967295
 80082ce:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80082d0:	e008      	b.n	80082e4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80082d2:	4b07      	ldr	r3, [pc, #28]	; (80082f0 <prvResetNextTaskUnblockTime+0x38>)
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	68db      	ldr	r3, [r3, #12]
 80082d8:	68db      	ldr	r3, [r3, #12]
 80082da:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	685b      	ldr	r3, [r3, #4]
 80082e0:	4a04      	ldr	r2, [pc, #16]	; (80082f4 <prvResetNextTaskUnblockTime+0x3c>)
 80082e2:	6013      	str	r3, [r2, #0]
}
 80082e4:	bf00      	nop
 80082e6:	370c      	adds	r7, #12
 80082e8:	46bd      	mov	sp, r7
 80082ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ee:	4770      	bx	lr
 80082f0:	2400402c 	.word	0x2400402c
 80082f4:	24004094 	.word	0x24004094

080082f8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80082f8:	b480      	push	{r7}
 80082fa:	b083      	sub	sp, #12
 80082fc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80082fe:	4b0b      	ldr	r3, [pc, #44]	; (800832c <xTaskGetSchedulerState+0x34>)
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	2b00      	cmp	r3, #0
 8008304:	d102      	bne.n	800830c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008306:	2301      	movs	r3, #1
 8008308:	607b      	str	r3, [r7, #4]
 800830a:	e008      	b.n	800831e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800830c:	4b08      	ldr	r3, [pc, #32]	; (8008330 <xTaskGetSchedulerState+0x38>)
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	2b00      	cmp	r3, #0
 8008312:	d102      	bne.n	800831a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008314:	2302      	movs	r3, #2
 8008316:	607b      	str	r3, [r7, #4]
 8008318:	e001      	b.n	800831e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800831a:	2300      	movs	r3, #0
 800831c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800831e:	687b      	ldr	r3, [r7, #4]
	}
 8008320:	4618      	mov	r0, r3
 8008322:	370c      	adds	r7, #12
 8008324:	46bd      	mov	sp, r7
 8008326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800832a:	4770      	bx	lr
 800832c:	24004080 	.word	0x24004080
 8008330:	2400409c 	.word	0x2400409c

08008334 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008334:	b580      	push	{r7, lr}
 8008336:	b086      	sub	sp, #24
 8008338:	af00      	add	r7, sp, #0
 800833a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008340:	2300      	movs	r3, #0
 8008342:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	2b00      	cmp	r3, #0
 8008348:	d06e      	beq.n	8008428 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800834a:	4b3a      	ldr	r3, [pc, #232]	; (8008434 <xTaskPriorityDisinherit+0x100>)
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	693a      	ldr	r2, [r7, #16]
 8008350:	429a      	cmp	r2, r3
 8008352:	d00a      	beq.n	800836a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8008354:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008358:	f383 8811 	msr	BASEPRI, r3
 800835c:	f3bf 8f6f 	isb	sy
 8008360:	f3bf 8f4f 	dsb	sy
 8008364:	60fb      	str	r3, [r7, #12]
}
 8008366:	bf00      	nop
 8008368:	e7fe      	b.n	8008368 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800836a:	693b      	ldr	r3, [r7, #16]
 800836c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800836e:	2b00      	cmp	r3, #0
 8008370:	d10a      	bne.n	8008388 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8008372:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008376:	f383 8811 	msr	BASEPRI, r3
 800837a:	f3bf 8f6f 	isb	sy
 800837e:	f3bf 8f4f 	dsb	sy
 8008382:	60bb      	str	r3, [r7, #8]
}
 8008384:	bf00      	nop
 8008386:	e7fe      	b.n	8008386 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8008388:	693b      	ldr	r3, [r7, #16]
 800838a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800838c:	1e5a      	subs	r2, r3, #1
 800838e:	693b      	ldr	r3, [r7, #16]
 8008390:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008392:	693b      	ldr	r3, [r7, #16]
 8008394:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008396:	693b      	ldr	r3, [r7, #16]
 8008398:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800839a:	429a      	cmp	r2, r3
 800839c:	d044      	beq.n	8008428 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800839e:	693b      	ldr	r3, [r7, #16]
 80083a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d140      	bne.n	8008428 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80083a6:	693b      	ldr	r3, [r7, #16]
 80083a8:	3304      	adds	r3, #4
 80083aa:	4618      	mov	r0, r3
 80083ac:	f7fe fbca 	bl	8006b44 <uxListRemove>
 80083b0:	4603      	mov	r3, r0
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d115      	bne.n	80083e2 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80083b6:	693b      	ldr	r3, [r7, #16]
 80083b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80083ba:	491f      	ldr	r1, [pc, #124]	; (8008438 <xTaskPriorityDisinherit+0x104>)
 80083bc:	4613      	mov	r3, r2
 80083be:	009b      	lsls	r3, r3, #2
 80083c0:	4413      	add	r3, r2
 80083c2:	009b      	lsls	r3, r3, #2
 80083c4:	440b      	add	r3, r1
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d10a      	bne.n	80083e2 <xTaskPriorityDisinherit+0xae>
 80083cc:	693b      	ldr	r3, [r7, #16]
 80083ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083d0:	2201      	movs	r2, #1
 80083d2:	fa02 f303 	lsl.w	r3, r2, r3
 80083d6:	43da      	mvns	r2, r3
 80083d8:	4b18      	ldr	r3, [pc, #96]	; (800843c <xTaskPriorityDisinherit+0x108>)
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	4013      	ands	r3, r2
 80083de:	4a17      	ldr	r2, [pc, #92]	; (800843c <xTaskPriorityDisinherit+0x108>)
 80083e0:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80083e2:	693b      	ldr	r3, [r7, #16]
 80083e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80083e6:	693b      	ldr	r3, [r7, #16]
 80083e8:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80083ea:	693b      	ldr	r3, [r7, #16]
 80083ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083ee:	f1c3 0207 	rsb	r2, r3, #7
 80083f2:	693b      	ldr	r3, [r7, #16]
 80083f4:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80083f6:	693b      	ldr	r3, [r7, #16]
 80083f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083fa:	2201      	movs	r2, #1
 80083fc:	409a      	lsls	r2, r3
 80083fe:	4b0f      	ldr	r3, [pc, #60]	; (800843c <xTaskPriorityDisinherit+0x108>)
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	4313      	orrs	r3, r2
 8008404:	4a0d      	ldr	r2, [pc, #52]	; (800843c <xTaskPriorityDisinherit+0x108>)
 8008406:	6013      	str	r3, [r2, #0]
 8008408:	693b      	ldr	r3, [r7, #16]
 800840a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800840c:	4613      	mov	r3, r2
 800840e:	009b      	lsls	r3, r3, #2
 8008410:	4413      	add	r3, r2
 8008412:	009b      	lsls	r3, r3, #2
 8008414:	4a08      	ldr	r2, [pc, #32]	; (8008438 <xTaskPriorityDisinherit+0x104>)
 8008416:	441a      	add	r2, r3
 8008418:	693b      	ldr	r3, [r7, #16]
 800841a:	3304      	adds	r3, #4
 800841c:	4619      	mov	r1, r3
 800841e:	4610      	mov	r0, r2
 8008420:	f7fe fb33 	bl	8006a8a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008424:	2301      	movs	r3, #1
 8008426:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008428:	697b      	ldr	r3, [r7, #20]
	}
 800842a:	4618      	mov	r0, r3
 800842c:	3718      	adds	r7, #24
 800842e:	46bd      	mov	sp, r7
 8008430:	bd80      	pop	{r7, pc}
 8008432:	bf00      	nop
 8008434:	24003f74 	.word	0x24003f74
 8008438:	24003f78 	.word	0x24003f78
 800843c:	2400407c 	.word	0x2400407c

08008440 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008440:	b580      	push	{r7, lr}
 8008442:	b084      	sub	sp, #16
 8008444:	af00      	add	r7, sp, #0
 8008446:	6078      	str	r0, [r7, #4]
 8008448:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800844a:	4b29      	ldr	r3, [pc, #164]	; (80084f0 <prvAddCurrentTaskToDelayedList+0xb0>)
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008450:	4b28      	ldr	r3, [pc, #160]	; (80084f4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	3304      	adds	r3, #4
 8008456:	4618      	mov	r0, r3
 8008458:	f7fe fb74 	bl	8006b44 <uxListRemove>
 800845c:	4603      	mov	r3, r0
 800845e:	2b00      	cmp	r3, #0
 8008460:	d10b      	bne.n	800847a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8008462:	4b24      	ldr	r3, [pc, #144]	; (80084f4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008468:	2201      	movs	r2, #1
 800846a:	fa02 f303 	lsl.w	r3, r2, r3
 800846e:	43da      	mvns	r2, r3
 8008470:	4b21      	ldr	r3, [pc, #132]	; (80084f8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	4013      	ands	r3, r2
 8008476:	4a20      	ldr	r2, [pc, #128]	; (80084f8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8008478:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008480:	d10a      	bne.n	8008498 <prvAddCurrentTaskToDelayedList+0x58>
 8008482:	683b      	ldr	r3, [r7, #0]
 8008484:	2b00      	cmp	r3, #0
 8008486:	d007      	beq.n	8008498 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008488:	4b1a      	ldr	r3, [pc, #104]	; (80084f4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	3304      	adds	r3, #4
 800848e:	4619      	mov	r1, r3
 8008490:	481a      	ldr	r0, [pc, #104]	; (80084fc <prvAddCurrentTaskToDelayedList+0xbc>)
 8008492:	f7fe fafa 	bl	8006a8a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008496:	e026      	b.n	80084e6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008498:	68fa      	ldr	r2, [r7, #12]
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	4413      	add	r3, r2
 800849e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80084a0:	4b14      	ldr	r3, [pc, #80]	; (80084f4 <prvAddCurrentTaskToDelayedList+0xb4>)
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	68ba      	ldr	r2, [r7, #8]
 80084a6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80084a8:	68ba      	ldr	r2, [r7, #8]
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	429a      	cmp	r2, r3
 80084ae:	d209      	bcs.n	80084c4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80084b0:	4b13      	ldr	r3, [pc, #76]	; (8008500 <prvAddCurrentTaskToDelayedList+0xc0>)
 80084b2:	681a      	ldr	r2, [r3, #0]
 80084b4:	4b0f      	ldr	r3, [pc, #60]	; (80084f4 <prvAddCurrentTaskToDelayedList+0xb4>)
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	3304      	adds	r3, #4
 80084ba:	4619      	mov	r1, r3
 80084bc:	4610      	mov	r0, r2
 80084be:	f7fe fb08 	bl	8006ad2 <vListInsert>
}
 80084c2:	e010      	b.n	80084e6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80084c4:	4b0f      	ldr	r3, [pc, #60]	; (8008504 <prvAddCurrentTaskToDelayedList+0xc4>)
 80084c6:	681a      	ldr	r2, [r3, #0]
 80084c8:	4b0a      	ldr	r3, [pc, #40]	; (80084f4 <prvAddCurrentTaskToDelayedList+0xb4>)
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	3304      	adds	r3, #4
 80084ce:	4619      	mov	r1, r3
 80084d0:	4610      	mov	r0, r2
 80084d2:	f7fe fafe 	bl	8006ad2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80084d6:	4b0c      	ldr	r3, [pc, #48]	; (8008508 <prvAddCurrentTaskToDelayedList+0xc8>)
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	68ba      	ldr	r2, [r7, #8]
 80084dc:	429a      	cmp	r2, r3
 80084de:	d202      	bcs.n	80084e6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80084e0:	4a09      	ldr	r2, [pc, #36]	; (8008508 <prvAddCurrentTaskToDelayedList+0xc8>)
 80084e2:	68bb      	ldr	r3, [r7, #8]
 80084e4:	6013      	str	r3, [r2, #0]
}
 80084e6:	bf00      	nop
 80084e8:	3710      	adds	r7, #16
 80084ea:	46bd      	mov	sp, r7
 80084ec:	bd80      	pop	{r7, pc}
 80084ee:	bf00      	nop
 80084f0:	24004078 	.word	0x24004078
 80084f4:	24003f74 	.word	0x24003f74
 80084f8:	2400407c 	.word	0x2400407c
 80084fc:	24004060 	.word	0x24004060
 8008500:	24004030 	.word	0x24004030
 8008504:	2400402c 	.word	0x2400402c
 8008508:	24004094 	.word	0x24004094

0800850c <__errno>:
 800850c:	4b01      	ldr	r3, [pc, #4]	; (8008514 <__errno+0x8>)
 800850e:	6818      	ldr	r0, [r3, #0]
 8008510:	4770      	bx	lr
 8008512:	bf00      	nop
 8008514:	24000014 	.word	0x24000014

08008518 <__libc_init_array>:
 8008518:	b570      	push	{r4, r5, r6, lr}
 800851a:	4d0d      	ldr	r5, [pc, #52]	; (8008550 <__libc_init_array+0x38>)
 800851c:	4c0d      	ldr	r4, [pc, #52]	; (8008554 <__libc_init_array+0x3c>)
 800851e:	1b64      	subs	r4, r4, r5
 8008520:	10a4      	asrs	r4, r4, #2
 8008522:	2600      	movs	r6, #0
 8008524:	42a6      	cmp	r6, r4
 8008526:	d109      	bne.n	800853c <__libc_init_array+0x24>
 8008528:	4d0b      	ldr	r5, [pc, #44]	; (8008558 <__libc_init_array+0x40>)
 800852a:	4c0c      	ldr	r4, [pc, #48]	; (800855c <__libc_init_array+0x44>)
 800852c:	f000 fccc 	bl	8008ec8 <_init>
 8008530:	1b64      	subs	r4, r4, r5
 8008532:	10a4      	asrs	r4, r4, #2
 8008534:	2600      	movs	r6, #0
 8008536:	42a6      	cmp	r6, r4
 8008538:	d105      	bne.n	8008546 <__libc_init_array+0x2e>
 800853a:	bd70      	pop	{r4, r5, r6, pc}
 800853c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008540:	4798      	blx	r3
 8008542:	3601      	adds	r6, #1
 8008544:	e7ee      	b.n	8008524 <__libc_init_array+0xc>
 8008546:	f855 3b04 	ldr.w	r3, [r5], #4
 800854a:	4798      	blx	r3
 800854c:	3601      	adds	r6, #1
 800854e:	e7f2      	b.n	8008536 <__libc_init_array+0x1e>
 8008550:	08008ff8 	.word	0x08008ff8
 8008554:	08008ff8 	.word	0x08008ff8
 8008558:	08008ff8 	.word	0x08008ff8
 800855c:	08008ffc 	.word	0x08008ffc

08008560 <__retarget_lock_acquire_recursive>:
 8008560:	4770      	bx	lr

08008562 <__retarget_lock_release_recursive>:
 8008562:	4770      	bx	lr

08008564 <memcpy>:
 8008564:	440a      	add	r2, r1
 8008566:	4291      	cmp	r1, r2
 8008568:	f100 33ff 	add.w	r3, r0, #4294967295
 800856c:	d100      	bne.n	8008570 <memcpy+0xc>
 800856e:	4770      	bx	lr
 8008570:	b510      	push	{r4, lr}
 8008572:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008576:	f803 4f01 	strb.w	r4, [r3, #1]!
 800857a:	4291      	cmp	r1, r2
 800857c:	d1f9      	bne.n	8008572 <memcpy+0xe>
 800857e:	bd10      	pop	{r4, pc}

08008580 <memset>:
 8008580:	4402      	add	r2, r0
 8008582:	4603      	mov	r3, r0
 8008584:	4293      	cmp	r3, r2
 8008586:	d100      	bne.n	800858a <memset+0xa>
 8008588:	4770      	bx	lr
 800858a:	f803 1b01 	strb.w	r1, [r3], #1
 800858e:	e7f9      	b.n	8008584 <memset+0x4>

08008590 <_malloc_r>:
 8008590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008592:	1ccd      	adds	r5, r1, #3
 8008594:	f025 0503 	bic.w	r5, r5, #3
 8008598:	3508      	adds	r5, #8
 800859a:	2d0c      	cmp	r5, #12
 800859c:	bf38      	it	cc
 800859e:	250c      	movcc	r5, #12
 80085a0:	2d00      	cmp	r5, #0
 80085a2:	4606      	mov	r6, r0
 80085a4:	db01      	blt.n	80085aa <_malloc_r+0x1a>
 80085a6:	42a9      	cmp	r1, r5
 80085a8:	d903      	bls.n	80085b2 <_malloc_r+0x22>
 80085aa:	230c      	movs	r3, #12
 80085ac:	6033      	str	r3, [r6, #0]
 80085ae:	2000      	movs	r0, #0
 80085b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80085b2:	f000 f8f5 	bl	80087a0 <__malloc_lock>
 80085b6:	4921      	ldr	r1, [pc, #132]	; (800863c <_malloc_r+0xac>)
 80085b8:	680a      	ldr	r2, [r1, #0]
 80085ba:	4614      	mov	r4, r2
 80085bc:	b99c      	cbnz	r4, 80085e6 <_malloc_r+0x56>
 80085be:	4f20      	ldr	r7, [pc, #128]	; (8008640 <_malloc_r+0xb0>)
 80085c0:	683b      	ldr	r3, [r7, #0]
 80085c2:	b923      	cbnz	r3, 80085ce <_malloc_r+0x3e>
 80085c4:	4621      	mov	r1, r4
 80085c6:	4630      	mov	r0, r6
 80085c8:	f000 f8a6 	bl	8008718 <_sbrk_r>
 80085cc:	6038      	str	r0, [r7, #0]
 80085ce:	4629      	mov	r1, r5
 80085d0:	4630      	mov	r0, r6
 80085d2:	f000 f8a1 	bl	8008718 <_sbrk_r>
 80085d6:	1c43      	adds	r3, r0, #1
 80085d8:	d123      	bne.n	8008622 <_malloc_r+0x92>
 80085da:	230c      	movs	r3, #12
 80085dc:	6033      	str	r3, [r6, #0]
 80085de:	4630      	mov	r0, r6
 80085e0:	f000 f8e4 	bl	80087ac <__malloc_unlock>
 80085e4:	e7e3      	b.n	80085ae <_malloc_r+0x1e>
 80085e6:	6823      	ldr	r3, [r4, #0]
 80085e8:	1b5b      	subs	r3, r3, r5
 80085ea:	d417      	bmi.n	800861c <_malloc_r+0x8c>
 80085ec:	2b0b      	cmp	r3, #11
 80085ee:	d903      	bls.n	80085f8 <_malloc_r+0x68>
 80085f0:	6023      	str	r3, [r4, #0]
 80085f2:	441c      	add	r4, r3
 80085f4:	6025      	str	r5, [r4, #0]
 80085f6:	e004      	b.n	8008602 <_malloc_r+0x72>
 80085f8:	6863      	ldr	r3, [r4, #4]
 80085fa:	42a2      	cmp	r2, r4
 80085fc:	bf0c      	ite	eq
 80085fe:	600b      	streq	r3, [r1, #0]
 8008600:	6053      	strne	r3, [r2, #4]
 8008602:	4630      	mov	r0, r6
 8008604:	f000 f8d2 	bl	80087ac <__malloc_unlock>
 8008608:	f104 000b 	add.w	r0, r4, #11
 800860c:	1d23      	adds	r3, r4, #4
 800860e:	f020 0007 	bic.w	r0, r0, #7
 8008612:	1ac2      	subs	r2, r0, r3
 8008614:	d0cc      	beq.n	80085b0 <_malloc_r+0x20>
 8008616:	1a1b      	subs	r3, r3, r0
 8008618:	50a3      	str	r3, [r4, r2]
 800861a:	e7c9      	b.n	80085b0 <_malloc_r+0x20>
 800861c:	4622      	mov	r2, r4
 800861e:	6864      	ldr	r4, [r4, #4]
 8008620:	e7cc      	b.n	80085bc <_malloc_r+0x2c>
 8008622:	1cc4      	adds	r4, r0, #3
 8008624:	f024 0403 	bic.w	r4, r4, #3
 8008628:	42a0      	cmp	r0, r4
 800862a:	d0e3      	beq.n	80085f4 <_malloc_r+0x64>
 800862c:	1a21      	subs	r1, r4, r0
 800862e:	4630      	mov	r0, r6
 8008630:	f000 f872 	bl	8008718 <_sbrk_r>
 8008634:	3001      	adds	r0, #1
 8008636:	d1dd      	bne.n	80085f4 <_malloc_r+0x64>
 8008638:	e7cf      	b.n	80085da <_malloc_r+0x4a>
 800863a:	bf00      	nop
 800863c:	240040a0 	.word	0x240040a0
 8008640:	240040a4 	.word	0x240040a4

08008644 <cleanup_glue>:
 8008644:	b538      	push	{r3, r4, r5, lr}
 8008646:	460c      	mov	r4, r1
 8008648:	6809      	ldr	r1, [r1, #0]
 800864a:	4605      	mov	r5, r0
 800864c:	b109      	cbz	r1, 8008652 <cleanup_glue+0xe>
 800864e:	f7ff fff9 	bl	8008644 <cleanup_glue>
 8008652:	4621      	mov	r1, r4
 8008654:	4628      	mov	r0, r5
 8008656:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800865a:	f000 b8ad 	b.w	80087b8 <_free_r>
	...

08008660 <_reclaim_reent>:
 8008660:	4b2c      	ldr	r3, [pc, #176]	; (8008714 <_reclaim_reent+0xb4>)
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	4283      	cmp	r3, r0
 8008666:	b570      	push	{r4, r5, r6, lr}
 8008668:	4604      	mov	r4, r0
 800866a:	d051      	beq.n	8008710 <_reclaim_reent+0xb0>
 800866c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800866e:	b143      	cbz	r3, 8008682 <_reclaim_reent+0x22>
 8008670:	68db      	ldr	r3, [r3, #12]
 8008672:	2b00      	cmp	r3, #0
 8008674:	d14a      	bne.n	800870c <_reclaim_reent+0xac>
 8008676:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008678:	6819      	ldr	r1, [r3, #0]
 800867a:	b111      	cbz	r1, 8008682 <_reclaim_reent+0x22>
 800867c:	4620      	mov	r0, r4
 800867e:	f000 f89b 	bl	80087b8 <_free_r>
 8008682:	6961      	ldr	r1, [r4, #20]
 8008684:	b111      	cbz	r1, 800868c <_reclaim_reent+0x2c>
 8008686:	4620      	mov	r0, r4
 8008688:	f000 f896 	bl	80087b8 <_free_r>
 800868c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800868e:	b111      	cbz	r1, 8008696 <_reclaim_reent+0x36>
 8008690:	4620      	mov	r0, r4
 8008692:	f000 f891 	bl	80087b8 <_free_r>
 8008696:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8008698:	b111      	cbz	r1, 80086a0 <_reclaim_reent+0x40>
 800869a:	4620      	mov	r0, r4
 800869c:	f000 f88c 	bl	80087b8 <_free_r>
 80086a0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80086a2:	b111      	cbz	r1, 80086aa <_reclaim_reent+0x4a>
 80086a4:	4620      	mov	r0, r4
 80086a6:	f000 f887 	bl	80087b8 <_free_r>
 80086aa:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80086ac:	b111      	cbz	r1, 80086b4 <_reclaim_reent+0x54>
 80086ae:	4620      	mov	r0, r4
 80086b0:	f000 f882 	bl	80087b8 <_free_r>
 80086b4:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80086b6:	b111      	cbz	r1, 80086be <_reclaim_reent+0x5e>
 80086b8:	4620      	mov	r0, r4
 80086ba:	f000 f87d 	bl	80087b8 <_free_r>
 80086be:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80086c0:	b111      	cbz	r1, 80086c8 <_reclaim_reent+0x68>
 80086c2:	4620      	mov	r0, r4
 80086c4:	f000 f878 	bl	80087b8 <_free_r>
 80086c8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80086ca:	b111      	cbz	r1, 80086d2 <_reclaim_reent+0x72>
 80086cc:	4620      	mov	r0, r4
 80086ce:	f000 f873 	bl	80087b8 <_free_r>
 80086d2:	69a3      	ldr	r3, [r4, #24]
 80086d4:	b1e3      	cbz	r3, 8008710 <_reclaim_reent+0xb0>
 80086d6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80086d8:	4620      	mov	r0, r4
 80086da:	4798      	blx	r3
 80086dc:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80086de:	b1b9      	cbz	r1, 8008710 <_reclaim_reent+0xb0>
 80086e0:	4620      	mov	r0, r4
 80086e2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80086e6:	f7ff bfad 	b.w	8008644 <cleanup_glue>
 80086ea:	5949      	ldr	r1, [r1, r5]
 80086ec:	b941      	cbnz	r1, 8008700 <_reclaim_reent+0xa0>
 80086ee:	3504      	adds	r5, #4
 80086f0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80086f2:	2d80      	cmp	r5, #128	; 0x80
 80086f4:	68d9      	ldr	r1, [r3, #12]
 80086f6:	d1f8      	bne.n	80086ea <_reclaim_reent+0x8a>
 80086f8:	4620      	mov	r0, r4
 80086fa:	f000 f85d 	bl	80087b8 <_free_r>
 80086fe:	e7ba      	b.n	8008676 <_reclaim_reent+0x16>
 8008700:	680e      	ldr	r6, [r1, #0]
 8008702:	4620      	mov	r0, r4
 8008704:	f000 f858 	bl	80087b8 <_free_r>
 8008708:	4631      	mov	r1, r6
 800870a:	e7ef      	b.n	80086ec <_reclaim_reent+0x8c>
 800870c:	2500      	movs	r5, #0
 800870e:	e7ef      	b.n	80086f0 <_reclaim_reent+0x90>
 8008710:	bd70      	pop	{r4, r5, r6, pc}
 8008712:	bf00      	nop
 8008714:	24000014 	.word	0x24000014

08008718 <_sbrk_r>:
 8008718:	b538      	push	{r3, r4, r5, lr}
 800871a:	4d06      	ldr	r5, [pc, #24]	; (8008734 <_sbrk_r+0x1c>)
 800871c:	2300      	movs	r3, #0
 800871e:	4604      	mov	r4, r0
 8008720:	4608      	mov	r0, r1
 8008722:	602b      	str	r3, [r5, #0]
 8008724:	f7f8 fba0 	bl	8000e68 <_sbrk>
 8008728:	1c43      	adds	r3, r0, #1
 800872a:	d102      	bne.n	8008732 <_sbrk_r+0x1a>
 800872c:	682b      	ldr	r3, [r5, #0]
 800872e:	b103      	cbz	r3, 8008732 <_sbrk_r+0x1a>
 8008730:	6023      	str	r3, [r4, #0]
 8008732:	bd38      	pop	{r3, r4, r5, pc}
 8008734:	24004170 	.word	0x24004170

08008738 <sniprintf>:
 8008738:	b40c      	push	{r2, r3}
 800873a:	b530      	push	{r4, r5, lr}
 800873c:	4b17      	ldr	r3, [pc, #92]	; (800879c <sniprintf+0x64>)
 800873e:	1e0c      	subs	r4, r1, #0
 8008740:	681d      	ldr	r5, [r3, #0]
 8008742:	b09d      	sub	sp, #116	; 0x74
 8008744:	da08      	bge.n	8008758 <sniprintf+0x20>
 8008746:	238b      	movs	r3, #139	; 0x8b
 8008748:	602b      	str	r3, [r5, #0]
 800874a:	f04f 30ff 	mov.w	r0, #4294967295
 800874e:	b01d      	add	sp, #116	; 0x74
 8008750:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008754:	b002      	add	sp, #8
 8008756:	4770      	bx	lr
 8008758:	f44f 7302 	mov.w	r3, #520	; 0x208
 800875c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8008760:	bf14      	ite	ne
 8008762:	f104 33ff 	addne.w	r3, r4, #4294967295
 8008766:	4623      	moveq	r3, r4
 8008768:	9304      	str	r3, [sp, #16]
 800876a:	9307      	str	r3, [sp, #28]
 800876c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008770:	9002      	str	r0, [sp, #8]
 8008772:	9006      	str	r0, [sp, #24]
 8008774:	f8ad 3016 	strh.w	r3, [sp, #22]
 8008778:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800877a:	ab21      	add	r3, sp, #132	; 0x84
 800877c:	a902      	add	r1, sp, #8
 800877e:	4628      	mov	r0, r5
 8008780:	9301      	str	r3, [sp, #4]
 8008782:	f000 f8c5 	bl	8008910 <_svfiprintf_r>
 8008786:	1c43      	adds	r3, r0, #1
 8008788:	bfbc      	itt	lt
 800878a:	238b      	movlt	r3, #139	; 0x8b
 800878c:	602b      	strlt	r3, [r5, #0]
 800878e:	2c00      	cmp	r4, #0
 8008790:	d0dd      	beq.n	800874e <sniprintf+0x16>
 8008792:	9b02      	ldr	r3, [sp, #8]
 8008794:	2200      	movs	r2, #0
 8008796:	701a      	strb	r2, [r3, #0]
 8008798:	e7d9      	b.n	800874e <sniprintf+0x16>
 800879a:	bf00      	nop
 800879c:	24000014 	.word	0x24000014

080087a0 <__malloc_lock>:
 80087a0:	4801      	ldr	r0, [pc, #4]	; (80087a8 <__malloc_lock+0x8>)
 80087a2:	f7ff bedd 	b.w	8008560 <__retarget_lock_acquire_recursive>
 80087a6:	bf00      	nop
 80087a8:	24004168 	.word	0x24004168

080087ac <__malloc_unlock>:
 80087ac:	4801      	ldr	r0, [pc, #4]	; (80087b4 <__malloc_unlock+0x8>)
 80087ae:	f7ff bed8 	b.w	8008562 <__retarget_lock_release_recursive>
 80087b2:	bf00      	nop
 80087b4:	24004168 	.word	0x24004168

080087b8 <_free_r>:
 80087b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80087ba:	2900      	cmp	r1, #0
 80087bc:	d048      	beq.n	8008850 <_free_r+0x98>
 80087be:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80087c2:	9001      	str	r0, [sp, #4]
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	f1a1 0404 	sub.w	r4, r1, #4
 80087ca:	bfb8      	it	lt
 80087cc:	18e4      	addlt	r4, r4, r3
 80087ce:	f7ff ffe7 	bl	80087a0 <__malloc_lock>
 80087d2:	4a20      	ldr	r2, [pc, #128]	; (8008854 <_free_r+0x9c>)
 80087d4:	9801      	ldr	r0, [sp, #4]
 80087d6:	6813      	ldr	r3, [r2, #0]
 80087d8:	4615      	mov	r5, r2
 80087da:	b933      	cbnz	r3, 80087ea <_free_r+0x32>
 80087dc:	6063      	str	r3, [r4, #4]
 80087de:	6014      	str	r4, [r2, #0]
 80087e0:	b003      	add	sp, #12
 80087e2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80087e6:	f7ff bfe1 	b.w	80087ac <__malloc_unlock>
 80087ea:	42a3      	cmp	r3, r4
 80087ec:	d90b      	bls.n	8008806 <_free_r+0x4e>
 80087ee:	6821      	ldr	r1, [r4, #0]
 80087f0:	1862      	adds	r2, r4, r1
 80087f2:	4293      	cmp	r3, r2
 80087f4:	bf04      	itt	eq
 80087f6:	681a      	ldreq	r2, [r3, #0]
 80087f8:	685b      	ldreq	r3, [r3, #4]
 80087fa:	6063      	str	r3, [r4, #4]
 80087fc:	bf04      	itt	eq
 80087fe:	1852      	addeq	r2, r2, r1
 8008800:	6022      	streq	r2, [r4, #0]
 8008802:	602c      	str	r4, [r5, #0]
 8008804:	e7ec      	b.n	80087e0 <_free_r+0x28>
 8008806:	461a      	mov	r2, r3
 8008808:	685b      	ldr	r3, [r3, #4]
 800880a:	b10b      	cbz	r3, 8008810 <_free_r+0x58>
 800880c:	42a3      	cmp	r3, r4
 800880e:	d9fa      	bls.n	8008806 <_free_r+0x4e>
 8008810:	6811      	ldr	r1, [r2, #0]
 8008812:	1855      	adds	r5, r2, r1
 8008814:	42a5      	cmp	r5, r4
 8008816:	d10b      	bne.n	8008830 <_free_r+0x78>
 8008818:	6824      	ldr	r4, [r4, #0]
 800881a:	4421      	add	r1, r4
 800881c:	1854      	adds	r4, r2, r1
 800881e:	42a3      	cmp	r3, r4
 8008820:	6011      	str	r1, [r2, #0]
 8008822:	d1dd      	bne.n	80087e0 <_free_r+0x28>
 8008824:	681c      	ldr	r4, [r3, #0]
 8008826:	685b      	ldr	r3, [r3, #4]
 8008828:	6053      	str	r3, [r2, #4]
 800882a:	4421      	add	r1, r4
 800882c:	6011      	str	r1, [r2, #0]
 800882e:	e7d7      	b.n	80087e0 <_free_r+0x28>
 8008830:	d902      	bls.n	8008838 <_free_r+0x80>
 8008832:	230c      	movs	r3, #12
 8008834:	6003      	str	r3, [r0, #0]
 8008836:	e7d3      	b.n	80087e0 <_free_r+0x28>
 8008838:	6825      	ldr	r5, [r4, #0]
 800883a:	1961      	adds	r1, r4, r5
 800883c:	428b      	cmp	r3, r1
 800883e:	bf04      	itt	eq
 8008840:	6819      	ldreq	r1, [r3, #0]
 8008842:	685b      	ldreq	r3, [r3, #4]
 8008844:	6063      	str	r3, [r4, #4]
 8008846:	bf04      	itt	eq
 8008848:	1949      	addeq	r1, r1, r5
 800884a:	6021      	streq	r1, [r4, #0]
 800884c:	6054      	str	r4, [r2, #4]
 800884e:	e7c7      	b.n	80087e0 <_free_r+0x28>
 8008850:	b003      	add	sp, #12
 8008852:	bd30      	pop	{r4, r5, pc}
 8008854:	240040a0 	.word	0x240040a0

08008858 <__ssputs_r>:
 8008858:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800885c:	688e      	ldr	r6, [r1, #8]
 800885e:	429e      	cmp	r6, r3
 8008860:	4682      	mov	sl, r0
 8008862:	460c      	mov	r4, r1
 8008864:	4690      	mov	r8, r2
 8008866:	461f      	mov	r7, r3
 8008868:	d838      	bhi.n	80088dc <__ssputs_r+0x84>
 800886a:	898a      	ldrh	r2, [r1, #12]
 800886c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008870:	d032      	beq.n	80088d8 <__ssputs_r+0x80>
 8008872:	6825      	ldr	r5, [r4, #0]
 8008874:	6909      	ldr	r1, [r1, #16]
 8008876:	eba5 0901 	sub.w	r9, r5, r1
 800887a:	6965      	ldr	r5, [r4, #20]
 800887c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008880:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008884:	3301      	adds	r3, #1
 8008886:	444b      	add	r3, r9
 8008888:	106d      	asrs	r5, r5, #1
 800888a:	429d      	cmp	r5, r3
 800888c:	bf38      	it	cc
 800888e:	461d      	movcc	r5, r3
 8008890:	0553      	lsls	r3, r2, #21
 8008892:	d531      	bpl.n	80088f8 <__ssputs_r+0xa0>
 8008894:	4629      	mov	r1, r5
 8008896:	f7ff fe7b 	bl	8008590 <_malloc_r>
 800889a:	4606      	mov	r6, r0
 800889c:	b950      	cbnz	r0, 80088b4 <__ssputs_r+0x5c>
 800889e:	230c      	movs	r3, #12
 80088a0:	f8ca 3000 	str.w	r3, [sl]
 80088a4:	89a3      	ldrh	r3, [r4, #12]
 80088a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80088aa:	81a3      	strh	r3, [r4, #12]
 80088ac:	f04f 30ff 	mov.w	r0, #4294967295
 80088b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80088b4:	6921      	ldr	r1, [r4, #16]
 80088b6:	464a      	mov	r2, r9
 80088b8:	f7ff fe54 	bl	8008564 <memcpy>
 80088bc:	89a3      	ldrh	r3, [r4, #12]
 80088be:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80088c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80088c6:	81a3      	strh	r3, [r4, #12]
 80088c8:	6126      	str	r6, [r4, #16]
 80088ca:	6165      	str	r5, [r4, #20]
 80088cc:	444e      	add	r6, r9
 80088ce:	eba5 0509 	sub.w	r5, r5, r9
 80088d2:	6026      	str	r6, [r4, #0]
 80088d4:	60a5      	str	r5, [r4, #8]
 80088d6:	463e      	mov	r6, r7
 80088d8:	42be      	cmp	r6, r7
 80088da:	d900      	bls.n	80088de <__ssputs_r+0x86>
 80088dc:	463e      	mov	r6, r7
 80088de:	4632      	mov	r2, r6
 80088e0:	6820      	ldr	r0, [r4, #0]
 80088e2:	4641      	mov	r1, r8
 80088e4:	f000 faa8 	bl	8008e38 <memmove>
 80088e8:	68a3      	ldr	r3, [r4, #8]
 80088ea:	6822      	ldr	r2, [r4, #0]
 80088ec:	1b9b      	subs	r3, r3, r6
 80088ee:	4432      	add	r2, r6
 80088f0:	60a3      	str	r3, [r4, #8]
 80088f2:	6022      	str	r2, [r4, #0]
 80088f4:	2000      	movs	r0, #0
 80088f6:	e7db      	b.n	80088b0 <__ssputs_r+0x58>
 80088f8:	462a      	mov	r2, r5
 80088fa:	f000 fab7 	bl	8008e6c <_realloc_r>
 80088fe:	4606      	mov	r6, r0
 8008900:	2800      	cmp	r0, #0
 8008902:	d1e1      	bne.n	80088c8 <__ssputs_r+0x70>
 8008904:	6921      	ldr	r1, [r4, #16]
 8008906:	4650      	mov	r0, sl
 8008908:	f7ff ff56 	bl	80087b8 <_free_r>
 800890c:	e7c7      	b.n	800889e <__ssputs_r+0x46>
	...

08008910 <_svfiprintf_r>:
 8008910:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008914:	4698      	mov	r8, r3
 8008916:	898b      	ldrh	r3, [r1, #12]
 8008918:	061b      	lsls	r3, r3, #24
 800891a:	b09d      	sub	sp, #116	; 0x74
 800891c:	4607      	mov	r7, r0
 800891e:	460d      	mov	r5, r1
 8008920:	4614      	mov	r4, r2
 8008922:	d50e      	bpl.n	8008942 <_svfiprintf_r+0x32>
 8008924:	690b      	ldr	r3, [r1, #16]
 8008926:	b963      	cbnz	r3, 8008942 <_svfiprintf_r+0x32>
 8008928:	2140      	movs	r1, #64	; 0x40
 800892a:	f7ff fe31 	bl	8008590 <_malloc_r>
 800892e:	6028      	str	r0, [r5, #0]
 8008930:	6128      	str	r0, [r5, #16]
 8008932:	b920      	cbnz	r0, 800893e <_svfiprintf_r+0x2e>
 8008934:	230c      	movs	r3, #12
 8008936:	603b      	str	r3, [r7, #0]
 8008938:	f04f 30ff 	mov.w	r0, #4294967295
 800893c:	e0d1      	b.n	8008ae2 <_svfiprintf_r+0x1d2>
 800893e:	2340      	movs	r3, #64	; 0x40
 8008940:	616b      	str	r3, [r5, #20]
 8008942:	2300      	movs	r3, #0
 8008944:	9309      	str	r3, [sp, #36]	; 0x24
 8008946:	2320      	movs	r3, #32
 8008948:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800894c:	f8cd 800c 	str.w	r8, [sp, #12]
 8008950:	2330      	movs	r3, #48	; 0x30
 8008952:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008afc <_svfiprintf_r+0x1ec>
 8008956:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800895a:	f04f 0901 	mov.w	r9, #1
 800895e:	4623      	mov	r3, r4
 8008960:	469a      	mov	sl, r3
 8008962:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008966:	b10a      	cbz	r2, 800896c <_svfiprintf_r+0x5c>
 8008968:	2a25      	cmp	r2, #37	; 0x25
 800896a:	d1f9      	bne.n	8008960 <_svfiprintf_r+0x50>
 800896c:	ebba 0b04 	subs.w	fp, sl, r4
 8008970:	d00b      	beq.n	800898a <_svfiprintf_r+0x7a>
 8008972:	465b      	mov	r3, fp
 8008974:	4622      	mov	r2, r4
 8008976:	4629      	mov	r1, r5
 8008978:	4638      	mov	r0, r7
 800897a:	f7ff ff6d 	bl	8008858 <__ssputs_r>
 800897e:	3001      	adds	r0, #1
 8008980:	f000 80aa 	beq.w	8008ad8 <_svfiprintf_r+0x1c8>
 8008984:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008986:	445a      	add	r2, fp
 8008988:	9209      	str	r2, [sp, #36]	; 0x24
 800898a:	f89a 3000 	ldrb.w	r3, [sl]
 800898e:	2b00      	cmp	r3, #0
 8008990:	f000 80a2 	beq.w	8008ad8 <_svfiprintf_r+0x1c8>
 8008994:	2300      	movs	r3, #0
 8008996:	f04f 32ff 	mov.w	r2, #4294967295
 800899a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800899e:	f10a 0a01 	add.w	sl, sl, #1
 80089a2:	9304      	str	r3, [sp, #16]
 80089a4:	9307      	str	r3, [sp, #28]
 80089a6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80089aa:	931a      	str	r3, [sp, #104]	; 0x68
 80089ac:	4654      	mov	r4, sl
 80089ae:	2205      	movs	r2, #5
 80089b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80089b4:	4851      	ldr	r0, [pc, #324]	; (8008afc <_svfiprintf_r+0x1ec>)
 80089b6:	f7f7 fc93 	bl	80002e0 <memchr>
 80089ba:	9a04      	ldr	r2, [sp, #16]
 80089bc:	b9d8      	cbnz	r0, 80089f6 <_svfiprintf_r+0xe6>
 80089be:	06d0      	lsls	r0, r2, #27
 80089c0:	bf44      	itt	mi
 80089c2:	2320      	movmi	r3, #32
 80089c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80089c8:	0711      	lsls	r1, r2, #28
 80089ca:	bf44      	itt	mi
 80089cc:	232b      	movmi	r3, #43	; 0x2b
 80089ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80089d2:	f89a 3000 	ldrb.w	r3, [sl]
 80089d6:	2b2a      	cmp	r3, #42	; 0x2a
 80089d8:	d015      	beq.n	8008a06 <_svfiprintf_r+0xf6>
 80089da:	9a07      	ldr	r2, [sp, #28]
 80089dc:	4654      	mov	r4, sl
 80089de:	2000      	movs	r0, #0
 80089e0:	f04f 0c0a 	mov.w	ip, #10
 80089e4:	4621      	mov	r1, r4
 80089e6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80089ea:	3b30      	subs	r3, #48	; 0x30
 80089ec:	2b09      	cmp	r3, #9
 80089ee:	d94e      	bls.n	8008a8e <_svfiprintf_r+0x17e>
 80089f0:	b1b0      	cbz	r0, 8008a20 <_svfiprintf_r+0x110>
 80089f2:	9207      	str	r2, [sp, #28]
 80089f4:	e014      	b.n	8008a20 <_svfiprintf_r+0x110>
 80089f6:	eba0 0308 	sub.w	r3, r0, r8
 80089fa:	fa09 f303 	lsl.w	r3, r9, r3
 80089fe:	4313      	orrs	r3, r2
 8008a00:	9304      	str	r3, [sp, #16]
 8008a02:	46a2      	mov	sl, r4
 8008a04:	e7d2      	b.n	80089ac <_svfiprintf_r+0x9c>
 8008a06:	9b03      	ldr	r3, [sp, #12]
 8008a08:	1d19      	adds	r1, r3, #4
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	9103      	str	r1, [sp, #12]
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	bfbb      	ittet	lt
 8008a12:	425b      	neglt	r3, r3
 8008a14:	f042 0202 	orrlt.w	r2, r2, #2
 8008a18:	9307      	strge	r3, [sp, #28]
 8008a1a:	9307      	strlt	r3, [sp, #28]
 8008a1c:	bfb8      	it	lt
 8008a1e:	9204      	strlt	r2, [sp, #16]
 8008a20:	7823      	ldrb	r3, [r4, #0]
 8008a22:	2b2e      	cmp	r3, #46	; 0x2e
 8008a24:	d10c      	bne.n	8008a40 <_svfiprintf_r+0x130>
 8008a26:	7863      	ldrb	r3, [r4, #1]
 8008a28:	2b2a      	cmp	r3, #42	; 0x2a
 8008a2a:	d135      	bne.n	8008a98 <_svfiprintf_r+0x188>
 8008a2c:	9b03      	ldr	r3, [sp, #12]
 8008a2e:	1d1a      	adds	r2, r3, #4
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	9203      	str	r2, [sp, #12]
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	bfb8      	it	lt
 8008a38:	f04f 33ff 	movlt.w	r3, #4294967295
 8008a3c:	3402      	adds	r4, #2
 8008a3e:	9305      	str	r3, [sp, #20]
 8008a40:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008b0c <_svfiprintf_r+0x1fc>
 8008a44:	7821      	ldrb	r1, [r4, #0]
 8008a46:	2203      	movs	r2, #3
 8008a48:	4650      	mov	r0, sl
 8008a4a:	f7f7 fc49 	bl	80002e0 <memchr>
 8008a4e:	b140      	cbz	r0, 8008a62 <_svfiprintf_r+0x152>
 8008a50:	2340      	movs	r3, #64	; 0x40
 8008a52:	eba0 000a 	sub.w	r0, r0, sl
 8008a56:	fa03 f000 	lsl.w	r0, r3, r0
 8008a5a:	9b04      	ldr	r3, [sp, #16]
 8008a5c:	4303      	orrs	r3, r0
 8008a5e:	3401      	adds	r4, #1
 8008a60:	9304      	str	r3, [sp, #16]
 8008a62:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008a66:	4826      	ldr	r0, [pc, #152]	; (8008b00 <_svfiprintf_r+0x1f0>)
 8008a68:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008a6c:	2206      	movs	r2, #6
 8008a6e:	f7f7 fc37 	bl	80002e0 <memchr>
 8008a72:	2800      	cmp	r0, #0
 8008a74:	d038      	beq.n	8008ae8 <_svfiprintf_r+0x1d8>
 8008a76:	4b23      	ldr	r3, [pc, #140]	; (8008b04 <_svfiprintf_r+0x1f4>)
 8008a78:	bb1b      	cbnz	r3, 8008ac2 <_svfiprintf_r+0x1b2>
 8008a7a:	9b03      	ldr	r3, [sp, #12]
 8008a7c:	3307      	adds	r3, #7
 8008a7e:	f023 0307 	bic.w	r3, r3, #7
 8008a82:	3308      	adds	r3, #8
 8008a84:	9303      	str	r3, [sp, #12]
 8008a86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a88:	4433      	add	r3, r6
 8008a8a:	9309      	str	r3, [sp, #36]	; 0x24
 8008a8c:	e767      	b.n	800895e <_svfiprintf_r+0x4e>
 8008a8e:	fb0c 3202 	mla	r2, ip, r2, r3
 8008a92:	460c      	mov	r4, r1
 8008a94:	2001      	movs	r0, #1
 8008a96:	e7a5      	b.n	80089e4 <_svfiprintf_r+0xd4>
 8008a98:	2300      	movs	r3, #0
 8008a9a:	3401      	adds	r4, #1
 8008a9c:	9305      	str	r3, [sp, #20]
 8008a9e:	4619      	mov	r1, r3
 8008aa0:	f04f 0c0a 	mov.w	ip, #10
 8008aa4:	4620      	mov	r0, r4
 8008aa6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008aaa:	3a30      	subs	r2, #48	; 0x30
 8008aac:	2a09      	cmp	r2, #9
 8008aae:	d903      	bls.n	8008ab8 <_svfiprintf_r+0x1a8>
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d0c5      	beq.n	8008a40 <_svfiprintf_r+0x130>
 8008ab4:	9105      	str	r1, [sp, #20]
 8008ab6:	e7c3      	b.n	8008a40 <_svfiprintf_r+0x130>
 8008ab8:	fb0c 2101 	mla	r1, ip, r1, r2
 8008abc:	4604      	mov	r4, r0
 8008abe:	2301      	movs	r3, #1
 8008ac0:	e7f0      	b.n	8008aa4 <_svfiprintf_r+0x194>
 8008ac2:	ab03      	add	r3, sp, #12
 8008ac4:	9300      	str	r3, [sp, #0]
 8008ac6:	462a      	mov	r2, r5
 8008ac8:	4b0f      	ldr	r3, [pc, #60]	; (8008b08 <_svfiprintf_r+0x1f8>)
 8008aca:	a904      	add	r1, sp, #16
 8008acc:	4638      	mov	r0, r7
 8008ace:	f3af 8000 	nop.w
 8008ad2:	1c42      	adds	r2, r0, #1
 8008ad4:	4606      	mov	r6, r0
 8008ad6:	d1d6      	bne.n	8008a86 <_svfiprintf_r+0x176>
 8008ad8:	89ab      	ldrh	r3, [r5, #12]
 8008ada:	065b      	lsls	r3, r3, #25
 8008adc:	f53f af2c 	bmi.w	8008938 <_svfiprintf_r+0x28>
 8008ae0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008ae2:	b01d      	add	sp, #116	; 0x74
 8008ae4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ae8:	ab03      	add	r3, sp, #12
 8008aea:	9300      	str	r3, [sp, #0]
 8008aec:	462a      	mov	r2, r5
 8008aee:	4b06      	ldr	r3, [pc, #24]	; (8008b08 <_svfiprintf_r+0x1f8>)
 8008af0:	a904      	add	r1, sp, #16
 8008af2:	4638      	mov	r0, r7
 8008af4:	f000 f87a 	bl	8008bec <_printf_i>
 8008af8:	e7eb      	b.n	8008ad2 <_svfiprintf_r+0x1c2>
 8008afa:	bf00      	nop
 8008afc:	08008fc4 	.word	0x08008fc4
 8008b00:	08008fce 	.word	0x08008fce
 8008b04:	00000000 	.word	0x00000000
 8008b08:	08008859 	.word	0x08008859
 8008b0c:	08008fca 	.word	0x08008fca

08008b10 <_printf_common>:
 8008b10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008b14:	4616      	mov	r6, r2
 8008b16:	4699      	mov	r9, r3
 8008b18:	688a      	ldr	r2, [r1, #8]
 8008b1a:	690b      	ldr	r3, [r1, #16]
 8008b1c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008b20:	4293      	cmp	r3, r2
 8008b22:	bfb8      	it	lt
 8008b24:	4613      	movlt	r3, r2
 8008b26:	6033      	str	r3, [r6, #0]
 8008b28:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008b2c:	4607      	mov	r7, r0
 8008b2e:	460c      	mov	r4, r1
 8008b30:	b10a      	cbz	r2, 8008b36 <_printf_common+0x26>
 8008b32:	3301      	adds	r3, #1
 8008b34:	6033      	str	r3, [r6, #0]
 8008b36:	6823      	ldr	r3, [r4, #0]
 8008b38:	0699      	lsls	r1, r3, #26
 8008b3a:	bf42      	ittt	mi
 8008b3c:	6833      	ldrmi	r3, [r6, #0]
 8008b3e:	3302      	addmi	r3, #2
 8008b40:	6033      	strmi	r3, [r6, #0]
 8008b42:	6825      	ldr	r5, [r4, #0]
 8008b44:	f015 0506 	ands.w	r5, r5, #6
 8008b48:	d106      	bne.n	8008b58 <_printf_common+0x48>
 8008b4a:	f104 0a19 	add.w	sl, r4, #25
 8008b4e:	68e3      	ldr	r3, [r4, #12]
 8008b50:	6832      	ldr	r2, [r6, #0]
 8008b52:	1a9b      	subs	r3, r3, r2
 8008b54:	42ab      	cmp	r3, r5
 8008b56:	dc26      	bgt.n	8008ba6 <_printf_common+0x96>
 8008b58:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008b5c:	1e13      	subs	r3, r2, #0
 8008b5e:	6822      	ldr	r2, [r4, #0]
 8008b60:	bf18      	it	ne
 8008b62:	2301      	movne	r3, #1
 8008b64:	0692      	lsls	r2, r2, #26
 8008b66:	d42b      	bmi.n	8008bc0 <_printf_common+0xb0>
 8008b68:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008b6c:	4649      	mov	r1, r9
 8008b6e:	4638      	mov	r0, r7
 8008b70:	47c0      	blx	r8
 8008b72:	3001      	adds	r0, #1
 8008b74:	d01e      	beq.n	8008bb4 <_printf_common+0xa4>
 8008b76:	6823      	ldr	r3, [r4, #0]
 8008b78:	68e5      	ldr	r5, [r4, #12]
 8008b7a:	6832      	ldr	r2, [r6, #0]
 8008b7c:	f003 0306 	and.w	r3, r3, #6
 8008b80:	2b04      	cmp	r3, #4
 8008b82:	bf08      	it	eq
 8008b84:	1aad      	subeq	r5, r5, r2
 8008b86:	68a3      	ldr	r3, [r4, #8]
 8008b88:	6922      	ldr	r2, [r4, #16]
 8008b8a:	bf0c      	ite	eq
 8008b8c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008b90:	2500      	movne	r5, #0
 8008b92:	4293      	cmp	r3, r2
 8008b94:	bfc4      	itt	gt
 8008b96:	1a9b      	subgt	r3, r3, r2
 8008b98:	18ed      	addgt	r5, r5, r3
 8008b9a:	2600      	movs	r6, #0
 8008b9c:	341a      	adds	r4, #26
 8008b9e:	42b5      	cmp	r5, r6
 8008ba0:	d11a      	bne.n	8008bd8 <_printf_common+0xc8>
 8008ba2:	2000      	movs	r0, #0
 8008ba4:	e008      	b.n	8008bb8 <_printf_common+0xa8>
 8008ba6:	2301      	movs	r3, #1
 8008ba8:	4652      	mov	r2, sl
 8008baa:	4649      	mov	r1, r9
 8008bac:	4638      	mov	r0, r7
 8008bae:	47c0      	blx	r8
 8008bb0:	3001      	adds	r0, #1
 8008bb2:	d103      	bne.n	8008bbc <_printf_common+0xac>
 8008bb4:	f04f 30ff 	mov.w	r0, #4294967295
 8008bb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008bbc:	3501      	adds	r5, #1
 8008bbe:	e7c6      	b.n	8008b4e <_printf_common+0x3e>
 8008bc0:	18e1      	adds	r1, r4, r3
 8008bc2:	1c5a      	adds	r2, r3, #1
 8008bc4:	2030      	movs	r0, #48	; 0x30
 8008bc6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008bca:	4422      	add	r2, r4
 8008bcc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008bd0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008bd4:	3302      	adds	r3, #2
 8008bd6:	e7c7      	b.n	8008b68 <_printf_common+0x58>
 8008bd8:	2301      	movs	r3, #1
 8008bda:	4622      	mov	r2, r4
 8008bdc:	4649      	mov	r1, r9
 8008bde:	4638      	mov	r0, r7
 8008be0:	47c0      	blx	r8
 8008be2:	3001      	adds	r0, #1
 8008be4:	d0e6      	beq.n	8008bb4 <_printf_common+0xa4>
 8008be6:	3601      	adds	r6, #1
 8008be8:	e7d9      	b.n	8008b9e <_printf_common+0x8e>
	...

08008bec <_printf_i>:
 8008bec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008bf0:	460c      	mov	r4, r1
 8008bf2:	4691      	mov	r9, r2
 8008bf4:	7e27      	ldrb	r7, [r4, #24]
 8008bf6:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008bf8:	2f78      	cmp	r7, #120	; 0x78
 8008bfa:	4680      	mov	r8, r0
 8008bfc:	469a      	mov	sl, r3
 8008bfe:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008c02:	d807      	bhi.n	8008c14 <_printf_i+0x28>
 8008c04:	2f62      	cmp	r7, #98	; 0x62
 8008c06:	d80a      	bhi.n	8008c1e <_printf_i+0x32>
 8008c08:	2f00      	cmp	r7, #0
 8008c0a:	f000 80d8 	beq.w	8008dbe <_printf_i+0x1d2>
 8008c0e:	2f58      	cmp	r7, #88	; 0x58
 8008c10:	f000 80a3 	beq.w	8008d5a <_printf_i+0x16e>
 8008c14:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008c18:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008c1c:	e03a      	b.n	8008c94 <_printf_i+0xa8>
 8008c1e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008c22:	2b15      	cmp	r3, #21
 8008c24:	d8f6      	bhi.n	8008c14 <_printf_i+0x28>
 8008c26:	a001      	add	r0, pc, #4	; (adr r0, 8008c2c <_printf_i+0x40>)
 8008c28:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8008c2c:	08008c85 	.word	0x08008c85
 8008c30:	08008c99 	.word	0x08008c99
 8008c34:	08008c15 	.word	0x08008c15
 8008c38:	08008c15 	.word	0x08008c15
 8008c3c:	08008c15 	.word	0x08008c15
 8008c40:	08008c15 	.word	0x08008c15
 8008c44:	08008c99 	.word	0x08008c99
 8008c48:	08008c15 	.word	0x08008c15
 8008c4c:	08008c15 	.word	0x08008c15
 8008c50:	08008c15 	.word	0x08008c15
 8008c54:	08008c15 	.word	0x08008c15
 8008c58:	08008da5 	.word	0x08008da5
 8008c5c:	08008cc9 	.word	0x08008cc9
 8008c60:	08008d87 	.word	0x08008d87
 8008c64:	08008c15 	.word	0x08008c15
 8008c68:	08008c15 	.word	0x08008c15
 8008c6c:	08008dc7 	.word	0x08008dc7
 8008c70:	08008c15 	.word	0x08008c15
 8008c74:	08008cc9 	.word	0x08008cc9
 8008c78:	08008c15 	.word	0x08008c15
 8008c7c:	08008c15 	.word	0x08008c15
 8008c80:	08008d8f 	.word	0x08008d8f
 8008c84:	680b      	ldr	r3, [r1, #0]
 8008c86:	1d1a      	adds	r2, r3, #4
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	600a      	str	r2, [r1, #0]
 8008c8c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008c90:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008c94:	2301      	movs	r3, #1
 8008c96:	e0a3      	b.n	8008de0 <_printf_i+0x1f4>
 8008c98:	6825      	ldr	r5, [r4, #0]
 8008c9a:	6808      	ldr	r0, [r1, #0]
 8008c9c:	062e      	lsls	r6, r5, #24
 8008c9e:	f100 0304 	add.w	r3, r0, #4
 8008ca2:	d50a      	bpl.n	8008cba <_printf_i+0xce>
 8008ca4:	6805      	ldr	r5, [r0, #0]
 8008ca6:	600b      	str	r3, [r1, #0]
 8008ca8:	2d00      	cmp	r5, #0
 8008caa:	da03      	bge.n	8008cb4 <_printf_i+0xc8>
 8008cac:	232d      	movs	r3, #45	; 0x2d
 8008cae:	426d      	negs	r5, r5
 8008cb0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008cb4:	485e      	ldr	r0, [pc, #376]	; (8008e30 <_printf_i+0x244>)
 8008cb6:	230a      	movs	r3, #10
 8008cb8:	e019      	b.n	8008cee <_printf_i+0x102>
 8008cba:	f015 0f40 	tst.w	r5, #64	; 0x40
 8008cbe:	6805      	ldr	r5, [r0, #0]
 8008cc0:	600b      	str	r3, [r1, #0]
 8008cc2:	bf18      	it	ne
 8008cc4:	b22d      	sxthne	r5, r5
 8008cc6:	e7ef      	b.n	8008ca8 <_printf_i+0xbc>
 8008cc8:	680b      	ldr	r3, [r1, #0]
 8008cca:	6825      	ldr	r5, [r4, #0]
 8008ccc:	1d18      	adds	r0, r3, #4
 8008cce:	6008      	str	r0, [r1, #0]
 8008cd0:	0628      	lsls	r0, r5, #24
 8008cd2:	d501      	bpl.n	8008cd8 <_printf_i+0xec>
 8008cd4:	681d      	ldr	r5, [r3, #0]
 8008cd6:	e002      	b.n	8008cde <_printf_i+0xf2>
 8008cd8:	0669      	lsls	r1, r5, #25
 8008cda:	d5fb      	bpl.n	8008cd4 <_printf_i+0xe8>
 8008cdc:	881d      	ldrh	r5, [r3, #0]
 8008cde:	4854      	ldr	r0, [pc, #336]	; (8008e30 <_printf_i+0x244>)
 8008ce0:	2f6f      	cmp	r7, #111	; 0x6f
 8008ce2:	bf0c      	ite	eq
 8008ce4:	2308      	moveq	r3, #8
 8008ce6:	230a      	movne	r3, #10
 8008ce8:	2100      	movs	r1, #0
 8008cea:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008cee:	6866      	ldr	r6, [r4, #4]
 8008cf0:	60a6      	str	r6, [r4, #8]
 8008cf2:	2e00      	cmp	r6, #0
 8008cf4:	bfa2      	ittt	ge
 8008cf6:	6821      	ldrge	r1, [r4, #0]
 8008cf8:	f021 0104 	bicge.w	r1, r1, #4
 8008cfc:	6021      	strge	r1, [r4, #0]
 8008cfe:	b90d      	cbnz	r5, 8008d04 <_printf_i+0x118>
 8008d00:	2e00      	cmp	r6, #0
 8008d02:	d04d      	beq.n	8008da0 <_printf_i+0x1b4>
 8008d04:	4616      	mov	r6, r2
 8008d06:	fbb5 f1f3 	udiv	r1, r5, r3
 8008d0a:	fb03 5711 	mls	r7, r3, r1, r5
 8008d0e:	5dc7      	ldrb	r7, [r0, r7]
 8008d10:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008d14:	462f      	mov	r7, r5
 8008d16:	42bb      	cmp	r3, r7
 8008d18:	460d      	mov	r5, r1
 8008d1a:	d9f4      	bls.n	8008d06 <_printf_i+0x11a>
 8008d1c:	2b08      	cmp	r3, #8
 8008d1e:	d10b      	bne.n	8008d38 <_printf_i+0x14c>
 8008d20:	6823      	ldr	r3, [r4, #0]
 8008d22:	07df      	lsls	r7, r3, #31
 8008d24:	d508      	bpl.n	8008d38 <_printf_i+0x14c>
 8008d26:	6923      	ldr	r3, [r4, #16]
 8008d28:	6861      	ldr	r1, [r4, #4]
 8008d2a:	4299      	cmp	r1, r3
 8008d2c:	bfde      	ittt	le
 8008d2e:	2330      	movle	r3, #48	; 0x30
 8008d30:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008d34:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008d38:	1b92      	subs	r2, r2, r6
 8008d3a:	6122      	str	r2, [r4, #16]
 8008d3c:	f8cd a000 	str.w	sl, [sp]
 8008d40:	464b      	mov	r3, r9
 8008d42:	aa03      	add	r2, sp, #12
 8008d44:	4621      	mov	r1, r4
 8008d46:	4640      	mov	r0, r8
 8008d48:	f7ff fee2 	bl	8008b10 <_printf_common>
 8008d4c:	3001      	adds	r0, #1
 8008d4e:	d14c      	bne.n	8008dea <_printf_i+0x1fe>
 8008d50:	f04f 30ff 	mov.w	r0, #4294967295
 8008d54:	b004      	add	sp, #16
 8008d56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d5a:	4835      	ldr	r0, [pc, #212]	; (8008e30 <_printf_i+0x244>)
 8008d5c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008d60:	6823      	ldr	r3, [r4, #0]
 8008d62:	680e      	ldr	r6, [r1, #0]
 8008d64:	061f      	lsls	r7, r3, #24
 8008d66:	f856 5b04 	ldr.w	r5, [r6], #4
 8008d6a:	600e      	str	r6, [r1, #0]
 8008d6c:	d514      	bpl.n	8008d98 <_printf_i+0x1ac>
 8008d6e:	07d9      	lsls	r1, r3, #31
 8008d70:	bf44      	itt	mi
 8008d72:	f043 0320 	orrmi.w	r3, r3, #32
 8008d76:	6023      	strmi	r3, [r4, #0]
 8008d78:	b91d      	cbnz	r5, 8008d82 <_printf_i+0x196>
 8008d7a:	6823      	ldr	r3, [r4, #0]
 8008d7c:	f023 0320 	bic.w	r3, r3, #32
 8008d80:	6023      	str	r3, [r4, #0]
 8008d82:	2310      	movs	r3, #16
 8008d84:	e7b0      	b.n	8008ce8 <_printf_i+0xfc>
 8008d86:	6823      	ldr	r3, [r4, #0]
 8008d88:	f043 0320 	orr.w	r3, r3, #32
 8008d8c:	6023      	str	r3, [r4, #0]
 8008d8e:	2378      	movs	r3, #120	; 0x78
 8008d90:	4828      	ldr	r0, [pc, #160]	; (8008e34 <_printf_i+0x248>)
 8008d92:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008d96:	e7e3      	b.n	8008d60 <_printf_i+0x174>
 8008d98:	065e      	lsls	r6, r3, #25
 8008d9a:	bf48      	it	mi
 8008d9c:	b2ad      	uxthmi	r5, r5
 8008d9e:	e7e6      	b.n	8008d6e <_printf_i+0x182>
 8008da0:	4616      	mov	r6, r2
 8008da2:	e7bb      	b.n	8008d1c <_printf_i+0x130>
 8008da4:	680b      	ldr	r3, [r1, #0]
 8008da6:	6826      	ldr	r6, [r4, #0]
 8008da8:	6960      	ldr	r0, [r4, #20]
 8008daa:	1d1d      	adds	r5, r3, #4
 8008dac:	600d      	str	r5, [r1, #0]
 8008dae:	0635      	lsls	r5, r6, #24
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	d501      	bpl.n	8008db8 <_printf_i+0x1cc>
 8008db4:	6018      	str	r0, [r3, #0]
 8008db6:	e002      	b.n	8008dbe <_printf_i+0x1d2>
 8008db8:	0671      	lsls	r1, r6, #25
 8008dba:	d5fb      	bpl.n	8008db4 <_printf_i+0x1c8>
 8008dbc:	8018      	strh	r0, [r3, #0]
 8008dbe:	2300      	movs	r3, #0
 8008dc0:	6123      	str	r3, [r4, #16]
 8008dc2:	4616      	mov	r6, r2
 8008dc4:	e7ba      	b.n	8008d3c <_printf_i+0x150>
 8008dc6:	680b      	ldr	r3, [r1, #0]
 8008dc8:	1d1a      	adds	r2, r3, #4
 8008dca:	600a      	str	r2, [r1, #0]
 8008dcc:	681e      	ldr	r6, [r3, #0]
 8008dce:	6862      	ldr	r2, [r4, #4]
 8008dd0:	2100      	movs	r1, #0
 8008dd2:	4630      	mov	r0, r6
 8008dd4:	f7f7 fa84 	bl	80002e0 <memchr>
 8008dd8:	b108      	cbz	r0, 8008dde <_printf_i+0x1f2>
 8008dda:	1b80      	subs	r0, r0, r6
 8008ddc:	6060      	str	r0, [r4, #4]
 8008dde:	6863      	ldr	r3, [r4, #4]
 8008de0:	6123      	str	r3, [r4, #16]
 8008de2:	2300      	movs	r3, #0
 8008de4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008de8:	e7a8      	b.n	8008d3c <_printf_i+0x150>
 8008dea:	6923      	ldr	r3, [r4, #16]
 8008dec:	4632      	mov	r2, r6
 8008dee:	4649      	mov	r1, r9
 8008df0:	4640      	mov	r0, r8
 8008df2:	47d0      	blx	sl
 8008df4:	3001      	adds	r0, #1
 8008df6:	d0ab      	beq.n	8008d50 <_printf_i+0x164>
 8008df8:	6823      	ldr	r3, [r4, #0]
 8008dfa:	079b      	lsls	r3, r3, #30
 8008dfc:	d413      	bmi.n	8008e26 <_printf_i+0x23a>
 8008dfe:	68e0      	ldr	r0, [r4, #12]
 8008e00:	9b03      	ldr	r3, [sp, #12]
 8008e02:	4298      	cmp	r0, r3
 8008e04:	bfb8      	it	lt
 8008e06:	4618      	movlt	r0, r3
 8008e08:	e7a4      	b.n	8008d54 <_printf_i+0x168>
 8008e0a:	2301      	movs	r3, #1
 8008e0c:	4632      	mov	r2, r6
 8008e0e:	4649      	mov	r1, r9
 8008e10:	4640      	mov	r0, r8
 8008e12:	47d0      	blx	sl
 8008e14:	3001      	adds	r0, #1
 8008e16:	d09b      	beq.n	8008d50 <_printf_i+0x164>
 8008e18:	3501      	adds	r5, #1
 8008e1a:	68e3      	ldr	r3, [r4, #12]
 8008e1c:	9903      	ldr	r1, [sp, #12]
 8008e1e:	1a5b      	subs	r3, r3, r1
 8008e20:	42ab      	cmp	r3, r5
 8008e22:	dcf2      	bgt.n	8008e0a <_printf_i+0x21e>
 8008e24:	e7eb      	b.n	8008dfe <_printf_i+0x212>
 8008e26:	2500      	movs	r5, #0
 8008e28:	f104 0619 	add.w	r6, r4, #25
 8008e2c:	e7f5      	b.n	8008e1a <_printf_i+0x22e>
 8008e2e:	bf00      	nop
 8008e30:	08008fd5 	.word	0x08008fd5
 8008e34:	08008fe6 	.word	0x08008fe6

08008e38 <memmove>:
 8008e38:	4288      	cmp	r0, r1
 8008e3a:	b510      	push	{r4, lr}
 8008e3c:	eb01 0402 	add.w	r4, r1, r2
 8008e40:	d902      	bls.n	8008e48 <memmove+0x10>
 8008e42:	4284      	cmp	r4, r0
 8008e44:	4623      	mov	r3, r4
 8008e46:	d807      	bhi.n	8008e58 <memmove+0x20>
 8008e48:	1e43      	subs	r3, r0, #1
 8008e4a:	42a1      	cmp	r1, r4
 8008e4c:	d008      	beq.n	8008e60 <memmove+0x28>
 8008e4e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008e52:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008e56:	e7f8      	b.n	8008e4a <memmove+0x12>
 8008e58:	4402      	add	r2, r0
 8008e5a:	4601      	mov	r1, r0
 8008e5c:	428a      	cmp	r2, r1
 8008e5e:	d100      	bne.n	8008e62 <memmove+0x2a>
 8008e60:	bd10      	pop	{r4, pc}
 8008e62:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008e66:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008e6a:	e7f7      	b.n	8008e5c <memmove+0x24>

08008e6c <_realloc_r>:
 8008e6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e6e:	4607      	mov	r7, r0
 8008e70:	4614      	mov	r4, r2
 8008e72:	460e      	mov	r6, r1
 8008e74:	b921      	cbnz	r1, 8008e80 <_realloc_r+0x14>
 8008e76:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008e7a:	4611      	mov	r1, r2
 8008e7c:	f7ff bb88 	b.w	8008590 <_malloc_r>
 8008e80:	b922      	cbnz	r2, 8008e8c <_realloc_r+0x20>
 8008e82:	f7ff fc99 	bl	80087b8 <_free_r>
 8008e86:	4625      	mov	r5, r4
 8008e88:	4628      	mov	r0, r5
 8008e8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008e8c:	f000 f814 	bl	8008eb8 <_malloc_usable_size_r>
 8008e90:	42a0      	cmp	r0, r4
 8008e92:	d20f      	bcs.n	8008eb4 <_realloc_r+0x48>
 8008e94:	4621      	mov	r1, r4
 8008e96:	4638      	mov	r0, r7
 8008e98:	f7ff fb7a 	bl	8008590 <_malloc_r>
 8008e9c:	4605      	mov	r5, r0
 8008e9e:	2800      	cmp	r0, #0
 8008ea0:	d0f2      	beq.n	8008e88 <_realloc_r+0x1c>
 8008ea2:	4631      	mov	r1, r6
 8008ea4:	4622      	mov	r2, r4
 8008ea6:	f7ff fb5d 	bl	8008564 <memcpy>
 8008eaa:	4631      	mov	r1, r6
 8008eac:	4638      	mov	r0, r7
 8008eae:	f7ff fc83 	bl	80087b8 <_free_r>
 8008eb2:	e7e9      	b.n	8008e88 <_realloc_r+0x1c>
 8008eb4:	4635      	mov	r5, r6
 8008eb6:	e7e7      	b.n	8008e88 <_realloc_r+0x1c>

08008eb8 <_malloc_usable_size_r>:
 8008eb8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008ebc:	1f18      	subs	r0, r3, #4
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	bfbc      	itt	lt
 8008ec2:	580b      	ldrlt	r3, [r1, r0]
 8008ec4:	18c0      	addlt	r0, r0, r3
 8008ec6:	4770      	bx	lr

08008ec8 <_init>:
 8008ec8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008eca:	bf00      	nop
 8008ecc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008ece:	bc08      	pop	{r3}
 8008ed0:	469e      	mov	lr, r3
 8008ed2:	4770      	bx	lr

08008ed4 <_fini>:
 8008ed4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ed6:	bf00      	nop
 8008ed8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008eda:	bc08      	pop	{r3}
 8008edc:	469e      	mov	lr, r3
 8008ede:	4770      	bx	lr
