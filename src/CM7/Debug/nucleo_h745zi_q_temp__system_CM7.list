
nucleo_h745zi_q_temp__system_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004b18  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  08004db8  08004db8  00014db8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004e50  08004e50  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  08004e50  08004e50  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004e50  08004e50  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004e50  08004e50  00014e50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004e54  08004e54  00014e54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  24000000  08004e58  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004084  24000078  08004ed0  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  240040fc  08004ed0  000240fc  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c6f6  00000000  00000000  000200a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000035d4  00000000  00000000  0003c79c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e10  00000000  00000000  0003fd70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000cd8  00000000  00000000  00040b80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000394e9  00000000  00000000  00041858  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012331  00000000  00000000  0007ad41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00176a70  00000000  00000000  0008d072  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00203ae2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003afc  00000000  00000000  00203b38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000078 	.word	0x24000078
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08004da0 	.word	0x08004da0

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400007c 	.word	0x2400007c
 80002dc:	08004da0 	.word	0x08004da0

080002e0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80002e0:	b480      	push	{r7}
 80002e2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80002e4:	4b3f      	ldr	r3, [pc, #252]	; (80003e4 <SystemInit+0x104>)
 80002e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80002ea:	4a3e      	ldr	r2, [pc, #248]	; (80003e4 <SystemInit+0x104>)
 80002ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80002f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80002f4:	4b3b      	ldr	r3, [pc, #236]	; (80003e4 <SystemInit+0x104>)
 80002f6:	691b      	ldr	r3, [r3, #16]
 80002f8:	4a3a      	ldr	r2, [pc, #232]	; (80003e4 <SystemInit+0x104>)
 80002fa:	f043 0310 	orr.w	r3, r3, #16
 80002fe:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000300:	4b39      	ldr	r3, [pc, #228]	; (80003e8 <SystemInit+0x108>)
 8000302:	681b      	ldr	r3, [r3, #0]
 8000304:	f003 030f 	and.w	r3, r3, #15
 8000308:	2b06      	cmp	r3, #6
 800030a:	d807      	bhi.n	800031c <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800030c:	4b36      	ldr	r3, [pc, #216]	; (80003e8 <SystemInit+0x108>)
 800030e:	681b      	ldr	r3, [r3, #0]
 8000310:	f023 030f 	bic.w	r3, r3, #15
 8000314:	4a34      	ldr	r2, [pc, #208]	; (80003e8 <SystemInit+0x108>)
 8000316:	f043 0307 	orr.w	r3, r3, #7
 800031a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800031c:	4b33      	ldr	r3, [pc, #204]	; (80003ec <SystemInit+0x10c>)
 800031e:	681b      	ldr	r3, [r3, #0]
 8000320:	4a32      	ldr	r2, [pc, #200]	; (80003ec <SystemInit+0x10c>)
 8000322:	f043 0301 	orr.w	r3, r3, #1
 8000326:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000328:	4b30      	ldr	r3, [pc, #192]	; (80003ec <SystemInit+0x10c>)
 800032a:	2200      	movs	r2, #0
 800032c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800032e:	4b2f      	ldr	r3, [pc, #188]	; (80003ec <SystemInit+0x10c>)
 8000330:	681a      	ldr	r2, [r3, #0]
 8000332:	492e      	ldr	r1, [pc, #184]	; (80003ec <SystemInit+0x10c>)
 8000334:	4b2e      	ldr	r3, [pc, #184]	; (80003f0 <SystemInit+0x110>)
 8000336:	4013      	ands	r3, r2
 8000338:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800033a:	4b2b      	ldr	r3, [pc, #172]	; (80003e8 <SystemInit+0x108>)
 800033c:	681b      	ldr	r3, [r3, #0]
 800033e:	f003 0308 	and.w	r3, r3, #8
 8000342:	2b00      	cmp	r3, #0
 8000344:	d007      	beq.n	8000356 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000346:	4b28      	ldr	r3, [pc, #160]	; (80003e8 <SystemInit+0x108>)
 8000348:	681b      	ldr	r3, [r3, #0]
 800034a:	f023 030f 	bic.w	r3, r3, #15
 800034e:	4a26      	ldr	r2, [pc, #152]	; (80003e8 <SystemInit+0x108>)
 8000350:	f043 0307 	orr.w	r3, r3, #7
 8000354:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000356:	4b25      	ldr	r3, [pc, #148]	; (80003ec <SystemInit+0x10c>)
 8000358:	2200      	movs	r2, #0
 800035a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800035c:	4b23      	ldr	r3, [pc, #140]	; (80003ec <SystemInit+0x10c>)
 800035e:	2200      	movs	r2, #0
 8000360:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000362:	4b22      	ldr	r3, [pc, #136]	; (80003ec <SystemInit+0x10c>)
 8000364:	2200      	movs	r2, #0
 8000366:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000368:	4b20      	ldr	r3, [pc, #128]	; (80003ec <SystemInit+0x10c>)
 800036a:	4a22      	ldr	r2, [pc, #136]	; (80003f4 <SystemInit+0x114>)
 800036c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800036e:	4b1f      	ldr	r3, [pc, #124]	; (80003ec <SystemInit+0x10c>)
 8000370:	4a21      	ldr	r2, [pc, #132]	; (80003f8 <SystemInit+0x118>)
 8000372:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000374:	4b1d      	ldr	r3, [pc, #116]	; (80003ec <SystemInit+0x10c>)
 8000376:	4a21      	ldr	r2, [pc, #132]	; (80003fc <SystemInit+0x11c>)
 8000378:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800037a:	4b1c      	ldr	r3, [pc, #112]	; (80003ec <SystemInit+0x10c>)
 800037c:	2200      	movs	r2, #0
 800037e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000380:	4b1a      	ldr	r3, [pc, #104]	; (80003ec <SystemInit+0x10c>)
 8000382:	4a1e      	ldr	r2, [pc, #120]	; (80003fc <SystemInit+0x11c>)
 8000384:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000386:	4b19      	ldr	r3, [pc, #100]	; (80003ec <SystemInit+0x10c>)
 8000388:	2200      	movs	r2, #0
 800038a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800038c:	4b17      	ldr	r3, [pc, #92]	; (80003ec <SystemInit+0x10c>)
 800038e:	4a1b      	ldr	r2, [pc, #108]	; (80003fc <SystemInit+0x11c>)
 8000390:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000392:	4b16      	ldr	r3, [pc, #88]	; (80003ec <SystemInit+0x10c>)
 8000394:	2200      	movs	r2, #0
 8000396:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000398:	4b14      	ldr	r3, [pc, #80]	; (80003ec <SystemInit+0x10c>)
 800039a:	681b      	ldr	r3, [r3, #0]
 800039c:	4a13      	ldr	r2, [pc, #76]	; (80003ec <SystemInit+0x10c>)
 800039e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80003a2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80003a4:	4b11      	ldr	r3, [pc, #68]	; (80003ec <SystemInit+0x10c>)
 80003a6:	2200      	movs	r2, #0
 80003a8:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 80003aa:	4b15      	ldr	r3, [pc, #84]	; (8000400 <SystemInit+0x120>)
 80003ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80003ae:	4a14      	ldr	r2, [pc, #80]	; (8000400 <SystemInit+0x120>)
 80003b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80003b4:	6253      	str	r3, [r2, #36]	; 0x24


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80003b6:	4b13      	ldr	r3, [pc, #76]	; (8000404 <SystemInit+0x124>)
 80003b8:	681a      	ldr	r2, [r3, #0]
 80003ba:	4b13      	ldr	r3, [pc, #76]	; (8000408 <SystemInit+0x128>)
 80003bc:	4013      	ands	r3, r2
 80003be:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80003c2:	d202      	bcs.n	80003ca <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80003c4:	4b11      	ldr	r3, [pc, #68]	; (800040c <SystemInit+0x12c>)
 80003c6:	2201      	movs	r2, #1
 80003c8:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80003ca:	4b11      	ldr	r3, [pc, #68]	; (8000410 <SystemInit+0x130>)
 80003cc:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80003d0:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 80003d2:	4b04      	ldr	r3, [pc, #16]	; (80003e4 <SystemInit+0x104>)
 80003d4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80003d8:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 80003da:	bf00      	nop
 80003dc:	46bd      	mov	sp, r7
 80003de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003e2:	4770      	bx	lr
 80003e4:	e000ed00 	.word	0xe000ed00
 80003e8:	52002000 	.word	0x52002000
 80003ec:	58024400 	.word	0x58024400
 80003f0:	eaf6ed7f 	.word	0xeaf6ed7f
 80003f4:	02020200 	.word	0x02020200
 80003f8:	01ff0000 	.word	0x01ff0000
 80003fc:	01010280 	.word	0x01010280
 8000400:	580000c0 	.word	0x580000c0
 8000404:	5c001000 	.word	0x5c001000
 8000408:	ffff0000 	.word	0xffff0000
 800040c:	51008108 	.word	0x51008108
 8000410:	52004000 	.word	0x52004000

08000414 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000414:	b480      	push	{r7}
 8000416:	b085      	sub	sp, #20
 8000418:	af00      	add	r7, sp, #0
 800041a:	60f8      	str	r0, [r7, #12]
 800041c:	60b9      	str	r1, [r7, #8]
 800041e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000420:	68fb      	ldr	r3, [r7, #12]
 8000422:	4a07      	ldr	r2, [pc, #28]	; (8000440 <vApplicationGetIdleTaskMemory+0x2c>)
 8000424:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000426:	68bb      	ldr	r3, [r7, #8]
 8000428:	4a06      	ldr	r2, [pc, #24]	; (8000444 <vApplicationGetIdleTaskMemory+0x30>)
 800042a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800042c:	687b      	ldr	r3, [r7, #4]
 800042e:	2280      	movs	r2, #128	; 0x80
 8000430:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000432:	bf00      	nop
 8000434:	3714      	adds	r7, #20
 8000436:	46bd      	mov	sp, r7
 8000438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800043c:	4770      	bx	lr
 800043e:	bf00      	nop
 8000440:	24000094 	.word	0x24000094
 8000444:	24000148 	.word	0x24000148

08000448 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 8000448:	b580      	push	{r7, lr}
 800044a:	b086      	sub	sp, #24
 800044c:	af02      	add	r7, sp, #8
 800044e:	4603      	mov	r3, r0
 8000450:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8000452:	79fb      	ldrb	r3, [r7, #7]
 8000454:	f023 030f 	bic.w	r3, r3, #15
 8000458:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 800045a:	79fb      	ldrb	r3, [r7, #7]
 800045c:	011b      	lsls	r3, r3, #4
 800045e:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000460:	7bfb      	ldrb	r3, [r7, #15]
 8000462:	f043 030c 	orr.w	r3, r3, #12
 8000466:	b2db      	uxtb	r3, r3
 8000468:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 800046a:	7bfb      	ldrb	r3, [r7, #15]
 800046c:	f043 0308 	orr.w	r3, r3, #8
 8000470:	b2db      	uxtb	r3, r3
 8000472:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8000474:	7bbb      	ldrb	r3, [r7, #14]
 8000476:	f043 030c 	orr.w	r3, r3, #12
 800047a:	b2db      	uxtb	r3, r3
 800047c:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 800047e:	7bbb      	ldrb	r3, [r7, #14]
 8000480:	f043 0308 	orr.w	r3, r3, #8
 8000484:	b2db      	uxtb	r3, r3
 8000486:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000488:	f107 0208 	add.w	r2, r7, #8
 800048c:	2364      	movs	r3, #100	; 0x64
 800048e:	9300      	str	r3, [sp, #0]
 8000490:	2304      	movs	r3, #4
 8000492:	214e      	movs	r1, #78	; 0x4e
 8000494:	4803      	ldr	r0, [pc, #12]	; (80004a4 <lcd_send_cmd+0x5c>)
 8000496:	f000 ff0f 	bl	80012b8 <HAL_I2C_Master_Transmit>
}
 800049a:	bf00      	nop
 800049c:	3710      	adds	r7, #16
 800049e:	46bd      	mov	sp, r7
 80004a0:	bd80      	pop	{r7, pc}
 80004a2:	bf00      	nop
 80004a4:	240040a0 	.word	0x240040a0

080004a8 <lcd_send_data>:

void lcd_send_data (char data)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	b086      	sub	sp, #24
 80004ac:	af02      	add	r7, sp, #8
 80004ae:	4603      	mov	r3, r0
 80004b0:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 80004b2:	79fb      	ldrb	r3, [r7, #7]
 80004b4:	f023 030f 	bic.w	r3, r3, #15
 80004b8:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 80004ba:	79fb      	ldrb	r3, [r7, #7]
 80004bc:	011b      	lsls	r3, r3, #4
 80004be:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80004c0:	7bfb      	ldrb	r3, [r7, #15]
 80004c2:	f043 030d 	orr.w	r3, r3, #13
 80004c6:	b2db      	uxtb	r3, r3
 80004c8:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80004ca:	7bfb      	ldrb	r3, [r7, #15]
 80004cc:	f043 0309 	orr.w	r3, r3, #9
 80004d0:	b2db      	uxtb	r3, r3
 80004d2:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80004d4:	7bbb      	ldrb	r3, [r7, #14]
 80004d6:	f043 030d 	orr.w	r3, r3, #13
 80004da:	b2db      	uxtb	r3, r3
 80004dc:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80004de:	7bbb      	ldrb	r3, [r7, #14]
 80004e0:	f043 0309 	orr.w	r3, r3, #9
 80004e4:	b2db      	uxtb	r3, r3
 80004e6:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80004e8:	f107 0208 	add.w	r2, r7, #8
 80004ec:	2364      	movs	r3, #100	; 0x64
 80004ee:	9300      	str	r3, [sp, #0]
 80004f0:	2304      	movs	r3, #4
 80004f2:	214e      	movs	r1, #78	; 0x4e
 80004f4:	4803      	ldr	r0, [pc, #12]	; (8000504 <lcd_send_data+0x5c>)
 80004f6:	f000 fedf 	bl	80012b8 <HAL_I2C_Master_Transmit>
}
 80004fa:	bf00      	nop
 80004fc:	3710      	adds	r7, #16
 80004fe:	46bd      	mov	sp, r7
 8000500:	bd80      	pop	{r7, pc}
 8000502:	bf00      	nop
 8000504:	240040a0 	.word	0x240040a0

08000508 <lcd_clear>:

void lcd_clear (void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b082      	sub	sp, #8
 800050c:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x80);
 800050e:	2080      	movs	r0, #128	; 0x80
 8000510:	f7ff ff9a 	bl	8000448 <lcd_send_cmd>
	for (int i=0; i<70; i++)
 8000514:	2300      	movs	r3, #0
 8000516:	607b      	str	r3, [r7, #4]
 8000518:	e005      	b.n	8000526 <lcd_clear+0x1e>
	{
		lcd_send_data (' ');
 800051a:	2020      	movs	r0, #32
 800051c:	f7ff ffc4 	bl	80004a8 <lcd_send_data>
	for (int i=0; i<70; i++)
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	3301      	adds	r3, #1
 8000524:	607b      	str	r3, [r7, #4]
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	2b45      	cmp	r3, #69	; 0x45
 800052a:	ddf6      	ble.n	800051a <lcd_clear+0x12>
	}
}
 800052c:	bf00      	nop
 800052e:	bf00      	nop
 8000530:	3708      	adds	r7, #8
 8000532:	46bd      	mov	sp, r7
 8000534:	bd80      	pop	{r7, pc}

08000536 <lcd_put_cur>:

void lcd_put_cur(int row, int col)
{
 8000536:	b580      	push	{r7, lr}
 8000538:	b082      	sub	sp, #8
 800053a:	af00      	add	r7, sp, #0
 800053c:	6078      	str	r0, [r7, #4]
 800053e:	6039      	str	r1, [r7, #0]
    switch (row)
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	2b00      	cmp	r3, #0
 8000544:	d003      	beq.n	800054e <lcd_put_cur+0x18>
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	2b01      	cmp	r3, #1
 800054a:	d005      	beq.n	8000558 <lcd_put_cur+0x22>
 800054c:	e009      	b.n	8000562 <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 800054e:	683b      	ldr	r3, [r7, #0]
 8000550:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000554:	603b      	str	r3, [r7, #0]
            break;
 8000556:	e004      	b.n	8000562 <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 8000558:	683b      	ldr	r3, [r7, #0]
 800055a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800055e:	603b      	str	r3, [r7, #0]
            break;
 8000560:	bf00      	nop
    }

    lcd_send_cmd (col);
 8000562:	683b      	ldr	r3, [r7, #0]
 8000564:	b2db      	uxtb	r3, r3
 8000566:	4618      	mov	r0, r3
 8000568:	f7ff ff6e 	bl	8000448 <lcd_send_cmd>
}
 800056c:	bf00      	nop
 800056e:	3708      	adds	r7, #8
 8000570:	46bd      	mov	sp, r7
 8000572:	bd80      	pop	{r7, pc}

08000574 <lcd_init>:


void lcd_init (void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 8000578:	2032      	movs	r0, #50	; 0x32
 800057a:	f000 fb1b 	bl	8000bb4 <HAL_Delay>
	lcd_send_cmd (0x30);
 800057e:	2030      	movs	r0, #48	; 0x30
 8000580:	f7ff ff62 	bl	8000448 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 8000584:	2005      	movs	r0, #5
 8000586:	f000 fb15 	bl	8000bb4 <HAL_Delay>
	lcd_send_cmd (0x30);
 800058a:	2030      	movs	r0, #48	; 0x30
 800058c:	f7ff ff5c 	bl	8000448 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 8000590:	2001      	movs	r0, #1
 8000592:	f000 fb0f 	bl	8000bb4 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000596:	2030      	movs	r0, #48	; 0x30
 8000598:	f7ff ff56 	bl	8000448 <lcd_send_cmd>
	HAL_Delay(10);
 800059c:	200a      	movs	r0, #10
 800059e:	f000 fb09 	bl	8000bb4 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 80005a2:	2020      	movs	r0, #32
 80005a4:	f7ff ff50 	bl	8000448 <lcd_send_cmd>
	HAL_Delay(10);
 80005a8:	200a      	movs	r0, #10
 80005aa:	f000 fb03 	bl	8000bb4 <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 80005ae:	2028      	movs	r0, #40	; 0x28
 80005b0:	f7ff ff4a 	bl	8000448 <lcd_send_cmd>
	HAL_Delay(1);
 80005b4:	2001      	movs	r0, #1
 80005b6:	f000 fafd 	bl	8000bb4 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 80005ba:	2008      	movs	r0, #8
 80005bc:	f7ff ff44 	bl	8000448 <lcd_send_cmd>
	HAL_Delay(1);
 80005c0:	2001      	movs	r0, #1
 80005c2:	f000 faf7 	bl	8000bb4 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 80005c6:	2001      	movs	r0, #1
 80005c8:	f7ff ff3e 	bl	8000448 <lcd_send_cmd>
	HAL_Delay(1);
 80005cc:	2001      	movs	r0, #1
 80005ce:	f000 faf1 	bl	8000bb4 <HAL_Delay>
	HAL_Delay(1);
 80005d2:	2001      	movs	r0, #1
 80005d4:	f000 faee 	bl	8000bb4 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 80005d8:	2006      	movs	r0, #6
 80005da:	f7ff ff35 	bl	8000448 <lcd_send_cmd>
	HAL_Delay(1);
 80005de:	2001      	movs	r0, #1
 80005e0:	f000 fae8 	bl	8000bb4 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 80005e4:	200c      	movs	r0, #12
 80005e6:	f7ff ff2f 	bl	8000448 <lcd_send_cmd>
}
 80005ea:	bf00      	nop
 80005ec:	bd80      	pop	{r7, pc}

080005ee <lcd_send_string>:

void lcd_send_string (char *str)
{
 80005ee:	b580      	push	{r7, lr}
 80005f0:	b082      	sub	sp, #8
 80005f2:	af00      	add	r7, sp, #0
 80005f4:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 80005f6:	e006      	b.n	8000606 <lcd_send_string+0x18>
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	1c5a      	adds	r2, r3, #1
 80005fc:	607a      	str	r2, [r7, #4]
 80005fe:	781b      	ldrb	r3, [r3, #0]
 8000600:	4618      	mov	r0, r3
 8000602:	f7ff ff51 	bl	80004a8 <lcd_send_data>
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	781b      	ldrb	r3, [r3, #0]
 800060a:	2b00      	cmp	r3, #0
 800060c:	d1f4      	bne.n	80005f8 <lcd_send_string+0xa>
}
 800060e:	bf00      	nop
 8000610:	bf00      	nop
 8000612:	3708      	adds	r7, #8
 8000614:	46bd      	mov	sp, r7
 8000616:	bd80      	pop	{r7, pc}

08000618 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b084      	sub	sp, #16
 800061c:	af02      	add	r7, sp, #8
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 800061e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000622:	607b      	str	r3, [r7, #4]
  while ((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0))
 8000624:	bf00      	nop
 8000626:	4b2f      	ldr	r3, [pc, #188]	; (80006e4 <main+0xcc>)
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800062e:	2b00      	cmp	r3, #0
 8000630:	d004      	beq.n	800063c <main+0x24>
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	1e5a      	subs	r2, r3, #1
 8000636:	607a      	str	r2, [r7, #4]
 8000638:	2b00      	cmp	r3, #0
 800063a:	dcf4      	bgt.n	8000626 <main+0xe>
    ;
  if (timeout < 0)
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	2b00      	cmp	r3, #0
 8000640:	da01      	bge.n	8000646 <main+0x2e>
  {
    Error_Handler();
 8000642:	f000 f950 	bl	80008e6 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000646:	f000 fa23 	bl	8000a90 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800064a:	f000 f855 	bl	80006f8 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
  /* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
  /*HW semaphore Clock enable*/
  __HAL_RCC_HSEM_CLK_ENABLE();
 800064e:	4b25      	ldr	r3, [pc, #148]	; (80006e4 <main+0xcc>)
 8000650:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000654:	4a23      	ldr	r2, [pc, #140]	; (80006e4 <main+0xcc>)
 8000656:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800065a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800065e:	4b21      	ldr	r3, [pc, #132]	; (80006e4 <main+0xcc>)
 8000660:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000664:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000668:	603b      	str	r3, [r7, #0]
 800066a:	683b      	ldr	r3, [r7, #0]
  /*Take HSEM */
  HAL_HSEM_FastTake(HSEM_ID_0);
 800066c:	2000      	movs	r0, #0
 800066e:	f000 fd65 	bl	800113c <HAL_HSEM_FastTake>
  /*Release HSEM in order to notify the CPU2(CM4)*/
  HAL_HSEM_Release(HSEM_ID_0, 0);
 8000672:	2100      	movs	r1, #0
 8000674:	2000      	movs	r0, #0
 8000676:	f000 fd7b 	bl	8001170 <HAL_HSEM_Release>
  /* wait until CPU2 wakes up from stop mode */
  timeout = 0xFFFF;
 800067a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800067e:	607b      	str	r3, [r7, #4]
  while ((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0))
 8000680:	bf00      	nop
 8000682:	4b18      	ldr	r3, [pc, #96]	; (80006e4 <main+0xcc>)
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800068a:	2b00      	cmp	r3, #0
 800068c:	d104      	bne.n	8000698 <main+0x80>
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	1e5a      	subs	r2, r3, #1
 8000692:	607a      	str	r2, [r7, #4]
 8000694:	2b00      	cmp	r3, #0
 8000696:	dcf4      	bgt.n	8000682 <main+0x6a>
    ;
  if (timeout < 0)
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	2b00      	cmp	r3, #0
 800069c:	da01      	bge.n	80006a2 <main+0x8a>
  {
    Error_Handler();
 800069e:	f000 f922 	bl	80008e6 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006a2:	f000 f8e3 	bl	800086c <MX_GPIO_Init>
  MX_I2C1_Init();
 80006a6:	f000 f8a1 	bl	80007ec <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  lcd_init();
 80006aa:	f7ff ff63 	bl	8000574 <lcd_init>
  /* Create the thread(s) */
  /* definition and creation of defaultTask */

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  xTaskCreate(vPrintLCD, "Print LCD", 256, NULL, 1, NULL);
 80006ae:	2300      	movs	r3, #0
 80006b0:	9301      	str	r3, [sp, #4]
 80006b2:	2301      	movs	r3, #1
 80006b4:	9300      	str	r3, [sp, #0]
 80006b6:	2300      	movs	r3, #0
 80006b8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80006bc:	490a      	ldr	r1, [pc, #40]	; (80006e8 <main+0xd0>)
 80006be:	480b      	ldr	r0, [pc, #44]	; (80006ec <main+0xd4>)
 80006c0:	f003 fe07 	bl	80042d2 <xTaskCreate>
  xTaskCreate(vTask2, "Task 2", 256, NULL, 1, NULL);
 80006c4:	2300      	movs	r3, #0
 80006c6:	9301      	str	r3, [sp, #4]
 80006c8:	2301      	movs	r3, #1
 80006ca:	9300      	str	r3, [sp, #0]
 80006cc:	2300      	movs	r3, #0
 80006ce:	f44f 7280 	mov.w	r2, #256	; 0x100
 80006d2:	4907      	ldr	r1, [pc, #28]	; (80006f0 <main+0xd8>)
 80006d4:	4807      	ldr	r0, [pc, #28]	; (80006f4 <main+0xdc>)
 80006d6:	f003 fdfc 	bl	80042d2 <xTaskCreate>


  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  lcd_clear();
 80006da:	f7ff ff15 	bl	8000508 <lcd_clear>

  // Start scheduler
  vTaskStartScheduler();
 80006de:	f003 ff45 	bl	800456c <vTaskStartScheduler>

  /* We should never get here as control is now taken by the scheduler */
  while (1)
 80006e2:	e7fe      	b.n	80006e2 <main+0xca>
 80006e4:	58024400 	.word	0x58024400
 80006e8:	08004db8 	.word	0x08004db8
 80006ec:	080008c1 	.word	0x080008c1
 80006f0:	08004dc4 	.word	0x08004dc4
 80006f4:	080008dd 	.word	0x080008dd

080006f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b09c      	sub	sp, #112	; 0x70
 80006fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000702:	224c      	movs	r2, #76	; 0x4c
 8000704:	2100      	movs	r1, #0
 8000706:	4618      	mov	r0, r3
 8000708:	f004 fa7c 	bl	8004c04 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800070c:	1d3b      	adds	r3, r7, #4
 800070e:	2220      	movs	r2, #32
 8000710:	2100      	movs	r1, #0
 8000712:	4618      	mov	r0, r3
 8000714:	f004 fa76 	bl	8004c04 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000718:	2004      	movs	r0, #4
 800071a:	f001 f8cd 	bl	80018b8 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800071e:	2300      	movs	r3, #0
 8000720:	603b      	str	r3, [r7, #0]
 8000722:	4b30      	ldr	r3, [pc, #192]	; (80007e4 <SystemClock_Config+0xec>)
 8000724:	699b      	ldr	r3, [r3, #24]
 8000726:	4a2f      	ldr	r2, [pc, #188]	; (80007e4 <SystemClock_Config+0xec>)
 8000728:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800072c:	6193      	str	r3, [r2, #24]
 800072e:	4b2d      	ldr	r3, [pc, #180]	; (80007e4 <SystemClock_Config+0xec>)
 8000730:	699b      	ldr	r3, [r3, #24]
 8000732:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000736:	603b      	str	r3, [r7, #0]
 8000738:	4b2b      	ldr	r3, [pc, #172]	; (80007e8 <SystemClock_Config+0xf0>)
 800073a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800073c:	4a2a      	ldr	r2, [pc, #168]	; (80007e8 <SystemClock_Config+0xf0>)
 800073e:	f043 0301 	orr.w	r3, r3, #1
 8000742:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000744:	4b28      	ldr	r3, [pc, #160]	; (80007e8 <SystemClock_Config+0xf0>)
 8000746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000748:	f003 0301 	and.w	r3, r3, #1
 800074c:	603b      	str	r3, [r7, #0]
 800074e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000750:	bf00      	nop
 8000752:	4b24      	ldr	r3, [pc, #144]	; (80007e4 <SystemClock_Config+0xec>)
 8000754:	699b      	ldr	r3, [r3, #24]
 8000756:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800075a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800075e:	d1f8      	bne.n	8000752 <SystemClock_Config+0x5a>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000760:	2301      	movs	r3, #1
 8000762:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000764:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000768:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800076a:	2302      	movs	r3, #2
 800076c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800076e:	2302      	movs	r3, #2
 8000770:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 5;
 8000772:	2305      	movs	r3, #5
 8000774:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 160;
 8000776:	23a0      	movs	r3, #160	; 0xa0
 8000778:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800077a:	2302      	movs	r3, #2
 800077c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800077e:	2302      	movs	r3, #2
 8000780:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000782:	2302      	movs	r3, #2
 8000784:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8000786:	2308      	movs	r3, #8
 8000788:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800078a:	2300      	movs	r3, #0
 800078c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800078e:	2300      	movs	r3, #0
 8000790:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000792:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000796:	4618      	mov	r0, r3
 8000798:	f001 f8e8 	bl	800196c <HAL_RCC_OscConfig>
 800079c:	4603      	mov	r3, r0
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d001      	beq.n	80007a6 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80007a2:	f000 f8a0 	bl	80008e6 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007a6:	233f      	movs	r3, #63	; 0x3f
 80007a8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007aa:	2303      	movs	r3, #3
 80007ac:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80007ae:	2300      	movs	r3, #0
 80007b0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80007b2:	2308      	movs	r3, #8
 80007b4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80007b6:	2340      	movs	r3, #64	; 0x40
 80007b8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80007ba:	2340      	movs	r3, #64	; 0x40
 80007bc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80007be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007c2:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80007c4:	2340      	movs	r3, #64	; 0x40
 80007c6:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007c8:	1d3b      	adds	r3, r7, #4
 80007ca:	2102      	movs	r1, #2
 80007cc:	4618      	mov	r0, r3
 80007ce:	f001 fcdd 	bl	800218c <HAL_RCC_ClockConfig>
 80007d2:	4603      	mov	r3, r0
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d001      	beq.n	80007dc <SystemClock_Config+0xe4>
  {
    Error_Handler();
 80007d8:	f000 f885 	bl	80008e6 <Error_Handler>
  }
}
 80007dc:	bf00      	nop
 80007de:	3770      	adds	r7, #112	; 0x70
 80007e0:	46bd      	mov	sp, r7
 80007e2:	bd80      	pop	{r7, pc}
 80007e4:	58024800 	.word	0x58024800
 80007e8:	58000400 	.word	0x58000400

080007ec <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80007f0:	4b1b      	ldr	r3, [pc, #108]	; (8000860 <MX_I2C1_Init+0x74>)
 80007f2:	4a1c      	ldr	r2, [pc, #112]	; (8000864 <MX_I2C1_Init+0x78>)
 80007f4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10C0ECFF;
 80007f6:	4b1a      	ldr	r3, [pc, #104]	; (8000860 <MX_I2C1_Init+0x74>)
 80007f8:	4a1b      	ldr	r2, [pc, #108]	; (8000868 <MX_I2C1_Init+0x7c>)
 80007fa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80007fc:	4b18      	ldr	r3, [pc, #96]	; (8000860 <MX_I2C1_Init+0x74>)
 80007fe:	2200      	movs	r2, #0
 8000800:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000802:	4b17      	ldr	r3, [pc, #92]	; (8000860 <MX_I2C1_Init+0x74>)
 8000804:	2201      	movs	r2, #1
 8000806:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000808:	4b15      	ldr	r3, [pc, #84]	; (8000860 <MX_I2C1_Init+0x74>)
 800080a:	2200      	movs	r2, #0
 800080c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800080e:	4b14      	ldr	r3, [pc, #80]	; (8000860 <MX_I2C1_Init+0x74>)
 8000810:	2200      	movs	r2, #0
 8000812:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000814:	4b12      	ldr	r3, [pc, #72]	; (8000860 <MX_I2C1_Init+0x74>)
 8000816:	2200      	movs	r2, #0
 8000818:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800081a:	4b11      	ldr	r3, [pc, #68]	; (8000860 <MX_I2C1_Init+0x74>)
 800081c:	2200      	movs	r2, #0
 800081e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000820:	4b0f      	ldr	r3, [pc, #60]	; (8000860 <MX_I2C1_Init+0x74>)
 8000822:	2200      	movs	r2, #0
 8000824:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000826:	480e      	ldr	r0, [pc, #56]	; (8000860 <MX_I2C1_Init+0x74>)
 8000828:	f000 fcb6 	bl	8001198 <HAL_I2C_Init>
 800082c:	4603      	mov	r3, r0
 800082e:	2b00      	cmp	r3, #0
 8000830:	d001      	beq.n	8000836 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000832:	f000 f858 	bl	80008e6 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000836:	2100      	movs	r1, #0
 8000838:	4809      	ldr	r0, [pc, #36]	; (8000860 <MX_I2C1_Init+0x74>)
 800083a:	f000 ffa5 	bl	8001788 <HAL_I2CEx_ConfigAnalogFilter>
 800083e:	4603      	mov	r3, r0
 8000840:	2b00      	cmp	r3, #0
 8000842:	d001      	beq.n	8000848 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000844:	f000 f84f 	bl	80008e6 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000848:	2100      	movs	r1, #0
 800084a:	4805      	ldr	r0, [pc, #20]	; (8000860 <MX_I2C1_Init+0x74>)
 800084c:	f000 ffe7 	bl	800181e <HAL_I2CEx_ConfigDigitalFilter>
 8000850:	4603      	mov	r3, r0
 8000852:	2b00      	cmp	r3, #0
 8000854:	d001      	beq.n	800085a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000856:	f000 f846 	bl	80008e6 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800085a:	bf00      	nop
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	240040a0 	.word	0x240040a0
 8000864:	40005400 	.word	0x40005400
 8000868:	10c0ecff 	.word	0x10c0ecff

0800086c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800086c:	b480      	push	{r7}
 800086e:	b083      	sub	sp, #12
 8000870:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000872:	4b12      	ldr	r3, [pc, #72]	; (80008bc <MX_GPIO_Init+0x50>)
 8000874:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000878:	4a10      	ldr	r2, [pc, #64]	; (80008bc <MX_GPIO_Init+0x50>)
 800087a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800087e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000882:	4b0e      	ldr	r3, [pc, #56]	; (80008bc <MX_GPIO_Init+0x50>)
 8000884:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000888:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800088c:	607b      	str	r3, [r7, #4]
 800088e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000890:	4b0a      	ldr	r3, [pc, #40]	; (80008bc <MX_GPIO_Init+0x50>)
 8000892:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000896:	4a09      	ldr	r2, [pc, #36]	; (80008bc <MX_GPIO_Init+0x50>)
 8000898:	f043 0302 	orr.w	r3, r3, #2
 800089c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008a0:	4b06      	ldr	r3, [pc, #24]	; (80008bc <MX_GPIO_Init+0x50>)
 80008a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008a6:	f003 0302 	and.w	r3, r3, #2
 80008aa:	603b      	str	r3, [r7, #0]
 80008ac:	683b      	ldr	r3, [r7, #0]

}
 80008ae:	bf00      	nop
 80008b0:	370c      	adds	r7, #12
 80008b2:	46bd      	mov	sp, r7
 80008b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b8:	4770      	bx	lr
 80008ba:	bf00      	nop
 80008bc:	58024400 	.word	0x58024400

080008c0 <vPrintLCD>:

/* USER CODE BEGIN 4 */
void vPrintLCD(void *pvParameters)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b082      	sub	sp, #8
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
  for (;;)
  {
    lcd_put_cur(0, 0);
 80008c8:	2100      	movs	r1, #0
 80008ca:	2000      	movs	r0, #0
 80008cc:	f7ff fe33 	bl	8000536 <lcd_put_cur>
    lcd_send_string("Hello World");
 80008d0:	4801      	ldr	r0, [pc, #4]	; (80008d8 <vPrintLCD+0x18>)
 80008d2:	f7ff fe8c 	bl	80005ee <lcd_send_string>
    lcd_put_cur(0, 0);
 80008d6:	e7f7      	b.n	80008c8 <vPrintLCD+0x8>
 80008d8:	08004dcc 	.word	0x08004dcc

080008dc <vTask2>:
  }
}

void vTask2(void *pvParameters)
{
 80008dc:	b480      	push	{r7}
 80008de:	b083      	sub	sp, #12
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
  for (;;)
 80008e4:	e7fe      	b.n	80008e4 <vTask2+0x8>

080008e6 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008e6:	b480      	push	{r7}
 80008e8:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008ea:	b672      	cpsid	i
}
 80008ec:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008ee:	e7fe      	b.n	80008ee <Error_Handler+0x8>

080008f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b082      	sub	sp, #8
 80008f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008f6:	4b0c      	ldr	r3, [pc, #48]	; (8000928 <HAL_MspInit+0x38>)
 80008f8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80008fc:	4a0a      	ldr	r2, [pc, #40]	; (8000928 <HAL_MspInit+0x38>)
 80008fe:	f043 0302 	orr.w	r3, r3, #2
 8000902:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000906:	4b08      	ldr	r3, [pc, #32]	; (8000928 <HAL_MspInit+0x38>)
 8000908:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800090c:	f003 0302 	and.w	r3, r3, #2
 8000910:	607b      	str	r3, [r7, #4]
 8000912:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000914:	2200      	movs	r2, #0
 8000916:	210f      	movs	r1, #15
 8000918:	f06f 0001 	mvn.w	r0, #1
 800091c:	f000 fa37 	bl	8000d8e <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000920:	bf00      	nop
 8000922:	3708      	adds	r7, #8
 8000924:	46bd      	mov	sp, r7
 8000926:	bd80      	pop	{r7, pc}
 8000928:	58024400 	.word	0x58024400

0800092c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b0b8      	sub	sp, #224	; 0xe0
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000934:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000938:	2200      	movs	r2, #0
 800093a:	601a      	str	r2, [r3, #0]
 800093c:	605a      	str	r2, [r3, #4]
 800093e:	609a      	str	r2, [r3, #8]
 8000940:	60da      	str	r2, [r3, #12]
 8000942:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000944:	f107 0310 	add.w	r3, r7, #16
 8000948:	22bc      	movs	r2, #188	; 0xbc
 800094a:	2100      	movs	r1, #0
 800094c:	4618      	mov	r0, r3
 800094e:	f004 f959 	bl	8004c04 <memset>
  if(hi2c->Instance==I2C1)
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	4a24      	ldr	r2, [pc, #144]	; (80009e8 <HAL_I2C_MspInit+0xbc>)
 8000958:	4293      	cmp	r3, r2
 800095a:	d141      	bne.n	80009e0 <HAL_I2C_MspInit+0xb4>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800095c:	2308      	movs	r3, #8
 800095e:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8000960:	2300      	movs	r3, #0
 8000962:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000966:	f107 0310 	add.w	r3, r7, #16
 800096a:	4618      	mov	r0, r3
 800096c:	f001 ff3e 	bl	80027ec <HAL_RCCEx_PeriphCLKConfig>
 8000970:	4603      	mov	r3, r0
 8000972:	2b00      	cmp	r3, #0
 8000974:	d001      	beq.n	800097a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000976:	f7ff ffb6 	bl	80008e6 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800097a:	4b1c      	ldr	r3, [pc, #112]	; (80009ec <HAL_I2C_MspInit+0xc0>)
 800097c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000980:	4a1a      	ldr	r2, [pc, #104]	; (80009ec <HAL_I2C_MspInit+0xc0>)
 8000982:	f043 0302 	orr.w	r3, r3, #2
 8000986:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800098a:	4b18      	ldr	r3, [pc, #96]	; (80009ec <HAL_I2C_MspInit+0xc0>)
 800098c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000990:	f003 0302 	and.w	r3, r3, #2
 8000994:	60fb      	str	r3, [r7, #12]
 8000996:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000998:	23c0      	movs	r3, #192	; 0xc0
 800099a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800099e:	2312      	movs	r3, #18
 80009a0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a4:	2300      	movs	r3, #0
 80009a6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009aa:	2300      	movs	r3, #0
 80009ac:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80009b0:	2304      	movs	r3, #4
 80009b2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009b6:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80009ba:	4619      	mov	r1, r3
 80009bc:	480c      	ldr	r0, [pc, #48]	; (80009f0 <HAL_I2C_MspInit+0xc4>)
 80009be:	f000 fa0d 	bl	8000ddc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80009c2:	4b0a      	ldr	r3, [pc, #40]	; (80009ec <HAL_I2C_MspInit+0xc0>)
 80009c4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80009c8:	4a08      	ldr	r2, [pc, #32]	; (80009ec <HAL_I2C_MspInit+0xc0>)
 80009ca:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80009ce:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80009d2:	4b06      	ldr	r3, [pc, #24]	; (80009ec <HAL_I2C_MspInit+0xc0>)
 80009d4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80009d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80009dc:	60bb      	str	r3, [r7, #8]
 80009de:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80009e0:	bf00      	nop
 80009e2:	37e0      	adds	r7, #224	; 0xe0
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bd80      	pop	{r7, pc}
 80009e8:	40005400 	.word	0x40005400
 80009ec:	58024400 	.word	0x58024400
 80009f0:	58020400 	.word	0x58020400

080009f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009f4:	b480      	push	{r7}
 80009f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009f8:	e7fe      	b.n	80009f8 <NMI_Handler+0x4>

080009fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009fa:	b480      	push	{r7}
 80009fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009fe:	e7fe      	b.n	80009fe <HardFault_Handler+0x4>

08000a00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a00:	b480      	push	{r7}
 8000a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a04:	e7fe      	b.n	8000a04 <MemManage_Handler+0x4>

08000a06 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a06:	b480      	push	{r7}
 8000a08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a0a:	e7fe      	b.n	8000a0a <BusFault_Handler+0x4>

08000a0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a10:	e7fe      	b.n	8000a10 <UsageFault_Handler+0x4>

08000a12 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a12:	b480      	push	{r7}
 8000a14:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a16:	bf00      	nop
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1e:	4770      	bx	lr

08000a20 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a24:	f000 f8a6 	bl	8000b74 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000a28:	f004 f8a8 	bl	8004b7c <xTaskGetSchedulerState>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	2b01      	cmp	r3, #1
 8000a30:	d001      	beq.n	8000a36 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000a32:	f003 fba1 	bl	8004178 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a36:	bf00      	nop
 8000a38:	bd80      	pop	{r7, pc}
	...

08000a3c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000a3c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a74 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000a40:	f7ff fc4e 	bl	80002e0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a44:	480c      	ldr	r0, [pc, #48]	; (8000a78 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000a46:	490d      	ldr	r1, [pc, #52]	; (8000a7c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000a48:	4a0d      	ldr	r2, [pc, #52]	; (8000a80 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000a4a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a4c:	e002      	b.n	8000a54 <LoopCopyDataInit>

08000a4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a52:	3304      	adds	r3, #4

08000a54 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a56:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a58:	d3f9      	bcc.n	8000a4e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a5a:	4a0a      	ldr	r2, [pc, #40]	; (8000a84 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000a5c:	4c0a      	ldr	r4, [pc, #40]	; (8000a88 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000a5e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a60:	e001      	b.n	8000a66 <LoopFillZerobss>

08000a62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a64:	3204      	adds	r2, #4

08000a66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a66:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a68:	d3fb      	bcc.n	8000a62 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a6a:	f004 f8a5 	bl	8004bb8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a6e:	f7ff fdd3 	bl	8000618 <main>
  bx  lr
 8000a72:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000a74:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000a78:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000a7c:	24000078 	.word	0x24000078
  ldr r2, =_sidata
 8000a80:	08004e58 	.word	0x08004e58
  ldr r2, =_sbss
 8000a84:	24000078 	.word	0x24000078
  ldr r4, =_ebss
 8000a88:	240040fc 	.word	0x240040fc

08000a8c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a8c:	e7fe      	b.n	8000a8c <ADC3_IRQHandler>
	...

08000a90 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b082      	sub	sp, #8
 8000a94:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a96:	2003      	movs	r0, #3
 8000a98:	f000 f96e 	bl	8000d78 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000a9c:	f001 fd2c 	bl	80024f8 <HAL_RCC_GetSysClockFreq>
 8000aa0:	4602      	mov	r2, r0
 8000aa2:	4b15      	ldr	r3, [pc, #84]	; (8000af8 <HAL_Init+0x68>)
 8000aa4:	699b      	ldr	r3, [r3, #24]
 8000aa6:	0a1b      	lsrs	r3, r3, #8
 8000aa8:	f003 030f 	and.w	r3, r3, #15
 8000aac:	4913      	ldr	r1, [pc, #76]	; (8000afc <HAL_Init+0x6c>)
 8000aae:	5ccb      	ldrb	r3, [r1, r3]
 8000ab0:	f003 031f 	and.w	r3, r3, #31
 8000ab4:	fa22 f303 	lsr.w	r3, r2, r3
 8000ab8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000aba:	4b0f      	ldr	r3, [pc, #60]	; (8000af8 <HAL_Init+0x68>)
 8000abc:	699b      	ldr	r3, [r3, #24]
 8000abe:	f003 030f 	and.w	r3, r3, #15
 8000ac2:	4a0e      	ldr	r2, [pc, #56]	; (8000afc <HAL_Init+0x6c>)
 8000ac4:	5cd3      	ldrb	r3, [r2, r3]
 8000ac6:	f003 031f 	and.w	r3, r3, #31
 8000aca:	687a      	ldr	r2, [r7, #4]
 8000acc:	fa22 f303 	lsr.w	r3, r2, r3
 8000ad0:	4a0b      	ldr	r2, [pc, #44]	; (8000b00 <HAL_Init+0x70>)
 8000ad2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000ad4:	4a0b      	ldr	r2, [pc, #44]	; (8000b04 <HAL_Init+0x74>)
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ada:	200f      	movs	r0, #15
 8000adc:	f000 f814 	bl	8000b08 <HAL_InitTick>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d001      	beq.n	8000aea <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000ae6:	2301      	movs	r3, #1
 8000ae8:	e002      	b.n	8000af0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000aea:	f7ff ff01 	bl	80008f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000aee:	2300      	movs	r3, #0
}
 8000af0:	4618      	mov	r0, r3
 8000af2:	3708      	adds	r7, #8
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bd80      	pop	{r7, pc}
 8000af8:	58024400 	.word	0x58024400
 8000afc:	08004de0 	.word	0x08004de0
 8000b00:	24000004 	.word	0x24000004
 8000b04:	24000000 	.word	0x24000000

08000b08 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b082      	sub	sp, #8
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000b10:	4b15      	ldr	r3, [pc, #84]	; (8000b68 <HAL_InitTick+0x60>)
 8000b12:	781b      	ldrb	r3, [r3, #0]
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d101      	bne.n	8000b1c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000b18:	2301      	movs	r3, #1
 8000b1a:	e021      	b.n	8000b60 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000b1c:	4b13      	ldr	r3, [pc, #76]	; (8000b6c <HAL_InitTick+0x64>)
 8000b1e:	681a      	ldr	r2, [r3, #0]
 8000b20:	4b11      	ldr	r3, [pc, #68]	; (8000b68 <HAL_InitTick+0x60>)
 8000b22:	781b      	ldrb	r3, [r3, #0]
 8000b24:	4619      	mov	r1, r3
 8000b26:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b2a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b32:	4618      	mov	r0, r3
 8000b34:	f000 f945 	bl	8000dc2 <HAL_SYSTICK_Config>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d001      	beq.n	8000b42 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000b3e:	2301      	movs	r3, #1
 8000b40:	e00e      	b.n	8000b60 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	2b0f      	cmp	r3, #15
 8000b46:	d80a      	bhi.n	8000b5e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b48:	2200      	movs	r2, #0
 8000b4a:	6879      	ldr	r1, [r7, #4]
 8000b4c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b50:	f000 f91d 	bl	8000d8e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b54:	4a06      	ldr	r2, [pc, #24]	; (8000b70 <HAL_InitTick+0x68>)
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	e000      	b.n	8000b60 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000b5e:	2301      	movs	r3, #1
}
 8000b60:	4618      	mov	r0, r3
 8000b62:	3708      	adds	r7, #8
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bd80      	pop	{r7, pc}
 8000b68:	2400000c 	.word	0x2400000c
 8000b6c:	24000000 	.word	0x24000000
 8000b70:	24000008 	.word	0x24000008

08000b74 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000b78:	4b06      	ldr	r3, [pc, #24]	; (8000b94 <HAL_IncTick+0x20>)
 8000b7a:	781b      	ldrb	r3, [r3, #0]
 8000b7c:	461a      	mov	r2, r3
 8000b7e:	4b06      	ldr	r3, [pc, #24]	; (8000b98 <HAL_IncTick+0x24>)
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	4413      	add	r3, r2
 8000b84:	4a04      	ldr	r2, [pc, #16]	; (8000b98 <HAL_IncTick+0x24>)
 8000b86:	6013      	str	r3, [r2, #0]
}
 8000b88:	bf00      	nop
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b90:	4770      	bx	lr
 8000b92:	bf00      	nop
 8000b94:	2400000c 	.word	0x2400000c
 8000b98:	240040ec 	.word	0x240040ec

08000b9c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	af00      	add	r7, sp, #0
  return uwTick;
 8000ba0:	4b03      	ldr	r3, [pc, #12]	; (8000bb0 <HAL_GetTick+0x14>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
}
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bac:	4770      	bx	lr
 8000bae:	bf00      	nop
 8000bb0:	240040ec 	.word	0x240040ec

08000bb4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b084      	sub	sp, #16
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000bbc:	f7ff ffee 	bl	8000b9c <HAL_GetTick>
 8000bc0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000bc6:	68fb      	ldr	r3, [r7, #12]
 8000bc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000bcc:	d005      	beq.n	8000bda <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000bce:	4b0a      	ldr	r3, [pc, #40]	; (8000bf8 <HAL_Delay+0x44>)
 8000bd0:	781b      	ldrb	r3, [r3, #0]
 8000bd2:	461a      	mov	r2, r3
 8000bd4:	68fb      	ldr	r3, [r7, #12]
 8000bd6:	4413      	add	r3, r2
 8000bd8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000bda:	bf00      	nop
 8000bdc:	f7ff ffde 	bl	8000b9c <HAL_GetTick>
 8000be0:	4602      	mov	r2, r0
 8000be2:	68bb      	ldr	r3, [r7, #8]
 8000be4:	1ad3      	subs	r3, r2, r3
 8000be6:	68fa      	ldr	r2, [r7, #12]
 8000be8:	429a      	cmp	r2, r3
 8000bea:	d8f7      	bhi.n	8000bdc <HAL_Delay+0x28>
  {
  }
}
 8000bec:	bf00      	nop
 8000bee:	bf00      	nop
 8000bf0:	3710      	adds	r7, #16
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	2400000c 	.word	0x2400000c

08000bfc <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000c00:	4b03      	ldr	r3, [pc, #12]	; (8000c10 <HAL_GetREVID+0x14>)
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	0c1b      	lsrs	r3, r3, #16
}
 8000c06:	4618      	mov	r0, r3
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0e:	4770      	bx	lr
 8000c10:	5c001000 	.word	0x5c001000

08000c14 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c14:	b480      	push	{r7}
 8000c16:	b085      	sub	sp, #20
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	f003 0307 	and.w	r3, r3, #7
 8000c22:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c24:	4b0b      	ldr	r3, [pc, #44]	; (8000c54 <__NVIC_SetPriorityGrouping+0x40>)
 8000c26:	68db      	ldr	r3, [r3, #12]
 8000c28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c2a:	68ba      	ldr	r2, [r7, #8]
 8000c2c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c30:	4013      	ands	r3, r2
 8000c32:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c34:	68fb      	ldr	r3, [r7, #12]
 8000c36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c38:	68bb      	ldr	r3, [r7, #8]
 8000c3a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000c3c:	4b06      	ldr	r3, [pc, #24]	; (8000c58 <__NVIC_SetPriorityGrouping+0x44>)
 8000c3e:	4313      	orrs	r3, r2
 8000c40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c42:	4a04      	ldr	r2, [pc, #16]	; (8000c54 <__NVIC_SetPriorityGrouping+0x40>)
 8000c44:	68bb      	ldr	r3, [r7, #8]
 8000c46:	60d3      	str	r3, [r2, #12]
}
 8000c48:	bf00      	nop
 8000c4a:	3714      	adds	r7, #20
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c52:	4770      	bx	lr
 8000c54:	e000ed00 	.word	0xe000ed00
 8000c58:	05fa0000 	.word	0x05fa0000

08000c5c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c60:	4b04      	ldr	r3, [pc, #16]	; (8000c74 <__NVIC_GetPriorityGrouping+0x18>)
 8000c62:	68db      	ldr	r3, [r3, #12]
 8000c64:	0a1b      	lsrs	r3, r3, #8
 8000c66:	f003 0307 	and.w	r3, r3, #7
}
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c72:	4770      	bx	lr
 8000c74:	e000ed00 	.word	0xe000ed00

08000c78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	b083      	sub	sp, #12
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	4603      	mov	r3, r0
 8000c80:	6039      	str	r1, [r7, #0]
 8000c82:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000c84:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	db0a      	blt.n	8000ca2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c8c:	683b      	ldr	r3, [r7, #0]
 8000c8e:	b2da      	uxtb	r2, r3
 8000c90:	490c      	ldr	r1, [pc, #48]	; (8000cc4 <__NVIC_SetPriority+0x4c>)
 8000c92:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000c96:	0112      	lsls	r2, r2, #4
 8000c98:	b2d2      	uxtb	r2, r2
 8000c9a:	440b      	add	r3, r1
 8000c9c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ca0:	e00a      	b.n	8000cb8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ca2:	683b      	ldr	r3, [r7, #0]
 8000ca4:	b2da      	uxtb	r2, r3
 8000ca6:	4908      	ldr	r1, [pc, #32]	; (8000cc8 <__NVIC_SetPriority+0x50>)
 8000ca8:	88fb      	ldrh	r3, [r7, #6]
 8000caa:	f003 030f 	and.w	r3, r3, #15
 8000cae:	3b04      	subs	r3, #4
 8000cb0:	0112      	lsls	r2, r2, #4
 8000cb2:	b2d2      	uxtb	r2, r2
 8000cb4:	440b      	add	r3, r1
 8000cb6:	761a      	strb	r2, [r3, #24]
}
 8000cb8:	bf00      	nop
 8000cba:	370c      	adds	r7, #12
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc2:	4770      	bx	lr
 8000cc4:	e000e100 	.word	0xe000e100
 8000cc8:	e000ed00 	.word	0xe000ed00

08000ccc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	b089      	sub	sp, #36	; 0x24
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	60f8      	str	r0, [r7, #12]
 8000cd4:	60b9      	str	r1, [r7, #8]
 8000cd6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cd8:	68fb      	ldr	r3, [r7, #12]
 8000cda:	f003 0307 	and.w	r3, r3, #7
 8000cde:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ce0:	69fb      	ldr	r3, [r7, #28]
 8000ce2:	f1c3 0307 	rsb	r3, r3, #7
 8000ce6:	2b04      	cmp	r3, #4
 8000ce8:	bf28      	it	cs
 8000cea:	2304      	movcs	r3, #4
 8000cec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cee:	69fb      	ldr	r3, [r7, #28]
 8000cf0:	3304      	adds	r3, #4
 8000cf2:	2b06      	cmp	r3, #6
 8000cf4:	d902      	bls.n	8000cfc <NVIC_EncodePriority+0x30>
 8000cf6:	69fb      	ldr	r3, [r7, #28]
 8000cf8:	3b03      	subs	r3, #3
 8000cfa:	e000      	b.n	8000cfe <NVIC_EncodePriority+0x32>
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d00:	f04f 32ff 	mov.w	r2, #4294967295
 8000d04:	69bb      	ldr	r3, [r7, #24]
 8000d06:	fa02 f303 	lsl.w	r3, r2, r3
 8000d0a:	43da      	mvns	r2, r3
 8000d0c:	68bb      	ldr	r3, [r7, #8]
 8000d0e:	401a      	ands	r2, r3
 8000d10:	697b      	ldr	r3, [r7, #20]
 8000d12:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d14:	f04f 31ff 	mov.w	r1, #4294967295
 8000d18:	697b      	ldr	r3, [r7, #20]
 8000d1a:	fa01 f303 	lsl.w	r3, r1, r3
 8000d1e:	43d9      	mvns	r1, r3
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d24:	4313      	orrs	r3, r2
         );
}
 8000d26:	4618      	mov	r0, r3
 8000d28:	3724      	adds	r7, #36	; 0x24
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d30:	4770      	bx	lr
	...

08000d34 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b082      	sub	sp, #8
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	3b01      	subs	r3, #1
 8000d40:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d44:	d301      	bcc.n	8000d4a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d46:	2301      	movs	r3, #1
 8000d48:	e00f      	b.n	8000d6a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d4a:	4a0a      	ldr	r2, [pc, #40]	; (8000d74 <SysTick_Config+0x40>)
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	3b01      	subs	r3, #1
 8000d50:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d52:	210f      	movs	r1, #15
 8000d54:	f04f 30ff 	mov.w	r0, #4294967295
 8000d58:	f7ff ff8e 	bl	8000c78 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d5c:	4b05      	ldr	r3, [pc, #20]	; (8000d74 <SysTick_Config+0x40>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d62:	4b04      	ldr	r3, [pc, #16]	; (8000d74 <SysTick_Config+0x40>)
 8000d64:	2207      	movs	r2, #7
 8000d66:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d68:	2300      	movs	r3, #0
}
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	3708      	adds	r7, #8
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bd80      	pop	{r7, pc}
 8000d72:	bf00      	nop
 8000d74:	e000e010 	.word	0xe000e010

08000d78 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b082      	sub	sp, #8
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d80:	6878      	ldr	r0, [r7, #4]
 8000d82:	f7ff ff47 	bl	8000c14 <__NVIC_SetPriorityGrouping>
}
 8000d86:	bf00      	nop
 8000d88:	3708      	adds	r7, #8
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}

08000d8e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d8e:	b580      	push	{r7, lr}
 8000d90:	b086      	sub	sp, #24
 8000d92:	af00      	add	r7, sp, #0
 8000d94:	4603      	mov	r3, r0
 8000d96:	60b9      	str	r1, [r7, #8]
 8000d98:	607a      	str	r2, [r7, #4]
 8000d9a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000d9c:	f7ff ff5e 	bl	8000c5c <__NVIC_GetPriorityGrouping>
 8000da0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000da2:	687a      	ldr	r2, [r7, #4]
 8000da4:	68b9      	ldr	r1, [r7, #8]
 8000da6:	6978      	ldr	r0, [r7, #20]
 8000da8:	f7ff ff90 	bl	8000ccc <NVIC_EncodePriority>
 8000dac:	4602      	mov	r2, r0
 8000dae:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000db2:	4611      	mov	r1, r2
 8000db4:	4618      	mov	r0, r3
 8000db6:	f7ff ff5f 	bl	8000c78 <__NVIC_SetPriority>
}
 8000dba:	bf00      	nop
 8000dbc:	3718      	adds	r7, #24
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}

08000dc2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000dc2:	b580      	push	{r7, lr}
 8000dc4:	b082      	sub	sp, #8
 8000dc6:	af00      	add	r7, sp, #0
 8000dc8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000dca:	6878      	ldr	r0, [r7, #4]
 8000dcc:	f7ff ffb2 	bl	8000d34 <SysTick_Config>
 8000dd0:	4603      	mov	r3, r0
}
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	3708      	adds	r7, #8
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}
	...

08000ddc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	b089      	sub	sp, #36	; 0x24
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
 8000de4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000de6:	2300      	movs	r3, #0
 8000de8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8000dea:	4b89      	ldr	r3, [pc, #548]	; (8001010 <HAL_GPIO_Init+0x234>)
 8000dec:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000dee:	e194      	b.n	800111a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000df0:	683b      	ldr	r3, [r7, #0]
 8000df2:	681a      	ldr	r2, [r3, #0]
 8000df4:	2101      	movs	r1, #1
 8000df6:	69fb      	ldr	r3, [r7, #28]
 8000df8:	fa01 f303 	lsl.w	r3, r1, r3
 8000dfc:	4013      	ands	r3, r2
 8000dfe:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8000e00:	693b      	ldr	r3, [r7, #16]
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	f000 8186 	beq.w	8001114 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	685b      	ldr	r3, [r3, #4]
 8000e0c:	2b01      	cmp	r3, #1
 8000e0e:	d00b      	beq.n	8000e28 <HAL_GPIO_Init+0x4c>
 8000e10:	683b      	ldr	r3, [r7, #0]
 8000e12:	685b      	ldr	r3, [r3, #4]
 8000e14:	2b02      	cmp	r3, #2
 8000e16:	d007      	beq.n	8000e28 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e18:	683b      	ldr	r3, [r7, #0]
 8000e1a:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e1c:	2b11      	cmp	r3, #17
 8000e1e:	d003      	beq.n	8000e28 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e20:	683b      	ldr	r3, [r7, #0]
 8000e22:	685b      	ldr	r3, [r3, #4]
 8000e24:	2b12      	cmp	r3, #18
 8000e26:	d130      	bne.n	8000e8a <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	689b      	ldr	r3, [r3, #8]
 8000e2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000e2e:	69fb      	ldr	r3, [r7, #28]
 8000e30:	005b      	lsls	r3, r3, #1
 8000e32:	2203      	movs	r2, #3
 8000e34:	fa02 f303 	lsl.w	r3, r2, r3
 8000e38:	43db      	mvns	r3, r3
 8000e3a:	69ba      	ldr	r2, [r7, #24]
 8000e3c:	4013      	ands	r3, r2
 8000e3e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e40:	683b      	ldr	r3, [r7, #0]
 8000e42:	68da      	ldr	r2, [r3, #12]
 8000e44:	69fb      	ldr	r3, [r7, #28]
 8000e46:	005b      	lsls	r3, r3, #1
 8000e48:	fa02 f303 	lsl.w	r3, r2, r3
 8000e4c:	69ba      	ldr	r2, [r7, #24]
 8000e4e:	4313      	orrs	r3, r2
 8000e50:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	69ba      	ldr	r2, [r7, #24]
 8000e56:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	685b      	ldr	r3, [r3, #4]
 8000e5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000e5e:	2201      	movs	r2, #1
 8000e60:	69fb      	ldr	r3, [r7, #28]
 8000e62:	fa02 f303 	lsl.w	r3, r2, r3
 8000e66:	43db      	mvns	r3, r3
 8000e68:	69ba      	ldr	r2, [r7, #24]
 8000e6a:	4013      	ands	r3, r2
 8000e6c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000e6e:	683b      	ldr	r3, [r7, #0]
 8000e70:	685b      	ldr	r3, [r3, #4]
 8000e72:	091b      	lsrs	r3, r3, #4
 8000e74:	f003 0201 	and.w	r2, r3, #1
 8000e78:	69fb      	ldr	r3, [r7, #28]
 8000e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7e:	69ba      	ldr	r2, [r7, #24]
 8000e80:	4313      	orrs	r3, r2
 8000e82:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	69ba      	ldr	r2, [r7, #24]
 8000e88:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	68db      	ldr	r3, [r3, #12]
 8000e8e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000e90:	69fb      	ldr	r3, [r7, #28]
 8000e92:	005b      	lsls	r3, r3, #1
 8000e94:	2203      	movs	r2, #3
 8000e96:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9a:	43db      	mvns	r3, r3
 8000e9c:	69ba      	ldr	r2, [r7, #24]
 8000e9e:	4013      	ands	r3, r2
 8000ea0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ea2:	683b      	ldr	r3, [r7, #0]
 8000ea4:	689a      	ldr	r2, [r3, #8]
 8000ea6:	69fb      	ldr	r3, [r7, #28]
 8000ea8:	005b      	lsls	r3, r3, #1
 8000eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8000eae:	69ba      	ldr	r2, [r7, #24]
 8000eb0:	4313      	orrs	r3, r2
 8000eb2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	69ba      	ldr	r2, [r7, #24]
 8000eb8:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000eba:	683b      	ldr	r3, [r7, #0]
 8000ebc:	685b      	ldr	r3, [r3, #4]
 8000ebe:	2b02      	cmp	r3, #2
 8000ec0:	d003      	beq.n	8000eca <HAL_GPIO_Init+0xee>
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	685b      	ldr	r3, [r3, #4]
 8000ec6:	2b12      	cmp	r3, #18
 8000ec8:	d123      	bne.n	8000f12 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000eca:	69fb      	ldr	r3, [r7, #28]
 8000ecc:	08da      	lsrs	r2, r3, #3
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	3208      	adds	r2, #8
 8000ed2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ed6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000ed8:	69fb      	ldr	r3, [r7, #28]
 8000eda:	f003 0307 	and.w	r3, r3, #7
 8000ede:	009b      	lsls	r3, r3, #2
 8000ee0:	220f      	movs	r2, #15
 8000ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee6:	43db      	mvns	r3, r3
 8000ee8:	69ba      	ldr	r2, [r7, #24]
 8000eea:	4013      	ands	r3, r2
 8000eec:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	691a      	ldr	r2, [r3, #16]
 8000ef2:	69fb      	ldr	r3, [r7, #28]
 8000ef4:	f003 0307 	and.w	r3, r3, #7
 8000ef8:	009b      	lsls	r3, r3, #2
 8000efa:	fa02 f303 	lsl.w	r3, r2, r3
 8000efe:	69ba      	ldr	r2, [r7, #24]
 8000f00:	4313      	orrs	r3, r2
 8000f02:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f04:	69fb      	ldr	r3, [r7, #28]
 8000f06:	08da      	lsrs	r2, r3, #3
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	3208      	adds	r2, #8
 8000f0c:	69b9      	ldr	r1, [r7, #24]
 8000f0e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000f18:	69fb      	ldr	r3, [r7, #28]
 8000f1a:	005b      	lsls	r3, r3, #1
 8000f1c:	2203      	movs	r2, #3
 8000f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f22:	43db      	mvns	r3, r3
 8000f24:	69ba      	ldr	r2, [r7, #24]
 8000f26:	4013      	ands	r3, r2
 8000f28:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f2a:	683b      	ldr	r3, [r7, #0]
 8000f2c:	685b      	ldr	r3, [r3, #4]
 8000f2e:	f003 0203 	and.w	r2, r3, #3
 8000f32:	69fb      	ldr	r3, [r7, #28]
 8000f34:	005b      	lsls	r3, r3, #1
 8000f36:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3a:	69ba      	ldr	r2, [r7, #24]
 8000f3c:	4313      	orrs	r3, r2
 8000f3e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	69ba      	ldr	r2, [r7, #24]
 8000f44:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f46:	683b      	ldr	r3, [r7, #0]
 8000f48:	685b      	ldr	r3, [r3, #4]
 8000f4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	f000 80e0 	beq.w	8001114 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f54:	4b2f      	ldr	r3, [pc, #188]	; (8001014 <HAL_GPIO_Init+0x238>)
 8000f56:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000f5a:	4a2e      	ldr	r2, [pc, #184]	; (8001014 <HAL_GPIO_Init+0x238>)
 8000f5c:	f043 0302 	orr.w	r3, r3, #2
 8000f60:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000f64:	4b2b      	ldr	r3, [pc, #172]	; (8001014 <HAL_GPIO_Init+0x238>)
 8000f66:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000f6a:	f003 0302 	and.w	r3, r3, #2
 8000f6e:	60fb      	str	r3, [r7, #12]
 8000f70:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f72:	4a29      	ldr	r2, [pc, #164]	; (8001018 <HAL_GPIO_Init+0x23c>)
 8000f74:	69fb      	ldr	r3, [r7, #28]
 8000f76:	089b      	lsrs	r3, r3, #2
 8000f78:	3302      	adds	r3, #2
 8000f7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000f80:	69fb      	ldr	r3, [r7, #28]
 8000f82:	f003 0303 	and.w	r3, r3, #3
 8000f86:	009b      	lsls	r3, r3, #2
 8000f88:	220f      	movs	r2, #15
 8000f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f8e:	43db      	mvns	r3, r3
 8000f90:	69ba      	ldr	r2, [r7, #24]
 8000f92:	4013      	ands	r3, r2
 8000f94:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	4a20      	ldr	r2, [pc, #128]	; (800101c <HAL_GPIO_Init+0x240>)
 8000f9a:	4293      	cmp	r3, r2
 8000f9c:	d052      	beq.n	8001044 <HAL_GPIO_Init+0x268>
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	4a1f      	ldr	r2, [pc, #124]	; (8001020 <HAL_GPIO_Init+0x244>)
 8000fa2:	4293      	cmp	r3, r2
 8000fa4:	d031      	beq.n	800100a <HAL_GPIO_Init+0x22e>
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	4a1e      	ldr	r2, [pc, #120]	; (8001024 <HAL_GPIO_Init+0x248>)
 8000faa:	4293      	cmp	r3, r2
 8000fac:	d02b      	beq.n	8001006 <HAL_GPIO_Init+0x22a>
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	4a1d      	ldr	r2, [pc, #116]	; (8001028 <HAL_GPIO_Init+0x24c>)
 8000fb2:	4293      	cmp	r3, r2
 8000fb4:	d025      	beq.n	8001002 <HAL_GPIO_Init+0x226>
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	4a1c      	ldr	r2, [pc, #112]	; (800102c <HAL_GPIO_Init+0x250>)
 8000fba:	4293      	cmp	r3, r2
 8000fbc:	d01f      	beq.n	8000ffe <HAL_GPIO_Init+0x222>
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	4a1b      	ldr	r2, [pc, #108]	; (8001030 <HAL_GPIO_Init+0x254>)
 8000fc2:	4293      	cmp	r3, r2
 8000fc4:	d019      	beq.n	8000ffa <HAL_GPIO_Init+0x21e>
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	4a1a      	ldr	r2, [pc, #104]	; (8001034 <HAL_GPIO_Init+0x258>)
 8000fca:	4293      	cmp	r3, r2
 8000fcc:	d013      	beq.n	8000ff6 <HAL_GPIO_Init+0x21a>
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	4a19      	ldr	r2, [pc, #100]	; (8001038 <HAL_GPIO_Init+0x25c>)
 8000fd2:	4293      	cmp	r3, r2
 8000fd4:	d00d      	beq.n	8000ff2 <HAL_GPIO_Init+0x216>
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	4a18      	ldr	r2, [pc, #96]	; (800103c <HAL_GPIO_Init+0x260>)
 8000fda:	4293      	cmp	r3, r2
 8000fdc:	d007      	beq.n	8000fee <HAL_GPIO_Init+0x212>
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	4a17      	ldr	r2, [pc, #92]	; (8001040 <HAL_GPIO_Init+0x264>)
 8000fe2:	4293      	cmp	r3, r2
 8000fe4:	d101      	bne.n	8000fea <HAL_GPIO_Init+0x20e>
 8000fe6:	2309      	movs	r3, #9
 8000fe8:	e02d      	b.n	8001046 <HAL_GPIO_Init+0x26a>
 8000fea:	230a      	movs	r3, #10
 8000fec:	e02b      	b.n	8001046 <HAL_GPIO_Init+0x26a>
 8000fee:	2308      	movs	r3, #8
 8000ff0:	e029      	b.n	8001046 <HAL_GPIO_Init+0x26a>
 8000ff2:	2307      	movs	r3, #7
 8000ff4:	e027      	b.n	8001046 <HAL_GPIO_Init+0x26a>
 8000ff6:	2306      	movs	r3, #6
 8000ff8:	e025      	b.n	8001046 <HAL_GPIO_Init+0x26a>
 8000ffa:	2305      	movs	r3, #5
 8000ffc:	e023      	b.n	8001046 <HAL_GPIO_Init+0x26a>
 8000ffe:	2304      	movs	r3, #4
 8001000:	e021      	b.n	8001046 <HAL_GPIO_Init+0x26a>
 8001002:	2303      	movs	r3, #3
 8001004:	e01f      	b.n	8001046 <HAL_GPIO_Init+0x26a>
 8001006:	2302      	movs	r3, #2
 8001008:	e01d      	b.n	8001046 <HAL_GPIO_Init+0x26a>
 800100a:	2301      	movs	r3, #1
 800100c:	e01b      	b.n	8001046 <HAL_GPIO_Init+0x26a>
 800100e:	bf00      	nop
 8001010:	58000080 	.word	0x58000080
 8001014:	58024400 	.word	0x58024400
 8001018:	58000400 	.word	0x58000400
 800101c:	58020000 	.word	0x58020000
 8001020:	58020400 	.word	0x58020400
 8001024:	58020800 	.word	0x58020800
 8001028:	58020c00 	.word	0x58020c00
 800102c:	58021000 	.word	0x58021000
 8001030:	58021400 	.word	0x58021400
 8001034:	58021800 	.word	0x58021800
 8001038:	58021c00 	.word	0x58021c00
 800103c:	58022000 	.word	0x58022000
 8001040:	58022400 	.word	0x58022400
 8001044:	2300      	movs	r3, #0
 8001046:	69fa      	ldr	r2, [r7, #28]
 8001048:	f002 0203 	and.w	r2, r2, #3
 800104c:	0092      	lsls	r2, r2, #2
 800104e:	4093      	lsls	r3, r2
 8001050:	69ba      	ldr	r2, [r7, #24]
 8001052:	4313      	orrs	r3, r2
 8001054:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001056:	4938      	ldr	r1, [pc, #224]	; (8001138 <HAL_GPIO_Init+0x35c>)
 8001058:	69fb      	ldr	r3, [r7, #28]
 800105a:	089b      	lsrs	r3, r3, #2
 800105c:	3302      	adds	r3, #2
 800105e:	69ba      	ldr	r2, [r7, #24]
 8001060:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001064:	697b      	ldr	r3, [r7, #20]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800106a:	693b      	ldr	r3, [r7, #16]
 800106c:	43db      	mvns	r3, r3
 800106e:	69ba      	ldr	r2, [r7, #24]
 8001070:	4013      	ands	r3, r2
 8001072:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	685b      	ldr	r3, [r3, #4]
 8001078:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800107c:	2b00      	cmp	r3, #0
 800107e:	d003      	beq.n	8001088 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001080:	69ba      	ldr	r2, [r7, #24]
 8001082:	693b      	ldr	r3, [r7, #16]
 8001084:	4313      	orrs	r3, r2
 8001086:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001088:	697b      	ldr	r3, [r7, #20]
 800108a:	69ba      	ldr	r2, [r7, #24]
 800108c:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 800108e:	697b      	ldr	r3, [r7, #20]
 8001090:	685b      	ldr	r3, [r3, #4]
 8001092:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001094:	693b      	ldr	r3, [r7, #16]
 8001096:	43db      	mvns	r3, r3
 8001098:	69ba      	ldr	r2, [r7, #24]
 800109a:	4013      	ands	r3, r2
 800109c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800109e:	683b      	ldr	r3, [r7, #0]
 80010a0:	685b      	ldr	r3, [r3, #4]
 80010a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d003      	beq.n	80010b2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80010aa:	69ba      	ldr	r2, [r7, #24]
 80010ac:	693b      	ldr	r3, [r7, #16]
 80010ae:	4313      	orrs	r3, r2
 80010b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80010b2:	697b      	ldr	r3, [r7, #20]
 80010b4:	69ba      	ldr	r2, [r7, #24]
 80010b6:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80010b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80010c0:	693b      	ldr	r3, [r7, #16]
 80010c2:	43db      	mvns	r3, r3
 80010c4:	69ba      	ldr	r2, [r7, #24]
 80010c6:	4013      	ands	r3, r2
 80010c8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	685b      	ldr	r3, [r3, #4]
 80010ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d003      	beq.n	80010de <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 80010d6:	69ba      	ldr	r2, [r7, #24]
 80010d8:	693b      	ldr	r3, [r7, #16]
 80010da:	4313      	orrs	r3, r2
 80010dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80010de:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80010e2:	69bb      	ldr	r3, [r7, #24]
 80010e4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80010e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010ea:	685b      	ldr	r3, [r3, #4]
 80010ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80010ee:	693b      	ldr	r3, [r7, #16]
 80010f0:	43db      	mvns	r3, r3
 80010f2:	69ba      	ldr	r2, [r7, #24]
 80010f4:	4013      	ands	r3, r2
 80010f6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	685b      	ldr	r3, [r3, #4]
 80010fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001100:	2b00      	cmp	r3, #0
 8001102:	d003      	beq.n	800110c <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8001104:	69ba      	ldr	r2, [r7, #24]
 8001106:	693b      	ldr	r3, [r7, #16]
 8001108:	4313      	orrs	r3, r2
 800110a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800110c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001110:	69bb      	ldr	r3, [r7, #24]
 8001112:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8001114:	69fb      	ldr	r3, [r7, #28]
 8001116:	3301      	adds	r3, #1
 8001118:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	681a      	ldr	r2, [r3, #0]
 800111e:	69fb      	ldr	r3, [r7, #28]
 8001120:	fa22 f303 	lsr.w	r3, r2, r3
 8001124:	2b00      	cmp	r3, #0
 8001126:	f47f ae63 	bne.w	8000df0 <HAL_GPIO_Init+0x14>
  }
}
 800112a:	bf00      	nop
 800112c:	bf00      	nop
 800112e:	3724      	adds	r7, #36	; 0x24
 8001130:	46bd      	mov	sp, r7
 8001132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001136:	4770      	bx	lr
 8001138:	58000400 	.word	0x58000400

0800113c <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 800113c:	b480      	push	{r7}
 800113e:	b083      	sub	sp, #12
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8001144:	4a08      	ldr	r2, [pc, #32]	; (8001168 <HAL_HSEM_FastTake+0x2c>)
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	3320      	adds	r3, #32
 800114a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800114e:	4a07      	ldr	r2, [pc, #28]	; (800116c <HAL_HSEM_FastTake+0x30>)
 8001150:	4293      	cmp	r3, r2
 8001152:	d101      	bne.n	8001158 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8001154:	2300      	movs	r3, #0
 8001156:	e000      	b.n	800115a <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8001158:	2301      	movs	r3, #1
}
 800115a:	4618      	mov	r0, r3
 800115c:	370c      	adds	r7, #12
 800115e:	46bd      	mov	sp, r7
 8001160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001164:	4770      	bx	lr
 8001166:	bf00      	nop
 8001168:	58026400 	.word	0x58026400
 800116c:	80000300 	.word	0x80000300

08001170 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8001170:	b480      	push	{r7}
 8001172:	b083      	sub	sp, #12
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
 8001178:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 800117a:	4906      	ldr	r1, [pc, #24]	; (8001194 <HAL_HSEM_Release+0x24>)
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8001188:	bf00      	nop
 800118a:	370c      	adds	r7, #12
 800118c:	46bd      	mov	sp, r7
 800118e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001192:	4770      	bx	lr
 8001194:	58026400 	.word	0x58026400

08001198 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b082      	sub	sp, #8
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d101      	bne.n	80011aa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80011a6:	2301      	movs	r3, #1
 80011a8:	e07f      	b.n	80012aa <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80011b0:	b2db      	uxtb	r3, r3
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d106      	bne.n	80011c4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	2200      	movs	r2, #0
 80011ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80011be:	6878      	ldr	r0, [r7, #4]
 80011c0:	f7ff fbb4 	bl	800092c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	2224      	movs	r2, #36	; 0x24
 80011c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	681a      	ldr	r2, [r3, #0]
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	f022 0201 	bic.w	r2, r2, #1
 80011da:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	685a      	ldr	r2, [r3, #4]
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80011e8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	689a      	ldr	r2, [r3, #8]
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80011f8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	68db      	ldr	r3, [r3, #12]
 80011fe:	2b01      	cmp	r3, #1
 8001200:	d107      	bne.n	8001212 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	689a      	ldr	r2, [r3, #8]
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800120e:	609a      	str	r2, [r3, #8]
 8001210:	e006      	b.n	8001220 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	689a      	ldr	r2, [r3, #8]
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800121e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	68db      	ldr	r3, [r3, #12]
 8001224:	2b02      	cmp	r3, #2
 8001226:	d104      	bne.n	8001232 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001230:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	6859      	ldr	r1, [r3, #4]
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681a      	ldr	r2, [r3, #0]
 800123c:	4b1d      	ldr	r3, [pc, #116]	; (80012b4 <HAL_I2C_Init+0x11c>)
 800123e:	430b      	orrs	r3, r1
 8001240:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	68da      	ldr	r2, [r3, #12]
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001250:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	691a      	ldr	r2, [r3, #16]
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	695b      	ldr	r3, [r3, #20]
 800125a:	ea42 0103 	orr.w	r1, r2, r3
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	699b      	ldr	r3, [r3, #24]
 8001262:	021a      	lsls	r2, r3, #8
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	430a      	orrs	r2, r1
 800126a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	69d9      	ldr	r1, [r3, #28]
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	6a1a      	ldr	r2, [r3, #32]
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	430a      	orrs	r2, r1
 800127a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	681a      	ldr	r2, [r3, #0]
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	f042 0201 	orr.w	r2, r2, #1
 800128a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	2200      	movs	r2, #0
 8001290:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	2220      	movs	r2, #32
 8001296:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	2200      	movs	r2, #0
 800129e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	2200      	movs	r2, #0
 80012a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80012a8:	2300      	movs	r3, #0
}
 80012aa:	4618      	mov	r0, r3
 80012ac:	3708      	adds	r7, #8
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	02008000 	.word	0x02008000

080012b8 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                          uint32_t Timeout)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b088      	sub	sp, #32
 80012bc:	af02      	add	r7, sp, #8
 80012be:	60f8      	str	r0, [r7, #12]
 80012c0:	607a      	str	r2, [r7, #4]
 80012c2:	461a      	mov	r2, r3
 80012c4:	460b      	mov	r3, r1
 80012c6:	817b      	strh	r3, [r7, #10]
 80012c8:	4613      	mov	r3, r2
 80012ca:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80012d2:	b2db      	uxtb	r3, r3
 80012d4:	2b20      	cmp	r3, #32
 80012d6:	f040 80da 	bne.w	800148e <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80012e0:	2b01      	cmp	r3, #1
 80012e2:	d101      	bne.n	80012e8 <HAL_I2C_Master_Transmit+0x30>
 80012e4:	2302      	movs	r3, #2
 80012e6:	e0d3      	b.n	8001490 <HAL_I2C_Master_Transmit+0x1d8>
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	2201      	movs	r2, #1
 80012ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80012f0:	f7ff fc54 	bl	8000b9c <HAL_GetTick>
 80012f4:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80012f6:	697b      	ldr	r3, [r7, #20]
 80012f8:	9300      	str	r3, [sp, #0]
 80012fa:	2319      	movs	r3, #25
 80012fc:	2201      	movs	r2, #1
 80012fe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001302:	68f8      	ldr	r0, [r7, #12]
 8001304:	f000 f8f0 	bl	80014e8 <I2C_WaitOnFlagUntilTimeout>
 8001308:	4603      	mov	r3, r0
 800130a:	2b00      	cmp	r3, #0
 800130c:	d001      	beq.n	8001312 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800130e:	2301      	movs	r3, #1
 8001310:	e0be      	b.n	8001490 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	2221      	movs	r2, #33	; 0x21
 8001316:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	2210      	movs	r2, #16
 800131e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	2200      	movs	r2, #0
 8001326:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	687a      	ldr	r2, [r7, #4]
 800132c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	893a      	ldrh	r2, [r7, #8]
 8001332:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	2200      	movs	r2, #0
 8001338:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800133e:	b29b      	uxth	r3, r3
 8001340:	2bff      	cmp	r3, #255	; 0xff
 8001342:	d90e      	bls.n	8001362 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	22ff      	movs	r2, #255	; 0xff
 8001348:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800134e:	b2da      	uxtb	r2, r3
 8001350:	8979      	ldrh	r1, [r7, #10]
 8001352:	4b51      	ldr	r3, [pc, #324]	; (8001498 <HAL_I2C_Master_Transmit+0x1e0>)
 8001354:	9300      	str	r3, [sp, #0]
 8001356:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800135a:	68f8      	ldr	r0, [r7, #12]
 800135c:	f000 f9e6 	bl	800172c <I2C_TransferConfig>
 8001360:	e06c      	b.n	800143c <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001366:	b29a      	uxth	r2, r3
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001370:	b2da      	uxtb	r2, r3
 8001372:	8979      	ldrh	r1, [r7, #10]
 8001374:	4b48      	ldr	r3, [pc, #288]	; (8001498 <HAL_I2C_Master_Transmit+0x1e0>)
 8001376:	9300      	str	r3, [sp, #0]
 8001378:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800137c:	68f8      	ldr	r0, [r7, #12]
 800137e:	f000 f9d5 	bl	800172c <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8001382:	e05b      	b.n	800143c <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001384:	697a      	ldr	r2, [r7, #20]
 8001386:	6a39      	ldr	r1, [r7, #32]
 8001388:	68f8      	ldr	r0, [r7, #12]
 800138a:	f000 f8ed 	bl	8001568 <I2C_WaitOnTXISFlagUntilTimeout>
 800138e:	4603      	mov	r3, r0
 8001390:	2b00      	cmp	r3, #0
 8001392:	d001      	beq.n	8001398 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8001394:	2301      	movs	r3, #1
 8001396:	e07b      	b.n	8001490 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800139c:	781a      	ldrb	r2, [r3, #0]
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013a8:	1c5a      	adds	r2, r3, #1
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80013b2:	b29b      	uxth	r3, r3
 80013b4:	3b01      	subs	r3, #1
 80013b6:	b29a      	uxth	r2, r3
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80013c0:	3b01      	subs	r3, #1
 80013c2:	b29a      	uxth	r2, r3
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80013cc:	b29b      	uxth	r3, r3
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d034      	beq.n	800143c <HAL_I2C_Master_Transmit+0x184>
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d130      	bne.n	800143c <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80013da:	697b      	ldr	r3, [r7, #20]
 80013dc:	9300      	str	r3, [sp, #0]
 80013de:	6a3b      	ldr	r3, [r7, #32]
 80013e0:	2200      	movs	r2, #0
 80013e2:	2180      	movs	r1, #128	; 0x80
 80013e4:	68f8      	ldr	r0, [r7, #12]
 80013e6:	f000 f87f 	bl	80014e8 <I2C_WaitOnFlagUntilTimeout>
 80013ea:	4603      	mov	r3, r0
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d001      	beq.n	80013f4 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80013f0:	2301      	movs	r3, #1
 80013f2:	e04d      	b.n	8001490 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80013f8:	b29b      	uxth	r3, r3
 80013fa:	2bff      	cmp	r3, #255	; 0xff
 80013fc:	d90e      	bls.n	800141c <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	22ff      	movs	r2, #255	; 0xff
 8001402:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001408:	b2da      	uxtb	r2, r3
 800140a:	8979      	ldrh	r1, [r7, #10]
 800140c:	2300      	movs	r3, #0
 800140e:	9300      	str	r3, [sp, #0]
 8001410:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001414:	68f8      	ldr	r0, [r7, #12]
 8001416:	f000 f989 	bl	800172c <I2C_TransferConfig>
 800141a:	e00f      	b.n	800143c <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001420:	b29a      	uxth	r2, r3
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800142a:	b2da      	uxtb	r2, r3
 800142c:	8979      	ldrh	r1, [r7, #10]
 800142e:	2300      	movs	r3, #0
 8001430:	9300      	str	r3, [sp, #0]
 8001432:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001436:	68f8      	ldr	r0, [r7, #12]
 8001438:	f000 f978 	bl	800172c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001440:	b29b      	uxth	r3, r3
 8001442:	2b00      	cmp	r3, #0
 8001444:	d19e      	bne.n	8001384 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001446:	697a      	ldr	r2, [r7, #20]
 8001448:	6a39      	ldr	r1, [r7, #32]
 800144a:	68f8      	ldr	r0, [r7, #12]
 800144c:	f000 f8cc 	bl	80015e8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001450:	4603      	mov	r3, r0
 8001452:	2b00      	cmp	r3, #0
 8001454:	d001      	beq.n	800145a <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8001456:	2301      	movs	r3, #1
 8001458:	e01a      	b.n	8001490 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	2220      	movs	r2, #32
 8001460:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	6859      	ldr	r1, [r3, #4]
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	681a      	ldr	r2, [r3, #0]
 800146c:	4b0b      	ldr	r3, [pc, #44]	; (800149c <HAL_I2C_Master_Transmit+0x1e4>)
 800146e:	400b      	ands	r3, r1
 8001470:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	2220      	movs	r2, #32
 8001476:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	2200      	movs	r2, #0
 800147e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	2200      	movs	r2, #0
 8001486:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800148a:	2300      	movs	r3, #0
 800148c:	e000      	b.n	8001490 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800148e:	2302      	movs	r3, #2
  }
}
 8001490:	4618      	mov	r0, r3
 8001492:	3718      	adds	r7, #24
 8001494:	46bd      	mov	sp, r7
 8001496:	bd80      	pop	{r7, pc}
 8001498:	80002000 	.word	0x80002000
 800149c:	fe00e800 	.word	0xfe00e800

080014a0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80014a0:	b480      	push	{r7}
 80014a2:	b083      	sub	sp, #12
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	699b      	ldr	r3, [r3, #24]
 80014ae:	f003 0302 	and.w	r3, r3, #2
 80014b2:	2b02      	cmp	r3, #2
 80014b4:	d103      	bne.n	80014be <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	2200      	movs	r2, #0
 80014bc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	699b      	ldr	r3, [r3, #24]
 80014c4:	f003 0301 	and.w	r3, r3, #1
 80014c8:	2b01      	cmp	r3, #1
 80014ca:	d007      	beq.n	80014dc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	699a      	ldr	r2, [r3, #24]
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f042 0201 	orr.w	r2, r2, #1
 80014da:	619a      	str	r2, [r3, #24]
  }
}
 80014dc:	bf00      	nop
 80014de:	370c      	adds	r7, #12
 80014e0:	46bd      	mov	sp, r7
 80014e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e6:	4770      	bx	lr

080014e8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b084      	sub	sp, #16
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	60f8      	str	r0, [r7, #12]
 80014f0:	60b9      	str	r1, [r7, #8]
 80014f2:	603b      	str	r3, [r7, #0]
 80014f4:	4613      	mov	r3, r2
 80014f6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80014f8:	e022      	b.n	8001540 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80014fa:	683b      	ldr	r3, [r7, #0]
 80014fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001500:	d01e      	beq.n	8001540 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001502:	f7ff fb4b 	bl	8000b9c <HAL_GetTick>
 8001506:	4602      	mov	r2, r0
 8001508:	69bb      	ldr	r3, [r7, #24]
 800150a:	1ad3      	subs	r3, r2, r3
 800150c:	683a      	ldr	r2, [r7, #0]
 800150e:	429a      	cmp	r2, r3
 8001510:	d302      	bcc.n	8001518 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	2b00      	cmp	r3, #0
 8001516:	d113      	bne.n	8001540 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800151c:	f043 0220 	orr.w	r2, r3, #32
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	2220      	movs	r2, #32
 8001528:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	2200      	movs	r2, #0
 8001530:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	2200      	movs	r2, #0
 8001538:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800153c:	2301      	movs	r3, #1
 800153e:	e00f      	b.n	8001560 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	699a      	ldr	r2, [r3, #24]
 8001546:	68bb      	ldr	r3, [r7, #8]
 8001548:	4013      	ands	r3, r2
 800154a:	68ba      	ldr	r2, [r7, #8]
 800154c:	429a      	cmp	r2, r3
 800154e:	bf0c      	ite	eq
 8001550:	2301      	moveq	r3, #1
 8001552:	2300      	movne	r3, #0
 8001554:	b2db      	uxtb	r3, r3
 8001556:	461a      	mov	r2, r3
 8001558:	79fb      	ldrb	r3, [r7, #7]
 800155a:	429a      	cmp	r2, r3
 800155c:	d0cd      	beq.n	80014fa <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800155e:	2300      	movs	r3, #0
}
 8001560:	4618      	mov	r0, r3
 8001562:	3710      	adds	r7, #16
 8001564:	46bd      	mov	sp, r7
 8001566:	bd80      	pop	{r7, pc}

08001568 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b084      	sub	sp, #16
 800156c:	af00      	add	r7, sp, #0
 800156e:	60f8      	str	r0, [r7, #12]
 8001570:	60b9      	str	r1, [r7, #8]
 8001572:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001574:	e02c      	b.n	80015d0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001576:	687a      	ldr	r2, [r7, #4]
 8001578:	68b9      	ldr	r1, [r7, #8]
 800157a:	68f8      	ldr	r0, [r7, #12]
 800157c:	f000 f870 	bl	8001660 <I2C_IsAcknowledgeFailed>
 8001580:	4603      	mov	r3, r0
 8001582:	2b00      	cmp	r3, #0
 8001584:	d001      	beq.n	800158a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001586:	2301      	movs	r3, #1
 8001588:	e02a      	b.n	80015e0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800158a:	68bb      	ldr	r3, [r7, #8]
 800158c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001590:	d01e      	beq.n	80015d0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001592:	f7ff fb03 	bl	8000b9c <HAL_GetTick>
 8001596:	4602      	mov	r2, r0
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	1ad3      	subs	r3, r2, r3
 800159c:	68ba      	ldr	r2, [r7, #8]
 800159e:	429a      	cmp	r2, r3
 80015a0:	d302      	bcc.n	80015a8 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80015a2:	68bb      	ldr	r3, [r7, #8]
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d113      	bne.n	80015d0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015ac:	f043 0220 	orr.w	r2, r3, #32
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	2220      	movs	r2, #32
 80015b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	2200      	movs	r2, #0
 80015c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	2200      	movs	r2, #0
 80015c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80015cc:	2301      	movs	r3, #1
 80015ce:	e007      	b.n	80015e0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	699b      	ldr	r3, [r3, #24]
 80015d6:	f003 0302 	and.w	r3, r3, #2
 80015da:	2b02      	cmp	r3, #2
 80015dc:	d1cb      	bne.n	8001576 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80015de:	2300      	movs	r3, #0
}
 80015e0:	4618      	mov	r0, r3
 80015e2:	3710      	adds	r7, #16
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bd80      	pop	{r7, pc}

080015e8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b084      	sub	sp, #16
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	60f8      	str	r0, [r7, #12]
 80015f0:	60b9      	str	r1, [r7, #8]
 80015f2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80015f4:	e028      	b.n	8001648 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80015f6:	687a      	ldr	r2, [r7, #4]
 80015f8:	68b9      	ldr	r1, [r7, #8]
 80015fa:	68f8      	ldr	r0, [r7, #12]
 80015fc:	f000 f830 	bl	8001660 <I2C_IsAcknowledgeFailed>
 8001600:	4603      	mov	r3, r0
 8001602:	2b00      	cmp	r3, #0
 8001604:	d001      	beq.n	800160a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001606:	2301      	movs	r3, #1
 8001608:	e026      	b.n	8001658 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800160a:	f7ff fac7 	bl	8000b9c <HAL_GetTick>
 800160e:	4602      	mov	r2, r0
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	1ad3      	subs	r3, r2, r3
 8001614:	68ba      	ldr	r2, [r7, #8]
 8001616:	429a      	cmp	r2, r3
 8001618:	d302      	bcc.n	8001620 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800161a:	68bb      	ldr	r3, [r7, #8]
 800161c:	2b00      	cmp	r3, #0
 800161e:	d113      	bne.n	8001648 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001624:	f043 0220 	orr.w	r2, r3, #32
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	2220      	movs	r2, #32
 8001630:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	2200      	movs	r2, #0
 8001638:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	2200      	movs	r2, #0
 8001640:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8001644:	2301      	movs	r3, #1
 8001646:	e007      	b.n	8001658 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	699b      	ldr	r3, [r3, #24]
 800164e:	f003 0320 	and.w	r3, r3, #32
 8001652:	2b20      	cmp	r3, #32
 8001654:	d1cf      	bne.n	80015f6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001656:	2300      	movs	r3, #0
}
 8001658:	4618      	mov	r0, r3
 800165a:	3710      	adds	r7, #16
 800165c:	46bd      	mov	sp, r7
 800165e:	bd80      	pop	{r7, pc}

08001660 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b084      	sub	sp, #16
 8001664:	af00      	add	r7, sp, #0
 8001666:	60f8      	str	r0, [r7, #12]
 8001668:	60b9      	str	r1, [r7, #8]
 800166a:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	699b      	ldr	r3, [r3, #24]
 8001672:	f003 0310 	and.w	r3, r3, #16
 8001676:	2b10      	cmp	r3, #16
 8001678:	d151      	bne.n	800171e <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800167a:	e022      	b.n	80016c2 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800167c:	68bb      	ldr	r3, [r7, #8]
 800167e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001682:	d01e      	beq.n	80016c2 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001684:	f7ff fa8a 	bl	8000b9c <HAL_GetTick>
 8001688:	4602      	mov	r2, r0
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	1ad3      	subs	r3, r2, r3
 800168e:	68ba      	ldr	r2, [r7, #8]
 8001690:	429a      	cmp	r2, r3
 8001692:	d302      	bcc.n	800169a <I2C_IsAcknowledgeFailed+0x3a>
 8001694:	68bb      	ldr	r3, [r7, #8]
 8001696:	2b00      	cmp	r3, #0
 8001698:	d113      	bne.n	80016c2 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800169e:	f043 0220 	orr.w	r2, r3, #32
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	2220      	movs	r2, #32
 80016aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	2200      	movs	r2, #0
 80016b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	2200      	movs	r2, #0
 80016ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80016be:	2301      	movs	r3, #1
 80016c0:	e02e      	b.n	8001720 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	699b      	ldr	r3, [r3, #24]
 80016c8:	f003 0320 	and.w	r3, r3, #32
 80016cc:	2b20      	cmp	r3, #32
 80016ce:	d1d5      	bne.n	800167c <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	2210      	movs	r2, #16
 80016d6:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	2220      	movs	r2, #32
 80016de:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80016e0:	68f8      	ldr	r0, [r7, #12]
 80016e2:	f7ff fedd 	bl	80014a0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	6859      	ldr	r1, [r3, #4]
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	681a      	ldr	r2, [r3, #0]
 80016f0:	4b0d      	ldr	r3, [pc, #52]	; (8001728 <I2C_IsAcknowledgeFailed+0xc8>)
 80016f2:	400b      	ands	r3, r1
 80016f4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016fa:	f043 0204 	orr.w	r2, r3, #4
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	2220      	movs	r2, #32
 8001706:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	2200      	movs	r2, #0
 800170e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	2200      	movs	r2, #0
 8001716:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800171a:	2301      	movs	r3, #1
 800171c:	e000      	b.n	8001720 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800171e:	2300      	movs	r3, #0
}
 8001720:	4618      	mov	r0, r3
 8001722:	3710      	adds	r7, #16
 8001724:	46bd      	mov	sp, r7
 8001726:	bd80      	pop	{r7, pc}
 8001728:	fe00e800 	.word	0xfe00e800

0800172c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800172c:	b480      	push	{r7}
 800172e:	b085      	sub	sp, #20
 8001730:	af00      	add	r7, sp, #0
 8001732:	60f8      	str	r0, [r7, #12]
 8001734:	607b      	str	r3, [r7, #4]
 8001736:	460b      	mov	r3, r1
 8001738:	817b      	strh	r3, [r7, #10]
 800173a:	4613      	mov	r3, r2
 800173c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	685a      	ldr	r2, [r3, #4]
 8001744:	69bb      	ldr	r3, [r7, #24]
 8001746:	0d5b      	lsrs	r3, r3, #21
 8001748:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800174c:	4b0d      	ldr	r3, [pc, #52]	; (8001784 <I2C_TransferConfig+0x58>)
 800174e:	430b      	orrs	r3, r1
 8001750:	43db      	mvns	r3, r3
 8001752:	ea02 0103 	and.w	r1, r2, r3
 8001756:	897b      	ldrh	r3, [r7, #10]
 8001758:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800175c:	7a7b      	ldrb	r3, [r7, #9]
 800175e:	041b      	lsls	r3, r3, #16
 8001760:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8001764:	431a      	orrs	r2, r3
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	431a      	orrs	r2, r3
 800176a:	69bb      	ldr	r3, [r7, #24]
 800176c:	431a      	orrs	r2, r3
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	430a      	orrs	r2, r1
 8001774:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8001776:	bf00      	nop
 8001778:	3714      	adds	r7, #20
 800177a:	46bd      	mov	sp, r7
 800177c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001780:	4770      	bx	lr
 8001782:	bf00      	nop
 8001784:	03ff63ff 	.word	0x03ff63ff

08001788 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001788:	b480      	push	{r7}
 800178a:	b083      	sub	sp, #12
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
 8001790:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001798:	b2db      	uxtb	r3, r3
 800179a:	2b20      	cmp	r3, #32
 800179c:	d138      	bne.n	8001810 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80017a4:	2b01      	cmp	r3, #1
 80017a6:	d101      	bne.n	80017ac <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80017a8:	2302      	movs	r3, #2
 80017aa:	e032      	b.n	8001812 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	2201      	movs	r2, #1
 80017b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	2224      	movs	r2, #36	; 0x24
 80017b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	681a      	ldr	r2, [r3, #0]
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f022 0201 	bic.w	r2, r2, #1
 80017ca:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	681a      	ldr	r2, [r3, #0]
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80017da:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	6819      	ldr	r1, [r3, #0]
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	683a      	ldr	r2, [r7, #0]
 80017e8:	430a      	orrs	r2, r1
 80017ea:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	681a      	ldr	r2, [r3, #0]
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f042 0201 	orr.w	r2, r2, #1
 80017fa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	2220      	movs	r2, #32
 8001800:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	2200      	movs	r2, #0
 8001808:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800180c:	2300      	movs	r3, #0
 800180e:	e000      	b.n	8001812 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001810:	2302      	movs	r3, #2
  }
}
 8001812:	4618      	mov	r0, r3
 8001814:	370c      	adds	r7, #12
 8001816:	46bd      	mov	sp, r7
 8001818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181c:	4770      	bx	lr

0800181e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800181e:	b480      	push	{r7}
 8001820:	b085      	sub	sp, #20
 8001822:	af00      	add	r7, sp, #0
 8001824:	6078      	str	r0, [r7, #4]
 8001826:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800182e:	b2db      	uxtb	r3, r3
 8001830:	2b20      	cmp	r3, #32
 8001832:	d139      	bne.n	80018a8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800183a:	2b01      	cmp	r3, #1
 800183c:	d101      	bne.n	8001842 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800183e:	2302      	movs	r3, #2
 8001840:	e033      	b.n	80018aa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	2201      	movs	r2, #1
 8001846:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	2224      	movs	r2, #36	; 0x24
 800184e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	681a      	ldr	r2, [r3, #0]
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f022 0201 	bic.w	r2, r2, #1
 8001860:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001870:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	021b      	lsls	r3, r3, #8
 8001876:	68fa      	ldr	r2, [r7, #12]
 8001878:	4313      	orrs	r3, r2
 800187a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	68fa      	ldr	r2, [r7, #12]
 8001882:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	681a      	ldr	r2, [r3, #0]
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f042 0201 	orr.w	r2, r2, #1
 8001892:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	2220      	movs	r2, #32
 8001898:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	2200      	movs	r2, #0
 80018a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80018a4:	2300      	movs	r3, #0
 80018a6:	e000      	b.n	80018aa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80018a8:	2302      	movs	r3, #2
  }
}
 80018aa:	4618      	mov	r0, r3
 80018ac:	3714      	adds	r7, #20
 80018ae:	46bd      	mov	sp, r7
 80018b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b4:	4770      	bx	lr
	...

080018b8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b084      	sub	sp, #16
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80018c0:	4b29      	ldr	r3, [pc, #164]	; (8001968 <HAL_PWREx_ConfigSupply+0xb0>)
 80018c2:	68db      	ldr	r3, [r3, #12]
 80018c4:	f003 0307 	and.w	r3, r3, #7
 80018c8:	2b06      	cmp	r3, #6
 80018ca:	d00a      	beq.n	80018e2 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80018cc:	4b26      	ldr	r3, [pc, #152]	; (8001968 <HAL_PWREx_ConfigSupply+0xb0>)
 80018ce:	68db      	ldr	r3, [r3, #12]
 80018d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80018d4:	687a      	ldr	r2, [r7, #4]
 80018d6:	429a      	cmp	r2, r3
 80018d8:	d001      	beq.n	80018de <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80018da:	2301      	movs	r3, #1
 80018dc:	e040      	b.n	8001960 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80018de:	2300      	movs	r3, #0
 80018e0:	e03e      	b.n	8001960 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80018e2:	4b21      	ldr	r3, [pc, #132]	; (8001968 <HAL_PWREx_ConfigSupply+0xb0>)
 80018e4:	68db      	ldr	r3, [r3, #12]
 80018e6:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 80018ea:	491f      	ldr	r1, [pc, #124]	; (8001968 <HAL_PWREx_ConfigSupply+0xb0>)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	4313      	orrs	r3, r2
 80018f0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80018f2:	f7ff f953 	bl	8000b9c <HAL_GetTick>
 80018f6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80018f8:	e009      	b.n	800190e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80018fa:	f7ff f94f 	bl	8000b9c <HAL_GetTick>
 80018fe:	4602      	mov	r2, r0
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	1ad3      	subs	r3, r2, r3
 8001904:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001908:	d901      	bls.n	800190e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800190a:	2301      	movs	r3, #1
 800190c:	e028      	b.n	8001960 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800190e:	4b16      	ldr	r3, [pc, #88]	; (8001968 <HAL_PWREx_ConfigSupply+0xb0>)
 8001910:	685b      	ldr	r3, [r3, #4]
 8001912:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001916:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800191a:	d1ee      	bne.n	80018fa <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	2b1e      	cmp	r3, #30
 8001920:	d008      	beq.n	8001934 <HAL_PWREx_ConfigSupply+0x7c>
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	2b2e      	cmp	r3, #46	; 0x2e
 8001926:	d005      	beq.n	8001934 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	2b1d      	cmp	r3, #29
 800192c:	d002      	beq.n	8001934 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	2b2d      	cmp	r3, #45	; 0x2d
 8001932:	d114      	bne.n	800195e <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8001934:	f7ff f932 	bl	8000b9c <HAL_GetTick>
 8001938:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800193a:	e009      	b.n	8001950 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800193c:	f7ff f92e 	bl	8000b9c <HAL_GetTick>
 8001940:	4602      	mov	r2, r0
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	1ad3      	subs	r3, r2, r3
 8001946:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800194a:	d901      	bls.n	8001950 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 800194c:	2301      	movs	r3, #1
 800194e:	e007      	b.n	8001960 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001950:	4b05      	ldr	r3, [pc, #20]	; (8001968 <HAL_PWREx_ConfigSupply+0xb0>)
 8001952:	68db      	ldr	r3, [r3, #12]
 8001954:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001958:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800195c:	d1ee      	bne.n	800193c <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800195e:	2300      	movs	r3, #0
}
 8001960:	4618      	mov	r0, r3
 8001962:	3710      	adds	r7, #16
 8001964:	46bd      	mov	sp, r7
 8001966:	bd80      	pop	{r7, pc}
 8001968:	58024800 	.word	0x58024800

0800196c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b08c      	sub	sp, #48	; 0x30
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	2b00      	cmp	r3, #0
 8001978:	d101      	bne.n	800197e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800197a:	2301      	movs	r3, #1
 800197c:	e3ff      	b.n	800217e <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f003 0301 	and.w	r3, r3, #1
 8001986:	2b00      	cmp	r3, #0
 8001988:	f000 8087 	beq.w	8001a9a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800198c:	4b99      	ldr	r3, [pc, #612]	; (8001bf4 <HAL_RCC_OscConfig+0x288>)
 800198e:	691b      	ldr	r3, [r3, #16]
 8001990:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001994:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001996:	4b97      	ldr	r3, [pc, #604]	; (8001bf4 <HAL_RCC_OscConfig+0x288>)
 8001998:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800199a:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800199c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800199e:	2b10      	cmp	r3, #16
 80019a0:	d007      	beq.n	80019b2 <HAL_RCC_OscConfig+0x46>
 80019a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019a4:	2b18      	cmp	r3, #24
 80019a6:	d110      	bne.n	80019ca <HAL_RCC_OscConfig+0x5e>
 80019a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019aa:	f003 0303 	and.w	r3, r3, #3
 80019ae:	2b02      	cmp	r3, #2
 80019b0:	d10b      	bne.n	80019ca <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019b2:	4b90      	ldr	r3, [pc, #576]	; (8001bf4 <HAL_RCC_OscConfig+0x288>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d06c      	beq.n	8001a98 <HAL_RCC_OscConfig+0x12c>
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d168      	bne.n	8001a98 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80019c6:	2301      	movs	r3, #1
 80019c8:	e3d9      	b.n	800217e <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019d2:	d106      	bne.n	80019e2 <HAL_RCC_OscConfig+0x76>
 80019d4:	4b87      	ldr	r3, [pc, #540]	; (8001bf4 <HAL_RCC_OscConfig+0x288>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	4a86      	ldr	r2, [pc, #536]	; (8001bf4 <HAL_RCC_OscConfig+0x288>)
 80019da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019de:	6013      	str	r3, [r2, #0]
 80019e0:	e02e      	b.n	8001a40 <HAL_RCC_OscConfig+0xd4>
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	685b      	ldr	r3, [r3, #4]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d10c      	bne.n	8001a04 <HAL_RCC_OscConfig+0x98>
 80019ea:	4b82      	ldr	r3, [pc, #520]	; (8001bf4 <HAL_RCC_OscConfig+0x288>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	4a81      	ldr	r2, [pc, #516]	; (8001bf4 <HAL_RCC_OscConfig+0x288>)
 80019f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019f4:	6013      	str	r3, [r2, #0]
 80019f6:	4b7f      	ldr	r3, [pc, #508]	; (8001bf4 <HAL_RCC_OscConfig+0x288>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	4a7e      	ldr	r2, [pc, #504]	; (8001bf4 <HAL_RCC_OscConfig+0x288>)
 80019fc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a00:	6013      	str	r3, [r2, #0]
 8001a02:	e01d      	b.n	8001a40 <HAL_RCC_OscConfig+0xd4>
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	685b      	ldr	r3, [r3, #4]
 8001a08:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a0c:	d10c      	bne.n	8001a28 <HAL_RCC_OscConfig+0xbc>
 8001a0e:	4b79      	ldr	r3, [pc, #484]	; (8001bf4 <HAL_RCC_OscConfig+0x288>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	4a78      	ldr	r2, [pc, #480]	; (8001bf4 <HAL_RCC_OscConfig+0x288>)
 8001a14:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a18:	6013      	str	r3, [r2, #0]
 8001a1a:	4b76      	ldr	r3, [pc, #472]	; (8001bf4 <HAL_RCC_OscConfig+0x288>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	4a75      	ldr	r2, [pc, #468]	; (8001bf4 <HAL_RCC_OscConfig+0x288>)
 8001a20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a24:	6013      	str	r3, [r2, #0]
 8001a26:	e00b      	b.n	8001a40 <HAL_RCC_OscConfig+0xd4>
 8001a28:	4b72      	ldr	r3, [pc, #456]	; (8001bf4 <HAL_RCC_OscConfig+0x288>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4a71      	ldr	r2, [pc, #452]	; (8001bf4 <HAL_RCC_OscConfig+0x288>)
 8001a2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a32:	6013      	str	r3, [r2, #0]
 8001a34:	4b6f      	ldr	r3, [pc, #444]	; (8001bf4 <HAL_RCC_OscConfig+0x288>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	4a6e      	ldr	r2, [pc, #440]	; (8001bf4 <HAL_RCC_OscConfig+0x288>)
 8001a3a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a3e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	685b      	ldr	r3, [r3, #4]
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d013      	beq.n	8001a70 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a48:	f7ff f8a8 	bl	8000b9c <HAL_GetTick>
 8001a4c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001a4e:	e008      	b.n	8001a62 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a50:	f7ff f8a4 	bl	8000b9c <HAL_GetTick>
 8001a54:	4602      	mov	r2, r0
 8001a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a58:	1ad3      	subs	r3, r2, r3
 8001a5a:	2b64      	cmp	r3, #100	; 0x64
 8001a5c:	d901      	bls.n	8001a62 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001a5e:	2303      	movs	r3, #3
 8001a60:	e38d      	b.n	800217e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001a62:	4b64      	ldr	r3, [pc, #400]	; (8001bf4 <HAL_RCC_OscConfig+0x288>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d0f0      	beq.n	8001a50 <HAL_RCC_OscConfig+0xe4>
 8001a6e:	e014      	b.n	8001a9a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a70:	f7ff f894 	bl	8000b9c <HAL_GetTick>
 8001a74:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001a76:	e008      	b.n	8001a8a <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a78:	f7ff f890 	bl	8000b9c <HAL_GetTick>
 8001a7c:	4602      	mov	r2, r0
 8001a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a80:	1ad3      	subs	r3, r2, r3
 8001a82:	2b64      	cmp	r3, #100	; 0x64
 8001a84:	d901      	bls.n	8001a8a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001a86:	2303      	movs	r3, #3
 8001a88:	e379      	b.n	800217e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001a8a:	4b5a      	ldr	r3, [pc, #360]	; (8001bf4 <HAL_RCC_OscConfig+0x288>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d1f0      	bne.n	8001a78 <HAL_RCC_OscConfig+0x10c>
 8001a96:	e000      	b.n	8001a9a <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a98:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f003 0302 	and.w	r3, r3, #2
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	f000 80ae 	beq.w	8001c04 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001aa8:	4b52      	ldr	r3, [pc, #328]	; (8001bf4 <HAL_RCC_OscConfig+0x288>)
 8001aaa:	691b      	ldr	r3, [r3, #16]
 8001aac:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001ab0:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001ab2:	4b50      	ldr	r3, [pc, #320]	; (8001bf4 <HAL_RCC_OscConfig+0x288>)
 8001ab4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ab6:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001ab8:	6a3b      	ldr	r3, [r7, #32]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d007      	beq.n	8001ace <HAL_RCC_OscConfig+0x162>
 8001abe:	6a3b      	ldr	r3, [r7, #32]
 8001ac0:	2b18      	cmp	r3, #24
 8001ac2:	d13a      	bne.n	8001b3a <HAL_RCC_OscConfig+0x1ce>
 8001ac4:	69fb      	ldr	r3, [r7, #28]
 8001ac6:	f003 0303 	and.w	r3, r3, #3
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d135      	bne.n	8001b3a <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001ace:	4b49      	ldr	r3, [pc, #292]	; (8001bf4 <HAL_RCC_OscConfig+0x288>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f003 0304 	and.w	r3, r3, #4
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d005      	beq.n	8001ae6 <HAL_RCC_OscConfig+0x17a>
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	68db      	ldr	r3, [r3, #12]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d101      	bne.n	8001ae6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	e34b      	b.n	800217e <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ae6:	f7ff f889 	bl	8000bfc <HAL_GetREVID>
 8001aea:	4603      	mov	r3, r0
 8001aec:	f241 0203 	movw	r2, #4099	; 0x1003
 8001af0:	4293      	cmp	r3, r2
 8001af2:	d817      	bhi.n	8001b24 <HAL_RCC_OscConfig+0x1b8>
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	691b      	ldr	r3, [r3, #16]
 8001af8:	2b40      	cmp	r3, #64	; 0x40
 8001afa:	d108      	bne.n	8001b0e <HAL_RCC_OscConfig+0x1a2>
 8001afc:	4b3d      	ldr	r3, [pc, #244]	; (8001bf4 <HAL_RCC_OscConfig+0x288>)
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8001b04:	4a3b      	ldr	r2, [pc, #236]	; (8001bf4 <HAL_RCC_OscConfig+0x288>)
 8001b06:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b0a:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b0c:	e07a      	b.n	8001c04 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b0e:	4b39      	ldr	r3, [pc, #228]	; (8001bf4 <HAL_RCC_OscConfig+0x288>)
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	691b      	ldr	r3, [r3, #16]
 8001b1a:	031b      	lsls	r3, r3, #12
 8001b1c:	4935      	ldr	r1, [pc, #212]	; (8001bf4 <HAL_RCC_OscConfig+0x288>)
 8001b1e:	4313      	orrs	r3, r2
 8001b20:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b22:	e06f      	b.n	8001c04 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b24:	4b33      	ldr	r3, [pc, #204]	; (8001bf4 <HAL_RCC_OscConfig+0x288>)
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	691b      	ldr	r3, [r3, #16]
 8001b30:	061b      	lsls	r3, r3, #24
 8001b32:	4930      	ldr	r1, [pc, #192]	; (8001bf4 <HAL_RCC_OscConfig+0x288>)
 8001b34:	4313      	orrs	r3, r2
 8001b36:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b38:	e064      	b.n	8001c04 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	68db      	ldr	r3, [r3, #12]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d045      	beq.n	8001bce <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001b42:	4b2c      	ldr	r3, [pc, #176]	; (8001bf4 <HAL_RCC_OscConfig+0x288>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f023 0219 	bic.w	r2, r3, #25
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	68db      	ldr	r3, [r3, #12]
 8001b4e:	4929      	ldr	r1, [pc, #164]	; (8001bf4 <HAL_RCC_OscConfig+0x288>)
 8001b50:	4313      	orrs	r3, r2
 8001b52:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b54:	f7ff f822 	bl	8000b9c <HAL_GetTick>
 8001b58:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001b5a:	e008      	b.n	8001b6e <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b5c:	f7ff f81e 	bl	8000b9c <HAL_GetTick>
 8001b60:	4602      	mov	r2, r0
 8001b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b64:	1ad3      	subs	r3, r2, r3
 8001b66:	2b02      	cmp	r3, #2
 8001b68:	d901      	bls.n	8001b6e <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8001b6a:	2303      	movs	r3, #3
 8001b6c:	e307      	b.n	800217e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001b6e:	4b21      	ldr	r3, [pc, #132]	; (8001bf4 <HAL_RCC_OscConfig+0x288>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f003 0304 	and.w	r3, r3, #4
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d0f0      	beq.n	8001b5c <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b7a:	f7ff f83f 	bl	8000bfc <HAL_GetREVID>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	f241 0203 	movw	r2, #4099	; 0x1003
 8001b84:	4293      	cmp	r3, r2
 8001b86:	d817      	bhi.n	8001bb8 <HAL_RCC_OscConfig+0x24c>
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	691b      	ldr	r3, [r3, #16]
 8001b8c:	2b40      	cmp	r3, #64	; 0x40
 8001b8e:	d108      	bne.n	8001ba2 <HAL_RCC_OscConfig+0x236>
 8001b90:	4b18      	ldr	r3, [pc, #96]	; (8001bf4 <HAL_RCC_OscConfig+0x288>)
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8001b98:	4a16      	ldr	r2, [pc, #88]	; (8001bf4 <HAL_RCC_OscConfig+0x288>)
 8001b9a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b9e:	6053      	str	r3, [r2, #4]
 8001ba0:	e030      	b.n	8001c04 <HAL_RCC_OscConfig+0x298>
 8001ba2:	4b14      	ldr	r3, [pc, #80]	; (8001bf4 <HAL_RCC_OscConfig+0x288>)
 8001ba4:	685b      	ldr	r3, [r3, #4]
 8001ba6:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	691b      	ldr	r3, [r3, #16]
 8001bae:	031b      	lsls	r3, r3, #12
 8001bb0:	4910      	ldr	r1, [pc, #64]	; (8001bf4 <HAL_RCC_OscConfig+0x288>)
 8001bb2:	4313      	orrs	r3, r2
 8001bb4:	604b      	str	r3, [r1, #4]
 8001bb6:	e025      	b.n	8001c04 <HAL_RCC_OscConfig+0x298>
 8001bb8:	4b0e      	ldr	r3, [pc, #56]	; (8001bf4 <HAL_RCC_OscConfig+0x288>)
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	691b      	ldr	r3, [r3, #16]
 8001bc4:	061b      	lsls	r3, r3, #24
 8001bc6:	490b      	ldr	r1, [pc, #44]	; (8001bf4 <HAL_RCC_OscConfig+0x288>)
 8001bc8:	4313      	orrs	r3, r2
 8001bca:	604b      	str	r3, [r1, #4]
 8001bcc:	e01a      	b.n	8001c04 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001bce:	4b09      	ldr	r3, [pc, #36]	; (8001bf4 <HAL_RCC_OscConfig+0x288>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4a08      	ldr	r2, [pc, #32]	; (8001bf4 <HAL_RCC_OscConfig+0x288>)
 8001bd4:	f023 0301 	bic.w	r3, r3, #1
 8001bd8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bda:	f7fe ffdf 	bl	8000b9c <HAL_GetTick>
 8001bde:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001be0:	e00a      	b.n	8001bf8 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001be2:	f7fe ffdb 	bl	8000b9c <HAL_GetTick>
 8001be6:	4602      	mov	r2, r0
 8001be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bea:	1ad3      	subs	r3, r2, r3
 8001bec:	2b02      	cmp	r3, #2
 8001bee:	d903      	bls.n	8001bf8 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8001bf0:	2303      	movs	r3, #3
 8001bf2:	e2c4      	b.n	800217e <HAL_RCC_OscConfig+0x812>
 8001bf4:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001bf8:	4ba4      	ldr	r3, [pc, #656]	; (8001e8c <HAL_RCC_OscConfig+0x520>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f003 0304 	and.w	r3, r3, #4
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d1ee      	bne.n	8001be2 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f003 0310 	and.w	r3, r3, #16
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	f000 80a9 	beq.w	8001d64 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c12:	4b9e      	ldr	r3, [pc, #632]	; (8001e8c <HAL_RCC_OscConfig+0x520>)
 8001c14:	691b      	ldr	r3, [r3, #16]
 8001c16:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001c1a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001c1c:	4b9b      	ldr	r3, [pc, #620]	; (8001e8c <HAL_RCC_OscConfig+0x520>)
 8001c1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c20:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001c22:	69bb      	ldr	r3, [r7, #24]
 8001c24:	2b08      	cmp	r3, #8
 8001c26:	d007      	beq.n	8001c38 <HAL_RCC_OscConfig+0x2cc>
 8001c28:	69bb      	ldr	r3, [r7, #24]
 8001c2a:	2b18      	cmp	r3, #24
 8001c2c:	d13a      	bne.n	8001ca4 <HAL_RCC_OscConfig+0x338>
 8001c2e:	697b      	ldr	r3, [r7, #20]
 8001c30:	f003 0303 	and.w	r3, r3, #3
 8001c34:	2b01      	cmp	r3, #1
 8001c36:	d135      	bne.n	8001ca4 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001c38:	4b94      	ldr	r3, [pc, #592]	; (8001e8c <HAL_RCC_OscConfig+0x520>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d005      	beq.n	8001c50 <HAL_RCC_OscConfig+0x2e4>
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	69db      	ldr	r3, [r3, #28]
 8001c48:	2b80      	cmp	r3, #128	; 0x80
 8001c4a:	d001      	beq.n	8001c50 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	e296      	b.n	800217e <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001c50:	f7fe ffd4 	bl	8000bfc <HAL_GetREVID>
 8001c54:	4603      	mov	r3, r0
 8001c56:	f241 0203 	movw	r2, #4099	; 0x1003
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d817      	bhi.n	8001c8e <HAL_RCC_OscConfig+0x322>
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	6a1b      	ldr	r3, [r3, #32]
 8001c62:	2b20      	cmp	r3, #32
 8001c64:	d108      	bne.n	8001c78 <HAL_RCC_OscConfig+0x30c>
 8001c66:	4b89      	ldr	r3, [pc, #548]	; (8001e8c <HAL_RCC_OscConfig+0x520>)
 8001c68:	685b      	ldr	r3, [r3, #4]
 8001c6a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001c6e:	4a87      	ldr	r2, [pc, #540]	; (8001e8c <HAL_RCC_OscConfig+0x520>)
 8001c70:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001c74:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001c76:	e075      	b.n	8001d64 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001c78:	4b84      	ldr	r3, [pc, #528]	; (8001e8c <HAL_RCC_OscConfig+0x520>)
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6a1b      	ldr	r3, [r3, #32]
 8001c84:	069b      	lsls	r3, r3, #26
 8001c86:	4981      	ldr	r1, [pc, #516]	; (8001e8c <HAL_RCC_OscConfig+0x520>)
 8001c88:	4313      	orrs	r3, r2
 8001c8a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001c8c:	e06a      	b.n	8001d64 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001c8e:	4b7f      	ldr	r3, [pc, #508]	; (8001e8c <HAL_RCC_OscConfig+0x520>)
 8001c90:	68db      	ldr	r3, [r3, #12]
 8001c92:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	6a1b      	ldr	r3, [r3, #32]
 8001c9a:	061b      	lsls	r3, r3, #24
 8001c9c:	497b      	ldr	r1, [pc, #492]	; (8001e8c <HAL_RCC_OscConfig+0x520>)
 8001c9e:	4313      	orrs	r3, r2
 8001ca0:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001ca2:	e05f      	b.n	8001d64 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	69db      	ldr	r3, [r3, #28]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d042      	beq.n	8001d32 <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001cac:	4b77      	ldr	r3, [pc, #476]	; (8001e8c <HAL_RCC_OscConfig+0x520>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4a76      	ldr	r2, [pc, #472]	; (8001e8c <HAL_RCC_OscConfig+0x520>)
 8001cb2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001cb6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cb8:	f7fe ff70 	bl	8000b9c <HAL_GetTick>
 8001cbc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001cbe:	e008      	b.n	8001cd2 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001cc0:	f7fe ff6c 	bl	8000b9c <HAL_GetTick>
 8001cc4:	4602      	mov	r2, r0
 8001cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cc8:	1ad3      	subs	r3, r2, r3
 8001cca:	2b02      	cmp	r3, #2
 8001ccc:	d901      	bls.n	8001cd2 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8001cce:	2303      	movs	r3, #3
 8001cd0:	e255      	b.n	800217e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001cd2:	4b6e      	ldr	r3, [pc, #440]	; (8001e8c <HAL_RCC_OscConfig+0x520>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d0f0      	beq.n	8001cc0 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001cde:	f7fe ff8d 	bl	8000bfc <HAL_GetREVID>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	f241 0203 	movw	r2, #4099	; 0x1003
 8001ce8:	4293      	cmp	r3, r2
 8001cea:	d817      	bhi.n	8001d1c <HAL_RCC_OscConfig+0x3b0>
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	6a1b      	ldr	r3, [r3, #32]
 8001cf0:	2b20      	cmp	r3, #32
 8001cf2:	d108      	bne.n	8001d06 <HAL_RCC_OscConfig+0x39a>
 8001cf4:	4b65      	ldr	r3, [pc, #404]	; (8001e8c <HAL_RCC_OscConfig+0x520>)
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001cfc:	4a63      	ldr	r2, [pc, #396]	; (8001e8c <HAL_RCC_OscConfig+0x520>)
 8001cfe:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001d02:	6053      	str	r3, [r2, #4]
 8001d04:	e02e      	b.n	8001d64 <HAL_RCC_OscConfig+0x3f8>
 8001d06:	4b61      	ldr	r3, [pc, #388]	; (8001e8c <HAL_RCC_OscConfig+0x520>)
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	6a1b      	ldr	r3, [r3, #32]
 8001d12:	069b      	lsls	r3, r3, #26
 8001d14:	495d      	ldr	r1, [pc, #372]	; (8001e8c <HAL_RCC_OscConfig+0x520>)
 8001d16:	4313      	orrs	r3, r2
 8001d18:	604b      	str	r3, [r1, #4]
 8001d1a:	e023      	b.n	8001d64 <HAL_RCC_OscConfig+0x3f8>
 8001d1c:	4b5b      	ldr	r3, [pc, #364]	; (8001e8c <HAL_RCC_OscConfig+0x520>)
 8001d1e:	68db      	ldr	r3, [r3, #12]
 8001d20:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	6a1b      	ldr	r3, [r3, #32]
 8001d28:	061b      	lsls	r3, r3, #24
 8001d2a:	4958      	ldr	r1, [pc, #352]	; (8001e8c <HAL_RCC_OscConfig+0x520>)
 8001d2c:	4313      	orrs	r3, r2
 8001d2e:	60cb      	str	r3, [r1, #12]
 8001d30:	e018      	b.n	8001d64 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001d32:	4b56      	ldr	r3, [pc, #344]	; (8001e8c <HAL_RCC_OscConfig+0x520>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	4a55      	ldr	r2, [pc, #340]	; (8001e8c <HAL_RCC_OscConfig+0x520>)
 8001d38:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001d3c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d3e:	f7fe ff2d 	bl	8000b9c <HAL_GetTick>
 8001d42:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001d44:	e008      	b.n	8001d58 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001d46:	f7fe ff29 	bl	8000b9c <HAL_GetTick>
 8001d4a:	4602      	mov	r2, r0
 8001d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d4e:	1ad3      	subs	r3, r2, r3
 8001d50:	2b02      	cmp	r3, #2
 8001d52:	d901      	bls.n	8001d58 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8001d54:	2303      	movs	r3, #3
 8001d56:	e212      	b.n	800217e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001d58:	4b4c      	ldr	r3, [pc, #304]	; (8001e8c <HAL_RCC_OscConfig+0x520>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d1f0      	bne.n	8001d46 <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f003 0308 	and.w	r3, r3, #8
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d036      	beq.n	8001dde <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	695b      	ldr	r3, [r3, #20]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d019      	beq.n	8001dac <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d78:	4b44      	ldr	r3, [pc, #272]	; (8001e8c <HAL_RCC_OscConfig+0x520>)
 8001d7a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d7c:	4a43      	ldr	r2, [pc, #268]	; (8001e8c <HAL_RCC_OscConfig+0x520>)
 8001d7e:	f043 0301 	orr.w	r3, r3, #1
 8001d82:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d84:	f7fe ff0a 	bl	8000b9c <HAL_GetTick>
 8001d88:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001d8a:	e008      	b.n	8001d9e <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d8c:	f7fe ff06 	bl	8000b9c <HAL_GetTick>
 8001d90:	4602      	mov	r2, r0
 8001d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d94:	1ad3      	subs	r3, r2, r3
 8001d96:	2b02      	cmp	r3, #2
 8001d98:	d901      	bls.n	8001d9e <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8001d9a:	2303      	movs	r3, #3
 8001d9c:	e1ef      	b.n	800217e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001d9e:	4b3b      	ldr	r3, [pc, #236]	; (8001e8c <HAL_RCC_OscConfig+0x520>)
 8001da0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001da2:	f003 0302 	and.w	r3, r3, #2
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d0f0      	beq.n	8001d8c <HAL_RCC_OscConfig+0x420>
 8001daa:	e018      	b.n	8001dde <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001dac:	4b37      	ldr	r3, [pc, #220]	; (8001e8c <HAL_RCC_OscConfig+0x520>)
 8001dae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001db0:	4a36      	ldr	r2, [pc, #216]	; (8001e8c <HAL_RCC_OscConfig+0x520>)
 8001db2:	f023 0301 	bic.w	r3, r3, #1
 8001db6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001db8:	f7fe fef0 	bl	8000b9c <HAL_GetTick>
 8001dbc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001dbe:	e008      	b.n	8001dd2 <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001dc0:	f7fe feec 	bl	8000b9c <HAL_GetTick>
 8001dc4:	4602      	mov	r2, r0
 8001dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dc8:	1ad3      	subs	r3, r2, r3
 8001dca:	2b02      	cmp	r3, #2
 8001dcc:	d901      	bls.n	8001dd2 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 8001dce:	2303      	movs	r3, #3
 8001dd0:	e1d5      	b.n	800217e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001dd2:	4b2e      	ldr	r3, [pc, #184]	; (8001e8c <HAL_RCC_OscConfig+0x520>)
 8001dd4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001dd6:	f003 0302 	and.w	r3, r3, #2
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d1f0      	bne.n	8001dc0 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f003 0320 	and.w	r3, r3, #32
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d036      	beq.n	8001e58 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	699b      	ldr	r3, [r3, #24]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d019      	beq.n	8001e26 <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001df2:	4b26      	ldr	r3, [pc, #152]	; (8001e8c <HAL_RCC_OscConfig+0x520>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	4a25      	ldr	r2, [pc, #148]	; (8001e8c <HAL_RCC_OscConfig+0x520>)
 8001df8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001dfc:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001dfe:	f7fe fecd 	bl	8000b9c <HAL_GetTick>
 8001e02:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001e04:	e008      	b.n	8001e18 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001e06:	f7fe fec9 	bl	8000b9c <HAL_GetTick>
 8001e0a:	4602      	mov	r2, r0
 8001e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e0e:	1ad3      	subs	r3, r2, r3
 8001e10:	2b02      	cmp	r3, #2
 8001e12:	d901      	bls.n	8001e18 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8001e14:	2303      	movs	r3, #3
 8001e16:	e1b2      	b.n	800217e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001e18:	4b1c      	ldr	r3, [pc, #112]	; (8001e8c <HAL_RCC_OscConfig+0x520>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d0f0      	beq.n	8001e06 <HAL_RCC_OscConfig+0x49a>
 8001e24:	e018      	b.n	8001e58 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001e26:	4b19      	ldr	r3, [pc, #100]	; (8001e8c <HAL_RCC_OscConfig+0x520>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	4a18      	ldr	r2, [pc, #96]	; (8001e8c <HAL_RCC_OscConfig+0x520>)
 8001e2c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001e30:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001e32:	f7fe feb3 	bl	8000b9c <HAL_GetTick>
 8001e36:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001e38:	e008      	b.n	8001e4c <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001e3a:	f7fe feaf 	bl	8000b9c <HAL_GetTick>
 8001e3e:	4602      	mov	r2, r0
 8001e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e42:	1ad3      	subs	r3, r2, r3
 8001e44:	2b02      	cmp	r3, #2
 8001e46:	d901      	bls.n	8001e4c <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8001e48:	2303      	movs	r3, #3
 8001e4a:	e198      	b.n	800217e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001e4c:	4b0f      	ldr	r3, [pc, #60]	; (8001e8c <HAL_RCC_OscConfig+0x520>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d1f0      	bne.n	8001e3a <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f003 0304 	and.w	r3, r3, #4
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	f000 8085 	beq.w	8001f70 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001e66:	4b0a      	ldr	r3, [pc, #40]	; (8001e90 <HAL_RCC_OscConfig+0x524>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	4a09      	ldr	r2, [pc, #36]	; (8001e90 <HAL_RCC_OscConfig+0x524>)
 8001e6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e70:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001e72:	f7fe fe93 	bl	8000b9c <HAL_GetTick>
 8001e76:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001e78:	e00c      	b.n	8001e94 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001e7a:	f7fe fe8f 	bl	8000b9c <HAL_GetTick>
 8001e7e:	4602      	mov	r2, r0
 8001e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e82:	1ad3      	subs	r3, r2, r3
 8001e84:	2b64      	cmp	r3, #100	; 0x64
 8001e86:	d905      	bls.n	8001e94 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8001e88:	2303      	movs	r3, #3
 8001e8a:	e178      	b.n	800217e <HAL_RCC_OscConfig+0x812>
 8001e8c:	58024400 	.word	0x58024400
 8001e90:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001e94:	4b96      	ldr	r3, [pc, #600]	; (80020f0 <HAL_RCC_OscConfig+0x784>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d0ec      	beq.n	8001e7a <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	689b      	ldr	r3, [r3, #8]
 8001ea4:	2b01      	cmp	r3, #1
 8001ea6:	d106      	bne.n	8001eb6 <HAL_RCC_OscConfig+0x54a>
 8001ea8:	4b92      	ldr	r3, [pc, #584]	; (80020f4 <HAL_RCC_OscConfig+0x788>)
 8001eaa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001eac:	4a91      	ldr	r2, [pc, #580]	; (80020f4 <HAL_RCC_OscConfig+0x788>)
 8001eae:	f043 0301 	orr.w	r3, r3, #1
 8001eb2:	6713      	str	r3, [r2, #112]	; 0x70
 8001eb4:	e02d      	b.n	8001f12 <HAL_RCC_OscConfig+0x5a6>
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	689b      	ldr	r3, [r3, #8]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d10c      	bne.n	8001ed8 <HAL_RCC_OscConfig+0x56c>
 8001ebe:	4b8d      	ldr	r3, [pc, #564]	; (80020f4 <HAL_RCC_OscConfig+0x788>)
 8001ec0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ec2:	4a8c      	ldr	r2, [pc, #560]	; (80020f4 <HAL_RCC_OscConfig+0x788>)
 8001ec4:	f023 0301 	bic.w	r3, r3, #1
 8001ec8:	6713      	str	r3, [r2, #112]	; 0x70
 8001eca:	4b8a      	ldr	r3, [pc, #552]	; (80020f4 <HAL_RCC_OscConfig+0x788>)
 8001ecc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ece:	4a89      	ldr	r2, [pc, #548]	; (80020f4 <HAL_RCC_OscConfig+0x788>)
 8001ed0:	f023 0304 	bic.w	r3, r3, #4
 8001ed4:	6713      	str	r3, [r2, #112]	; 0x70
 8001ed6:	e01c      	b.n	8001f12 <HAL_RCC_OscConfig+0x5a6>
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	689b      	ldr	r3, [r3, #8]
 8001edc:	2b05      	cmp	r3, #5
 8001ede:	d10c      	bne.n	8001efa <HAL_RCC_OscConfig+0x58e>
 8001ee0:	4b84      	ldr	r3, [pc, #528]	; (80020f4 <HAL_RCC_OscConfig+0x788>)
 8001ee2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ee4:	4a83      	ldr	r2, [pc, #524]	; (80020f4 <HAL_RCC_OscConfig+0x788>)
 8001ee6:	f043 0304 	orr.w	r3, r3, #4
 8001eea:	6713      	str	r3, [r2, #112]	; 0x70
 8001eec:	4b81      	ldr	r3, [pc, #516]	; (80020f4 <HAL_RCC_OscConfig+0x788>)
 8001eee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ef0:	4a80      	ldr	r2, [pc, #512]	; (80020f4 <HAL_RCC_OscConfig+0x788>)
 8001ef2:	f043 0301 	orr.w	r3, r3, #1
 8001ef6:	6713      	str	r3, [r2, #112]	; 0x70
 8001ef8:	e00b      	b.n	8001f12 <HAL_RCC_OscConfig+0x5a6>
 8001efa:	4b7e      	ldr	r3, [pc, #504]	; (80020f4 <HAL_RCC_OscConfig+0x788>)
 8001efc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001efe:	4a7d      	ldr	r2, [pc, #500]	; (80020f4 <HAL_RCC_OscConfig+0x788>)
 8001f00:	f023 0301 	bic.w	r3, r3, #1
 8001f04:	6713      	str	r3, [r2, #112]	; 0x70
 8001f06:	4b7b      	ldr	r3, [pc, #492]	; (80020f4 <HAL_RCC_OscConfig+0x788>)
 8001f08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f0a:	4a7a      	ldr	r2, [pc, #488]	; (80020f4 <HAL_RCC_OscConfig+0x788>)
 8001f0c:	f023 0304 	bic.w	r3, r3, #4
 8001f10:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	689b      	ldr	r3, [r3, #8]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d015      	beq.n	8001f46 <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f1a:	f7fe fe3f 	bl	8000b9c <HAL_GetTick>
 8001f1e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001f20:	e00a      	b.n	8001f38 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f22:	f7fe fe3b 	bl	8000b9c <HAL_GetTick>
 8001f26:	4602      	mov	r2, r0
 8001f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f2a:	1ad3      	subs	r3, r2, r3
 8001f2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f30:	4293      	cmp	r3, r2
 8001f32:	d901      	bls.n	8001f38 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8001f34:	2303      	movs	r3, #3
 8001f36:	e122      	b.n	800217e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001f38:	4b6e      	ldr	r3, [pc, #440]	; (80020f4 <HAL_RCC_OscConfig+0x788>)
 8001f3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f3c:	f003 0302 	and.w	r3, r3, #2
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d0ee      	beq.n	8001f22 <HAL_RCC_OscConfig+0x5b6>
 8001f44:	e014      	b.n	8001f70 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f46:	f7fe fe29 	bl	8000b9c <HAL_GetTick>
 8001f4a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001f4c:	e00a      	b.n	8001f64 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f4e:	f7fe fe25 	bl	8000b9c <HAL_GetTick>
 8001f52:	4602      	mov	r2, r0
 8001f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f56:	1ad3      	subs	r3, r2, r3
 8001f58:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f5c:	4293      	cmp	r3, r2
 8001f5e:	d901      	bls.n	8001f64 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8001f60:	2303      	movs	r3, #3
 8001f62:	e10c      	b.n	800217e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001f64:	4b63      	ldr	r3, [pc, #396]	; (80020f4 <HAL_RCC_OscConfig+0x788>)
 8001f66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f68:	f003 0302 	and.w	r3, r3, #2
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d1ee      	bne.n	8001f4e <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	f000 8101 	beq.w	800217c <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001f7a:	4b5e      	ldr	r3, [pc, #376]	; (80020f4 <HAL_RCC_OscConfig+0x788>)
 8001f7c:	691b      	ldr	r3, [r3, #16]
 8001f7e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001f82:	2b18      	cmp	r3, #24
 8001f84:	f000 80bc 	beq.w	8002100 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f8c:	2b02      	cmp	r3, #2
 8001f8e:	f040 8095 	bne.w	80020bc <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f92:	4b58      	ldr	r3, [pc, #352]	; (80020f4 <HAL_RCC_OscConfig+0x788>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	4a57      	ldr	r2, [pc, #348]	; (80020f4 <HAL_RCC_OscConfig+0x788>)
 8001f98:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001f9c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f9e:	f7fe fdfd 	bl	8000b9c <HAL_GetTick>
 8001fa2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001fa4:	e008      	b.n	8001fb8 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fa6:	f7fe fdf9 	bl	8000b9c <HAL_GetTick>
 8001faa:	4602      	mov	r2, r0
 8001fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fae:	1ad3      	subs	r3, r2, r3
 8001fb0:	2b02      	cmp	r3, #2
 8001fb2:	d901      	bls.n	8001fb8 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8001fb4:	2303      	movs	r3, #3
 8001fb6:	e0e2      	b.n	800217e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001fb8:	4b4e      	ldr	r3, [pc, #312]	; (80020f4 <HAL_RCC_OscConfig+0x788>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d1f0      	bne.n	8001fa6 <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001fc4:	4b4b      	ldr	r3, [pc, #300]	; (80020f4 <HAL_RCC_OscConfig+0x788>)
 8001fc6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001fc8:	4b4b      	ldr	r3, [pc, #300]	; (80020f8 <HAL_RCC_OscConfig+0x78c>)
 8001fca:	4013      	ands	r3, r2
 8001fcc:	687a      	ldr	r2, [r7, #4]
 8001fce:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8001fd0:	687a      	ldr	r2, [r7, #4]
 8001fd2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001fd4:	0112      	lsls	r2, r2, #4
 8001fd6:	430a      	orrs	r2, r1
 8001fd8:	4946      	ldr	r1, [pc, #280]	; (80020f4 <HAL_RCC_OscConfig+0x788>)
 8001fda:	4313      	orrs	r3, r2
 8001fdc:	628b      	str	r3, [r1, #40]	; 0x28
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fe2:	3b01      	subs	r3, #1
 8001fe4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fec:	3b01      	subs	r3, #1
 8001fee:	025b      	lsls	r3, r3, #9
 8001ff0:	b29b      	uxth	r3, r3
 8001ff2:	431a      	orrs	r2, r3
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ff8:	3b01      	subs	r3, #1
 8001ffa:	041b      	lsls	r3, r3, #16
 8001ffc:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002000:	431a      	orrs	r2, r3
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002006:	3b01      	subs	r3, #1
 8002008:	061b      	lsls	r3, r3, #24
 800200a:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800200e:	4939      	ldr	r1, [pc, #228]	; (80020f4 <HAL_RCC_OscConfig+0x788>)
 8002010:	4313      	orrs	r3, r2
 8002012:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8002014:	4b37      	ldr	r3, [pc, #220]	; (80020f4 <HAL_RCC_OscConfig+0x788>)
 8002016:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002018:	4a36      	ldr	r2, [pc, #216]	; (80020f4 <HAL_RCC_OscConfig+0x788>)
 800201a:	f023 0301 	bic.w	r3, r3, #1
 800201e:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002020:	4b34      	ldr	r3, [pc, #208]	; (80020f4 <HAL_RCC_OscConfig+0x788>)
 8002022:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002024:	4b35      	ldr	r3, [pc, #212]	; (80020fc <HAL_RCC_OscConfig+0x790>)
 8002026:	4013      	ands	r3, r2
 8002028:	687a      	ldr	r2, [r7, #4]
 800202a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800202c:	00d2      	lsls	r2, r2, #3
 800202e:	4931      	ldr	r1, [pc, #196]	; (80020f4 <HAL_RCC_OscConfig+0x788>)
 8002030:	4313      	orrs	r3, r2
 8002032:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002034:	4b2f      	ldr	r3, [pc, #188]	; (80020f4 <HAL_RCC_OscConfig+0x788>)
 8002036:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002038:	f023 020c 	bic.w	r2, r3, #12
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002040:	492c      	ldr	r1, [pc, #176]	; (80020f4 <HAL_RCC_OscConfig+0x788>)
 8002042:	4313      	orrs	r3, r2
 8002044:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002046:	4b2b      	ldr	r3, [pc, #172]	; (80020f4 <HAL_RCC_OscConfig+0x788>)
 8002048:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800204a:	f023 0202 	bic.w	r2, r3, #2
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002052:	4928      	ldr	r1, [pc, #160]	; (80020f4 <HAL_RCC_OscConfig+0x788>)
 8002054:	4313      	orrs	r3, r2
 8002056:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002058:	4b26      	ldr	r3, [pc, #152]	; (80020f4 <HAL_RCC_OscConfig+0x788>)
 800205a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800205c:	4a25      	ldr	r2, [pc, #148]	; (80020f4 <HAL_RCC_OscConfig+0x788>)
 800205e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002062:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002064:	4b23      	ldr	r3, [pc, #140]	; (80020f4 <HAL_RCC_OscConfig+0x788>)
 8002066:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002068:	4a22      	ldr	r2, [pc, #136]	; (80020f4 <HAL_RCC_OscConfig+0x788>)
 800206a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800206e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002070:	4b20      	ldr	r3, [pc, #128]	; (80020f4 <HAL_RCC_OscConfig+0x788>)
 8002072:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002074:	4a1f      	ldr	r2, [pc, #124]	; (80020f4 <HAL_RCC_OscConfig+0x788>)
 8002076:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800207a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 800207c:	4b1d      	ldr	r3, [pc, #116]	; (80020f4 <HAL_RCC_OscConfig+0x788>)
 800207e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002080:	4a1c      	ldr	r2, [pc, #112]	; (80020f4 <HAL_RCC_OscConfig+0x788>)
 8002082:	f043 0301 	orr.w	r3, r3, #1
 8002086:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002088:	4b1a      	ldr	r3, [pc, #104]	; (80020f4 <HAL_RCC_OscConfig+0x788>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4a19      	ldr	r2, [pc, #100]	; (80020f4 <HAL_RCC_OscConfig+0x788>)
 800208e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002092:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002094:	f7fe fd82 	bl	8000b9c <HAL_GetTick>
 8002098:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800209a:	e008      	b.n	80020ae <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800209c:	f7fe fd7e 	bl	8000b9c <HAL_GetTick>
 80020a0:	4602      	mov	r2, r0
 80020a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020a4:	1ad3      	subs	r3, r2, r3
 80020a6:	2b02      	cmp	r3, #2
 80020a8:	d901      	bls.n	80020ae <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 80020aa:	2303      	movs	r3, #3
 80020ac:	e067      	b.n	800217e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80020ae:	4b11      	ldr	r3, [pc, #68]	; (80020f4 <HAL_RCC_OscConfig+0x788>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d0f0      	beq.n	800209c <HAL_RCC_OscConfig+0x730>
 80020ba:	e05f      	b.n	800217c <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020bc:	4b0d      	ldr	r3, [pc, #52]	; (80020f4 <HAL_RCC_OscConfig+0x788>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4a0c      	ldr	r2, [pc, #48]	; (80020f4 <HAL_RCC_OscConfig+0x788>)
 80020c2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80020c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020c8:	f7fe fd68 	bl	8000b9c <HAL_GetTick>
 80020cc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80020ce:	e008      	b.n	80020e2 <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020d0:	f7fe fd64 	bl	8000b9c <HAL_GetTick>
 80020d4:	4602      	mov	r2, r0
 80020d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020d8:	1ad3      	subs	r3, r2, r3
 80020da:	2b02      	cmp	r3, #2
 80020dc:	d901      	bls.n	80020e2 <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 80020de:	2303      	movs	r3, #3
 80020e0:	e04d      	b.n	800217e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80020e2:	4b04      	ldr	r3, [pc, #16]	; (80020f4 <HAL_RCC_OscConfig+0x788>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d1f0      	bne.n	80020d0 <HAL_RCC_OscConfig+0x764>
 80020ee:	e045      	b.n	800217c <HAL_RCC_OscConfig+0x810>
 80020f0:	58024800 	.word	0x58024800
 80020f4:	58024400 	.word	0x58024400
 80020f8:	fffffc0c 	.word	0xfffffc0c
 80020fc:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002100:	4b21      	ldr	r3, [pc, #132]	; (8002188 <HAL_RCC_OscConfig+0x81c>)
 8002102:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002104:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002106:	4b20      	ldr	r3, [pc, #128]	; (8002188 <HAL_RCC_OscConfig+0x81c>)
 8002108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800210a:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002110:	2b01      	cmp	r3, #1
 8002112:	d031      	beq.n	8002178 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002114:	693b      	ldr	r3, [r7, #16]
 8002116:	f003 0203 	and.w	r2, r3, #3
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800211e:	429a      	cmp	r2, r3
 8002120:	d12a      	bne.n	8002178 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002122:	693b      	ldr	r3, [r7, #16]
 8002124:	091b      	lsrs	r3, r3, #4
 8002126:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800212e:	429a      	cmp	r2, r3
 8002130:	d122      	bne.n	8002178 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800213c:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800213e:	429a      	cmp	r2, r3
 8002140:	d11a      	bne.n	8002178 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	0a5b      	lsrs	r3, r3, #9
 8002146:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800214e:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002150:	429a      	cmp	r2, r3
 8002152:	d111      	bne.n	8002178 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	0c1b      	lsrs	r3, r3, #16
 8002158:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002160:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002162:	429a      	cmp	r2, r3
 8002164:	d108      	bne.n	8002178 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	0e1b      	lsrs	r3, r3, #24
 800216a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002172:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002174:	429a      	cmp	r2, r3
 8002176:	d001      	beq.n	800217c <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8002178:	2301      	movs	r3, #1
 800217a:	e000      	b.n	800217e <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 800217c:	2300      	movs	r3, #0
}
 800217e:	4618      	mov	r0, r3
 8002180:	3730      	adds	r7, #48	; 0x30
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}
 8002186:	bf00      	nop
 8002188:	58024400 	.word	0x58024400

0800218c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b086      	sub	sp, #24
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
 8002194:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	2b00      	cmp	r3, #0
 800219a:	d101      	bne.n	80021a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800219c:	2301      	movs	r3, #1
 800219e:	e19c      	b.n	80024da <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80021a0:	4b8a      	ldr	r3, [pc, #552]	; (80023cc <HAL_RCC_ClockConfig+0x240>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f003 030f 	and.w	r3, r3, #15
 80021a8:	683a      	ldr	r2, [r7, #0]
 80021aa:	429a      	cmp	r2, r3
 80021ac:	d910      	bls.n	80021d0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021ae:	4b87      	ldr	r3, [pc, #540]	; (80023cc <HAL_RCC_ClockConfig+0x240>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f023 020f 	bic.w	r2, r3, #15
 80021b6:	4985      	ldr	r1, [pc, #532]	; (80023cc <HAL_RCC_ClockConfig+0x240>)
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	4313      	orrs	r3, r2
 80021bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80021be:	4b83      	ldr	r3, [pc, #524]	; (80023cc <HAL_RCC_ClockConfig+0x240>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f003 030f 	and.w	r3, r3, #15
 80021c6:	683a      	ldr	r2, [r7, #0]
 80021c8:	429a      	cmp	r2, r3
 80021ca:	d001      	beq.n	80021d0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80021cc:	2301      	movs	r3, #1
 80021ce:	e184      	b.n	80024da <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f003 0304 	and.w	r3, r3, #4
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d010      	beq.n	80021fe <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	691a      	ldr	r2, [r3, #16]
 80021e0:	4b7b      	ldr	r3, [pc, #492]	; (80023d0 <HAL_RCC_ClockConfig+0x244>)
 80021e2:	699b      	ldr	r3, [r3, #24]
 80021e4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80021e8:	429a      	cmp	r2, r3
 80021ea:	d908      	bls.n	80021fe <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80021ec:	4b78      	ldr	r3, [pc, #480]	; (80023d0 <HAL_RCC_ClockConfig+0x244>)
 80021ee:	699b      	ldr	r3, [r3, #24]
 80021f0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	691b      	ldr	r3, [r3, #16]
 80021f8:	4975      	ldr	r1, [pc, #468]	; (80023d0 <HAL_RCC_ClockConfig+0x244>)
 80021fa:	4313      	orrs	r3, r2
 80021fc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f003 0308 	and.w	r3, r3, #8
 8002206:	2b00      	cmp	r3, #0
 8002208:	d010      	beq.n	800222c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	695a      	ldr	r2, [r3, #20]
 800220e:	4b70      	ldr	r3, [pc, #448]	; (80023d0 <HAL_RCC_ClockConfig+0x244>)
 8002210:	69db      	ldr	r3, [r3, #28]
 8002212:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002216:	429a      	cmp	r2, r3
 8002218:	d908      	bls.n	800222c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800221a:	4b6d      	ldr	r3, [pc, #436]	; (80023d0 <HAL_RCC_ClockConfig+0x244>)
 800221c:	69db      	ldr	r3, [r3, #28]
 800221e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	695b      	ldr	r3, [r3, #20]
 8002226:	496a      	ldr	r1, [pc, #424]	; (80023d0 <HAL_RCC_ClockConfig+0x244>)
 8002228:	4313      	orrs	r3, r2
 800222a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f003 0310 	and.w	r3, r3, #16
 8002234:	2b00      	cmp	r3, #0
 8002236:	d010      	beq.n	800225a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	699a      	ldr	r2, [r3, #24]
 800223c:	4b64      	ldr	r3, [pc, #400]	; (80023d0 <HAL_RCC_ClockConfig+0x244>)
 800223e:	69db      	ldr	r3, [r3, #28]
 8002240:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002244:	429a      	cmp	r2, r3
 8002246:	d908      	bls.n	800225a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002248:	4b61      	ldr	r3, [pc, #388]	; (80023d0 <HAL_RCC_ClockConfig+0x244>)
 800224a:	69db      	ldr	r3, [r3, #28]
 800224c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	699b      	ldr	r3, [r3, #24]
 8002254:	495e      	ldr	r1, [pc, #376]	; (80023d0 <HAL_RCC_ClockConfig+0x244>)
 8002256:	4313      	orrs	r3, r2
 8002258:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f003 0320 	and.w	r3, r3, #32
 8002262:	2b00      	cmp	r3, #0
 8002264:	d010      	beq.n	8002288 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	69da      	ldr	r2, [r3, #28]
 800226a:	4b59      	ldr	r3, [pc, #356]	; (80023d0 <HAL_RCC_ClockConfig+0x244>)
 800226c:	6a1b      	ldr	r3, [r3, #32]
 800226e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002272:	429a      	cmp	r2, r3
 8002274:	d908      	bls.n	8002288 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002276:	4b56      	ldr	r3, [pc, #344]	; (80023d0 <HAL_RCC_ClockConfig+0x244>)
 8002278:	6a1b      	ldr	r3, [r3, #32]
 800227a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	69db      	ldr	r3, [r3, #28]
 8002282:	4953      	ldr	r1, [pc, #332]	; (80023d0 <HAL_RCC_ClockConfig+0x244>)
 8002284:	4313      	orrs	r3, r2
 8002286:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f003 0302 	and.w	r3, r3, #2
 8002290:	2b00      	cmp	r3, #0
 8002292:	d010      	beq.n	80022b6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	68da      	ldr	r2, [r3, #12]
 8002298:	4b4d      	ldr	r3, [pc, #308]	; (80023d0 <HAL_RCC_ClockConfig+0x244>)
 800229a:	699b      	ldr	r3, [r3, #24]
 800229c:	f003 030f 	and.w	r3, r3, #15
 80022a0:	429a      	cmp	r2, r3
 80022a2:	d908      	bls.n	80022b6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022a4:	4b4a      	ldr	r3, [pc, #296]	; (80023d0 <HAL_RCC_ClockConfig+0x244>)
 80022a6:	699b      	ldr	r3, [r3, #24]
 80022a8:	f023 020f 	bic.w	r2, r3, #15
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	68db      	ldr	r3, [r3, #12]
 80022b0:	4947      	ldr	r1, [pc, #284]	; (80023d0 <HAL_RCC_ClockConfig+0x244>)
 80022b2:	4313      	orrs	r3, r2
 80022b4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f003 0301 	and.w	r3, r3, #1
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d055      	beq.n	800236e <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80022c2:	4b43      	ldr	r3, [pc, #268]	; (80023d0 <HAL_RCC_ClockConfig+0x244>)
 80022c4:	699b      	ldr	r3, [r3, #24]
 80022c6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	689b      	ldr	r3, [r3, #8]
 80022ce:	4940      	ldr	r1, [pc, #256]	; (80023d0 <HAL_RCC_ClockConfig+0x244>)
 80022d0:	4313      	orrs	r3, r2
 80022d2:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	2b02      	cmp	r3, #2
 80022da:	d107      	bne.n	80022ec <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80022dc:	4b3c      	ldr	r3, [pc, #240]	; (80023d0 <HAL_RCC_ClockConfig+0x244>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d121      	bne.n	800232c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80022e8:	2301      	movs	r3, #1
 80022ea:	e0f6      	b.n	80024da <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	2b03      	cmp	r3, #3
 80022f2:	d107      	bne.n	8002304 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80022f4:	4b36      	ldr	r3, [pc, #216]	; (80023d0 <HAL_RCC_ClockConfig+0x244>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d115      	bne.n	800232c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002300:	2301      	movs	r3, #1
 8002302:	e0ea      	b.n	80024da <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	2b01      	cmp	r3, #1
 800230a:	d107      	bne.n	800231c <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800230c:	4b30      	ldr	r3, [pc, #192]	; (80023d0 <HAL_RCC_ClockConfig+0x244>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002314:	2b00      	cmp	r3, #0
 8002316:	d109      	bne.n	800232c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002318:	2301      	movs	r3, #1
 800231a:	e0de      	b.n	80024da <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800231c:	4b2c      	ldr	r3, [pc, #176]	; (80023d0 <HAL_RCC_ClockConfig+0x244>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f003 0304 	and.w	r3, r3, #4
 8002324:	2b00      	cmp	r3, #0
 8002326:	d101      	bne.n	800232c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002328:	2301      	movs	r3, #1
 800232a:	e0d6      	b.n	80024da <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800232c:	4b28      	ldr	r3, [pc, #160]	; (80023d0 <HAL_RCC_ClockConfig+0x244>)
 800232e:	691b      	ldr	r3, [r3, #16]
 8002330:	f023 0207 	bic.w	r2, r3, #7
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	4925      	ldr	r1, [pc, #148]	; (80023d0 <HAL_RCC_ClockConfig+0x244>)
 800233a:	4313      	orrs	r3, r2
 800233c:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800233e:	f7fe fc2d 	bl	8000b9c <HAL_GetTick>
 8002342:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002344:	e00a      	b.n	800235c <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002346:	f7fe fc29 	bl	8000b9c <HAL_GetTick>
 800234a:	4602      	mov	r2, r0
 800234c:	697b      	ldr	r3, [r7, #20]
 800234e:	1ad3      	subs	r3, r2, r3
 8002350:	f241 3288 	movw	r2, #5000	; 0x1388
 8002354:	4293      	cmp	r3, r2
 8002356:	d901      	bls.n	800235c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002358:	2303      	movs	r3, #3
 800235a:	e0be      	b.n	80024da <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800235c:	4b1c      	ldr	r3, [pc, #112]	; (80023d0 <HAL_RCC_ClockConfig+0x244>)
 800235e:	691b      	ldr	r3, [r3, #16]
 8002360:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	00db      	lsls	r3, r3, #3
 800236a:	429a      	cmp	r2, r3
 800236c:	d1eb      	bne.n	8002346 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f003 0302 	and.w	r3, r3, #2
 8002376:	2b00      	cmp	r3, #0
 8002378:	d010      	beq.n	800239c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	68da      	ldr	r2, [r3, #12]
 800237e:	4b14      	ldr	r3, [pc, #80]	; (80023d0 <HAL_RCC_ClockConfig+0x244>)
 8002380:	699b      	ldr	r3, [r3, #24]
 8002382:	f003 030f 	and.w	r3, r3, #15
 8002386:	429a      	cmp	r2, r3
 8002388:	d208      	bcs.n	800239c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800238a:	4b11      	ldr	r3, [pc, #68]	; (80023d0 <HAL_RCC_ClockConfig+0x244>)
 800238c:	699b      	ldr	r3, [r3, #24]
 800238e:	f023 020f 	bic.w	r2, r3, #15
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	68db      	ldr	r3, [r3, #12]
 8002396:	490e      	ldr	r1, [pc, #56]	; (80023d0 <HAL_RCC_ClockConfig+0x244>)
 8002398:	4313      	orrs	r3, r2
 800239a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800239c:	4b0b      	ldr	r3, [pc, #44]	; (80023cc <HAL_RCC_ClockConfig+0x240>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f003 030f 	and.w	r3, r3, #15
 80023a4:	683a      	ldr	r2, [r7, #0]
 80023a6:	429a      	cmp	r2, r3
 80023a8:	d214      	bcs.n	80023d4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023aa:	4b08      	ldr	r3, [pc, #32]	; (80023cc <HAL_RCC_ClockConfig+0x240>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f023 020f 	bic.w	r2, r3, #15
 80023b2:	4906      	ldr	r1, [pc, #24]	; (80023cc <HAL_RCC_ClockConfig+0x240>)
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	4313      	orrs	r3, r2
 80023b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023ba:	4b04      	ldr	r3, [pc, #16]	; (80023cc <HAL_RCC_ClockConfig+0x240>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f003 030f 	and.w	r3, r3, #15
 80023c2:	683a      	ldr	r2, [r7, #0]
 80023c4:	429a      	cmp	r2, r3
 80023c6:	d005      	beq.n	80023d4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80023c8:	2301      	movs	r3, #1
 80023ca:	e086      	b.n	80024da <HAL_RCC_ClockConfig+0x34e>
 80023cc:	52002000 	.word	0x52002000
 80023d0:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f003 0304 	and.w	r3, r3, #4
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d010      	beq.n	8002402 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	691a      	ldr	r2, [r3, #16]
 80023e4:	4b3f      	ldr	r3, [pc, #252]	; (80024e4 <HAL_RCC_ClockConfig+0x358>)
 80023e6:	699b      	ldr	r3, [r3, #24]
 80023e8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80023ec:	429a      	cmp	r2, r3
 80023ee:	d208      	bcs.n	8002402 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80023f0:	4b3c      	ldr	r3, [pc, #240]	; (80024e4 <HAL_RCC_ClockConfig+0x358>)
 80023f2:	699b      	ldr	r3, [r3, #24]
 80023f4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	691b      	ldr	r3, [r3, #16]
 80023fc:	4939      	ldr	r1, [pc, #228]	; (80024e4 <HAL_RCC_ClockConfig+0x358>)
 80023fe:	4313      	orrs	r3, r2
 8002400:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f003 0308 	and.w	r3, r3, #8
 800240a:	2b00      	cmp	r3, #0
 800240c:	d010      	beq.n	8002430 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	695a      	ldr	r2, [r3, #20]
 8002412:	4b34      	ldr	r3, [pc, #208]	; (80024e4 <HAL_RCC_ClockConfig+0x358>)
 8002414:	69db      	ldr	r3, [r3, #28]
 8002416:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800241a:	429a      	cmp	r2, r3
 800241c:	d208      	bcs.n	8002430 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800241e:	4b31      	ldr	r3, [pc, #196]	; (80024e4 <HAL_RCC_ClockConfig+0x358>)
 8002420:	69db      	ldr	r3, [r3, #28]
 8002422:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	695b      	ldr	r3, [r3, #20]
 800242a:	492e      	ldr	r1, [pc, #184]	; (80024e4 <HAL_RCC_ClockConfig+0x358>)
 800242c:	4313      	orrs	r3, r2
 800242e:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f003 0310 	and.w	r3, r3, #16
 8002438:	2b00      	cmp	r3, #0
 800243a:	d010      	beq.n	800245e <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	699a      	ldr	r2, [r3, #24]
 8002440:	4b28      	ldr	r3, [pc, #160]	; (80024e4 <HAL_RCC_ClockConfig+0x358>)
 8002442:	69db      	ldr	r3, [r3, #28]
 8002444:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002448:	429a      	cmp	r2, r3
 800244a:	d208      	bcs.n	800245e <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800244c:	4b25      	ldr	r3, [pc, #148]	; (80024e4 <HAL_RCC_ClockConfig+0x358>)
 800244e:	69db      	ldr	r3, [r3, #28]
 8002450:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	699b      	ldr	r3, [r3, #24]
 8002458:	4922      	ldr	r1, [pc, #136]	; (80024e4 <HAL_RCC_ClockConfig+0x358>)
 800245a:	4313      	orrs	r3, r2
 800245c:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f003 0320 	and.w	r3, r3, #32
 8002466:	2b00      	cmp	r3, #0
 8002468:	d010      	beq.n	800248c <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	69da      	ldr	r2, [r3, #28]
 800246e:	4b1d      	ldr	r3, [pc, #116]	; (80024e4 <HAL_RCC_ClockConfig+0x358>)
 8002470:	6a1b      	ldr	r3, [r3, #32]
 8002472:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002476:	429a      	cmp	r2, r3
 8002478:	d208      	bcs.n	800248c <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800247a:	4b1a      	ldr	r3, [pc, #104]	; (80024e4 <HAL_RCC_ClockConfig+0x358>)
 800247c:	6a1b      	ldr	r3, [r3, #32]
 800247e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	69db      	ldr	r3, [r3, #28]
 8002486:	4917      	ldr	r1, [pc, #92]	; (80024e4 <HAL_RCC_ClockConfig+0x358>)
 8002488:	4313      	orrs	r3, r2
 800248a:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800248c:	f000 f834 	bl	80024f8 <HAL_RCC_GetSysClockFreq>
 8002490:	4602      	mov	r2, r0
 8002492:	4b14      	ldr	r3, [pc, #80]	; (80024e4 <HAL_RCC_ClockConfig+0x358>)
 8002494:	699b      	ldr	r3, [r3, #24]
 8002496:	0a1b      	lsrs	r3, r3, #8
 8002498:	f003 030f 	and.w	r3, r3, #15
 800249c:	4912      	ldr	r1, [pc, #72]	; (80024e8 <HAL_RCC_ClockConfig+0x35c>)
 800249e:	5ccb      	ldrb	r3, [r1, r3]
 80024a0:	f003 031f 	and.w	r3, r3, #31
 80024a4:	fa22 f303 	lsr.w	r3, r2, r3
 80024a8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80024aa:	4b0e      	ldr	r3, [pc, #56]	; (80024e4 <HAL_RCC_ClockConfig+0x358>)
 80024ac:	699b      	ldr	r3, [r3, #24]
 80024ae:	f003 030f 	and.w	r3, r3, #15
 80024b2:	4a0d      	ldr	r2, [pc, #52]	; (80024e8 <HAL_RCC_ClockConfig+0x35c>)
 80024b4:	5cd3      	ldrb	r3, [r2, r3]
 80024b6:	f003 031f 	and.w	r3, r3, #31
 80024ba:	693a      	ldr	r2, [r7, #16]
 80024bc:	fa22 f303 	lsr.w	r3, r2, r3
 80024c0:	4a0a      	ldr	r2, [pc, #40]	; (80024ec <HAL_RCC_ClockConfig+0x360>)
 80024c2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80024c4:	4a0a      	ldr	r2, [pc, #40]	; (80024f0 <HAL_RCC_ClockConfig+0x364>)
 80024c6:	693b      	ldr	r3, [r7, #16]
 80024c8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80024ca:	4b0a      	ldr	r3, [pc, #40]	; (80024f4 <HAL_RCC_ClockConfig+0x368>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4618      	mov	r0, r3
 80024d0:	f7fe fb1a 	bl	8000b08 <HAL_InitTick>
 80024d4:	4603      	mov	r3, r0
 80024d6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80024d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80024da:	4618      	mov	r0, r3
 80024dc:	3718      	adds	r7, #24
 80024de:	46bd      	mov	sp, r7
 80024e0:	bd80      	pop	{r7, pc}
 80024e2:	bf00      	nop
 80024e4:	58024400 	.word	0x58024400
 80024e8:	08004de0 	.word	0x08004de0
 80024ec:	24000004 	.word	0x24000004
 80024f0:	24000000 	.word	0x24000000
 80024f4:	24000008 	.word	0x24000008

080024f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024f8:	b480      	push	{r7}
 80024fa:	b089      	sub	sp, #36	; 0x24
 80024fc:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80024fe:	4bb3      	ldr	r3, [pc, #716]	; (80027cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002500:	691b      	ldr	r3, [r3, #16]
 8002502:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002506:	2b18      	cmp	r3, #24
 8002508:	f200 8155 	bhi.w	80027b6 <HAL_RCC_GetSysClockFreq+0x2be>
 800250c:	a201      	add	r2, pc, #4	; (adr r2, 8002514 <HAL_RCC_GetSysClockFreq+0x1c>)
 800250e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002512:	bf00      	nop
 8002514:	08002579 	.word	0x08002579
 8002518:	080027b7 	.word	0x080027b7
 800251c:	080027b7 	.word	0x080027b7
 8002520:	080027b7 	.word	0x080027b7
 8002524:	080027b7 	.word	0x080027b7
 8002528:	080027b7 	.word	0x080027b7
 800252c:	080027b7 	.word	0x080027b7
 8002530:	080027b7 	.word	0x080027b7
 8002534:	0800259f 	.word	0x0800259f
 8002538:	080027b7 	.word	0x080027b7
 800253c:	080027b7 	.word	0x080027b7
 8002540:	080027b7 	.word	0x080027b7
 8002544:	080027b7 	.word	0x080027b7
 8002548:	080027b7 	.word	0x080027b7
 800254c:	080027b7 	.word	0x080027b7
 8002550:	080027b7 	.word	0x080027b7
 8002554:	080025a5 	.word	0x080025a5
 8002558:	080027b7 	.word	0x080027b7
 800255c:	080027b7 	.word	0x080027b7
 8002560:	080027b7 	.word	0x080027b7
 8002564:	080027b7 	.word	0x080027b7
 8002568:	080027b7 	.word	0x080027b7
 800256c:	080027b7 	.word	0x080027b7
 8002570:	080027b7 	.word	0x080027b7
 8002574:	080025ab 	.word	0x080025ab
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002578:	4b94      	ldr	r3, [pc, #592]	; (80027cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f003 0320 	and.w	r3, r3, #32
 8002580:	2b00      	cmp	r3, #0
 8002582:	d009      	beq.n	8002598 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002584:	4b91      	ldr	r3, [pc, #580]	; (80027cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	08db      	lsrs	r3, r3, #3
 800258a:	f003 0303 	and.w	r3, r3, #3
 800258e:	4a90      	ldr	r2, [pc, #576]	; (80027d0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002590:	fa22 f303 	lsr.w	r3, r2, r3
 8002594:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8002596:	e111      	b.n	80027bc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002598:	4b8d      	ldr	r3, [pc, #564]	; (80027d0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800259a:	61bb      	str	r3, [r7, #24]
    break;
 800259c:	e10e      	b.n	80027bc <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800259e:	4b8d      	ldr	r3, [pc, #564]	; (80027d4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80025a0:	61bb      	str	r3, [r7, #24]
    break;
 80025a2:	e10b      	b.n	80027bc <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80025a4:	4b8c      	ldr	r3, [pc, #560]	; (80027d8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80025a6:	61bb      	str	r3, [r7, #24]
    break;
 80025a8:	e108      	b.n	80027bc <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80025aa:	4b88      	ldr	r3, [pc, #544]	; (80027cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80025ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025ae:	f003 0303 	and.w	r3, r3, #3
 80025b2:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80025b4:	4b85      	ldr	r3, [pc, #532]	; (80027cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80025b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025b8:	091b      	lsrs	r3, r3, #4
 80025ba:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80025be:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80025c0:	4b82      	ldr	r3, [pc, #520]	; (80027cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80025c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025c4:	f003 0301 	and.w	r3, r3, #1
 80025c8:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80025ca:	4b80      	ldr	r3, [pc, #512]	; (80027cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80025cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025ce:	08db      	lsrs	r3, r3, #3
 80025d0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80025d4:	68fa      	ldr	r2, [r7, #12]
 80025d6:	fb02 f303 	mul.w	r3, r2, r3
 80025da:	ee07 3a90 	vmov	s15, r3
 80025de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80025e2:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80025e6:	693b      	ldr	r3, [r7, #16]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	f000 80e1 	beq.w	80027b0 <HAL_RCC_GetSysClockFreq+0x2b8>
 80025ee:	697b      	ldr	r3, [r7, #20]
 80025f0:	2b02      	cmp	r3, #2
 80025f2:	f000 8083 	beq.w	80026fc <HAL_RCC_GetSysClockFreq+0x204>
 80025f6:	697b      	ldr	r3, [r7, #20]
 80025f8:	2b02      	cmp	r3, #2
 80025fa:	f200 80a1 	bhi.w	8002740 <HAL_RCC_GetSysClockFreq+0x248>
 80025fe:	697b      	ldr	r3, [r7, #20]
 8002600:	2b00      	cmp	r3, #0
 8002602:	d003      	beq.n	800260c <HAL_RCC_GetSysClockFreq+0x114>
 8002604:	697b      	ldr	r3, [r7, #20]
 8002606:	2b01      	cmp	r3, #1
 8002608:	d056      	beq.n	80026b8 <HAL_RCC_GetSysClockFreq+0x1c0>
 800260a:	e099      	b.n	8002740 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800260c:	4b6f      	ldr	r3, [pc, #444]	; (80027cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f003 0320 	and.w	r3, r3, #32
 8002614:	2b00      	cmp	r3, #0
 8002616:	d02d      	beq.n	8002674 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002618:	4b6c      	ldr	r3, [pc, #432]	; (80027cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	08db      	lsrs	r3, r3, #3
 800261e:	f003 0303 	and.w	r3, r3, #3
 8002622:	4a6b      	ldr	r2, [pc, #428]	; (80027d0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002624:	fa22 f303 	lsr.w	r3, r2, r3
 8002628:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	ee07 3a90 	vmov	s15, r3
 8002630:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002634:	693b      	ldr	r3, [r7, #16]
 8002636:	ee07 3a90 	vmov	s15, r3
 800263a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800263e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002642:	4b62      	ldr	r3, [pc, #392]	; (80027cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002646:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800264a:	ee07 3a90 	vmov	s15, r3
 800264e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002652:	ed97 6a02 	vldr	s12, [r7, #8]
 8002656:	eddf 5a61 	vldr	s11, [pc, #388]	; 80027dc <HAL_RCC_GetSysClockFreq+0x2e4>
 800265a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800265e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002662:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002666:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800266a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800266e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8002672:	e087      	b.n	8002784 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002674:	693b      	ldr	r3, [r7, #16]
 8002676:	ee07 3a90 	vmov	s15, r3
 800267a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800267e:	eddf 6a58 	vldr	s13, [pc, #352]	; 80027e0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8002682:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002686:	4b51      	ldr	r3, [pc, #324]	; (80027cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800268a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800268e:	ee07 3a90 	vmov	s15, r3
 8002692:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002696:	ed97 6a02 	vldr	s12, [r7, #8]
 800269a:	eddf 5a50 	vldr	s11, [pc, #320]	; 80027dc <HAL_RCC_GetSysClockFreq+0x2e4>
 800269e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80026a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80026a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80026aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80026ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026b2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80026b6:	e065      	b.n	8002784 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80026b8:	693b      	ldr	r3, [r7, #16]
 80026ba:	ee07 3a90 	vmov	s15, r3
 80026be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80026c2:	eddf 6a48 	vldr	s13, [pc, #288]	; 80027e4 <HAL_RCC_GetSysClockFreq+0x2ec>
 80026c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80026ca:	4b40      	ldr	r3, [pc, #256]	; (80027cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80026cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80026d2:	ee07 3a90 	vmov	s15, r3
 80026d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80026da:	ed97 6a02 	vldr	s12, [r7, #8]
 80026de:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80027dc <HAL_RCC_GetSysClockFreq+0x2e4>
 80026e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80026e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80026ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80026ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80026f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026f6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80026fa:	e043      	b.n	8002784 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80026fc:	693b      	ldr	r3, [r7, #16]
 80026fe:	ee07 3a90 	vmov	s15, r3
 8002702:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002706:	eddf 6a38 	vldr	s13, [pc, #224]	; 80027e8 <HAL_RCC_GetSysClockFreq+0x2f0>
 800270a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800270e:	4b2f      	ldr	r3, [pc, #188]	; (80027cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002712:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002716:	ee07 3a90 	vmov	s15, r3
 800271a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800271e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002722:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80027dc <HAL_RCC_GetSysClockFreq+0x2e4>
 8002726:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800272a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800272e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002732:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002736:	ee67 7a27 	vmul.f32	s15, s14, s15
 800273a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800273e:	e021      	b.n	8002784 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002740:	693b      	ldr	r3, [r7, #16]
 8002742:	ee07 3a90 	vmov	s15, r3
 8002746:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800274a:	eddf 6a26 	vldr	s13, [pc, #152]	; 80027e4 <HAL_RCC_GetSysClockFreq+0x2ec>
 800274e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002752:	4b1e      	ldr	r3, [pc, #120]	; (80027cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002756:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800275a:	ee07 3a90 	vmov	s15, r3
 800275e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002762:	ed97 6a02 	vldr	s12, [r7, #8]
 8002766:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80027dc <HAL_RCC_GetSysClockFreq+0x2e4>
 800276a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800276e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002772:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002776:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800277a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800277e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002782:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8002784:	4b11      	ldr	r3, [pc, #68]	; (80027cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002786:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002788:	0a5b      	lsrs	r3, r3, #9
 800278a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800278e:	3301      	adds	r3, #1
 8002790:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	ee07 3a90 	vmov	s15, r3
 8002798:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800279c:	edd7 6a07 	vldr	s13, [r7, #28]
 80027a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80027a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80027a8:	ee17 3a90 	vmov	r3, s15
 80027ac:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80027ae:	e005      	b.n	80027bc <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80027b0:	2300      	movs	r3, #0
 80027b2:	61bb      	str	r3, [r7, #24]
    break;
 80027b4:	e002      	b.n	80027bc <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80027b6:	4b07      	ldr	r3, [pc, #28]	; (80027d4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80027b8:	61bb      	str	r3, [r7, #24]
    break;
 80027ba:	bf00      	nop
  }

  return sysclockfreq;
 80027bc:	69bb      	ldr	r3, [r7, #24]
}
 80027be:	4618      	mov	r0, r3
 80027c0:	3724      	adds	r7, #36	; 0x24
 80027c2:	46bd      	mov	sp, r7
 80027c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c8:	4770      	bx	lr
 80027ca:	bf00      	nop
 80027cc:	58024400 	.word	0x58024400
 80027d0:	03d09000 	.word	0x03d09000
 80027d4:	003d0900 	.word	0x003d0900
 80027d8:	017d7840 	.word	0x017d7840
 80027dc:	46000000 	.word	0x46000000
 80027e0:	4c742400 	.word	0x4c742400
 80027e4:	4a742400 	.word	0x4a742400
 80027e8:	4bbebc20 	.word	0x4bbebc20

080027ec <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b086      	sub	sp, #24
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80027f4:	2300      	movs	r3, #0
 80027f6:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80027f8:	2300      	movs	r3, #0
 80027fa:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002804:	2b00      	cmp	r3, #0
 8002806:	d03f      	beq.n	8002888 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800280c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002810:	d02a      	beq.n	8002868 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002812:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002816:	d824      	bhi.n	8002862 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002818:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800281c:	d018      	beq.n	8002850 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800281e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002822:	d81e      	bhi.n	8002862 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002824:	2b00      	cmp	r3, #0
 8002826:	d003      	beq.n	8002830 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002828:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800282c:	d007      	beq.n	800283e <HAL_RCCEx_PeriphCLKConfig+0x52>
 800282e:	e018      	b.n	8002862 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002830:	4bab      	ldr	r3, [pc, #684]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002834:	4aaa      	ldr	r2, [pc, #680]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002836:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800283a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800283c:	e015      	b.n	800286a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	3304      	adds	r3, #4
 8002842:	2102      	movs	r1, #2
 8002844:	4618      	mov	r0, r3
 8002846:	f000 ff11 	bl	800366c <RCCEx_PLL2_Config>
 800284a:	4603      	mov	r3, r0
 800284c:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800284e:	e00c      	b.n	800286a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	3324      	adds	r3, #36	; 0x24
 8002854:	2102      	movs	r1, #2
 8002856:	4618      	mov	r0, r3
 8002858:	f000 ffba 	bl	80037d0 <RCCEx_PLL3_Config>
 800285c:	4603      	mov	r3, r0
 800285e:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8002860:	e003      	b.n	800286a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002862:	2301      	movs	r3, #1
 8002864:	75fb      	strb	r3, [r7, #23]
      break;
 8002866:	e000      	b.n	800286a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002868:	bf00      	nop
    }

    if(ret == HAL_OK)
 800286a:	7dfb      	ldrb	r3, [r7, #23]
 800286c:	2b00      	cmp	r3, #0
 800286e:	d109      	bne.n	8002884 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8002870:	4b9b      	ldr	r3, [pc, #620]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002872:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002874:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800287c:	4998      	ldr	r1, [pc, #608]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800287e:	4313      	orrs	r3, r2
 8002880:	650b      	str	r3, [r1, #80]	; 0x50
 8002882:	e001      	b.n	8002888 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002884:	7dfb      	ldrb	r3, [r7, #23]
 8002886:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002890:	2b00      	cmp	r3, #0
 8002892:	d03d      	beq.n	8002910 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002898:	2b04      	cmp	r3, #4
 800289a:	d826      	bhi.n	80028ea <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800289c:	a201      	add	r2, pc, #4	; (adr r2, 80028a4 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800289e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028a2:	bf00      	nop
 80028a4:	080028b9 	.word	0x080028b9
 80028a8:	080028c7 	.word	0x080028c7
 80028ac:	080028d9 	.word	0x080028d9
 80028b0:	080028f1 	.word	0x080028f1
 80028b4:	080028f1 	.word	0x080028f1
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80028b8:	4b89      	ldr	r3, [pc, #548]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80028ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028bc:	4a88      	ldr	r2, [pc, #544]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80028be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028c2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80028c4:	e015      	b.n	80028f2 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	3304      	adds	r3, #4
 80028ca:	2100      	movs	r1, #0
 80028cc:	4618      	mov	r0, r3
 80028ce:	f000 fecd 	bl	800366c <RCCEx_PLL2_Config>
 80028d2:	4603      	mov	r3, r0
 80028d4:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80028d6:	e00c      	b.n	80028f2 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	3324      	adds	r3, #36	; 0x24
 80028dc:	2100      	movs	r1, #0
 80028de:	4618      	mov	r0, r3
 80028e0:	f000 ff76 	bl	80037d0 <RCCEx_PLL3_Config>
 80028e4:	4603      	mov	r3, r0
 80028e6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80028e8:	e003      	b.n	80028f2 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80028ea:	2301      	movs	r3, #1
 80028ec:	75fb      	strb	r3, [r7, #23]
      break;
 80028ee:	e000      	b.n	80028f2 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80028f0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80028f2:	7dfb      	ldrb	r3, [r7, #23]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d109      	bne.n	800290c <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80028f8:	4b79      	ldr	r3, [pc, #484]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80028fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028fc:	f023 0207 	bic.w	r2, r3, #7
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002904:	4976      	ldr	r1, [pc, #472]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002906:	4313      	orrs	r3, r2
 8002908:	650b      	str	r3, [r1, #80]	; 0x50
 800290a:	e001      	b.n	8002910 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800290c:	7dfb      	ldrb	r3, [r7, #23]
 800290e:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002918:	2b00      	cmp	r3, #0
 800291a:	d042      	beq.n	80029a2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002920:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002924:	d02b      	beq.n	800297e <HAL_RCCEx_PeriphCLKConfig+0x192>
 8002926:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800292a:	d825      	bhi.n	8002978 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800292c:	2bc0      	cmp	r3, #192	; 0xc0
 800292e:	d028      	beq.n	8002982 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8002930:	2bc0      	cmp	r3, #192	; 0xc0
 8002932:	d821      	bhi.n	8002978 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8002934:	2b80      	cmp	r3, #128	; 0x80
 8002936:	d016      	beq.n	8002966 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8002938:	2b80      	cmp	r3, #128	; 0x80
 800293a:	d81d      	bhi.n	8002978 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800293c:	2b00      	cmp	r3, #0
 800293e:	d002      	beq.n	8002946 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8002940:	2b40      	cmp	r3, #64	; 0x40
 8002942:	d007      	beq.n	8002954 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8002944:	e018      	b.n	8002978 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002946:	4b66      	ldr	r3, [pc, #408]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002948:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800294a:	4a65      	ldr	r2, [pc, #404]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800294c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002950:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8002952:	e017      	b.n	8002984 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	3304      	adds	r3, #4
 8002958:	2100      	movs	r1, #0
 800295a:	4618      	mov	r0, r3
 800295c:	f000 fe86 	bl	800366c <RCCEx_PLL2_Config>
 8002960:	4603      	mov	r3, r0
 8002962:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8002964:	e00e      	b.n	8002984 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	3324      	adds	r3, #36	; 0x24
 800296a:	2100      	movs	r1, #0
 800296c:	4618      	mov	r0, r3
 800296e:	f000 ff2f 	bl	80037d0 <RCCEx_PLL3_Config>
 8002972:	4603      	mov	r3, r0
 8002974:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8002976:	e005      	b.n	8002984 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002978:	2301      	movs	r3, #1
 800297a:	75fb      	strb	r3, [r7, #23]
      break;
 800297c:	e002      	b.n	8002984 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800297e:	bf00      	nop
 8002980:	e000      	b.n	8002984 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8002982:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002984:	7dfb      	ldrb	r3, [r7, #23]
 8002986:	2b00      	cmp	r3, #0
 8002988:	d109      	bne.n	800299e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800298a:	4b55      	ldr	r3, [pc, #340]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800298c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800298e:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002996:	4952      	ldr	r1, [pc, #328]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002998:	4313      	orrs	r3, r2
 800299a:	650b      	str	r3, [r1, #80]	; 0x50
 800299c:	e001      	b.n	80029a2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800299e:	7dfb      	ldrb	r3, [r7, #23]
 80029a0:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d049      	beq.n	8002a42 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80029b4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80029b8:	d030      	beq.n	8002a1c <HAL_RCCEx_PeriphCLKConfig+0x230>
 80029ba:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80029be:	d82a      	bhi.n	8002a16 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80029c0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80029c4:	d02c      	beq.n	8002a20 <HAL_RCCEx_PeriphCLKConfig+0x234>
 80029c6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80029ca:	d824      	bhi.n	8002a16 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80029cc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80029d0:	d018      	beq.n	8002a04 <HAL_RCCEx_PeriphCLKConfig+0x218>
 80029d2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80029d6:	d81e      	bhi.n	8002a16 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d003      	beq.n	80029e4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80029dc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80029e0:	d007      	beq.n	80029f2 <HAL_RCCEx_PeriphCLKConfig+0x206>
 80029e2:	e018      	b.n	8002a16 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80029e4:	4b3e      	ldr	r3, [pc, #248]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80029e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029e8:	4a3d      	ldr	r2, [pc, #244]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80029ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029ee:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80029f0:	e017      	b.n	8002a22 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	3304      	adds	r3, #4
 80029f6:	2100      	movs	r1, #0
 80029f8:	4618      	mov	r0, r3
 80029fa:	f000 fe37 	bl	800366c <RCCEx_PLL2_Config>
 80029fe:	4603      	mov	r3, r0
 8002a00:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8002a02:	e00e      	b.n	8002a22 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	3324      	adds	r3, #36	; 0x24
 8002a08:	2100      	movs	r1, #0
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	f000 fee0 	bl	80037d0 <RCCEx_PLL3_Config>
 8002a10:	4603      	mov	r3, r0
 8002a12:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002a14:	e005      	b.n	8002a22 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8002a16:	2301      	movs	r3, #1
 8002a18:	75fb      	strb	r3, [r7, #23]
      break;
 8002a1a:	e002      	b.n	8002a22 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8002a1c:	bf00      	nop
 8002a1e:	e000      	b.n	8002a22 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8002a20:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002a22:	7dfb      	ldrb	r3, [r7, #23]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d10a      	bne.n	8002a3e <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8002a28:	4b2d      	ldr	r3, [pc, #180]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002a2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a2c:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002a36:	492a      	ldr	r1, [pc, #168]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002a38:	4313      	orrs	r3, r2
 8002a3a:	658b      	str	r3, [r1, #88]	; 0x58
 8002a3c:	e001      	b.n	8002a42 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a3e:	7dfb      	ldrb	r3, [r7, #23]
 8002a40:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d04c      	beq.n	8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002a54:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002a58:	d030      	beq.n	8002abc <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8002a5a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002a5e:	d82a      	bhi.n	8002ab6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8002a60:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002a64:	d02c      	beq.n	8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8002a66:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002a6a:	d824      	bhi.n	8002ab6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8002a6c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002a70:	d018      	beq.n	8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8002a72:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002a76:	d81e      	bhi.n	8002ab6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d003      	beq.n	8002a84 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8002a7c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002a80:	d007      	beq.n	8002a92 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8002a82:	e018      	b.n	8002ab6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002a84:	4b16      	ldr	r3, [pc, #88]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002a86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a88:	4a15      	ldr	r2, [pc, #84]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002a8a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a8e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002a90:	e017      	b.n	8002ac2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	3304      	adds	r3, #4
 8002a96:	2100      	movs	r1, #0
 8002a98:	4618      	mov	r0, r3
 8002a9a:	f000 fde7 	bl	800366c <RCCEx_PLL2_Config>
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8002aa2:	e00e      	b.n	8002ac2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	3324      	adds	r3, #36	; 0x24
 8002aa8:	2100      	movs	r1, #0
 8002aaa:	4618      	mov	r0, r3
 8002aac:	f000 fe90 	bl	80037d0 <RCCEx_PLL3_Config>
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002ab4:	e005      	b.n	8002ac2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	75fb      	strb	r3, [r7, #23]
      break;
 8002aba:	e002      	b.n	8002ac2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8002abc:	bf00      	nop
 8002abe:	e000      	b.n	8002ac2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8002ac0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002ac2:	7dfb      	ldrb	r3, [r7, #23]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d10d      	bne.n	8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8002ac8:	4b05      	ldr	r3, [pc, #20]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002aca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002acc:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002ad6:	4902      	ldr	r1, [pc, #8]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002ad8:	4313      	orrs	r3, r2
 8002ada:	658b      	str	r3, [r1, #88]	; 0x58
 8002adc:	e004      	b.n	8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8002ade:	bf00      	nop
 8002ae0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ae4:	7dfb      	ldrb	r3, [r7, #23]
 8002ae6:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d032      	beq.n	8002b5a <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002af8:	2b30      	cmp	r3, #48	; 0x30
 8002afa:	d01c      	beq.n	8002b36 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8002afc:	2b30      	cmp	r3, #48	; 0x30
 8002afe:	d817      	bhi.n	8002b30 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8002b00:	2b20      	cmp	r3, #32
 8002b02:	d00c      	beq.n	8002b1e <HAL_RCCEx_PeriphCLKConfig+0x332>
 8002b04:	2b20      	cmp	r3, #32
 8002b06:	d813      	bhi.n	8002b30 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d016      	beq.n	8002b3a <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8002b0c:	2b10      	cmp	r3, #16
 8002b0e:	d10f      	bne.n	8002b30 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002b10:	4baf      	ldr	r3, [pc, #700]	; (8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8002b12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b14:	4aae      	ldr	r2, [pc, #696]	; (8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8002b16:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b1a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8002b1c:	e00e      	b.n	8002b3c <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	3304      	adds	r3, #4
 8002b22:	2102      	movs	r1, #2
 8002b24:	4618      	mov	r0, r3
 8002b26:	f000 fda1 	bl	800366c <RCCEx_PLL2_Config>
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8002b2e:	e005      	b.n	8002b3c <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8002b30:	2301      	movs	r3, #1
 8002b32:	75fb      	strb	r3, [r7, #23]
      break;
 8002b34:	e002      	b.n	8002b3c <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8002b36:	bf00      	nop
 8002b38:	e000      	b.n	8002b3c <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8002b3a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002b3c:	7dfb      	ldrb	r3, [r7, #23]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d109      	bne.n	8002b56 <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002b42:	4ba3      	ldr	r3, [pc, #652]	; (8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8002b44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b46:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b4e:	49a0      	ldr	r1, [pc, #640]	; (8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8002b50:	4313      	orrs	r3, r2
 8002b52:	64cb      	str	r3, [r1, #76]	; 0x4c
 8002b54:	e001      	b.n	8002b5a <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b56:	7dfb      	ldrb	r3, [r7, #23]
 8002b58:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d047      	beq.n	8002bf6 <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b6a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002b6e:	d030      	beq.n	8002bd2 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8002b70:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002b74:	d82a      	bhi.n	8002bcc <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8002b76:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002b7a:	d02c      	beq.n	8002bd6 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8002b7c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002b80:	d824      	bhi.n	8002bcc <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8002b82:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b86:	d018      	beq.n	8002bba <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8002b88:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b8c:	d81e      	bhi.n	8002bcc <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d003      	beq.n	8002b9a <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8002b92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b96:	d007      	beq.n	8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8002b98:	e018      	b.n	8002bcc <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002b9a:	4b8d      	ldr	r3, [pc, #564]	; (8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8002b9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b9e:	4a8c      	ldr	r2, [pc, #560]	; (8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8002ba0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ba4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002ba6:	e017      	b.n	8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	3304      	adds	r3, #4
 8002bac:	2100      	movs	r1, #0
 8002bae:	4618      	mov	r0, r3
 8002bb0:	f000 fd5c 	bl	800366c <RCCEx_PLL2_Config>
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002bb8:	e00e      	b.n	8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	3324      	adds	r3, #36	; 0x24
 8002bbe:	2100      	movs	r1, #0
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	f000 fe05 	bl	80037d0 <RCCEx_PLL3_Config>
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002bca:	e005      	b.n	8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002bcc:	2301      	movs	r3, #1
 8002bce:	75fb      	strb	r3, [r7, #23]
      break;
 8002bd0:	e002      	b.n	8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8002bd2:	bf00      	nop
 8002bd4:	e000      	b.n	8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8002bd6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002bd8:	7dfb      	ldrb	r3, [r7, #23]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d109      	bne.n	8002bf2 <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8002bde:	4b7c      	ldr	r3, [pc, #496]	; (8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8002be0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002be2:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bea:	4979      	ldr	r1, [pc, #484]	; (8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8002bec:	4313      	orrs	r3, r2
 8002bee:	650b      	str	r3, [r1, #80]	; 0x50
 8002bf0:	e001      	b.n	8002bf6 <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002bf2:	7dfb      	ldrb	r3, [r7, #23]
 8002bf4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d049      	beq.n	8002c96 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c06:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c0a:	d02e      	beq.n	8002c6a <HAL_RCCEx_PeriphCLKConfig+0x47e>
 8002c0c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c10:	d828      	bhi.n	8002c64 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8002c12:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002c16:	d02a      	beq.n	8002c6e <HAL_RCCEx_PeriphCLKConfig+0x482>
 8002c18:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002c1c:	d822      	bhi.n	8002c64 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8002c1e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002c22:	d026      	beq.n	8002c72 <HAL_RCCEx_PeriphCLKConfig+0x486>
 8002c24:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002c28:	d81c      	bhi.n	8002c64 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8002c2a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002c2e:	d010      	beq.n	8002c52 <HAL_RCCEx_PeriphCLKConfig+0x466>
 8002c30:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002c34:	d816      	bhi.n	8002c64 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d01d      	beq.n	8002c76 <HAL_RCCEx_PeriphCLKConfig+0x48a>
 8002c3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c3e:	d111      	bne.n	8002c64 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	3304      	adds	r3, #4
 8002c44:	2101      	movs	r1, #1
 8002c46:	4618      	mov	r0, r3
 8002c48:	f000 fd10 	bl	800366c <RCCEx_PLL2_Config>
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8002c50:	e012      	b.n	8002c78 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	3324      	adds	r3, #36	; 0x24
 8002c56:	2101      	movs	r1, #1
 8002c58:	4618      	mov	r0, r3
 8002c5a:	f000 fdb9 	bl	80037d0 <RCCEx_PLL3_Config>
 8002c5e:	4603      	mov	r3, r0
 8002c60:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8002c62:	e009      	b.n	8002c78 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002c64:	2301      	movs	r3, #1
 8002c66:	75fb      	strb	r3, [r7, #23]
      break;
 8002c68:	e006      	b.n	8002c78 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8002c6a:	bf00      	nop
 8002c6c:	e004      	b.n	8002c78 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8002c6e:	bf00      	nop
 8002c70:	e002      	b.n	8002c78 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8002c72:	bf00      	nop
 8002c74:	e000      	b.n	8002c78 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8002c76:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002c78:	7dfb      	ldrb	r3, [r7, #23]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d109      	bne.n	8002c92 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8002c7e:	4b54      	ldr	r3, [pc, #336]	; (8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8002c80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c82:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c8a:	4951      	ldr	r1, [pc, #324]	; (8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8002c8c:	4313      	orrs	r3, r2
 8002c8e:	650b      	str	r3, [r1, #80]	; 0x50
 8002c90:	e001      	b.n	8002c96 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c92:	7dfb      	ldrb	r3, [r7, #23]
 8002c94:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d04b      	beq.n	8002d3a <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002ca8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002cac:	d02e      	beq.n	8002d0c <HAL_RCCEx_PeriphCLKConfig+0x520>
 8002cae:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002cb2:	d828      	bhi.n	8002d06 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8002cb4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cb8:	d02a      	beq.n	8002d10 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8002cba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cbe:	d822      	bhi.n	8002d06 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8002cc0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002cc4:	d026      	beq.n	8002d14 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8002cc6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002cca:	d81c      	bhi.n	8002d06 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8002ccc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002cd0:	d010      	beq.n	8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x508>
 8002cd2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002cd6:	d816      	bhi.n	8002d06 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d01d      	beq.n	8002d18 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8002cdc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002ce0:	d111      	bne.n	8002d06 <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	3304      	adds	r3, #4
 8002ce6:	2101      	movs	r1, #1
 8002ce8:	4618      	mov	r0, r3
 8002cea:	f000 fcbf 	bl	800366c <RCCEx_PLL2_Config>
 8002cee:	4603      	mov	r3, r0
 8002cf0:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8002cf2:	e012      	b.n	8002d1a <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	3324      	adds	r3, #36	; 0x24
 8002cf8:	2101      	movs	r1, #1
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	f000 fd68 	bl	80037d0 <RCCEx_PLL3_Config>
 8002d00:	4603      	mov	r3, r0
 8002d02:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8002d04:	e009      	b.n	8002d1a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8002d06:	2301      	movs	r3, #1
 8002d08:	75fb      	strb	r3, [r7, #23]
      break;
 8002d0a:	e006      	b.n	8002d1a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8002d0c:	bf00      	nop
 8002d0e:	e004      	b.n	8002d1a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8002d10:	bf00      	nop
 8002d12:	e002      	b.n	8002d1a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8002d14:	bf00      	nop
 8002d16:	e000      	b.n	8002d1a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8002d18:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002d1a:	7dfb      	ldrb	r3, [r7, #23]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d10a      	bne.n	8002d36 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8002d20:	4b2b      	ldr	r3, [pc, #172]	; (8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8002d22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d24:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002d2e:	4928      	ldr	r1, [pc, #160]	; (8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8002d30:	4313      	orrs	r3, r2
 8002d32:	658b      	str	r3, [r1, #88]	; 0x58
 8002d34:	e001      	b.n	8002d3a <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d36:	7dfb      	ldrb	r3, [r7, #23]
 8002d38:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d02f      	beq.n	8002da6 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d4a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002d4e:	d00e      	beq.n	8002d6e <HAL_RCCEx_PeriphCLKConfig+0x582>
 8002d50:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002d54:	d814      	bhi.n	8002d80 <HAL_RCCEx_PeriphCLKConfig+0x594>
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d015      	beq.n	8002d86 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8002d5a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002d5e:	d10f      	bne.n	8002d80 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002d60:	4b1b      	ldr	r3, [pc, #108]	; (8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8002d62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d64:	4a1a      	ldr	r2, [pc, #104]	; (8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8002d66:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d6a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8002d6c:	e00c      	b.n	8002d88 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	3304      	adds	r3, #4
 8002d72:	2101      	movs	r1, #1
 8002d74:	4618      	mov	r0, r3
 8002d76:	f000 fc79 	bl	800366c <RCCEx_PLL2_Config>
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8002d7e:	e003      	b.n	8002d88 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002d80:	2301      	movs	r3, #1
 8002d82:	75fb      	strb	r3, [r7, #23]
      break;
 8002d84:	e000      	b.n	8002d88 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8002d86:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002d88:	7dfb      	ldrb	r3, [r7, #23]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d109      	bne.n	8002da2 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002d8e:	4b10      	ldr	r3, [pc, #64]	; (8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8002d90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d92:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d9a:	490d      	ldr	r1, [pc, #52]	; (8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8002d9c:	4313      	orrs	r3, r2
 8002d9e:	650b      	str	r3, [r1, #80]	; 0x50
 8002da0:	e001      	b.n	8002da6 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002da2:	7dfb      	ldrb	r3, [r7, #23]
 8002da4:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d033      	beq.n	8002e1a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002db6:	2b03      	cmp	r3, #3
 8002db8:	d81c      	bhi.n	8002df4 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8002dba:	a201      	add	r2, pc, #4	; (adr r2, 8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 8002dbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dc0:	08002dfb 	.word	0x08002dfb
 8002dc4:	08002dd5 	.word	0x08002dd5
 8002dc8:	08002de3 	.word	0x08002de3
 8002dcc:	08002dfb 	.word	0x08002dfb
 8002dd0:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002dd4:	4bb8      	ldr	r3, [pc, #736]	; (80030b8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002dd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dd8:	4ab7      	ldr	r2, [pc, #732]	; (80030b8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002dda:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002dde:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8002de0:	e00c      	b.n	8002dfc <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	3304      	adds	r3, #4
 8002de6:	2102      	movs	r1, #2
 8002de8:	4618      	mov	r0, r3
 8002dea:	f000 fc3f 	bl	800366c <RCCEx_PLL2_Config>
 8002dee:	4603      	mov	r3, r0
 8002df0:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8002df2:	e003      	b.n	8002dfc <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8002df4:	2301      	movs	r3, #1
 8002df6:	75fb      	strb	r3, [r7, #23]
      break;
 8002df8:	e000      	b.n	8002dfc <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8002dfa:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002dfc:	7dfb      	ldrb	r3, [r7, #23]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d109      	bne.n	8002e16 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8002e02:	4bad      	ldr	r3, [pc, #692]	; (80030b8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002e04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e06:	f023 0203 	bic.w	r2, r3, #3
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e0e:	49aa      	ldr	r1, [pc, #680]	; (80030b8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002e10:	4313      	orrs	r3, r2
 8002e12:	64cb      	str	r3, [r1, #76]	; 0x4c
 8002e14:	e001      	b.n	8002e1a <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e16:	7dfb      	ldrb	r3, [r7, #23]
 8002e18:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	f000 8086 	beq.w	8002f34 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002e28:	4ba4      	ldr	r3, [pc, #656]	; (80030bc <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	4aa3      	ldr	r2, [pc, #652]	; (80030bc <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8002e2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e32:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002e34:	f7fd feb2 	bl	8000b9c <HAL_GetTick>
 8002e38:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002e3a:	e009      	b.n	8002e50 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e3c:	f7fd feae 	bl	8000b9c <HAL_GetTick>
 8002e40:	4602      	mov	r2, r0
 8002e42:	693b      	ldr	r3, [r7, #16]
 8002e44:	1ad3      	subs	r3, r2, r3
 8002e46:	2b64      	cmp	r3, #100	; 0x64
 8002e48:	d902      	bls.n	8002e50 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8002e4a:	2303      	movs	r3, #3
 8002e4c:	75fb      	strb	r3, [r7, #23]
        break;
 8002e4e:	e005      	b.n	8002e5c <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002e50:	4b9a      	ldr	r3, [pc, #616]	; (80030bc <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d0ef      	beq.n	8002e3c <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8002e5c:	7dfb      	ldrb	r3, [r7, #23]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d166      	bne.n	8002f30 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8002e62:	4b95      	ldr	r3, [pc, #596]	; (80030b8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002e64:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002e6c:	4053      	eors	r3, r2
 8002e6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d013      	beq.n	8002e9e <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002e76:	4b90      	ldr	r3, [pc, #576]	; (80030b8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002e78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e7a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e7e:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002e80:	4b8d      	ldr	r3, [pc, #564]	; (80030b8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002e82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e84:	4a8c      	ldr	r2, [pc, #560]	; (80030b8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002e86:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e8a:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002e8c:	4b8a      	ldr	r3, [pc, #552]	; (80030b8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002e8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e90:	4a89      	ldr	r2, [pc, #548]	; (80030b8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002e92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e96:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8002e98:	4a87      	ldr	r2, [pc, #540]	; (80030b8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002ea4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ea8:	d115      	bne.n	8002ed6 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002eaa:	f7fd fe77 	bl	8000b9c <HAL_GetTick>
 8002eae:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002eb0:	e00b      	b.n	8002eca <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002eb2:	f7fd fe73 	bl	8000b9c <HAL_GetTick>
 8002eb6:	4602      	mov	r2, r0
 8002eb8:	693b      	ldr	r3, [r7, #16]
 8002eba:	1ad3      	subs	r3, r2, r3
 8002ebc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	d902      	bls.n	8002eca <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8002ec4:	2303      	movs	r3, #3
 8002ec6:	75fb      	strb	r3, [r7, #23]
            break;
 8002ec8:	e005      	b.n	8002ed6 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002eca:	4b7b      	ldr	r3, [pc, #492]	; (80030b8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002ecc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ece:	f003 0302 	and.w	r3, r3, #2
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d0ed      	beq.n	8002eb2 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8002ed6:	7dfb      	ldrb	r3, [r7, #23]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d126      	bne.n	8002f2a <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002ee2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ee6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002eea:	d10d      	bne.n	8002f08 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8002eec:	4b72      	ldr	r3, [pc, #456]	; (80030b8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002eee:	691b      	ldr	r3, [r3, #16]
 8002ef0:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002efa:	0919      	lsrs	r1, r3, #4
 8002efc:	4b70      	ldr	r3, [pc, #448]	; (80030c0 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 8002efe:	400b      	ands	r3, r1
 8002f00:	496d      	ldr	r1, [pc, #436]	; (80030b8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002f02:	4313      	orrs	r3, r2
 8002f04:	610b      	str	r3, [r1, #16]
 8002f06:	e005      	b.n	8002f14 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8002f08:	4b6b      	ldr	r3, [pc, #428]	; (80030b8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002f0a:	691b      	ldr	r3, [r3, #16]
 8002f0c:	4a6a      	ldr	r2, [pc, #424]	; (80030b8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002f0e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002f12:	6113      	str	r3, [r2, #16]
 8002f14:	4b68      	ldr	r3, [pc, #416]	; (80030b8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002f16:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002f1e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f22:	4965      	ldr	r1, [pc, #404]	; (80030b8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002f24:	4313      	orrs	r3, r2
 8002f26:	670b      	str	r3, [r1, #112]	; 0x70
 8002f28:	e004      	b.n	8002f34 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002f2a:	7dfb      	ldrb	r3, [r7, #23]
 8002f2c:	75bb      	strb	r3, [r7, #22]
 8002f2e:	e001      	b.n	8002f34 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f30:	7dfb      	ldrb	r3, [r7, #23]
 8002f32:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f003 0301 	and.w	r3, r3, #1
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d07e      	beq.n	800303e <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002f44:	2b28      	cmp	r3, #40	; 0x28
 8002f46:	d867      	bhi.n	8003018 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8002f48:	a201      	add	r2, pc, #4	; (adr r2, 8002f50 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8002f4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f4e:	bf00      	nop
 8002f50:	0800301f 	.word	0x0800301f
 8002f54:	08003019 	.word	0x08003019
 8002f58:	08003019 	.word	0x08003019
 8002f5c:	08003019 	.word	0x08003019
 8002f60:	08003019 	.word	0x08003019
 8002f64:	08003019 	.word	0x08003019
 8002f68:	08003019 	.word	0x08003019
 8002f6c:	08003019 	.word	0x08003019
 8002f70:	08002ff5 	.word	0x08002ff5
 8002f74:	08003019 	.word	0x08003019
 8002f78:	08003019 	.word	0x08003019
 8002f7c:	08003019 	.word	0x08003019
 8002f80:	08003019 	.word	0x08003019
 8002f84:	08003019 	.word	0x08003019
 8002f88:	08003019 	.word	0x08003019
 8002f8c:	08003019 	.word	0x08003019
 8002f90:	08003007 	.word	0x08003007
 8002f94:	08003019 	.word	0x08003019
 8002f98:	08003019 	.word	0x08003019
 8002f9c:	08003019 	.word	0x08003019
 8002fa0:	08003019 	.word	0x08003019
 8002fa4:	08003019 	.word	0x08003019
 8002fa8:	08003019 	.word	0x08003019
 8002fac:	08003019 	.word	0x08003019
 8002fb0:	0800301f 	.word	0x0800301f
 8002fb4:	08003019 	.word	0x08003019
 8002fb8:	08003019 	.word	0x08003019
 8002fbc:	08003019 	.word	0x08003019
 8002fc0:	08003019 	.word	0x08003019
 8002fc4:	08003019 	.word	0x08003019
 8002fc8:	08003019 	.word	0x08003019
 8002fcc:	08003019 	.word	0x08003019
 8002fd0:	0800301f 	.word	0x0800301f
 8002fd4:	08003019 	.word	0x08003019
 8002fd8:	08003019 	.word	0x08003019
 8002fdc:	08003019 	.word	0x08003019
 8002fe0:	08003019 	.word	0x08003019
 8002fe4:	08003019 	.word	0x08003019
 8002fe8:	08003019 	.word	0x08003019
 8002fec:	08003019 	.word	0x08003019
 8002ff0:	0800301f 	.word	0x0800301f
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	3304      	adds	r3, #4
 8002ff8:	2101      	movs	r1, #1
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	f000 fb36 	bl	800366c <RCCEx_PLL2_Config>
 8003000:	4603      	mov	r3, r0
 8003002:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003004:	e00c      	b.n	8003020 <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	3324      	adds	r3, #36	; 0x24
 800300a:	2101      	movs	r1, #1
 800300c:	4618      	mov	r0, r3
 800300e:	f000 fbdf 	bl	80037d0 <RCCEx_PLL3_Config>
 8003012:	4603      	mov	r3, r0
 8003014:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003016:	e003      	b.n	8003020 <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003018:	2301      	movs	r3, #1
 800301a:	75fb      	strb	r3, [r7, #23]
      break;
 800301c:	e000      	b.n	8003020 <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 800301e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003020:	7dfb      	ldrb	r3, [r7, #23]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d109      	bne.n	800303a <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003026:	4b24      	ldr	r3, [pc, #144]	; (80030b8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003028:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800302a:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003032:	4921      	ldr	r1, [pc, #132]	; (80030b8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003034:	4313      	orrs	r3, r2
 8003036:	654b      	str	r3, [r1, #84]	; 0x54
 8003038:	e001      	b.n	800303e <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800303a:	7dfb      	ldrb	r3, [r7, #23]
 800303c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f003 0302 	and.w	r3, r3, #2
 8003046:	2b00      	cmp	r3, #0
 8003048:	d03e      	beq.n	80030c8 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800304e:	2b05      	cmp	r3, #5
 8003050:	d820      	bhi.n	8003094 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 8003052:	a201      	add	r2, pc, #4	; (adr r2, 8003058 <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 8003054:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003058:	0800309b 	.word	0x0800309b
 800305c:	08003071 	.word	0x08003071
 8003060:	08003083 	.word	0x08003083
 8003064:	0800309b 	.word	0x0800309b
 8003068:	0800309b 	.word	0x0800309b
 800306c:	0800309b 	.word	0x0800309b
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	3304      	adds	r3, #4
 8003074:	2101      	movs	r1, #1
 8003076:	4618      	mov	r0, r3
 8003078:	f000 faf8 	bl	800366c <RCCEx_PLL2_Config>
 800307c:	4603      	mov	r3, r0
 800307e:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003080:	e00c      	b.n	800309c <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	3324      	adds	r3, #36	; 0x24
 8003086:	2101      	movs	r1, #1
 8003088:	4618      	mov	r0, r3
 800308a:	f000 fba1 	bl	80037d0 <RCCEx_PLL3_Config>
 800308e:	4603      	mov	r3, r0
 8003090:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003092:	e003      	b.n	800309c <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003094:	2301      	movs	r3, #1
 8003096:	75fb      	strb	r3, [r7, #23]
      break;
 8003098:	e000      	b.n	800309c <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 800309a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800309c:	7dfb      	ldrb	r3, [r7, #23]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d110      	bne.n	80030c4 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80030a2:	4b05      	ldr	r3, [pc, #20]	; (80030b8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80030a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030a6:	f023 0207 	bic.w	r2, r3, #7
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030ae:	4902      	ldr	r1, [pc, #8]	; (80030b8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80030b0:	4313      	orrs	r3, r2
 80030b2:	654b      	str	r3, [r1, #84]	; 0x54
 80030b4:	e008      	b.n	80030c8 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 80030b6:	bf00      	nop
 80030b8:	58024400 	.word	0x58024400
 80030bc:	58024800 	.word	0x58024800
 80030c0:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030c4:	7dfb      	ldrb	r3, [r7, #23]
 80030c6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f003 0304 	and.w	r3, r3, #4
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d039      	beq.n	8003148 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030da:	2b05      	cmp	r3, #5
 80030dc:	d820      	bhi.n	8003120 <HAL_RCCEx_PeriphCLKConfig+0x934>
 80030de:	a201      	add	r2, pc, #4	; (adr r2, 80030e4 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 80030e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030e4:	08003127 	.word	0x08003127
 80030e8:	080030fd 	.word	0x080030fd
 80030ec:	0800310f 	.word	0x0800310f
 80030f0:	08003127 	.word	0x08003127
 80030f4:	08003127 	.word	0x08003127
 80030f8:	08003127 	.word	0x08003127
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	3304      	adds	r3, #4
 8003100:	2101      	movs	r1, #1
 8003102:	4618      	mov	r0, r3
 8003104:	f000 fab2 	bl	800366c <RCCEx_PLL2_Config>
 8003108:	4603      	mov	r3, r0
 800310a:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800310c:	e00c      	b.n	8003128 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	3324      	adds	r3, #36	; 0x24
 8003112:	2101      	movs	r1, #1
 8003114:	4618      	mov	r0, r3
 8003116:	f000 fb5b 	bl	80037d0 <RCCEx_PLL3_Config>
 800311a:	4603      	mov	r3, r0
 800311c:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800311e:	e003      	b.n	8003128 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003120:	2301      	movs	r3, #1
 8003122:	75fb      	strb	r3, [r7, #23]
      break;
 8003124:	e000      	b.n	8003128 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 8003126:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003128:	7dfb      	ldrb	r3, [r7, #23]
 800312a:	2b00      	cmp	r3, #0
 800312c:	d10a      	bne.n	8003144 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800312e:	4bb7      	ldr	r3, [pc, #732]	; (800340c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003130:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003132:	f023 0207 	bic.w	r2, r3, #7
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800313c:	49b3      	ldr	r1, [pc, #716]	; (800340c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800313e:	4313      	orrs	r3, r2
 8003140:	658b      	str	r3, [r1, #88]	; 0x58
 8003142:	e001      	b.n	8003148 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003144:	7dfb      	ldrb	r3, [r7, #23]
 8003146:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f003 0320 	and.w	r3, r3, #32
 8003150:	2b00      	cmp	r3, #0
 8003152:	d04b      	beq.n	80031ec <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800315a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800315e:	d02e      	beq.n	80031be <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 8003160:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003164:	d828      	bhi.n	80031b8 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8003166:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800316a:	d02a      	beq.n	80031c2 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 800316c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003170:	d822      	bhi.n	80031b8 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8003172:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003176:	d026      	beq.n	80031c6 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8003178:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800317c:	d81c      	bhi.n	80031b8 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800317e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003182:	d010      	beq.n	80031a6 <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 8003184:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003188:	d816      	bhi.n	80031b8 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800318a:	2b00      	cmp	r3, #0
 800318c:	d01d      	beq.n	80031ca <HAL_RCCEx_PeriphCLKConfig+0x9de>
 800318e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003192:	d111      	bne.n	80031b8 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	3304      	adds	r3, #4
 8003198:	2100      	movs	r1, #0
 800319a:	4618      	mov	r0, r3
 800319c:	f000 fa66 	bl	800366c <RCCEx_PLL2_Config>
 80031a0:	4603      	mov	r3, r0
 80031a2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80031a4:	e012      	b.n	80031cc <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	3324      	adds	r3, #36	; 0x24
 80031aa:	2102      	movs	r1, #2
 80031ac:	4618      	mov	r0, r3
 80031ae:	f000 fb0f 	bl	80037d0 <RCCEx_PLL3_Config>
 80031b2:	4603      	mov	r3, r0
 80031b4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80031b6:	e009      	b.n	80031cc <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80031b8:	2301      	movs	r3, #1
 80031ba:	75fb      	strb	r3, [r7, #23]
      break;
 80031bc:	e006      	b.n	80031cc <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80031be:	bf00      	nop
 80031c0:	e004      	b.n	80031cc <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80031c2:	bf00      	nop
 80031c4:	e002      	b.n	80031cc <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80031c6:	bf00      	nop
 80031c8:	e000      	b.n	80031cc <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80031ca:	bf00      	nop
    }

    if(ret == HAL_OK)
 80031cc:	7dfb      	ldrb	r3, [r7, #23]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d10a      	bne.n	80031e8 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80031d2:	4b8e      	ldr	r3, [pc, #568]	; (800340c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80031d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031d6:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80031e0:	498a      	ldr	r1, [pc, #552]	; (800340c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80031e2:	4313      	orrs	r3, r2
 80031e4:	654b      	str	r3, [r1, #84]	; 0x54
 80031e6:	e001      	b.n	80031ec <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031e8:	7dfb      	ldrb	r3, [r7, #23]
 80031ea:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d04b      	beq.n	8003290 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80031fe:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003202:	d02e      	beq.n	8003262 <HAL_RCCEx_PeriphCLKConfig+0xa76>
 8003204:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003208:	d828      	bhi.n	800325c <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800320a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800320e:	d02a      	beq.n	8003266 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8003210:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003214:	d822      	bhi.n	800325c <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8003216:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800321a:	d026      	beq.n	800326a <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 800321c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003220:	d81c      	bhi.n	800325c <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8003222:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003226:	d010      	beq.n	800324a <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 8003228:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800322c:	d816      	bhi.n	800325c <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800322e:	2b00      	cmp	r3, #0
 8003230:	d01d      	beq.n	800326e <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8003232:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003236:	d111      	bne.n	800325c <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	3304      	adds	r3, #4
 800323c:	2100      	movs	r1, #0
 800323e:	4618      	mov	r0, r3
 8003240:	f000 fa14 	bl	800366c <RCCEx_PLL2_Config>
 8003244:	4603      	mov	r3, r0
 8003246:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003248:	e012      	b.n	8003270 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	3324      	adds	r3, #36	; 0x24
 800324e:	2102      	movs	r1, #2
 8003250:	4618      	mov	r0, r3
 8003252:	f000 fabd 	bl	80037d0 <RCCEx_PLL3_Config>
 8003256:	4603      	mov	r3, r0
 8003258:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800325a:	e009      	b.n	8003270 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800325c:	2301      	movs	r3, #1
 800325e:	75fb      	strb	r3, [r7, #23]
      break;
 8003260:	e006      	b.n	8003270 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8003262:	bf00      	nop
 8003264:	e004      	b.n	8003270 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8003266:	bf00      	nop
 8003268:	e002      	b.n	8003270 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800326a:	bf00      	nop
 800326c:	e000      	b.n	8003270 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800326e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003270:	7dfb      	ldrb	r3, [r7, #23]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d10a      	bne.n	800328c <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003276:	4b65      	ldr	r3, [pc, #404]	; (800340c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003278:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800327a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003284:	4961      	ldr	r1, [pc, #388]	; (800340c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003286:	4313      	orrs	r3, r2
 8003288:	658b      	str	r3, [r1, #88]	; 0x58
 800328a:	e001      	b.n	8003290 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800328c:	7dfb      	ldrb	r3, [r7, #23]
 800328e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003298:	2b00      	cmp	r3, #0
 800329a:	d04b      	beq.n	8003334 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80032a2:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80032a6:	d02e      	beq.n	8003306 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 80032a8:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80032ac:	d828      	bhi.n	8003300 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80032ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80032b2:	d02a      	beq.n	800330a <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 80032b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80032b8:	d822      	bhi.n	8003300 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80032ba:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80032be:	d026      	beq.n	800330e <HAL_RCCEx_PeriphCLKConfig+0xb22>
 80032c0:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80032c4:	d81c      	bhi.n	8003300 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80032c6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80032ca:	d010      	beq.n	80032ee <HAL_RCCEx_PeriphCLKConfig+0xb02>
 80032cc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80032d0:	d816      	bhi.n	8003300 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d01d      	beq.n	8003312 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 80032d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80032da:	d111      	bne.n	8003300 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	3304      	adds	r3, #4
 80032e0:	2100      	movs	r1, #0
 80032e2:	4618      	mov	r0, r3
 80032e4:	f000 f9c2 	bl	800366c <RCCEx_PLL2_Config>
 80032e8:	4603      	mov	r3, r0
 80032ea:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80032ec:	e012      	b.n	8003314 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	3324      	adds	r3, #36	; 0x24
 80032f2:	2102      	movs	r1, #2
 80032f4:	4618      	mov	r0, r3
 80032f6:	f000 fa6b 	bl	80037d0 <RCCEx_PLL3_Config>
 80032fa:	4603      	mov	r3, r0
 80032fc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80032fe:	e009      	b.n	8003314 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003300:	2301      	movs	r3, #1
 8003302:	75fb      	strb	r3, [r7, #23]
      break;
 8003304:	e006      	b.n	8003314 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8003306:	bf00      	nop
 8003308:	e004      	b.n	8003314 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800330a:	bf00      	nop
 800330c:	e002      	b.n	8003314 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800330e:	bf00      	nop
 8003310:	e000      	b.n	8003314 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8003312:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003314:	7dfb      	ldrb	r3, [r7, #23]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d10a      	bne.n	8003330 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800331a:	4b3c      	ldr	r3, [pc, #240]	; (800340c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800331c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800331e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003328:	4938      	ldr	r1, [pc, #224]	; (800340c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800332a:	4313      	orrs	r3, r2
 800332c:	658b      	str	r3, [r1, #88]	; 0x58
 800332e:	e001      	b.n	8003334 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003330:	7dfb      	ldrb	r3, [r7, #23]
 8003332:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f003 0308 	and.w	r3, r3, #8
 800333c:	2b00      	cmp	r3, #0
 800333e:	d01a      	beq.n	8003376 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003346:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800334a:	d10a      	bne.n	8003362 <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	3324      	adds	r3, #36	; 0x24
 8003350:	2102      	movs	r1, #2
 8003352:	4618      	mov	r0, r3
 8003354:	f000 fa3c 	bl	80037d0 <RCCEx_PLL3_Config>
 8003358:	4603      	mov	r3, r0
 800335a:	2b00      	cmp	r3, #0
 800335c:	d001      	beq.n	8003362 <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 800335e:	2301      	movs	r3, #1
 8003360:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8003362:	4b2a      	ldr	r3, [pc, #168]	; (800340c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003364:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003366:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003370:	4926      	ldr	r1, [pc, #152]	; (800340c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003372:	4313      	orrs	r3, r2
 8003374:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f003 0310 	and.w	r3, r3, #16
 800337e:	2b00      	cmp	r3, #0
 8003380:	d01a      	beq.n	80033b8 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003388:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800338c:	d10a      	bne.n	80033a4 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	3324      	adds	r3, #36	; 0x24
 8003392:	2102      	movs	r1, #2
 8003394:	4618      	mov	r0, r3
 8003396:	f000 fa1b 	bl	80037d0 <RCCEx_PLL3_Config>
 800339a:	4603      	mov	r3, r0
 800339c:	2b00      	cmp	r3, #0
 800339e:	d001      	beq.n	80033a4 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 80033a0:	2301      	movs	r3, #1
 80033a2:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80033a4:	4b19      	ldr	r3, [pc, #100]	; (800340c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80033a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033a8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80033b2:	4916      	ldr	r1, [pc, #88]	; (800340c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80033b4:	4313      	orrs	r3, r2
 80033b6:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d036      	beq.n	8003432 <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80033ca:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80033ce:	d01f      	beq.n	8003410 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 80033d0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80033d4:	d817      	bhi.n	8003406 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d003      	beq.n	80033e2 <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 80033da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033de:	d009      	beq.n	80033f4 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 80033e0:	e011      	b.n	8003406 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	3304      	adds	r3, #4
 80033e6:	2100      	movs	r1, #0
 80033e8:	4618      	mov	r0, r3
 80033ea:	f000 f93f 	bl	800366c <RCCEx_PLL2_Config>
 80033ee:	4603      	mov	r3, r0
 80033f0:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80033f2:	e00e      	b.n	8003412 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	3324      	adds	r3, #36	; 0x24
 80033f8:	2102      	movs	r1, #2
 80033fa:	4618      	mov	r0, r3
 80033fc:	f000 f9e8 	bl	80037d0 <RCCEx_PLL3_Config>
 8003400:	4603      	mov	r3, r0
 8003402:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8003404:	e005      	b.n	8003412 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003406:	2301      	movs	r3, #1
 8003408:	75fb      	strb	r3, [r7, #23]
      break;
 800340a:	e002      	b.n	8003412 <HAL_RCCEx_PeriphCLKConfig+0xc26>
 800340c:	58024400 	.word	0x58024400
      break;
 8003410:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003412:	7dfb      	ldrb	r3, [r7, #23]
 8003414:	2b00      	cmp	r3, #0
 8003416:	d10a      	bne.n	800342e <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003418:	4b93      	ldr	r3, [pc, #588]	; (8003668 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800341a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800341c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003426:	4990      	ldr	r1, [pc, #576]	; (8003668 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003428:	4313      	orrs	r3, r2
 800342a:	658b      	str	r3, [r1, #88]	; 0x58
 800342c:	e001      	b.n	8003432 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800342e:	7dfb      	ldrb	r3, [r7, #23]
 8003430:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800343a:	2b00      	cmp	r3, #0
 800343c:	d033      	beq.n	80034a6 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003444:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003448:	d01c      	beq.n	8003484 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 800344a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800344e:	d816      	bhi.n	800347e <HAL_RCCEx_PeriphCLKConfig+0xc92>
 8003450:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003454:	d003      	beq.n	800345e <HAL_RCCEx_PeriphCLKConfig+0xc72>
 8003456:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800345a:	d007      	beq.n	800346c <HAL_RCCEx_PeriphCLKConfig+0xc80>
 800345c:	e00f      	b.n	800347e <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800345e:	4b82      	ldr	r3, [pc, #520]	; (8003668 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003460:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003462:	4a81      	ldr	r2, [pc, #516]	; (8003668 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003464:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003468:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800346a:	e00c      	b.n	8003486 <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	3324      	adds	r3, #36	; 0x24
 8003470:	2101      	movs	r1, #1
 8003472:	4618      	mov	r0, r3
 8003474:	f000 f9ac 	bl	80037d0 <RCCEx_PLL3_Config>
 8003478:	4603      	mov	r3, r0
 800347a:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800347c:	e003      	b.n	8003486 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800347e:	2301      	movs	r3, #1
 8003480:	75fb      	strb	r3, [r7, #23]
      break;
 8003482:	e000      	b.n	8003486 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 8003484:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003486:	7dfb      	ldrb	r3, [r7, #23]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d10a      	bne.n	80034a2 <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800348c:	4b76      	ldr	r3, [pc, #472]	; (8003668 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800348e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003490:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800349a:	4973      	ldr	r1, [pc, #460]	; (8003668 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800349c:	4313      	orrs	r3, r2
 800349e:	654b      	str	r3, [r1, #84]	; 0x54
 80034a0:	e001      	b.n	80034a6 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034a2:	7dfb      	ldrb	r3, [r7, #23]
 80034a4:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d029      	beq.n	8003506 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d003      	beq.n	80034c2 <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 80034ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034be:	d007      	beq.n	80034d0 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 80034c0:	e00f      	b.n	80034e2 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80034c2:	4b69      	ldr	r3, [pc, #420]	; (8003668 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80034c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034c6:	4a68      	ldr	r2, [pc, #416]	; (8003668 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80034c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80034cc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80034ce:	e00b      	b.n	80034e8 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	3304      	adds	r3, #4
 80034d4:	2102      	movs	r1, #2
 80034d6:	4618      	mov	r0, r3
 80034d8:	f000 f8c8 	bl	800366c <RCCEx_PLL2_Config>
 80034dc:	4603      	mov	r3, r0
 80034de:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80034e0:	e002      	b.n	80034e8 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 80034e2:	2301      	movs	r3, #1
 80034e4:	75fb      	strb	r3, [r7, #23]
      break;
 80034e6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80034e8:	7dfb      	ldrb	r3, [r7, #23]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d109      	bne.n	8003502 <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80034ee:	4b5e      	ldr	r3, [pc, #376]	; (8003668 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80034f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034f2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034fa:	495b      	ldr	r1, [pc, #364]	; (8003668 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80034fc:	4313      	orrs	r3, r2
 80034fe:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003500:	e001      	b.n	8003506 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003502:	7dfb      	ldrb	r3, [r7, #23]
 8003504:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800350e:	2b00      	cmp	r3, #0
 8003510:	d00a      	beq.n	8003528 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	3324      	adds	r3, #36	; 0x24
 8003516:	2102      	movs	r1, #2
 8003518:	4618      	mov	r0, r3
 800351a:	f000 f959 	bl	80037d0 <RCCEx_PLL3_Config>
 800351e:	4603      	mov	r3, r0
 8003520:	2b00      	cmp	r3, #0
 8003522:	d001      	beq.n	8003528 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 8003524:	2301      	movs	r3, #1
 8003526:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003530:	2b00      	cmp	r3, #0
 8003532:	d030      	beq.n	8003596 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003538:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800353c:	d017      	beq.n	800356e <HAL_RCCEx_PeriphCLKConfig+0xd82>
 800353e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003542:	d811      	bhi.n	8003568 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8003544:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003548:	d013      	beq.n	8003572 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 800354a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800354e:	d80b      	bhi.n	8003568 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8003550:	2b00      	cmp	r3, #0
 8003552:	d010      	beq.n	8003576 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8003554:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003558:	d106      	bne.n	8003568 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800355a:	4b43      	ldr	r3, [pc, #268]	; (8003668 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800355c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800355e:	4a42      	ldr	r2, [pc, #264]	; (8003668 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003560:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003564:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8003566:	e007      	b.n	8003578 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003568:	2301      	movs	r3, #1
 800356a:	75fb      	strb	r3, [r7, #23]
      break;
 800356c:	e004      	b.n	8003578 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800356e:	bf00      	nop
 8003570:	e002      	b.n	8003578 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8003572:	bf00      	nop
 8003574:	e000      	b.n	8003578 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8003576:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003578:	7dfb      	ldrb	r3, [r7, #23]
 800357a:	2b00      	cmp	r3, #0
 800357c:	d109      	bne.n	8003592 <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800357e:	4b3a      	ldr	r3, [pc, #232]	; (8003668 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003580:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003582:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800358a:	4937      	ldr	r1, [pc, #220]	; (8003668 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800358c:	4313      	orrs	r3, r2
 800358e:	654b      	str	r3, [r1, #84]	; 0x54
 8003590:	e001      	b.n	8003596 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003592:	7dfb      	ldrb	r3, [r7, #23]
 8003594:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d008      	beq.n	80035b4 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80035a2:	4b31      	ldr	r3, [pc, #196]	; (8003668 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80035a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035a6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035ae:	492e      	ldr	r1, [pc, #184]	; (8003668 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80035b0:	4313      	orrs	r3, r2
 80035b2:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d009      	beq.n	80035d4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80035c0:	4b29      	ldr	r3, [pc, #164]	; (8003668 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80035c2:	691b      	ldr	r3, [r3, #16]
 80035c4:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80035ce:	4926      	ldr	r1, [pc, #152]	; (8003668 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80035d0:	4313      	orrs	r3, r2
 80035d2:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d008      	beq.n	80035f2 <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80035e0:	4b21      	ldr	r3, [pc, #132]	; (8003668 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80035e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035e4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80035ec:	491e      	ldr	r1, [pc, #120]	; (8003668 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80035ee:	4313      	orrs	r3, r2
 80035f0:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d00d      	beq.n	800361a <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80035fe:	4b1a      	ldr	r3, [pc, #104]	; (8003668 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003600:	691b      	ldr	r3, [r3, #16]
 8003602:	4a19      	ldr	r2, [pc, #100]	; (8003668 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003604:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003608:	6113      	str	r3, [r2, #16]
 800360a:	4b17      	ldr	r3, [pc, #92]	; (8003668 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800360c:	691a      	ldr	r2, [r3, #16]
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8003614:	4914      	ldr	r1, [pc, #80]	; (8003668 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003616:	4313      	orrs	r3, r2
 8003618:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	2b00      	cmp	r3, #0
 8003620:	da08      	bge.n	8003634 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8003622:	4b11      	ldr	r3, [pc, #68]	; (8003668 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003624:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003626:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800362e:	490e      	ldr	r1, [pc, #56]	; (8003668 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003630:	4313      	orrs	r3, r2
 8003632:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800363c:	2b00      	cmp	r3, #0
 800363e:	d009      	beq.n	8003654 <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003640:	4b09      	ldr	r3, [pc, #36]	; (8003668 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003642:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003644:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800364e:	4906      	ldr	r1, [pc, #24]	; (8003668 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003650:	4313      	orrs	r3, r2
 8003652:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8003654:	7dbb      	ldrb	r3, [r7, #22]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d101      	bne.n	800365e <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 800365a:	2300      	movs	r3, #0
 800365c:	e000      	b.n	8003660 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 800365e:	2301      	movs	r3, #1
}
 8003660:	4618      	mov	r0, r3
 8003662:	3718      	adds	r7, #24
 8003664:	46bd      	mov	sp, r7
 8003666:	bd80      	pop	{r7, pc}
 8003668:	58024400 	.word	0x58024400

0800366c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b084      	sub	sp, #16
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
 8003674:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003676:	2300      	movs	r3, #0
 8003678:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800367a:	4b53      	ldr	r3, [pc, #332]	; (80037c8 <RCCEx_PLL2_Config+0x15c>)
 800367c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800367e:	f003 0303 	and.w	r3, r3, #3
 8003682:	2b03      	cmp	r3, #3
 8003684:	d101      	bne.n	800368a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8003686:	2301      	movs	r3, #1
 8003688:	e099      	b.n	80037be <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800368a:	4b4f      	ldr	r3, [pc, #316]	; (80037c8 <RCCEx_PLL2_Config+0x15c>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	4a4e      	ldr	r2, [pc, #312]	; (80037c8 <RCCEx_PLL2_Config+0x15c>)
 8003690:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003694:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003696:	f7fd fa81 	bl	8000b9c <HAL_GetTick>
 800369a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800369c:	e008      	b.n	80036b0 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800369e:	f7fd fa7d 	bl	8000b9c <HAL_GetTick>
 80036a2:	4602      	mov	r2, r0
 80036a4:	68bb      	ldr	r3, [r7, #8]
 80036a6:	1ad3      	subs	r3, r2, r3
 80036a8:	2b02      	cmp	r3, #2
 80036aa:	d901      	bls.n	80036b0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80036ac:	2303      	movs	r3, #3
 80036ae:	e086      	b.n	80037be <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80036b0:	4b45      	ldr	r3, [pc, #276]	; (80037c8 <RCCEx_PLL2_Config+0x15c>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d1f0      	bne.n	800369e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80036bc:	4b42      	ldr	r3, [pc, #264]	; (80037c8 <RCCEx_PLL2_Config+0x15c>)
 80036be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036c0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	031b      	lsls	r3, r3, #12
 80036ca:	493f      	ldr	r1, [pc, #252]	; (80037c8 <RCCEx_PLL2_Config+0x15c>)
 80036cc:	4313      	orrs	r3, r2
 80036ce:	628b      	str	r3, [r1, #40]	; 0x28
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	685b      	ldr	r3, [r3, #4]
 80036d4:	3b01      	subs	r3, #1
 80036d6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	689b      	ldr	r3, [r3, #8]
 80036de:	3b01      	subs	r3, #1
 80036e0:	025b      	lsls	r3, r3, #9
 80036e2:	b29b      	uxth	r3, r3
 80036e4:	431a      	orrs	r2, r3
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	68db      	ldr	r3, [r3, #12]
 80036ea:	3b01      	subs	r3, #1
 80036ec:	041b      	lsls	r3, r3, #16
 80036ee:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80036f2:	431a      	orrs	r2, r3
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	691b      	ldr	r3, [r3, #16]
 80036f8:	3b01      	subs	r3, #1
 80036fa:	061b      	lsls	r3, r3, #24
 80036fc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003700:	4931      	ldr	r1, [pc, #196]	; (80037c8 <RCCEx_PLL2_Config+0x15c>)
 8003702:	4313      	orrs	r3, r2
 8003704:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8003706:	4b30      	ldr	r3, [pc, #192]	; (80037c8 <RCCEx_PLL2_Config+0x15c>)
 8003708:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800370a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	695b      	ldr	r3, [r3, #20]
 8003712:	492d      	ldr	r1, [pc, #180]	; (80037c8 <RCCEx_PLL2_Config+0x15c>)
 8003714:	4313      	orrs	r3, r2
 8003716:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8003718:	4b2b      	ldr	r3, [pc, #172]	; (80037c8 <RCCEx_PLL2_Config+0x15c>)
 800371a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800371c:	f023 0220 	bic.w	r2, r3, #32
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	699b      	ldr	r3, [r3, #24]
 8003724:	4928      	ldr	r1, [pc, #160]	; (80037c8 <RCCEx_PLL2_Config+0x15c>)
 8003726:	4313      	orrs	r3, r2
 8003728:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800372a:	4b27      	ldr	r3, [pc, #156]	; (80037c8 <RCCEx_PLL2_Config+0x15c>)
 800372c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800372e:	4a26      	ldr	r2, [pc, #152]	; (80037c8 <RCCEx_PLL2_Config+0x15c>)
 8003730:	f023 0310 	bic.w	r3, r3, #16
 8003734:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8003736:	4b24      	ldr	r3, [pc, #144]	; (80037c8 <RCCEx_PLL2_Config+0x15c>)
 8003738:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800373a:	4b24      	ldr	r3, [pc, #144]	; (80037cc <RCCEx_PLL2_Config+0x160>)
 800373c:	4013      	ands	r3, r2
 800373e:	687a      	ldr	r2, [r7, #4]
 8003740:	69d2      	ldr	r2, [r2, #28]
 8003742:	00d2      	lsls	r2, r2, #3
 8003744:	4920      	ldr	r1, [pc, #128]	; (80037c8 <RCCEx_PLL2_Config+0x15c>)
 8003746:	4313      	orrs	r3, r2
 8003748:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800374a:	4b1f      	ldr	r3, [pc, #124]	; (80037c8 <RCCEx_PLL2_Config+0x15c>)
 800374c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800374e:	4a1e      	ldr	r2, [pc, #120]	; (80037c8 <RCCEx_PLL2_Config+0x15c>)
 8003750:	f043 0310 	orr.w	r3, r3, #16
 8003754:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8003756:	683b      	ldr	r3, [r7, #0]
 8003758:	2b00      	cmp	r3, #0
 800375a:	d106      	bne.n	800376a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800375c:	4b1a      	ldr	r3, [pc, #104]	; (80037c8 <RCCEx_PLL2_Config+0x15c>)
 800375e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003760:	4a19      	ldr	r2, [pc, #100]	; (80037c8 <RCCEx_PLL2_Config+0x15c>)
 8003762:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003766:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003768:	e00f      	b.n	800378a <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	2b01      	cmp	r3, #1
 800376e:	d106      	bne.n	800377e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8003770:	4b15      	ldr	r3, [pc, #84]	; (80037c8 <RCCEx_PLL2_Config+0x15c>)
 8003772:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003774:	4a14      	ldr	r2, [pc, #80]	; (80037c8 <RCCEx_PLL2_Config+0x15c>)
 8003776:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800377a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800377c:	e005      	b.n	800378a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800377e:	4b12      	ldr	r3, [pc, #72]	; (80037c8 <RCCEx_PLL2_Config+0x15c>)
 8003780:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003782:	4a11      	ldr	r2, [pc, #68]	; (80037c8 <RCCEx_PLL2_Config+0x15c>)
 8003784:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003788:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800378a:	4b0f      	ldr	r3, [pc, #60]	; (80037c8 <RCCEx_PLL2_Config+0x15c>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	4a0e      	ldr	r2, [pc, #56]	; (80037c8 <RCCEx_PLL2_Config+0x15c>)
 8003790:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003794:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003796:	f7fd fa01 	bl	8000b9c <HAL_GetTick>
 800379a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800379c:	e008      	b.n	80037b0 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800379e:	f7fd f9fd 	bl	8000b9c <HAL_GetTick>
 80037a2:	4602      	mov	r2, r0
 80037a4:	68bb      	ldr	r3, [r7, #8]
 80037a6:	1ad3      	subs	r3, r2, r3
 80037a8:	2b02      	cmp	r3, #2
 80037aa:	d901      	bls.n	80037b0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80037ac:	2303      	movs	r3, #3
 80037ae:	e006      	b.n	80037be <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80037b0:	4b05      	ldr	r3, [pc, #20]	; (80037c8 <RCCEx_PLL2_Config+0x15c>)
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d0f0      	beq.n	800379e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80037bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80037be:	4618      	mov	r0, r3
 80037c0:	3710      	adds	r7, #16
 80037c2:	46bd      	mov	sp, r7
 80037c4:	bd80      	pop	{r7, pc}
 80037c6:	bf00      	nop
 80037c8:	58024400 	.word	0x58024400
 80037cc:	ffff0007 	.word	0xffff0007

080037d0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b084      	sub	sp, #16
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
 80037d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80037da:	2300      	movs	r3, #0
 80037dc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80037de:	4b53      	ldr	r3, [pc, #332]	; (800392c <RCCEx_PLL3_Config+0x15c>)
 80037e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037e2:	f003 0303 	and.w	r3, r3, #3
 80037e6:	2b03      	cmp	r3, #3
 80037e8:	d101      	bne.n	80037ee <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80037ea:	2301      	movs	r3, #1
 80037ec:	e099      	b.n	8003922 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80037ee:	4b4f      	ldr	r3, [pc, #316]	; (800392c <RCCEx_PLL3_Config+0x15c>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	4a4e      	ldr	r2, [pc, #312]	; (800392c <RCCEx_PLL3_Config+0x15c>)
 80037f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80037f8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80037fa:	f7fd f9cf 	bl	8000b9c <HAL_GetTick>
 80037fe:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003800:	e008      	b.n	8003814 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8003802:	f7fd f9cb 	bl	8000b9c <HAL_GetTick>
 8003806:	4602      	mov	r2, r0
 8003808:	68bb      	ldr	r3, [r7, #8]
 800380a:	1ad3      	subs	r3, r2, r3
 800380c:	2b02      	cmp	r3, #2
 800380e:	d901      	bls.n	8003814 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003810:	2303      	movs	r3, #3
 8003812:	e086      	b.n	8003922 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003814:	4b45      	ldr	r3, [pc, #276]	; (800392c <RCCEx_PLL3_Config+0x15c>)
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800381c:	2b00      	cmp	r3, #0
 800381e:	d1f0      	bne.n	8003802 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8003820:	4b42      	ldr	r3, [pc, #264]	; (800392c <RCCEx_PLL3_Config+0x15c>)
 8003822:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003824:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	051b      	lsls	r3, r3, #20
 800382e:	493f      	ldr	r1, [pc, #252]	; (800392c <RCCEx_PLL3_Config+0x15c>)
 8003830:	4313      	orrs	r3, r2
 8003832:	628b      	str	r3, [r1, #40]	; 0x28
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	3b01      	subs	r3, #1
 800383a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	689b      	ldr	r3, [r3, #8]
 8003842:	3b01      	subs	r3, #1
 8003844:	025b      	lsls	r3, r3, #9
 8003846:	b29b      	uxth	r3, r3
 8003848:	431a      	orrs	r2, r3
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	68db      	ldr	r3, [r3, #12]
 800384e:	3b01      	subs	r3, #1
 8003850:	041b      	lsls	r3, r3, #16
 8003852:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003856:	431a      	orrs	r2, r3
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	691b      	ldr	r3, [r3, #16]
 800385c:	3b01      	subs	r3, #1
 800385e:	061b      	lsls	r3, r3, #24
 8003860:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003864:	4931      	ldr	r1, [pc, #196]	; (800392c <RCCEx_PLL3_Config+0x15c>)
 8003866:	4313      	orrs	r3, r2
 8003868:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800386a:	4b30      	ldr	r3, [pc, #192]	; (800392c <RCCEx_PLL3_Config+0x15c>)
 800386c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800386e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	695b      	ldr	r3, [r3, #20]
 8003876:	492d      	ldr	r1, [pc, #180]	; (800392c <RCCEx_PLL3_Config+0x15c>)
 8003878:	4313      	orrs	r3, r2
 800387a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800387c:	4b2b      	ldr	r3, [pc, #172]	; (800392c <RCCEx_PLL3_Config+0x15c>)
 800387e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003880:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	699b      	ldr	r3, [r3, #24]
 8003888:	4928      	ldr	r1, [pc, #160]	; (800392c <RCCEx_PLL3_Config+0x15c>)
 800388a:	4313      	orrs	r3, r2
 800388c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800388e:	4b27      	ldr	r3, [pc, #156]	; (800392c <RCCEx_PLL3_Config+0x15c>)
 8003890:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003892:	4a26      	ldr	r2, [pc, #152]	; (800392c <RCCEx_PLL3_Config+0x15c>)
 8003894:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003898:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800389a:	4b24      	ldr	r3, [pc, #144]	; (800392c <RCCEx_PLL3_Config+0x15c>)
 800389c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800389e:	4b24      	ldr	r3, [pc, #144]	; (8003930 <RCCEx_PLL3_Config+0x160>)
 80038a0:	4013      	ands	r3, r2
 80038a2:	687a      	ldr	r2, [r7, #4]
 80038a4:	69d2      	ldr	r2, [r2, #28]
 80038a6:	00d2      	lsls	r2, r2, #3
 80038a8:	4920      	ldr	r1, [pc, #128]	; (800392c <RCCEx_PLL3_Config+0x15c>)
 80038aa:	4313      	orrs	r3, r2
 80038ac:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80038ae:	4b1f      	ldr	r3, [pc, #124]	; (800392c <RCCEx_PLL3_Config+0x15c>)
 80038b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038b2:	4a1e      	ldr	r2, [pc, #120]	; (800392c <RCCEx_PLL3_Config+0x15c>)
 80038b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038b8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80038ba:	683b      	ldr	r3, [r7, #0]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d106      	bne.n	80038ce <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80038c0:	4b1a      	ldr	r3, [pc, #104]	; (800392c <RCCEx_PLL3_Config+0x15c>)
 80038c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038c4:	4a19      	ldr	r2, [pc, #100]	; (800392c <RCCEx_PLL3_Config+0x15c>)
 80038c6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80038ca:	62d3      	str	r3, [r2, #44]	; 0x2c
 80038cc:	e00f      	b.n	80038ee <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	2b01      	cmp	r3, #1
 80038d2:	d106      	bne.n	80038e2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80038d4:	4b15      	ldr	r3, [pc, #84]	; (800392c <RCCEx_PLL3_Config+0x15c>)
 80038d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038d8:	4a14      	ldr	r2, [pc, #80]	; (800392c <RCCEx_PLL3_Config+0x15c>)
 80038da:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80038de:	62d3      	str	r3, [r2, #44]	; 0x2c
 80038e0:	e005      	b.n	80038ee <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80038e2:	4b12      	ldr	r3, [pc, #72]	; (800392c <RCCEx_PLL3_Config+0x15c>)
 80038e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038e6:	4a11      	ldr	r2, [pc, #68]	; (800392c <RCCEx_PLL3_Config+0x15c>)
 80038e8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80038ec:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80038ee:	4b0f      	ldr	r3, [pc, #60]	; (800392c <RCCEx_PLL3_Config+0x15c>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	4a0e      	ldr	r2, [pc, #56]	; (800392c <RCCEx_PLL3_Config+0x15c>)
 80038f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038f8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80038fa:	f7fd f94f 	bl	8000b9c <HAL_GetTick>
 80038fe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003900:	e008      	b.n	8003914 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8003902:	f7fd f94b 	bl	8000b9c <HAL_GetTick>
 8003906:	4602      	mov	r2, r0
 8003908:	68bb      	ldr	r3, [r7, #8]
 800390a:	1ad3      	subs	r3, r2, r3
 800390c:	2b02      	cmp	r3, #2
 800390e:	d901      	bls.n	8003914 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003910:	2303      	movs	r3, #3
 8003912:	e006      	b.n	8003922 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003914:	4b05      	ldr	r3, [pc, #20]	; (800392c <RCCEx_PLL3_Config+0x15c>)
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800391c:	2b00      	cmp	r3, #0
 800391e:	d0f0      	beq.n	8003902 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8003920:	7bfb      	ldrb	r3, [r7, #15]
}
 8003922:	4618      	mov	r0, r3
 8003924:	3710      	adds	r7, #16
 8003926:	46bd      	mov	sp, r7
 8003928:	bd80      	pop	{r7, pc}
 800392a:	bf00      	nop
 800392c:	58024400 	.word	0x58024400
 8003930:	ffff0007 	.word	0xffff0007

08003934 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b08a      	sub	sp, #40	; 0x28
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800393c:	2300      	movs	r3, #0
 800393e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8003940:	f000 fe7e 	bl	8004640 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8003944:	4b5b      	ldr	r3, [pc, #364]	; (8003ab4 <pvPortMalloc+0x180>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	2b00      	cmp	r3, #0
 800394a:	d101      	bne.n	8003950 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800394c:	f000 f920 	bl	8003b90 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003950:	4b59      	ldr	r3, [pc, #356]	; (8003ab8 <pvPortMalloc+0x184>)
 8003952:	681a      	ldr	r2, [r3, #0]
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	4013      	ands	r3, r2
 8003958:	2b00      	cmp	r3, #0
 800395a:	f040 8093 	bne.w	8003a84 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	2b00      	cmp	r3, #0
 8003962:	d01d      	beq.n	80039a0 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8003964:	2208      	movs	r2, #8
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	4413      	add	r3, r2
 800396a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	f003 0307 	and.w	r3, r3, #7
 8003972:	2b00      	cmp	r3, #0
 8003974:	d014      	beq.n	80039a0 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	f023 0307 	bic.w	r3, r3, #7
 800397c:	3308      	adds	r3, #8
 800397e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	f003 0307 	and.w	r3, r3, #7
 8003986:	2b00      	cmp	r3, #0
 8003988:	d00a      	beq.n	80039a0 <pvPortMalloc+0x6c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800398a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800398e:	f383 8811 	msr	BASEPRI, r3
 8003992:	f3bf 8f6f 	isb	sy
 8003996:	f3bf 8f4f 	dsb	sy
 800399a:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800399c:	bf00      	nop
 800399e:	e7fe      	b.n	800399e <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d06e      	beq.n	8003a84 <pvPortMalloc+0x150>
 80039a6:	4b45      	ldr	r3, [pc, #276]	; (8003abc <pvPortMalloc+0x188>)
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	687a      	ldr	r2, [r7, #4]
 80039ac:	429a      	cmp	r2, r3
 80039ae:	d869      	bhi.n	8003a84 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80039b0:	4b43      	ldr	r3, [pc, #268]	; (8003ac0 <pvPortMalloc+0x18c>)
 80039b2:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80039b4:	4b42      	ldr	r3, [pc, #264]	; (8003ac0 <pvPortMalloc+0x18c>)
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80039ba:	e004      	b.n	80039c6 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80039bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039be:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80039c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80039c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039c8:	685b      	ldr	r3, [r3, #4]
 80039ca:	687a      	ldr	r2, [r7, #4]
 80039cc:	429a      	cmp	r2, r3
 80039ce:	d903      	bls.n	80039d8 <pvPortMalloc+0xa4>
 80039d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d1f1      	bne.n	80039bc <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80039d8:	4b36      	ldr	r3, [pc, #216]	; (8003ab4 <pvPortMalloc+0x180>)
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039de:	429a      	cmp	r2, r3
 80039e0:	d050      	beq.n	8003a84 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80039e2:	6a3b      	ldr	r3, [r7, #32]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	2208      	movs	r2, #8
 80039e8:	4413      	add	r3, r2
 80039ea:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80039ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ee:	681a      	ldr	r2, [r3, #0]
 80039f0:	6a3b      	ldr	r3, [r7, #32]
 80039f2:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80039f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039f6:	685a      	ldr	r2, [r3, #4]
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	1ad2      	subs	r2, r2, r3
 80039fc:	2308      	movs	r3, #8
 80039fe:	005b      	lsls	r3, r3, #1
 8003a00:	429a      	cmp	r2, r3
 8003a02:	d91f      	bls.n	8003a44 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003a04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	4413      	add	r3, r2
 8003a0a:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003a0c:	69bb      	ldr	r3, [r7, #24]
 8003a0e:	f003 0307 	and.w	r3, r3, #7
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d00a      	beq.n	8003a2c <pvPortMalloc+0xf8>
	__asm volatile
 8003a16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a1a:	f383 8811 	msr	BASEPRI, r3
 8003a1e:	f3bf 8f6f 	isb	sy
 8003a22:	f3bf 8f4f 	dsb	sy
 8003a26:	613b      	str	r3, [r7, #16]
}
 8003a28:	bf00      	nop
 8003a2a:	e7fe      	b.n	8003a2a <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a2e:	685a      	ldr	r2, [r3, #4]
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	1ad2      	subs	r2, r2, r3
 8003a34:	69bb      	ldr	r3, [r7, #24]
 8003a36:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8003a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a3a:	687a      	ldr	r2, [r7, #4]
 8003a3c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003a3e:	69b8      	ldr	r0, [r7, #24]
 8003a40:	f000 f908 	bl	8003c54 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003a44:	4b1d      	ldr	r3, [pc, #116]	; (8003abc <pvPortMalloc+0x188>)
 8003a46:	681a      	ldr	r2, [r3, #0]
 8003a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a4a:	685b      	ldr	r3, [r3, #4]
 8003a4c:	1ad3      	subs	r3, r2, r3
 8003a4e:	4a1b      	ldr	r2, [pc, #108]	; (8003abc <pvPortMalloc+0x188>)
 8003a50:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003a52:	4b1a      	ldr	r3, [pc, #104]	; (8003abc <pvPortMalloc+0x188>)
 8003a54:	681a      	ldr	r2, [r3, #0]
 8003a56:	4b1b      	ldr	r3, [pc, #108]	; (8003ac4 <pvPortMalloc+0x190>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	429a      	cmp	r2, r3
 8003a5c:	d203      	bcs.n	8003a66 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003a5e:	4b17      	ldr	r3, [pc, #92]	; (8003abc <pvPortMalloc+0x188>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	4a18      	ldr	r2, [pc, #96]	; (8003ac4 <pvPortMalloc+0x190>)
 8003a64:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a68:	685a      	ldr	r2, [r3, #4]
 8003a6a:	4b13      	ldr	r3, [pc, #76]	; (8003ab8 <pvPortMalloc+0x184>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	431a      	orrs	r2, r3
 8003a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a72:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8003a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a76:	2200      	movs	r2, #0
 8003a78:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8003a7a:	4b13      	ldr	r3, [pc, #76]	; (8003ac8 <pvPortMalloc+0x194>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	3301      	adds	r3, #1
 8003a80:	4a11      	ldr	r2, [pc, #68]	; (8003ac8 <pvPortMalloc+0x194>)
 8003a82:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8003a84:	f000 fdea 	bl	800465c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003a88:	69fb      	ldr	r3, [r7, #28]
 8003a8a:	f003 0307 	and.w	r3, r3, #7
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d00a      	beq.n	8003aa8 <pvPortMalloc+0x174>
	__asm volatile
 8003a92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a96:	f383 8811 	msr	BASEPRI, r3
 8003a9a:	f3bf 8f6f 	isb	sy
 8003a9e:	f3bf 8f4f 	dsb	sy
 8003aa2:	60fb      	str	r3, [r7, #12]
}
 8003aa4:	bf00      	nop
 8003aa6:	e7fe      	b.n	8003aa6 <pvPortMalloc+0x172>
	return pvReturn;
 8003aa8:	69fb      	ldr	r3, [r7, #28]
}
 8003aaa:	4618      	mov	r0, r3
 8003aac:	3728      	adds	r7, #40	; 0x28
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	bd80      	pop	{r7, pc}
 8003ab2:	bf00      	nop
 8003ab4:	24003f50 	.word	0x24003f50
 8003ab8:	24003f64 	.word	0x24003f64
 8003abc:	24003f54 	.word	0x24003f54
 8003ac0:	24003f48 	.word	0x24003f48
 8003ac4:	24003f58 	.word	0x24003f58
 8003ac8:	24003f5c 	.word	0x24003f5c

08003acc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b086      	sub	sp, #24
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d04d      	beq.n	8003b7a <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8003ade:	2308      	movs	r3, #8
 8003ae0:	425b      	negs	r3, r3
 8003ae2:	697a      	ldr	r2, [r7, #20]
 8003ae4:	4413      	add	r3, r2
 8003ae6:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8003ae8:	697b      	ldr	r3, [r7, #20]
 8003aea:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003aec:	693b      	ldr	r3, [r7, #16]
 8003aee:	685a      	ldr	r2, [r3, #4]
 8003af0:	4b24      	ldr	r3, [pc, #144]	; (8003b84 <vPortFree+0xb8>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	4013      	ands	r3, r2
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d10a      	bne.n	8003b10 <vPortFree+0x44>
	__asm volatile
 8003afa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003afe:	f383 8811 	msr	BASEPRI, r3
 8003b02:	f3bf 8f6f 	isb	sy
 8003b06:	f3bf 8f4f 	dsb	sy
 8003b0a:	60fb      	str	r3, [r7, #12]
}
 8003b0c:	bf00      	nop
 8003b0e:	e7fe      	b.n	8003b0e <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003b10:	693b      	ldr	r3, [r7, #16]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d00a      	beq.n	8003b2e <vPortFree+0x62>
	__asm volatile
 8003b18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b1c:	f383 8811 	msr	BASEPRI, r3
 8003b20:	f3bf 8f6f 	isb	sy
 8003b24:	f3bf 8f4f 	dsb	sy
 8003b28:	60bb      	str	r3, [r7, #8]
}
 8003b2a:	bf00      	nop
 8003b2c:	e7fe      	b.n	8003b2c <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8003b2e:	693b      	ldr	r3, [r7, #16]
 8003b30:	685a      	ldr	r2, [r3, #4]
 8003b32:	4b14      	ldr	r3, [pc, #80]	; (8003b84 <vPortFree+0xb8>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4013      	ands	r3, r2
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d01e      	beq.n	8003b7a <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8003b3c:	693b      	ldr	r3, [r7, #16]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d11a      	bne.n	8003b7a <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003b44:	693b      	ldr	r3, [r7, #16]
 8003b46:	685a      	ldr	r2, [r3, #4]
 8003b48:	4b0e      	ldr	r3, [pc, #56]	; (8003b84 <vPortFree+0xb8>)
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	43db      	mvns	r3, r3
 8003b4e:	401a      	ands	r2, r3
 8003b50:	693b      	ldr	r3, [r7, #16]
 8003b52:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8003b54:	f000 fd74 	bl	8004640 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003b58:	693b      	ldr	r3, [r7, #16]
 8003b5a:	685a      	ldr	r2, [r3, #4]
 8003b5c:	4b0a      	ldr	r3, [pc, #40]	; (8003b88 <vPortFree+0xbc>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4413      	add	r3, r2
 8003b62:	4a09      	ldr	r2, [pc, #36]	; (8003b88 <vPortFree+0xbc>)
 8003b64:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003b66:	6938      	ldr	r0, [r7, #16]
 8003b68:	f000 f874 	bl	8003c54 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8003b6c:	4b07      	ldr	r3, [pc, #28]	; (8003b8c <vPortFree+0xc0>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	3301      	adds	r3, #1
 8003b72:	4a06      	ldr	r2, [pc, #24]	; (8003b8c <vPortFree+0xc0>)
 8003b74:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8003b76:	f000 fd71 	bl	800465c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8003b7a:	bf00      	nop
 8003b7c:	3718      	adds	r7, #24
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	bd80      	pop	{r7, pc}
 8003b82:	bf00      	nop
 8003b84:	24003f64 	.word	0x24003f64
 8003b88:	24003f54 	.word	0x24003f54
 8003b8c:	24003f60 	.word	0x24003f60

08003b90 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8003b90:	b480      	push	{r7}
 8003b92:	b085      	sub	sp, #20
 8003b94:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003b96:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8003b9a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8003b9c:	4b27      	ldr	r3, [pc, #156]	; (8003c3c <prvHeapInit+0xac>)
 8003b9e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	f003 0307 	and.w	r3, r3, #7
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d00c      	beq.n	8003bc4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	3307      	adds	r3, #7
 8003bae:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	f023 0307 	bic.w	r3, r3, #7
 8003bb6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003bb8:	68ba      	ldr	r2, [r7, #8]
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	1ad3      	subs	r3, r2, r3
 8003bbe:	4a1f      	ldr	r2, [pc, #124]	; (8003c3c <prvHeapInit+0xac>)
 8003bc0:	4413      	add	r3, r2
 8003bc2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003bc8:	4a1d      	ldr	r2, [pc, #116]	; (8003c40 <prvHeapInit+0xb0>)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8003bce:	4b1c      	ldr	r3, [pc, #112]	; (8003c40 <prvHeapInit+0xb0>)
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	68ba      	ldr	r2, [r7, #8]
 8003bd8:	4413      	add	r3, r2
 8003bda:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8003bdc:	2208      	movs	r2, #8
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	1a9b      	subs	r3, r3, r2
 8003be2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	f023 0307 	bic.w	r3, r3, #7
 8003bea:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	4a15      	ldr	r2, [pc, #84]	; (8003c44 <prvHeapInit+0xb4>)
 8003bf0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8003bf2:	4b14      	ldr	r3, [pc, #80]	; (8003c44 <prvHeapInit+0xb4>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8003bfa:	4b12      	ldr	r3, [pc, #72]	; (8003c44 <prvHeapInit+0xb4>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	2200      	movs	r2, #0
 8003c00:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	68fa      	ldr	r2, [r7, #12]
 8003c0a:	1ad2      	subs	r2, r2, r3
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003c10:	4b0c      	ldr	r3, [pc, #48]	; (8003c44 <prvHeapInit+0xb4>)
 8003c12:	681a      	ldr	r2, [r3, #0]
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	685b      	ldr	r3, [r3, #4]
 8003c1c:	4a0a      	ldr	r2, [pc, #40]	; (8003c48 <prvHeapInit+0xb8>)
 8003c1e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	685b      	ldr	r3, [r3, #4]
 8003c24:	4a09      	ldr	r2, [pc, #36]	; (8003c4c <prvHeapInit+0xbc>)
 8003c26:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003c28:	4b09      	ldr	r3, [pc, #36]	; (8003c50 <prvHeapInit+0xc0>)
 8003c2a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003c2e:	601a      	str	r2, [r3, #0]
}
 8003c30:	bf00      	nop
 8003c32:	3714      	adds	r7, #20
 8003c34:	46bd      	mov	sp, r7
 8003c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3a:	4770      	bx	lr
 8003c3c:	24000348 	.word	0x24000348
 8003c40:	24003f48 	.word	0x24003f48
 8003c44:	24003f50 	.word	0x24003f50
 8003c48:	24003f58 	.word	0x24003f58
 8003c4c:	24003f54 	.word	0x24003f54
 8003c50:	24003f64 	.word	0x24003f64

08003c54 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8003c54:	b480      	push	{r7}
 8003c56:	b085      	sub	sp, #20
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003c5c:	4b28      	ldr	r3, [pc, #160]	; (8003d00 <prvInsertBlockIntoFreeList+0xac>)
 8003c5e:	60fb      	str	r3, [r7, #12]
 8003c60:	e002      	b.n	8003c68 <prvInsertBlockIntoFreeList+0x14>
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	60fb      	str	r3, [r7, #12]
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	687a      	ldr	r2, [r7, #4]
 8003c6e:	429a      	cmp	r2, r3
 8003c70:	d8f7      	bhi.n	8003c62 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	685b      	ldr	r3, [r3, #4]
 8003c7a:	68ba      	ldr	r2, [r7, #8]
 8003c7c:	4413      	add	r3, r2
 8003c7e:	687a      	ldr	r2, [r7, #4]
 8003c80:	429a      	cmp	r2, r3
 8003c82:	d108      	bne.n	8003c96 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	685a      	ldr	r2, [r3, #4]
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	685b      	ldr	r3, [r3, #4]
 8003c8c:	441a      	add	r2, r3
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	685b      	ldr	r3, [r3, #4]
 8003c9e:	68ba      	ldr	r2, [r7, #8]
 8003ca0:	441a      	add	r2, r3
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	429a      	cmp	r2, r3
 8003ca8:	d118      	bne.n	8003cdc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681a      	ldr	r2, [r3, #0]
 8003cae:	4b15      	ldr	r3, [pc, #84]	; (8003d04 <prvInsertBlockIntoFreeList+0xb0>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	429a      	cmp	r2, r3
 8003cb4:	d00d      	beq.n	8003cd2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	685a      	ldr	r2, [r3, #4]
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	685b      	ldr	r3, [r3, #4]
 8003cc0:	441a      	add	r2, r3
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	681a      	ldr	r2, [r3, #0]
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	601a      	str	r2, [r3, #0]
 8003cd0:	e008      	b.n	8003ce4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003cd2:	4b0c      	ldr	r3, [pc, #48]	; (8003d04 <prvInsertBlockIntoFreeList+0xb0>)
 8003cd4:	681a      	ldr	r2, [r3, #0]
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	601a      	str	r2, [r3, #0]
 8003cda:	e003      	b.n	8003ce4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	681a      	ldr	r2, [r3, #0]
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8003ce4:	68fa      	ldr	r2, [r7, #12]
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	429a      	cmp	r2, r3
 8003cea:	d002      	beq.n	8003cf2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	687a      	ldr	r2, [r7, #4]
 8003cf0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003cf2:	bf00      	nop
 8003cf4:	3714      	adds	r7, #20
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfc:	4770      	bx	lr
 8003cfe:	bf00      	nop
 8003d00:	24003f48 	.word	0x24003f48
 8003d04:	24003f50 	.word	0x24003f50

08003d08 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003d08:	b480      	push	{r7}
 8003d0a:	b083      	sub	sp, #12
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	f103 0208 	add.w	r2, r3, #8
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	f04f 32ff 	mov.w	r2, #4294967295
 8003d20:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	f103 0208 	add.w	r2, r3, #8
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	f103 0208 	add.w	r2, r3, #8
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2200      	movs	r2, #0
 8003d3a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003d3c:	bf00      	nop
 8003d3e:	370c      	adds	r7, #12
 8003d40:	46bd      	mov	sp, r7
 8003d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d46:	4770      	bx	lr

08003d48 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003d48:	b480      	push	{r7}
 8003d4a:	b083      	sub	sp, #12
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2200      	movs	r2, #0
 8003d54:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003d56:	bf00      	nop
 8003d58:	370c      	adds	r7, #12
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d60:	4770      	bx	lr

08003d62 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003d62:	b480      	push	{r7}
 8003d64:	b085      	sub	sp, #20
 8003d66:	af00      	add	r7, sp, #0
 8003d68:	6078      	str	r0, [r7, #4]
 8003d6a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	685b      	ldr	r3, [r3, #4]
 8003d70:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	68fa      	ldr	r2, [r7, #12]
 8003d76:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	689a      	ldr	r2, [r3, #8]
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	689b      	ldr	r3, [r3, #8]
 8003d84:	683a      	ldr	r2, [r7, #0]
 8003d86:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	683a      	ldr	r2, [r7, #0]
 8003d8c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	687a      	ldr	r2, [r7, #4]
 8003d92:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	1c5a      	adds	r2, r3, #1
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	601a      	str	r2, [r3, #0]
}
 8003d9e:	bf00      	nop
 8003da0:	3714      	adds	r7, #20
 8003da2:	46bd      	mov	sp, r7
 8003da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da8:	4770      	bx	lr

08003daa <uxListRemove>:
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003daa:	b480      	push	{r7}
 8003dac:	b085      	sub	sp, #20
 8003dae:	af00      	add	r7, sp, #0
 8003db0:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	691b      	ldr	r3, [r3, #16]
 8003db6:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	685b      	ldr	r3, [r3, #4]
 8003dbc:	687a      	ldr	r2, [r7, #4]
 8003dbe:	6892      	ldr	r2, [r2, #8]
 8003dc0:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	689b      	ldr	r3, [r3, #8]
 8003dc6:	687a      	ldr	r2, [r7, #4]
 8003dc8:	6852      	ldr	r2, [r2, #4]
 8003dca:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	685b      	ldr	r3, [r3, #4]
 8003dd0:	687a      	ldr	r2, [r7, #4]
 8003dd2:	429a      	cmp	r2, r3
 8003dd4:	d103      	bne.n	8003dde <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	689a      	ldr	r2, [r3, #8]
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	2200      	movs	r2, #0
 8003de2:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	1e5a      	subs	r2, r3, #1
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
}
 8003df2:	4618      	mov	r0, r3
 8003df4:	3714      	adds	r7, #20
 8003df6:	46bd      	mov	sp, r7
 8003df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfc:	4770      	bx	lr
	...

08003e00 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003e00:	b480      	push	{r7}
 8003e02:	b085      	sub	sp, #20
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	60f8      	str	r0, [r7, #12]
 8003e08:	60b9      	str	r1, [r7, #8]
 8003e0a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	3b04      	subs	r3, #4
 8003e10:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003e18:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	3b04      	subs	r3, #4
 8003e1e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003e20:	68bb      	ldr	r3, [r7, #8]
 8003e22:	f023 0201 	bic.w	r2, r3, #1
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	3b04      	subs	r3, #4
 8003e2e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003e30:	4a0c      	ldr	r2, [pc, #48]	; (8003e64 <pxPortInitialiseStack+0x64>)
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	3b14      	subs	r3, #20
 8003e3a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003e3c:	687a      	ldr	r2, [r7, #4]
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	3b04      	subs	r3, #4
 8003e46:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	f06f 0202 	mvn.w	r2, #2
 8003e4e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	3b20      	subs	r3, #32
 8003e54:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003e56:	68fb      	ldr	r3, [r7, #12]
}
 8003e58:	4618      	mov	r0, r3
 8003e5a:	3714      	adds	r7, #20
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e62:	4770      	bx	lr
 8003e64:	08003e69 	.word	0x08003e69

08003e68 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003e68:	b480      	push	{r7}
 8003e6a:	b085      	sub	sp, #20
 8003e6c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8003e6e:	2300      	movs	r3, #0
 8003e70:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003e72:	4b12      	ldr	r3, [pc, #72]	; (8003ebc <prvTaskExitError+0x54>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e7a:	d00a      	beq.n	8003e92 <prvTaskExitError+0x2a>
	__asm volatile
 8003e7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e80:	f383 8811 	msr	BASEPRI, r3
 8003e84:	f3bf 8f6f 	isb	sy
 8003e88:	f3bf 8f4f 	dsb	sy
 8003e8c:	60fb      	str	r3, [r7, #12]
}
 8003e8e:	bf00      	nop
 8003e90:	e7fe      	b.n	8003e90 <prvTaskExitError+0x28>
	__asm volatile
 8003e92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e96:	f383 8811 	msr	BASEPRI, r3
 8003e9a:	f3bf 8f6f 	isb	sy
 8003e9e:	f3bf 8f4f 	dsb	sy
 8003ea2:	60bb      	str	r3, [r7, #8]
}
 8003ea4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8003ea6:	bf00      	nop
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d0fc      	beq.n	8003ea8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8003eae:	bf00      	nop
 8003eb0:	bf00      	nop
 8003eb2:	3714      	adds	r7, #20
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eba:	4770      	bx	lr
 8003ebc:	24000010 	.word	0x24000010

08003ec0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003ec0:	4b07      	ldr	r3, [pc, #28]	; (8003ee0 <pxCurrentTCBConst2>)
 8003ec2:	6819      	ldr	r1, [r3, #0]
 8003ec4:	6808      	ldr	r0, [r1, #0]
 8003ec6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003eca:	f380 8809 	msr	PSP, r0
 8003ece:	f3bf 8f6f 	isb	sy
 8003ed2:	f04f 0000 	mov.w	r0, #0
 8003ed6:	f380 8811 	msr	BASEPRI, r0
 8003eda:	4770      	bx	lr
 8003edc:	f3af 8000 	nop.w

08003ee0 <pxCurrentTCBConst2>:
 8003ee0:	24003f70 	.word	0x24003f70
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003ee4:	bf00      	nop
 8003ee6:	bf00      	nop

08003ee8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8003ee8:	4808      	ldr	r0, [pc, #32]	; (8003f0c <prvPortStartFirstTask+0x24>)
 8003eea:	6800      	ldr	r0, [r0, #0]
 8003eec:	6800      	ldr	r0, [r0, #0]
 8003eee:	f380 8808 	msr	MSP, r0
 8003ef2:	f04f 0000 	mov.w	r0, #0
 8003ef6:	f380 8814 	msr	CONTROL, r0
 8003efa:	b662      	cpsie	i
 8003efc:	b661      	cpsie	f
 8003efe:	f3bf 8f4f 	dsb	sy
 8003f02:	f3bf 8f6f 	isb	sy
 8003f06:	df00      	svc	0
 8003f08:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8003f0a:	bf00      	nop
 8003f0c:	e000ed08 	.word	0xe000ed08

08003f10 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b086      	sub	sp, #24
 8003f14:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003f16:	4b46      	ldr	r3, [pc, #280]	; (8004030 <xPortStartScheduler+0x120>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	4a46      	ldr	r2, [pc, #280]	; (8004034 <xPortStartScheduler+0x124>)
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	d10a      	bne.n	8003f36 <xPortStartScheduler+0x26>
	__asm volatile
 8003f20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f24:	f383 8811 	msr	BASEPRI, r3
 8003f28:	f3bf 8f6f 	isb	sy
 8003f2c:	f3bf 8f4f 	dsb	sy
 8003f30:	613b      	str	r3, [r7, #16]
}
 8003f32:	bf00      	nop
 8003f34:	e7fe      	b.n	8003f34 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003f36:	4b3e      	ldr	r3, [pc, #248]	; (8004030 <xPortStartScheduler+0x120>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	4a3f      	ldr	r2, [pc, #252]	; (8004038 <xPortStartScheduler+0x128>)
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	d10a      	bne.n	8003f56 <xPortStartScheduler+0x46>
	__asm volatile
 8003f40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f44:	f383 8811 	msr	BASEPRI, r3
 8003f48:	f3bf 8f6f 	isb	sy
 8003f4c:	f3bf 8f4f 	dsb	sy
 8003f50:	60fb      	str	r3, [r7, #12]
}
 8003f52:	bf00      	nop
 8003f54:	e7fe      	b.n	8003f54 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003f56:	4b39      	ldr	r3, [pc, #228]	; (800403c <xPortStartScheduler+0x12c>)
 8003f58:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003f5a:	697b      	ldr	r3, [r7, #20]
 8003f5c:	781b      	ldrb	r3, [r3, #0]
 8003f5e:	b2db      	uxtb	r3, r3
 8003f60:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003f62:	697b      	ldr	r3, [r7, #20]
 8003f64:	22ff      	movs	r2, #255	; 0xff
 8003f66:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003f68:	697b      	ldr	r3, [r7, #20]
 8003f6a:	781b      	ldrb	r3, [r3, #0]
 8003f6c:	b2db      	uxtb	r3, r3
 8003f6e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003f70:	78fb      	ldrb	r3, [r7, #3]
 8003f72:	b2db      	uxtb	r3, r3
 8003f74:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003f78:	b2da      	uxtb	r2, r3
 8003f7a:	4b31      	ldr	r3, [pc, #196]	; (8004040 <xPortStartScheduler+0x130>)
 8003f7c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003f7e:	4b31      	ldr	r3, [pc, #196]	; (8004044 <xPortStartScheduler+0x134>)
 8003f80:	2207      	movs	r2, #7
 8003f82:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003f84:	e009      	b.n	8003f9a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8003f86:	4b2f      	ldr	r3, [pc, #188]	; (8004044 <xPortStartScheduler+0x134>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	3b01      	subs	r3, #1
 8003f8c:	4a2d      	ldr	r2, [pc, #180]	; (8004044 <xPortStartScheduler+0x134>)
 8003f8e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003f90:	78fb      	ldrb	r3, [r7, #3]
 8003f92:	b2db      	uxtb	r3, r3
 8003f94:	005b      	lsls	r3, r3, #1
 8003f96:	b2db      	uxtb	r3, r3
 8003f98:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003f9a:	78fb      	ldrb	r3, [r7, #3]
 8003f9c:	b2db      	uxtb	r3, r3
 8003f9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fa2:	2b80      	cmp	r3, #128	; 0x80
 8003fa4:	d0ef      	beq.n	8003f86 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003fa6:	4b27      	ldr	r3, [pc, #156]	; (8004044 <xPortStartScheduler+0x134>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f1c3 0307 	rsb	r3, r3, #7
 8003fae:	2b04      	cmp	r3, #4
 8003fb0:	d00a      	beq.n	8003fc8 <xPortStartScheduler+0xb8>
	__asm volatile
 8003fb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fb6:	f383 8811 	msr	BASEPRI, r3
 8003fba:	f3bf 8f6f 	isb	sy
 8003fbe:	f3bf 8f4f 	dsb	sy
 8003fc2:	60bb      	str	r3, [r7, #8]
}
 8003fc4:	bf00      	nop
 8003fc6:	e7fe      	b.n	8003fc6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003fc8:	4b1e      	ldr	r3, [pc, #120]	; (8004044 <xPortStartScheduler+0x134>)
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	021b      	lsls	r3, r3, #8
 8003fce:	4a1d      	ldr	r2, [pc, #116]	; (8004044 <xPortStartScheduler+0x134>)
 8003fd0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003fd2:	4b1c      	ldr	r3, [pc, #112]	; (8004044 <xPortStartScheduler+0x134>)
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003fda:	4a1a      	ldr	r2, [pc, #104]	; (8004044 <xPortStartScheduler+0x134>)
 8003fdc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	b2da      	uxtb	r2, r3
 8003fe2:	697b      	ldr	r3, [r7, #20]
 8003fe4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003fe6:	4b18      	ldr	r3, [pc, #96]	; (8004048 <xPortStartScheduler+0x138>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	4a17      	ldr	r2, [pc, #92]	; (8004048 <xPortStartScheduler+0x138>)
 8003fec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003ff0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003ff2:	4b15      	ldr	r3, [pc, #84]	; (8004048 <xPortStartScheduler+0x138>)
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	4a14      	ldr	r2, [pc, #80]	; (8004048 <xPortStartScheduler+0x138>)
 8003ff8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003ffc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8003ffe:	f000 f8dd 	bl	80041bc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004002:	4b12      	ldr	r3, [pc, #72]	; (800404c <xPortStartScheduler+0x13c>)
 8004004:	2200      	movs	r2, #0
 8004006:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004008:	f000 f8fc 	bl	8004204 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800400c:	4b10      	ldr	r3, [pc, #64]	; (8004050 <xPortStartScheduler+0x140>)
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	4a0f      	ldr	r2, [pc, #60]	; (8004050 <xPortStartScheduler+0x140>)
 8004012:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004016:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004018:	f7ff ff66 	bl	8003ee8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800401c:	f000 fc72 	bl	8004904 <vTaskSwitchContext>
	prvTaskExitError();
 8004020:	f7ff ff22 	bl	8003e68 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004024:	2300      	movs	r3, #0
}
 8004026:	4618      	mov	r0, r3
 8004028:	3718      	adds	r7, #24
 800402a:	46bd      	mov	sp, r7
 800402c:	bd80      	pop	{r7, pc}
 800402e:	bf00      	nop
 8004030:	e000ed00 	.word	0xe000ed00
 8004034:	410fc271 	.word	0x410fc271
 8004038:	410fc270 	.word	0x410fc270
 800403c:	e000e400 	.word	0xe000e400
 8004040:	24003f68 	.word	0x24003f68
 8004044:	24003f6c 	.word	0x24003f6c
 8004048:	e000ed20 	.word	0xe000ed20
 800404c:	24000010 	.word	0x24000010
 8004050:	e000ef34 	.word	0xe000ef34

08004054 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004054:	b480      	push	{r7}
 8004056:	b083      	sub	sp, #12
 8004058:	af00      	add	r7, sp, #0
	__asm volatile
 800405a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800405e:	f383 8811 	msr	BASEPRI, r3
 8004062:	f3bf 8f6f 	isb	sy
 8004066:	f3bf 8f4f 	dsb	sy
 800406a:	607b      	str	r3, [r7, #4]
}
 800406c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800406e:	4b0f      	ldr	r3, [pc, #60]	; (80040ac <vPortEnterCritical+0x58>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	3301      	adds	r3, #1
 8004074:	4a0d      	ldr	r2, [pc, #52]	; (80040ac <vPortEnterCritical+0x58>)
 8004076:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004078:	4b0c      	ldr	r3, [pc, #48]	; (80040ac <vPortEnterCritical+0x58>)
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	2b01      	cmp	r3, #1
 800407e:	d10f      	bne.n	80040a0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004080:	4b0b      	ldr	r3, [pc, #44]	; (80040b0 <vPortEnterCritical+0x5c>)
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	b2db      	uxtb	r3, r3
 8004086:	2b00      	cmp	r3, #0
 8004088:	d00a      	beq.n	80040a0 <vPortEnterCritical+0x4c>
	__asm volatile
 800408a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800408e:	f383 8811 	msr	BASEPRI, r3
 8004092:	f3bf 8f6f 	isb	sy
 8004096:	f3bf 8f4f 	dsb	sy
 800409a:	603b      	str	r3, [r7, #0]
}
 800409c:	bf00      	nop
 800409e:	e7fe      	b.n	800409e <vPortEnterCritical+0x4a>
	}
}
 80040a0:	bf00      	nop
 80040a2:	370c      	adds	r7, #12
 80040a4:	46bd      	mov	sp, r7
 80040a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040aa:	4770      	bx	lr
 80040ac:	24000010 	.word	0x24000010
 80040b0:	e000ed04 	.word	0xe000ed04

080040b4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80040b4:	b480      	push	{r7}
 80040b6:	b083      	sub	sp, #12
 80040b8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80040ba:	4b12      	ldr	r3, [pc, #72]	; (8004104 <vPortExitCritical+0x50>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d10a      	bne.n	80040d8 <vPortExitCritical+0x24>
	__asm volatile
 80040c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040c6:	f383 8811 	msr	BASEPRI, r3
 80040ca:	f3bf 8f6f 	isb	sy
 80040ce:	f3bf 8f4f 	dsb	sy
 80040d2:	607b      	str	r3, [r7, #4]
}
 80040d4:	bf00      	nop
 80040d6:	e7fe      	b.n	80040d6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80040d8:	4b0a      	ldr	r3, [pc, #40]	; (8004104 <vPortExitCritical+0x50>)
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	3b01      	subs	r3, #1
 80040de:	4a09      	ldr	r2, [pc, #36]	; (8004104 <vPortExitCritical+0x50>)
 80040e0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80040e2:	4b08      	ldr	r3, [pc, #32]	; (8004104 <vPortExitCritical+0x50>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d105      	bne.n	80040f6 <vPortExitCritical+0x42>
 80040ea:	2300      	movs	r3, #0
 80040ec:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80040f4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80040f6:	bf00      	nop
 80040f8:	370c      	adds	r7, #12
 80040fa:	46bd      	mov	sp, r7
 80040fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004100:	4770      	bx	lr
 8004102:	bf00      	nop
 8004104:	24000010 	.word	0x24000010
	...

08004110 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004110:	f3ef 8009 	mrs	r0, PSP
 8004114:	f3bf 8f6f 	isb	sy
 8004118:	4b15      	ldr	r3, [pc, #84]	; (8004170 <pxCurrentTCBConst>)
 800411a:	681a      	ldr	r2, [r3, #0]
 800411c:	f01e 0f10 	tst.w	lr, #16
 8004120:	bf08      	it	eq
 8004122:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004126:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800412a:	6010      	str	r0, [r2, #0]
 800412c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004130:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004134:	f380 8811 	msr	BASEPRI, r0
 8004138:	f3bf 8f4f 	dsb	sy
 800413c:	f3bf 8f6f 	isb	sy
 8004140:	f000 fbe0 	bl	8004904 <vTaskSwitchContext>
 8004144:	f04f 0000 	mov.w	r0, #0
 8004148:	f380 8811 	msr	BASEPRI, r0
 800414c:	bc09      	pop	{r0, r3}
 800414e:	6819      	ldr	r1, [r3, #0]
 8004150:	6808      	ldr	r0, [r1, #0]
 8004152:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004156:	f01e 0f10 	tst.w	lr, #16
 800415a:	bf08      	it	eq
 800415c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004160:	f380 8809 	msr	PSP, r0
 8004164:	f3bf 8f6f 	isb	sy
 8004168:	4770      	bx	lr
 800416a:	bf00      	nop
 800416c:	f3af 8000 	nop.w

08004170 <pxCurrentTCBConst>:
 8004170:	24003f70 	.word	0x24003f70
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004174:	bf00      	nop
 8004176:	bf00      	nop

08004178 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004178:	b580      	push	{r7, lr}
 800417a:	b082      	sub	sp, #8
 800417c:	af00      	add	r7, sp, #0
	__asm volatile
 800417e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004182:	f383 8811 	msr	BASEPRI, r3
 8004186:	f3bf 8f6f 	isb	sy
 800418a:	f3bf 8f4f 	dsb	sy
 800418e:	607b      	str	r3, [r7, #4]
}
 8004190:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004192:	f000 faff 	bl	8004794 <xTaskIncrementTick>
 8004196:	4603      	mov	r3, r0
 8004198:	2b00      	cmp	r3, #0
 800419a:	d003      	beq.n	80041a4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800419c:	4b06      	ldr	r3, [pc, #24]	; (80041b8 <xPortSysTickHandler+0x40>)
 800419e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80041a2:	601a      	str	r2, [r3, #0]
 80041a4:	2300      	movs	r3, #0
 80041a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80041a8:	683b      	ldr	r3, [r7, #0]
 80041aa:	f383 8811 	msr	BASEPRI, r3
}
 80041ae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80041b0:	bf00      	nop
 80041b2:	3708      	adds	r7, #8
 80041b4:	46bd      	mov	sp, r7
 80041b6:	bd80      	pop	{r7, pc}
 80041b8:	e000ed04 	.word	0xe000ed04

080041bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80041bc:	b480      	push	{r7}
 80041be:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80041c0:	4b0b      	ldr	r3, [pc, #44]	; (80041f0 <vPortSetupTimerInterrupt+0x34>)
 80041c2:	2200      	movs	r2, #0
 80041c4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80041c6:	4b0b      	ldr	r3, [pc, #44]	; (80041f4 <vPortSetupTimerInterrupt+0x38>)
 80041c8:	2200      	movs	r2, #0
 80041ca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80041cc:	4b0a      	ldr	r3, [pc, #40]	; (80041f8 <vPortSetupTimerInterrupt+0x3c>)
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	4a0a      	ldr	r2, [pc, #40]	; (80041fc <vPortSetupTimerInterrupt+0x40>)
 80041d2:	fba2 2303 	umull	r2, r3, r2, r3
 80041d6:	099b      	lsrs	r3, r3, #6
 80041d8:	4a09      	ldr	r2, [pc, #36]	; (8004200 <vPortSetupTimerInterrupt+0x44>)
 80041da:	3b01      	subs	r3, #1
 80041dc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80041de:	4b04      	ldr	r3, [pc, #16]	; (80041f0 <vPortSetupTimerInterrupt+0x34>)
 80041e0:	2207      	movs	r2, #7
 80041e2:	601a      	str	r2, [r3, #0]
}
 80041e4:	bf00      	nop
 80041e6:	46bd      	mov	sp, r7
 80041e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ec:	4770      	bx	lr
 80041ee:	bf00      	nop
 80041f0:	e000e010 	.word	0xe000e010
 80041f4:	e000e018 	.word	0xe000e018
 80041f8:	24000000 	.word	0x24000000
 80041fc:	10624dd3 	.word	0x10624dd3
 8004200:	e000e014 	.word	0xe000e014

08004204 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004204:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004214 <vPortEnableVFP+0x10>
 8004208:	6801      	ldr	r1, [r0, #0]
 800420a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800420e:	6001      	str	r1, [r0, #0]
 8004210:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004212:	bf00      	nop
 8004214:	e000ed88 	.word	0xe000ed88

08004218 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004218:	b580      	push	{r7, lr}
 800421a:	b08e      	sub	sp, #56	; 0x38
 800421c:	af04      	add	r7, sp, #16
 800421e:	60f8      	str	r0, [r7, #12]
 8004220:	60b9      	str	r1, [r7, #8]
 8004222:	607a      	str	r2, [r7, #4]
 8004224:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004226:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004228:	2b00      	cmp	r3, #0
 800422a:	d10a      	bne.n	8004242 <xTaskCreateStatic+0x2a>
	__asm volatile
 800422c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004230:	f383 8811 	msr	BASEPRI, r3
 8004234:	f3bf 8f6f 	isb	sy
 8004238:	f3bf 8f4f 	dsb	sy
 800423c:	623b      	str	r3, [r7, #32]
}
 800423e:	bf00      	nop
 8004240:	e7fe      	b.n	8004240 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004242:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004244:	2b00      	cmp	r3, #0
 8004246:	d10a      	bne.n	800425e <xTaskCreateStatic+0x46>
	__asm volatile
 8004248:	f04f 0350 	mov.w	r3, #80	; 0x50
 800424c:	f383 8811 	msr	BASEPRI, r3
 8004250:	f3bf 8f6f 	isb	sy
 8004254:	f3bf 8f4f 	dsb	sy
 8004258:	61fb      	str	r3, [r7, #28]
}
 800425a:	bf00      	nop
 800425c:	e7fe      	b.n	800425c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800425e:	23b4      	movs	r3, #180	; 0xb4
 8004260:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004262:	693b      	ldr	r3, [r7, #16]
 8004264:	2bb4      	cmp	r3, #180	; 0xb4
 8004266:	d00a      	beq.n	800427e <xTaskCreateStatic+0x66>
	__asm volatile
 8004268:	f04f 0350 	mov.w	r3, #80	; 0x50
 800426c:	f383 8811 	msr	BASEPRI, r3
 8004270:	f3bf 8f6f 	isb	sy
 8004274:	f3bf 8f4f 	dsb	sy
 8004278:	61bb      	str	r3, [r7, #24]
}
 800427a:	bf00      	nop
 800427c:	e7fe      	b.n	800427c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800427e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004280:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004282:	2b00      	cmp	r3, #0
 8004284:	d01e      	beq.n	80042c4 <xTaskCreateStatic+0xac>
 8004286:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004288:	2b00      	cmp	r3, #0
 800428a:	d01b      	beq.n	80042c4 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800428c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800428e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004292:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004294:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004298:	2202      	movs	r2, #2
 800429a:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800429e:	2300      	movs	r3, #0
 80042a0:	9303      	str	r3, [sp, #12]
 80042a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042a4:	9302      	str	r3, [sp, #8]
 80042a6:	f107 0314 	add.w	r3, r7, #20
 80042aa:	9301      	str	r3, [sp, #4]
 80042ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042ae:	9300      	str	r3, [sp, #0]
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	687a      	ldr	r2, [r7, #4]
 80042b4:	68b9      	ldr	r1, [r7, #8]
 80042b6:	68f8      	ldr	r0, [r7, #12]
 80042b8:	f000 f850 	bl	800435c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80042bc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80042be:	f000 f8eb 	bl	8004498 <prvAddNewTaskToReadyList>
 80042c2:	e001      	b.n	80042c8 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80042c4:	2300      	movs	r3, #0
 80042c6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80042c8:	697b      	ldr	r3, [r7, #20]
	}
 80042ca:	4618      	mov	r0, r3
 80042cc:	3728      	adds	r7, #40	; 0x28
 80042ce:	46bd      	mov	sp, r7
 80042d0:	bd80      	pop	{r7, pc}

080042d2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80042d2:	b580      	push	{r7, lr}
 80042d4:	b08c      	sub	sp, #48	; 0x30
 80042d6:	af04      	add	r7, sp, #16
 80042d8:	60f8      	str	r0, [r7, #12]
 80042da:	60b9      	str	r1, [r7, #8]
 80042dc:	603b      	str	r3, [r7, #0]
 80042de:	4613      	mov	r3, r2
 80042e0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80042e2:	88fb      	ldrh	r3, [r7, #6]
 80042e4:	009b      	lsls	r3, r3, #2
 80042e6:	4618      	mov	r0, r3
 80042e8:	f7ff fb24 	bl	8003934 <pvPortMalloc>
 80042ec:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80042ee:	697b      	ldr	r3, [r7, #20]
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d00e      	beq.n	8004312 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80042f4:	20b4      	movs	r0, #180	; 0xb4
 80042f6:	f7ff fb1d 	bl	8003934 <pvPortMalloc>
 80042fa:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80042fc:	69fb      	ldr	r3, [r7, #28]
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d003      	beq.n	800430a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004302:	69fb      	ldr	r3, [r7, #28]
 8004304:	697a      	ldr	r2, [r7, #20]
 8004306:	631a      	str	r2, [r3, #48]	; 0x30
 8004308:	e005      	b.n	8004316 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800430a:	6978      	ldr	r0, [r7, #20]
 800430c:	f7ff fbde 	bl	8003acc <vPortFree>
 8004310:	e001      	b.n	8004316 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004312:	2300      	movs	r3, #0
 8004314:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004316:	69fb      	ldr	r3, [r7, #28]
 8004318:	2b00      	cmp	r3, #0
 800431a:	d017      	beq.n	800434c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800431c:	69fb      	ldr	r3, [r7, #28]
 800431e:	2200      	movs	r2, #0
 8004320:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004324:	88fa      	ldrh	r2, [r7, #6]
 8004326:	2300      	movs	r3, #0
 8004328:	9303      	str	r3, [sp, #12]
 800432a:	69fb      	ldr	r3, [r7, #28]
 800432c:	9302      	str	r3, [sp, #8]
 800432e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004330:	9301      	str	r3, [sp, #4]
 8004332:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004334:	9300      	str	r3, [sp, #0]
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	68b9      	ldr	r1, [r7, #8]
 800433a:	68f8      	ldr	r0, [r7, #12]
 800433c:	f000 f80e 	bl	800435c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004340:	69f8      	ldr	r0, [r7, #28]
 8004342:	f000 f8a9 	bl	8004498 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004346:	2301      	movs	r3, #1
 8004348:	61bb      	str	r3, [r7, #24]
 800434a:	e002      	b.n	8004352 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800434c:	f04f 33ff 	mov.w	r3, #4294967295
 8004350:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004352:	69bb      	ldr	r3, [r7, #24]
	}
 8004354:	4618      	mov	r0, r3
 8004356:	3720      	adds	r7, #32
 8004358:	46bd      	mov	sp, r7
 800435a:	bd80      	pop	{r7, pc}

0800435c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800435c:	b580      	push	{r7, lr}
 800435e:	b088      	sub	sp, #32
 8004360:	af00      	add	r7, sp, #0
 8004362:	60f8      	str	r0, [r7, #12]
 8004364:	60b9      	str	r1, [r7, #8]
 8004366:	607a      	str	r2, [r7, #4]
 8004368:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800436a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800436c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800436e:	6879      	ldr	r1, [r7, #4]
 8004370:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8004374:	440b      	add	r3, r1
 8004376:	009b      	lsls	r3, r3, #2
 8004378:	4413      	add	r3, r2
 800437a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800437c:	69bb      	ldr	r3, [r7, #24]
 800437e:	f023 0307 	bic.w	r3, r3, #7
 8004382:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004384:	69bb      	ldr	r3, [r7, #24]
 8004386:	f003 0307 	and.w	r3, r3, #7
 800438a:	2b00      	cmp	r3, #0
 800438c:	d00a      	beq.n	80043a4 <prvInitialiseNewTask+0x48>
	__asm volatile
 800438e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004392:	f383 8811 	msr	BASEPRI, r3
 8004396:	f3bf 8f6f 	isb	sy
 800439a:	f3bf 8f4f 	dsb	sy
 800439e:	617b      	str	r3, [r7, #20]
}
 80043a0:	bf00      	nop
 80043a2:	e7fe      	b.n	80043a2 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80043a4:	68bb      	ldr	r3, [r7, #8]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d01f      	beq.n	80043ea <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80043aa:	2300      	movs	r3, #0
 80043ac:	61fb      	str	r3, [r7, #28]
 80043ae:	e012      	b.n	80043d6 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80043b0:	68ba      	ldr	r2, [r7, #8]
 80043b2:	69fb      	ldr	r3, [r7, #28]
 80043b4:	4413      	add	r3, r2
 80043b6:	7819      	ldrb	r1, [r3, #0]
 80043b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80043ba:	69fb      	ldr	r3, [r7, #28]
 80043bc:	4413      	add	r3, r2
 80043be:	3334      	adds	r3, #52	; 0x34
 80043c0:	460a      	mov	r2, r1
 80043c2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80043c4:	68ba      	ldr	r2, [r7, #8]
 80043c6:	69fb      	ldr	r3, [r7, #28]
 80043c8:	4413      	add	r3, r2
 80043ca:	781b      	ldrb	r3, [r3, #0]
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d006      	beq.n	80043de <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80043d0:	69fb      	ldr	r3, [r7, #28]
 80043d2:	3301      	adds	r3, #1
 80043d4:	61fb      	str	r3, [r7, #28]
 80043d6:	69fb      	ldr	r3, [r7, #28]
 80043d8:	2b0f      	cmp	r3, #15
 80043da:	d9e9      	bls.n	80043b0 <prvInitialiseNewTask+0x54>
 80043dc:	e000      	b.n	80043e0 <prvInitialiseNewTask+0x84>
			{
				break;
 80043de:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80043e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043e2:	2200      	movs	r2, #0
 80043e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80043e8:	e003      	b.n	80043f2 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80043ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043ec:	2200      	movs	r2, #0
 80043ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80043f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043f4:	2b06      	cmp	r3, #6
 80043f6:	d901      	bls.n	80043fc <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80043f8:	2306      	movs	r3, #6
 80043fa:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80043fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004400:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004402:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004404:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004406:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8004408:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800440a:	2200      	movs	r2, #0
 800440c:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800440e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004410:	3304      	adds	r3, #4
 8004412:	4618      	mov	r0, r3
 8004414:	f7ff fc98 	bl	8003d48 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004418:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800441a:	3318      	adds	r3, #24
 800441c:	4618      	mov	r0, r3
 800441e:	f7ff fc93 	bl	8003d48 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004422:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004424:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004426:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004428:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800442a:	f1c3 0207 	rsb	r2, r3, #7
 800442e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004430:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004432:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004434:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004436:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004438:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800443a:	2200      	movs	r2, #0
 800443c:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004440:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004442:	2200      	movs	r2, #0
 8004444:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004448:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800444a:	334c      	adds	r3, #76	; 0x4c
 800444c:	2260      	movs	r2, #96	; 0x60
 800444e:	2100      	movs	r1, #0
 8004450:	4618      	mov	r0, r3
 8004452:	f000 fbd7 	bl	8004c04 <memset>
 8004456:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004458:	4a0c      	ldr	r2, [pc, #48]	; (800448c <prvInitialiseNewTask+0x130>)
 800445a:	651a      	str	r2, [r3, #80]	; 0x50
 800445c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800445e:	4a0c      	ldr	r2, [pc, #48]	; (8004490 <prvInitialiseNewTask+0x134>)
 8004460:	655a      	str	r2, [r3, #84]	; 0x54
 8004462:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004464:	4a0b      	ldr	r2, [pc, #44]	; (8004494 <prvInitialiseNewTask+0x138>)
 8004466:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004468:	683a      	ldr	r2, [r7, #0]
 800446a:	68f9      	ldr	r1, [r7, #12]
 800446c:	69b8      	ldr	r0, [r7, #24]
 800446e:	f7ff fcc7 	bl	8003e00 <pxPortInitialiseStack>
 8004472:	4602      	mov	r2, r0
 8004474:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004476:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004478:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800447a:	2b00      	cmp	r3, #0
 800447c:	d002      	beq.n	8004484 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800447e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004480:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004482:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004484:	bf00      	nop
 8004486:	3720      	adds	r7, #32
 8004488:	46bd      	mov	sp, r7
 800448a:	bd80      	pop	{r7, pc}
 800448c:	08004e10 	.word	0x08004e10
 8004490:	08004e30 	.word	0x08004e30
 8004494:	08004df0 	.word	0x08004df0

08004498 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004498:	b580      	push	{r7, lr}
 800449a:	b082      	sub	sp, #8
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80044a0:	f7ff fdd8 	bl	8004054 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80044a4:	4b2a      	ldr	r3, [pc, #168]	; (8004550 <prvAddNewTaskToReadyList+0xb8>)
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	3301      	adds	r3, #1
 80044aa:	4a29      	ldr	r2, [pc, #164]	; (8004550 <prvAddNewTaskToReadyList+0xb8>)
 80044ac:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80044ae:	4b29      	ldr	r3, [pc, #164]	; (8004554 <prvAddNewTaskToReadyList+0xbc>)
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d109      	bne.n	80044ca <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80044b6:	4a27      	ldr	r2, [pc, #156]	; (8004554 <prvAddNewTaskToReadyList+0xbc>)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80044bc:	4b24      	ldr	r3, [pc, #144]	; (8004550 <prvAddNewTaskToReadyList+0xb8>)
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	2b01      	cmp	r3, #1
 80044c2:	d110      	bne.n	80044e6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80044c4:	f000 fa98 	bl	80049f8 <prvInitialiseTaskLists>
 80044c8:	e00d      	b.n	80044e6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80044ca:	4b23      	ldr	r3, [pc, #140]	; (8004558 <prvAddNewTaskToReadyList+0xc0>)
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d109      	bne.n	80044e6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80044d2:	4b20      	ldr	r3, [pc, #128]	; (8004554 <prvAddNewTaskToReadyList+0xbc>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044dc:	429a      	cmp	r2, r3
 80044de:	d802      	bhi.n	80044e6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80044e0:	4a1c      	ldr	r2, [pc, #112]	; (8004554 <prvAddNewTaskToReadyList+0xbc>)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80044e6:	4b1d      	ldr	r3, [pc, #116]	; (800455c <prvAddNewTaskToReadyList+0xc4>)
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	3301      	adds	r3, #1
 80044ec:	4a1b      	ldr	r2, [pc, #108]	; (800455c <prvAddNewTaskToReadyList+0xc4>)
 80044ee:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044f4:	2201      	movs	r2, #1
 80044f6:	409a      	lsls	r2, r3
 80044f8:	4b19      	ldr	r3, [pc, #100]	; (8004560 <prvAddNewTaskToReadyList+0xc8>)
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	4313      	orrs	r3, r2
 80044fe:	4a18      	ldr	r2, [pc, #96]	; (8004560 <prvAddNewTaskToReadyList+0xc8>)
 8004500:	6013      	str	r3, [r2, #0]
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004506:	4613      	mov	r3, r2
 8004508:	009b      	lsls	r3, r3, #2
 800450a:	4413      	add	r3, r2
 800450c:	009b      	lsls	r3, r3, #2
 800450e:	4a15      	ldr	r2, [pc, #84]	; (8004564 <prvAddNewTaskToReadyList+0xcc>)
 8004510:	441a      	add	r2, r3
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	3304      	adds	r3, #4
 8004516:	4619      	mov	r1, r3
 8004518:	4610      	mov	r0, r2
 800451a:	f7ff fc22 	bl	8003d62 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800451e:	f7ff fdc9 	bl	80040b4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004522:	4b0d      	ldr	r3, [pc, #52]	; (8004558 <prvAddNewTaskToReadyList+0xc0>)
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	2b00      	cmp	r3, #0
 8004528:	d00e      	beq.n	8004548 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800452a:	4b0a      	ldr	r3, [pc, #40]	; (8004554 <prvAddNewTaskToReadyList+0xbc>)
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004534:	429a      	cmp	r2, r3
 8004536:	d207      	bcs.n	8004548 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004538:	4b0b      	ldr	r3, [pc, #44]	; (8004568 <prvAddNewTaskToReadyList+0xd0>)
 800453a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800453e:	601a      	str	r2, [r3, #0]
 8004540:	f3bf 8f4f 	dsb	sy
 8004544:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004548:	bf00      	nop
 800454a:	3708      	adds	r7, #8
 800454c:	46bd      	mov	sp, r7
 800454e:	bd80      	pop	{r7, pc}
 8004550:	24004070 	.word	0x24004070
 8004554:	24003f70 	.word	0x24003f70
 8004558:	2400407c 	.word	0x2400407c
 800455c:	2400408c 	.word	0x2400408c
 8004560:	24004078 	.word	0x24004078
 8004564:	24003f74 	.word	0x24003f74
 8004568:	e000ed04 	.word	0xe000ed04

0800456c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800456c:	b580      	push	{r7, lr}
 800456e:	b08a      	sub	sp, #40	; 0x28
 8004570:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004572:	2300      	movs	r3, #0
 8004574:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004576:	2300      	movs	r3, #0
 8004578:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800457a:	463a      	mov	r2, r7
 800457c:	1d39      	adds	r1, r7, #4
 800457e:	f107 0308 	add.w	r3, r7, #8
 8004582:	4618      	mov	r0, r3
 8004584:	f7fb ff46 	bl	8000414 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004588:	6839      	ldr	r1, [r7, #0]
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	68ba      	ldr	r2, [r7, #8]
 800458e:	9202      	str	r2, [sp, #8]
 8004590:	9301      	str	r3, [sp, #4]
 8004592:	2300      	movs	r3, #0
 8004594:	9300      	str	r3, [sp, #0]
 8004596:	2300      	movs	r3, #0
 8004598:	460a      	mov	r2, r1
 800459a:	4921      	ldr	r1, [pc, #132]	; (8004620 <vTaskStartScheduler+0xb4>)
 800459c:	4821      	ldr	r0, [pc, #132]	; (8004624 <vTaskStartScheduler+0xb8>)
 800459e:	f7ff fe3b 	bl	8004218 <xTaskCreateStatic>
 80045a2:	4603      	mov	r3, r0
 80045a4:	4a20      	ldr	r2, [pc, #128]	; (8004628 <vTaskStartScheduler+0xbc>)
 80045a6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80045a8:	4b1f      	ldr	r3, [pc, #124]	; (8004628 <vTaskStartScheduler+0xbc>)
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d002      	beq.n	80045b6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80045b0:	2301      	movs	r3, #1
 80045b2:	617b      	str	r3, [r7, #20]
 80045b4:	e001      	b.n	80045ba <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80045b6:	2300      	movs	r3, #0
 80045b8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80045ba:	697b      	ldr	r3, [r7, #20]
 80045bc:	2b01      	cmp	r3, #1
 80045be:	d11b      	bne.n	80045f8 <vTaskStartScheduler+0x8c>
	__asm volatile
 80045c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045c4:	f383 8811 	msr	BASEPRI, r3
 80045c8:	f3bf 8f6f 	isb	sy
 80045cc:	f3bf 8f4f 	dsb	sy
 80045d0:	613b      	str	r3, [r7, #16]
}
 80045d2:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80045d4:	4b15      	ldr	r3, [pc, #84]	; (800462c <vTaskStartScheduler+0xc0>)
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	334c      	adds	r3, #76	; 0x4c
 80045da:	4a15      	ldr	r2, [pc, #84]	; (8004630 <vTaskStartScheduler+0xc4>)
 80045dc:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80045de:	4b15      	ldr	r3, [pc, #84]	; (8004634 <vTaskStartScheduler+0xc8>)
 80045e0:	f04f 32ff 	mov.w	r2, #4294967295
 80045e4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80045e6:	4b14      	ldr	r3, [pc, #80]	; (8004638 <vTaskStartScheduler+0xcc>)
 80045e8:	2201      	movs	r2, #1
 80045ea:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80045ec:	4b13      	ldr	r3, [pc, #76]	; (800463c <vTaskStartScheduler+0xd0>)
 80045ee:	2200      	movs	r2, #0
 80045f0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80045f2:	f7ff fc8d 	bl	8003f10 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80045f6:	e00e      	b.n	8004616 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80045f8:	697b      	ldr	r3, [r7, #20]
 80045fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045fe:	d10a      	bne.n	8004616 <vTaskStartScheduler+0xaa>
	__asm volatile
 8004600:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004604:	f383 8811 	msr	BASEPRI, r3
 8004608:	f3bf 8f6f 	isb	sy
 800460c:	f3bf 8f4f 	dsb	sy
 8004610:	60fb      	str	r3, [r7, #12]
}
 8004612:	bf00      	nop
 8004614:	e7fe      	b.n	8004614 <vTaskStartScheduler+0xa8>
}
 8004616:	bf00      	nop
 8004618:	3718      	adds	r7, #24
 800461a:	46bd      	mov	sp, r7
 800461c:	bd80      	pop	{r7, pc}
 800461e:	bf00      	nop
 8004620:	08004dd8 	.word	0x08004dd8
 8004624:	080049c9 	.word	0x080049c9
 8004628:	24004094 	.word	0x24004094
 800462c:	24003f70 	.word	0x24003f70
 8004630:	24000014 	.word	0x24000014
 8004634:	24004090 	.word	0x24004090
 8004638:	2400407c 	.word	0x2400407c
 800463c:	24004074 	.word	0x24004074

08004640 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004640:	b480      	push	{r7}
 8004642:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004644:	4b04      	ldr	r3, [pc, #16]	; (8004658 <vTaskSuspendAll+0x18>)
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	3301      	adds	r3, #1
 800464a:	4a03      	ldr	r2, [pc, #12]	; (8004658 <vTaskSuspendAll+0x18>)
 800464c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800464e:	bf00      	nop
 8004650:	46bd      	mov	sp, r7
 8004652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004656:	4770      	bx	lr
 8004658:	24004098 	.word	0x24004098

0800465c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800465c:	b580      	push	{r7, lr}
 800465e:	b084      	sub	sp, #16
 8004660:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004662:	2300      	movs	r3, #0
 8004664:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004666:	2300      	movs	r3, #0
 8004668:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800466a:	4b41      	ldr	r3, [pc, #260]	; (8004770 <xTaskResumeAll+0x114>)
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	2b00      	cmp	r3, #0
 8004670:	d10a      	bne.n	8004688 <xTaskResumeAll+0x2c>
	__asm volatile
 8004672:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004676:	f383 8811 	msr	BASEPRI, r3
 800467a:	f3bf 8f6f 	isb	sy
 800467e:	f3bf 8f4f 	dsb	sy
 8004682:	603b      	str	r3, [r7, #0]
}
 8004684:	bf00      	nop
 8004686:	e7fe      	b.n	8004686 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004688:	f7ff fce4 	bl	8004054 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800468c:	4b38      	ldr	r3, [pc, #224]	; (8004770 <xTaskResumeAll+0x114>)
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	3b01      	subs	r3, #1
 8004692:	4a37      	ldr	r2, [pc, #220]	; (8004770 <xTaskResumeAll+0x114>)
 8004694:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004696:	4b36      	ldr	r3, [pc, #216]	; (8004770 <xTaskResumeAll+0x114>)
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d161      	bne.n	8004762 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800469e:	4b35      	ldr	r3, [pc, #212]	; (8004774 <xTaskResumeAll+0x118>)
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d05d      	beq.n	8004762 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80046a6:	e02e      	b.n	8004706 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80046a8:	4b33      	ldr	r3, [pc, #204]	; (8004778 <xTaskResumeAll+0x11c>)
 80046aa:	68db      	ldr	r3, [r3, #12]
 80046ac:	68db      	ldr	r3, [r3, #12]
 80046ae:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	3318      	adds	r3, #24
 80046b4:	4618      	mov	r0, r3
 80046b6:	f7ff fb78 	bl	8003daa <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	3304      	adds	r3, #4
 80046be:	4618      	mov	r0, r3
 80046c0:	f7ff fb73 	bl	8003daa <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046c8:	2201      	movs	r2, #1
 80046ca:	409a      	lsls	r2, r3
 80046cc:	4b2b      	ldr	r3, [pc, #172]	; (800477c <xTaskResumeAll+0x120>)
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	4313      	orrs	r3, r2
 80046d2:	4a2a      	ldr	r2, [pc, #168]	; (800477c <xTaskResumeAll+0x120>)
 80046d4:	6013      	str	r3, [r2, #0]
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046da:	4613      	mov	r3, r2
 80046dc:	009b      	lsls	r3, r3, #2
 80046de:	4413      	add	r3, r2
 80046e0:	009b      	lsls	r3, r3, #2
 80046e2:	4a27      	ldr	r2, [pc, #156]	; (8004780 <xTaskResumeAll+0x124>)
 80046e4:	441a      	add	r2, r3
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	3304      	adds	r3, #4
 80046ea:	4619      	mov	r1, r3
 80046ec:	4610      	mov	r0, r2
 80046ee:	f7ff fb38 	bl	8003d62 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046f6:	4b23      	ldr	r3, [pc, #140]	; (8004784 <xTaskResumeAll+0x128>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046fc:	429a      	cmp	r2, r3
 80046fe:	d302      	bcc.n	8004706 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8004700:	4b21      	ldr	r3, [pc, #132]	; (8004788 <xTaskResumeAll+0x12c>)
 8004702:	2201      	movs	r2, #1
 8004704:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004706:	4b1c      	ldr	r3, [pc, #112]	; (8004778 <xTaskResumeAll+0x11c>)
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	2b00      	cmp	r3, #0
 800470c:	d1cc      	bne.n	80046a8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	2b00      	cmp	r3, #0
 8004712:	d001      	beq.n	8004718 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004714:	f000 fa12 	bl	8004b3c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004718:	4b1c      	ldr	r3, [pc, #112]	; (800478c <xTaskResumeAll+0x130>)
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	2b00      	cmp	r3, #0
 8004722:	d010      	beq.n	8004746 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004724:	f000 f836 	bl	8004794 <xTaskIncrementTick>
 8004728:	4603      	mov	r3, r0
 800472a:	2b00      	cmp	r3, #0
 800472c:	d002      	beq.n	8004734 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800472e:	4b16      	ldr	r3, [pc, #88]	; (8004788 <xTaskResumeAll+0x12c>)
 8004730:	2201      	movs	r2, #1
 8004732:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	3b01      	subs	r3, #1
 8004738:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	2b00      	cmp	r3, #0
 800473e:	d1f1      	bne.n	8004724 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8004740:	4b12      	ldr	r3, [pc, #72]	; (800478c <xTaskResumeAll+0x130>)
 8004742:	2200      	movs	r2, #0
 8004744:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004746:	4b10      	ldr	r3, [pc, #64]	; (8004788 <xTaskResumeAll+0x12c>)
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	2b00      	cmp	r3, #0
 800474c:	d009      	beq.n	8004762 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800474e:	2301      	movs	r3, #1
 8004750:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004752:	4b0f      	ldr	r3, [pc, #60]	; (8004790 <xTaskResumeAll+0x134>)
 8004754:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004758:	601a      	str	r2, [r3, #0]
 800475a:	f3bf 8f4f 	dsb	sy
 800475e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004762:	f7ff fca7 	bl	80040b4 <vPortExitCritical>

	return xAlreadyYielded;
 8004766:	68bb      	ldr	r3, [r7, #8]
}
 8004768:	4618      	mov	r0, r3
 800476a:	3710      	adds	r7, #16
 800476c:	46bd      	mov	sp, r7
 800476e:	bd80      	pop	{r7, pc}
 8004770:	24004098 	.word	0x24004098
 8004774:	24004070 	.word	0x24004070
 8004778:	24004030 	.word	0x24004030
 800477c:	24004078 	.word	0x24004078
 8004780:	24003f74 	.word	0x24003f74
 8004784:	24003f70 	.word	0x24003f70
 8004788:	24004084 	.word	0x24004084
 800478c:	24004080 	.word	0x24004080
 8004790:	e000ed04 	.word	0xe000ed04

08004794 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004794:	b580      	push	{r7, lr}
 8004796:	b086      	sub	sp, #24
 8004798:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800479a:	2300      	movs	r3, #0
 800479c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800479e:	4b4e      	ldr	r3, [pc, #312]	; (80048d8 <xTaskIncrementTick+0x144>)
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	f040 808e 	bne.w	80048c4 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80047a8:	4b4c      	ldr	r3, [pc, #304]	; (80048dc <xTaskIncrementTick+0x148>)
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	3301      	adds	r3, #1
 80047ae:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80047b0:	4a4a      	ldr	r2, [pc, #296]	; (80048dc <xTaskIncrementTick+0x148>)
 80047b2:	693b      	ldr	r3, [r7, #16]
 80047b4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80047b6:	693b      	ldr	r3, [r7, #16]
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d120      	bne.n	80047fe <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80047bc:	4b48      	ldr	r3, [pc, #288]	; (80048e0 <xTaskIncrementTick+0x14c>)
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d00a      	beq.n	80047dc <xTaskIncrementTick+0x48>
	__asm volatile
 80047c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047ca:	f383 8811 	msr	BASEPRI, r3
 80047ce:	f3bf 8f6f 	isb	sy
 80047d2:	f3bf 8f4f 	dsb	sy
 80047d6:	603b      	str	r3, [r7, #0]
}
 80047d8:	bf00      	nop
 80047da:	e7fe      	b.n	80047da <xTaskIncrementTick+0x46>
 80047dc:	4b40      	ldr	r3, [pc, #256]	; (80048e0 <xTaskIncrementTick+0x14c>)
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	60fb      	str	r3, [r7, #12]
 80047e2:	4b40      	ldr	r3, [pc, #256]	; (80048e4 <xTaskIncrementTick+0x150>)
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	4a3e      	ldr	r2, [pc, #248]	; (80048e0 <xTaskIncrementTick+0x14c>)
 80047e8:	6013      	str	r3, [r2, #0]
 80047ea:	4a3e      	ldr	r2, [pc, #248]	; (80048e4 <xTaskIncrementTick+0x150>)
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	6013      	str	r3, [r2, #0]
 80047f0:	4b3d      	ldr	r3, [pc, #244]	; (80048e8 <xTaskIncrementTick+0x154>)
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	3301      	adds	r3, #1
 80047f6:	4a3c      	ldr	r2, [pc, #240]	; (80048e8 <xTaskIncrementTick+0x154>)
 80047f8:	6013      	str	r3, [r2, #0]
 80047fa:	f000 f99f 	bl	8004b3c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80047fe:	4b3b      	ldr	r3, [pc, #236]	; (80048ec <xTaskIncrementTick+0x158>)
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	693a      	ldr	r2, [r7, #16]
 8004804:	429a      	cmp	r2, r3
 8004806:	d348      	bcc.n	800489a <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004808:	4b35      	ldr	r3, [pc, #212]	; (80048e0 <xTaskIncrementTick+0x14c>)
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	2b00      	cmp	r3, #0
 8004810:	d104      	bne.n	800481c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004812:	4b36      	ldr	r3, [pc, #216]	; (80048ec <xTaskIncrementTick+0x158>)
 8004814:	f04f 32ff 	mov.w	r2, #4294967295
 8004818:	601a      	str	r2, [r3, #0]
					break;
 800481a:	e03e      	b.n	800489a <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800481c:	4b30      	ldr	r3, [pc, #192]	; (80048e0 <xTaskIncrementTick+0x14c>)
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	68db      	ldr	r3, [r3, #12]
 8004822:	68db      	ldr	r3, [r3, #12]
 8004824:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004826:	68bb      	ldr	r3, [r7, #8]
 8004828:	685b      	ldr	r3, [r3, #4]
 800482a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800482c:	693a      	ldr	r2, [r7, #16]
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	429a      	cmp	r2, r3
 8004832:	d203      	bcs.n	800483c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004834:	4a2d      	ldr	r2, [pc, #180]	; (80048ec <xTaskIncrementTick+0x158>)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800483a:	e02e      	b.n	800489a <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800483c:	68bb      	ldr	r3, [r7, #8]
 800483e:	3304      	adds	r3, #4
 8004840:	4618      	mov	r0, r3
 8004842:	f7ff fab2 	bl	8003daa <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004846:	68bb      	ldr	r3, [r7, #8]
 8004848:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800484a:	2b00      	cmp	r3, #0
 800484c:	d004      	beq.n	8004858 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800484e:	68bb      	ldr	r3, [r7, #8]
 8004850:	3318      	adds	r3, #24
 8004852:	4618      	mov	r0, r3
 8004854:	f7ff faa9 	bl	8003daa <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004858:	68bb      	ldr	r3, [r7, #8]
 800485a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800485c:	2201      	movs	r2, #1
 800485e:	409a      	lsls	r2, r3
 8004860:	4b23      	ldr	r3, [pc, #140]	; (80048f0 <xTaskIncrementTick+0x15c>)
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	4313      	orrs	r3, r2
 8004866:	4a22      	ldr	r2, [pc, #136]	; (80048f0 <xTaskIncrementTick+0x15c>)
 8004868:	6013      	str	r3, [r2, #0]
 800486a:	68bb      	ldr	r3, [r7, #8]
 800486c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800486e:	4613      	mov	r3, r2
 8004870:	009b      	lsls	r3, r3, #2
 8004872:	4413      	add	r3, r2
 8004874:	009b      	lsls	r3, r3, #2
 8004876:	4a1f      	ldr	r2, [pc, #124]	; (80048f4 <xTaskIncrementTick+0x160>)
 8004878:	441a      	add	r2, r3
 800487a:	68bb      	ldr	r3, [r7, #8]
 800487c:	3304      	adds	r3, #4
 800487e:	4619      	mov	r1, r3
 8004880:	4610      	mov	r0, r2
 8004882:	f7ff fa6e 	bl	8003d62 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004886:	68bb      	ldr	r3, [r7, #8]
 8004888:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800488a:	4b1b      	ldr	r3, [pc, #108]	; (80048f8 <xTaskIncrementTick+0x164>)
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004890:	429a      	cmp	r2, r3
 8004892:	d3b9      	bcc.n	8004808 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8004894:	2301      	movs	r3, #1
 8004896:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004898:	e7b6      	b.n	8004808 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800489a:	4b17      	ldr	r3, [pc, #92]	; (80048f8 <xTaskIncrementTick+0x164>)
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048a0:	4914      	ldr	r1, [pc, #80]	; (80048f4 <xTaskIncrementTick+0x160>)
 80048a2:	4613      	mov	r3, r2
 80048a4:	009b      	lsls	r3, r3, #2
 80048a6:	4413      	add	r3, r2
 80048a8:	009b      	lsls	r3, r3, #2
 80048aa:	440b      	add	r3, r1
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	2b01      	cmp	r3, #1
 80048b0:	d901      	bls.n	80048b6 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 80048b2:	2301      	movs	r3, #1
 80048b4:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80048b6:	4b11      	ldr	r3, [pc, #68]	; (80048fc <xTaskIncrementTick+0x168>)
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d007      	beq.n	80048ce <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80048be:	2301      	movs	r3, #1
 80048c0:	617b      	str	r3, [r7, #20]
 80048c2:	e004      	b.n	80048ce <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80048c4:	4b0e      	ldr	r3, [pc, #56]	; (8004900 <xTaskIncrementTick+0x16c>)
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	3301      	adds	r3, #1
 80048ca:	4a0d      	ldr	r2, [pc, #52]	; (8004900 <xTaskIncrementTick+0x16c>)
 80048cc:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80048ce:	697b      	ldr	r3, [r7, #20]
}
 80048d0:	4618      	mov	r0, r3
 80048d2:	3718      	adds	r7, #24
 80048d4:	46bd      	mov	sp, r7
 80048d6:	bd80      	pop	{r7, pc}
 80048d8:	24004098 	.word	0x24004098
 80048dc:	24004074 	.word	0x24004074
 80048e0:	24004028 	.word	0x24004028
 80048e4:	2400402c 	.word	0x2400402c
 80048e8:	24004088 	.word	0x24004088
 80048ec:	24004090 	.word	0x24004090
 80048f0:	24004078 	.word	0x24004078
 80048f4:	24003f74 	.word	0x24003f74
 80048f8:	24003f70 	.word	0x24003f70
 80048fc:	24004084 	.word	0x24004084
 8004900:	24004080 	.word	0x24004080

08004904 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004904:	b480      	push	{r7}
 8004906:	b087      	sub	sp, #28
 8004908:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800490a:	4b29      	ldr	r3, [pc, #164]	; (80049b0 <vTaskSwitchContext+0xac>)
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	2b00      	cmp	r3, #0
 8004910:	d003      	beq.n	800491a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004912:	4b28      	ldr	r3, [pc, #160]	; (80049b4 <vTaskSwitchContext+0xb0>)
 8004914:	2201      	movs	r2, #1
 8004916:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004918:	e044      	b.n	80049a4 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 800491a:	4b26      	ldr	r3, [pc, #152]	; (80049b4 <vTaskSwitchContext+0xb0>)
 800491c:	2200      	movs	r2, #0
 800491e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004920:	4b25      	ldr	r3, [pc, #148]	; (80049b8 <vTaskSwitchContext+0xb4>)
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	fab3 f383 	clz	r3, r3
 800492c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800492e:	7afb      	ldrb	r3, [r7, #11]
 8004930:	f1c3 031f 	rsb	r3, r3, #31
 8004934:	617b      	str	r3, [r7, #20]
 8004936:	4921      	ldr	r1, [pc, #132]	; (80049bc <vTaskSwitchContext+0xb8>)
 8004938:	697a      	ldr	r2, [r7, #20]
 800493a:	4613      	mov	r3, r2
 800493c:	009b      	lsls	r3, r3, #2
 800493e:	4413      	add	r3, r2
 8004940:	009b      	lsls	r3, r3, #2
 8004942:	440b      	add	r3, r1
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	2b00      	cmp	r3, #0
 8004948:	d10a      	bne.n	8004960 <vTaskSwitchContext+0x5c>
	__asm volatile
 800494a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800494e:	f383 8811 	msr	BASEPRI, r3
 8004952:	f3bf 8f6f 	isb	sy
 8004956:	f3bf 8f4f 	dsb	sy
 800495a:	607b      	str	r3, [r7, #4]
}
 800495c:	bf00      	nop
 800495e:	e7fe      	b.n	800495e <vTaskSwitchContext+0x5a>
 8004960:	697a      	ldr	r2, [r7, #20]
 8004962:	4613      	mov	r3, r2
 8004964:	009b      	lsls	r3, r3, #2
 8004966:	4413      	add	r3, r2
 8004968:	009b      	lsls	r3, r3, #2
 800496a:	4a14      	ldr	r2, [pc, #80]	; (80049bc <vTaskSwitchContext+0xb8>)
 800496c:	4413      	add	r3, r2
 800496e:	613b      	str	r3, [r7, #16]
 8004970:	693b      	ldr	r3, [r7, #16]
 8004972:	685b      	ldr	r3, [r3, #4]
 8004974:	685a      	ldr	r2, [r3, #4]
 8004976:	693b      	ldr	r3, [r7, #16]
 8004978:	605a      	str	r2, [r3, #4]
 800497a:	693b      	ldr	r3, [r7, #16]
 800497c:	685a      	ldr	r2, [r3, #4]
 800497e:	693b      	ldr	r3, [r7, #16]
 8004980:	3308      	adds	r3, #8
 8004982:	429a      	cmp	r2, r3
 8004984:	d104      	bne.n	8004990 <vTaskSwitchContext+0x8c>
 8004986:	693b      	ldr	r3, [r7, #16]
 8004988:	685b      	ldr	r3, [r3, #4]
 800498a:	685a      	ldr	r2, [r3, #4]
 800498c:	693b      	ldr	r3, [r7, #16]
 800498e:	605a      	str	r2, [r3, #4]
 8004990:	693b      	ldr	r3, [r7, #16]
 8004992:	685b      	ldr	r3, [r3, #4]
 8004994:	68db      	ldr	r3, [r3, #12]
 8004996:	4a0a      	ldr	r2, [pc, #40]	; (80049c0 <vTaskSwitchContext+0xbc>)
 8004998:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800499a:	4b09      	ldr	r3, [pc, #36]	; (80049c0 <vTaskSwitchContext+0xbc>)
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	334c      	adds	r3, #76	; 0x4c
 80049a0:	4a08      	ldr	r2, [pc, #32]	; (80049c4 <vTaskSwitchContext+0xc0>)
 80049a2:	6013      	str	r3, [r2, #0]
}
 80049a4:	bf00      	nop
 80049a6:	371c      	adds	r7, #28
 80049a8:	46bd      	mov	sp, r7
 80049aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ae:	4770      	bx	lr
 80049b0:	24004098 	.word	0x24004098
 80049b4:	24004084 	.word	0x24004084
 80049b8:	24004078 	.word	0x24004078
 80049bc:	24003f74 	.word	0x24003f74
 80049c0:	24003f70 	.word	0x24003f70
 80049c4:	24000014 	.word	0x24000014

080049c8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80049c8:	b580      	push	{r7, lr}
 80049ca:	b082      	sub	sp, #8
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80049d0:	f000 f852 	bl	8004a78 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80049d4:	4b06      	ldr	r3, [pc, #24]	; (80049f0 <prvIdleTask+0x28>)
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	2b01      	cmp	r3, #1
 80049da:	d9f9      	bls.n	80049d0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80049dc:	4b05      	ldr	r3, [pc, #20]	; (80049f4 <prvIdleTask+0x2c>)
 80049de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80049e2:	601a      	str	r2, [r3, #0]
 80049e4:	f3bf 8f4f 	dsb	sy
 80049e8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80049ec:	e7f0      	b.n	80049d0 <prvIdleTask+0x8>
 80049ee:	bf00      	nop
 80049f0:	24003f74 	.word	0x24003f74
 80049f4:	e000ed04 	.word	0xe000ed04

080049f8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b082      	sub	sp, #8
 80049fc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80049fe:	2300      	movs	r3, #0
 8004a00:	607b      	str	r3, [r7, #4]
 8004a02:	e00c      	b.n	8004a1e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004a04:	687a      	ldr	r2, [r7, #4]
 8004a06:	4613      	mov	r3, r2
 8004a08:	009b      	lsls	r3, r3, #2
 8004a0a:	4413      	add	r3, r2
 8004a0c:	009b      	lsls	r3, r3, #2
 8004a0e:	4a12      	ldr	r2, [pc, #72]	; (8004a58 <prvInitialiseTaskLists+0x60>)
 8004a10:	4413      	add	r3, r2
 8004a12:	4618      	mov	r0, r3
 8004a14:	f7ff f978 	bl	8003d08 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	3301      	adds	r3, #1
 8004a1c:	607b      	str	r3, [r7, #4]
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2b06      	cmp	r3, #6
 8004a22:	d9ef      	bls.n	8004a04 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004a24:	480d      	ldr	r0, [pc, #52]	; (8004a5c <prvInitialiseTaskLists+0x64>)
 8004a26:	f7ff f96f 	bl	8003d08 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004a2a:	480d      	ldr	r0, [pc, #52]	; (8004a60 <prvInitialiseTaskLists+0x68>)
 8004a2c:	f7ff f96c 	bl	8003d08 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004a30:	480c      	ldr	r0, [pc, #48]	; (8004a64 <prvInitialiseTaskLists+0x6c>)
 8004a32:	f7ff f969 	bl	8003d08 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004a36:	480c      	ldr	r0, [pc, #48]	; (8004a68 <prvInitialiseTaskLists+0x70>)
 8004a38:	f7ff f966 	bl	8003d08 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004a3c:	480b      	ldr	r0, [pc, #44]	; (8004a6c <prvInitialiseTaskLists+0x74>)
 8004a3e:	f7ff f963 	bl	8003d08 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004a42:	4b0b      	ldr	r3, [pc, #44]	; (8004a70 <prvInitialiseTaskLists+0x78>)
 8004a44:	4a05      	ldr	r2, [pc, #20]	; (8004a5c <prvInitialiseTaskLists+0x64>)
 8004a46:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004a48:	4b0a      	ldr	r3, [pc, #40]	; (8004a74 <prvInitialiseTaskLists+0x7c>)
 8004a4a:	4a05      	ldr	r2, [pc, #20]	; (8004a60 <prvInitialiseTaskLists+0x68>)
 8004a4c:	601a      	str	r2, [r3, #0]
}
 8004a4e:	bf00      	nop
 8004a50:	3708      	adds	r7, #8
 8004a52:	46bd      	mov	sp, r7
 8004a54:	bd80      	pop	{r7, pc}
 8004a56:	bf00      	nop
 8004a58:	24003f74 	.word	0x24003f74
 8004a5c:	24004000 	.word	0x24004000
 8004a60:	24004014 	.word	0x24004014
 8004a64:	24004030 	.word	0x24004030
 8004a68:	24004044 	.word	0x24004044
 8004a6c:	2400405c 	.word	0x2400405c
 8004a70:	24004028 	.word	0x24004028
 8004a74:	2400402c 	.word	0x2400402c

08004a78 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	b082      	sub	sp, #8
 8004a7c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004a7e:	e019      	b.n	8004ab4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004a80:	f7ff fae8 	bl	8004054 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004a84:	4b10      	ldr	r3, [pc, #64]	; (8004ac8 <prvCheckTasksWaitingTermination+0x50>)
 8004a86:	68db      	ldr	r3, [r3, #12]
 8004a88:	68db      	ldr	r3, [r3, #12]
 8004a8a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	3304      	adds	r3, #4
 8004a90:	4618      	mov	r0, r3
 8004a92:	f7ff f98a 	bl	8003daa <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004a96:	4b0d      	ldr	r3, [pc, #52]	; (8004acc <prvCheckTasksWaitingTermination+0x54>)
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	3b01      	subs	r3, #1
 8004a9c:	4a0b      	ldr	r2, [pc, #44]	; (8004acc <prvCheckTasksWaitingTermination+0x54>)
 8004a9e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004aa0:	4b0b      	ldr	r3, [pc, #44]	; (8004ad0 <prvCheckTasksWaitingTermination+0x58>)
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	3b01      	subs	r3, #1
 8004aa6:	4a0a      	ldr	r2, [pc, #40]	; (8004ad0 <prvCheckTasksWaitingTermination+0x58>)
 8004aa8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004aaa:	f7ff fb03 	bl	80040b4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004aae:	6878      	ldr	r0, [r7, #4]
 8004ab0:	f000 f810 	bl	8004ad4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004ab4:	4b06      	ldr	r3, [pc, #24]	; (8004ad0 <prvCheckTasksWaitingTermination+0x58>)
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d1e1      	bne.n	8004a80 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004abc:	bf00      	nop
 8004abe:	bf00      	nop
 8004ac0:	3708      	adds	r7, #8
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	bd80      	pop	{r7, pc}
 8004ac6:	bf00      	nop
 8004ac8:	24004044 	.word	0x24004044
 8004acc:	24004070 	.word	0x24004070
 8004ad0:	24004058 	.word	0x24004058

08004ad4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	b084      	sub	sp, #16
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	334c      	adds	r3, #76	; 0x4c
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	f000 f8a5 	bl	8004c30 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d108      	bne.n	8004b02 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004af4:	4618      	mov	r0, r3
 8004af6:	f7fe ffe9 	bl	8003acc <vPortFree>
				vPortFree( pxTCB );
 8004afa:	6878      	ldr	r0, [r7, #4]
 8004afc:	f7fe ffe6 	bl	8003acc <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004b00:	e018      	b.n	8004b34 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8004b08:	2b01      	cmp	r3, #1
 8004b0a:	d103      	bne.n	8004b14 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8004b0c:	6878      	ldr	r0, [r7, #4]
 8004b0e:	f7fe ffdd 	bl	8003acc <vPortFree>
	}
 8004b12:	e00f      	b.n	8004b34 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8004b1a:	2b02      	cmp	r3, #2
 8004b1c:	d00a      	beq.n	8004b34 <prvDeleteTCB+0x60>
	__asm volatile
 8004b1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b22:	f383 8811 	msr	BASEPRI, r3
 8004b26:	f3bf 8f6f 	isb	sy
 8004b2a:	f3bf 8f4f 	dsb	sy
 8004b2e:	60fb      	str	r3, [r7, #12]
}
 8004b30:	bf00      	nop
 8004b32:	e7fe      	b.n	8004b32 <prvDeleteTCB+0x5e>
	}
 8004b34:	bf00      	nop
 8004b36:	3710      	adds	r7, #16
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	bd80      	pop	{r7, pc}

08004b3c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004b3c:	b480      	push	{r7}
 8004b3e:	b083      	sub	sp, #12
 8004b40:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004b42:	4b0c      	ldr	r3, [pc, #48]	; (8004b74 <prvResetNextTaskUnblockTime+0x38>)
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d104      	bne.n	8004b56 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004b4c:	4b0a      	ldr	r3, [pc, #40]	; (8004b78 <prvResetNextTaskUnblockTime+0x3c>)
 8004b4e:	f04f 32ff 	mov.w	r2, #4294967295
 8004b52:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004b54:	e008      	b.n	8004b68 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004b56:	4b07      	ldr	r3, [pc, #28]	; (8004b74 <prvResetNextTaskUnblockTime+0x38>)
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	68db      	ldr	r3, [r3, #12]
 8004b5c:	68db      	ldr	r3, [r3, #12]
 8004b5e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	685b      	ldr	r3, [r3, #4]
 8004b64:	4a04      	ldr	r2, [pc, #16]	; (8004b78 <prvResetNextTaskUnblockTime+0x3c>)
 8004b66:	6013      	str	r3, [r2, #0]
}
 8004b68:	bf00      	nop
 8004b6a:	370c      	adds	r7, #12
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b72:	4770      	bx	lr
 8004b74:	24004028 	.word	0x24004028
 8004b78:	24004090 	.word	0x24004090

08004b7c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004b7c:	b480      	push	{r7}
 8004b7e:	b083      	sub	sp, #12
 8004b80:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004b82:	4b0b      	ldr	r3, [pc, #44]	; (8004bb0 <xTaskGetSchedulerState+0x34>)
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d102      	bne.n	8004b90 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004b8a:	2301      	movs	r3, #1
 8004b8c:	607b      	str	r3, [r7, #4]
 8004b8e:	e008      	b.n	8004ba2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004b90:	4b08      	ldr	r3, [pc, #32]	; (8004bb4 <xTaskGetSchedulerState+0x38>)
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d102      	bne.n	8004b9e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004b98:	2302      	movs	r3, #2
 8004b9a:	607b      	str	r3, [r7, #4]
 8004b9c:	e001      	b.n	8004ba2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004ba2:	687b      	ldr	r3, [r7, #4]
	}
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	370c      	adds	r7, #12
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bae:	4770      	bx	lr
 8004bb0:	2400407c 	.word	0x2400407c
 8004bb4:	24004098 	.word	0x24004098

08004bb8 <__libc_init_array>:
 8004bb8:	b570      	push	{r4, r5, r6, lr}
 8004bba:	4d0d      	ldr	r5, [pc, #52]	; (8004bf0 <__libc_init_array+0x38>)
 8004bbc:	4c0d      	ldr	r4, [pc, #52]	; (8004bf4 <__libc_init_array+0x3c>)
 8004bbe:	1b64      	subs	r4, r4, r5
 8004bc0:	10a4      	asrs	r4, r4, #2
 8004bc2:	2600      	movs	r6, #0
 8004bc4:	42a6      	cmp	r6, r4
 8004bc6:	d109      	bne.n	8004bdc <__libc_init_array+0x24>
 8004bc8:	4d0b      	ldr	r5, [pc, #44]	; (8004bf8 <__libc_init_array+0x40>)
 8004bca:	4c0c      	ldr	r4, [pc, #48]	; (8004bfc <__libc_init_array+0x44>)
 8004bcc:	f000 f8e8 	bl	8004da0 <_init>
 8004bd0:	1b64      	subs	r4, r4, r5
 8004bd2:	10a4      	asrs	r4, r4, #2
 8004bd4:	2600      	movs	r6, #0
 8004bd6:	42a6      	cmp	r6, r4
 8004bd8:	d105      	bne.n	8004be6 <__libc_init_array+0x2e>
 8004bda:	bd70      	pop	{r4, r5, r6, pc}
 8004bdc:	f855 3b04 	ldr.w	r3, [r5], #4
 8004be0:	4798      	blx	r3
 8004be2:	3601      	adds	r6, #1
 8004be4:	e7ee      	b.n	8004bc4 <__libc_init_array+0xc>
 8004be6:	f855 3b04 	ldr.w	r3, [r5], #4
 8004bea:	4798      	blx	r3
 8004bec:	3601      	adds	r6, #1
 8004bee:	e7f2      	b.n	8004bd6 <__libc_init_array+0x1e>
 8004bf0:	08004e50 	.word	0x08004e50
 8004bf4:	08004e50 	.word	0x08004e50
 8004bf8:	08004e50 	.word	0x08004e50
 8004bfc:	08004e54 	.word	0x08004e54

08004c00 <__retarget_lock_acquire_recursive>:
 8004c00:	4770      	bx	lr

08004c02 <__retarget_lock_release_recursive>:
 8004c02:	4770      	bx	lr

08004c04 <memset>:
 8004c04:	4402      	add	r2, r0
 8004c06:	4603      	mov	r3, r0
 8004c08:	4293      	cmp	r3, r2
 8004c0a:	d100      	bne.n	8004c0e <memset+0xa>
 8004c0c:	4770      	bx	lr
 8004c0e:	f803 1b01 	strb.w	r1, [r3], #1
 8004c12:	e7f9      	b.n	8004c08 <memset+0x4>

08004c14 <cleanup_glue>:
 8004c14:	b538      	push	{r3, r4, r5, lr}
 8004c16:	460c      	mov	r4, r1
 8004c18:	6809      	ldr	r1, [r1, #0]
 8004c1a:	4605      	mov	r5, r0
 8004c1c:	b109      	cbz	r1, 8004c22 <cleanup_glue+0xe>
 8004c1e:	f7ff fff9 	bl	8004c14 <cleanup_glue>
 8004c22:	4621      	mov	r1, r4
 8004c24:	4628      	mov	r0, r5
 8004c26:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004c2a:	f000 b869 	b.w	8004d00 <_free_r>
	...

08004c30 <_reclaim_reent>:
 8004c30:	4b2c      	ldr	r3, [pc, #176]	; (8004ce4 <_reclaim_reent+0xb4>)
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	4283      	cmp	r3, r0
 8004c36:	b570      	push	{r4, r5, r6, lr}
 8004c38:	4604      	mov	r4, r0
 8004c3a:	d051      	beq.n	8004ce0 <_reclaim_reent+0xb0>
 8004c3c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8004c3e:	b143      	cbz	r3, 8004c52 <_reclaim_reent+0x22>
 8004c40:	68db      	ldr	r3, [r3, #12]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d14a      	bne.n	8004cdc <_reclaim_reent+0xac>
 8004c46:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004c48:	6819      	ldr	r1, [r3, #0]
 8004c4a:	b111      	cbz	r1, 8004c52 <_reclaim_reent+0x22>
 8004c4c:	4620      	mov	r0, r4
 8004c4e:	f000 f857 	bl	8004d00 <_free_r>
 8004c52:	6961      	ldr	r1, [r4, #20]
 8004c54:	b111      	cbz	r1, 8004c5c <_reclaim_reent+0x2c>
 8004c56:	4620      	mov	r0, r4
 8004c58:	f000 f852 	bl	8004d00 <_free_r>
 8004c5c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8004c5e:	b111      	cbz	r1, 8004c66 <_reclaim_reent+0x36>
 8004c60:	4620      	mov	r0, r4
 8004c62:	f000 f84d 	bl	8004d00 <_free_r>
 8004c66:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8004c68:	b111      	cbz	r1, 8004c70 <_reclaim_reent+0x40>
 8004c6a:	4620      	mov	r0, r4
 8004c6c:	f000 f848 	bl	8004d00 <_free_r>
 8004c70:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8004c72:	b111      	cbz	r1, 8004c7a <_reclaim_reent+0x4a>
 8004c74:	4620      	mov	r0, r4
 8004c76:	f000 f843 	bl	8004d00 <_free_r>
 8004c7a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8004c7c:	b111      	cbz	r1, 8004c84 <_reclaim_reent+0x54>
 8004c7e:	4620      	mov	r0, r4
 8004c80:	f000 f83e 	bl	8004d00 <_free_r>
 8004c84:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8004c86:	b111      	cbz	r1, 8004c8e <_reclaim_reent+0x5e>
 8004c88:	4620      	mov	r0, r4
 8004c8a:	f000 f839 	bl	8004d00 <_free_r>
 8004c8e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8004c90:	b111      	cbz	r1, 8004c98 <_reclaim_reent+0x68>
 8004c92:	4620      	mov	r0, r4
 8004c94:	f000 f834 	bl	8004d00 <_free_r>
 8004c98:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004c9a:	b111      	cbz	r1, 8004ca2 <_reclaim_reent+0x72>
 8004c9c:	4620      	mov	r0, r4
 8004c9e:	f000 f82f 	bl	8004d00 <_free_r>
 8004ca2:	69a3      	ldr	r3, [r4, #24]
 8004ca4:	b1e3      	cbz	r3, 8004ce0 <_reclaim_reent+0xb0>
 8004ca6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004ca8:	4620      	mov	r0, r4
 8004caa:	4798      	blx	r3
 8004cac:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8004cae:	b1b9      	cbz	r1, 8004ce0 <_reclaim_reent+0xb0>
 8004cb0:	4620      	mov	r0, r4
 8004cb2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004cb6:	f7ff bfad 	b.w	8004c14 <cleanup_glue>
 8004cba:	5949      	ldr	r1, [r1, r5]
 8004cbc:	b941      	cbnz	r1, 8004cd0 <_reclaim_reent+0xa0>
 8004cbe:	3504      	adds	r5, #4
 8004cc0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004cc2:	2d80      	cmp	r5, #128	; 0x80
 8004cc4:	68d9      	ldr	r1, [r3, #12]
 8004cc6:	d1f8      	bne.n	8004cba <_reclaim_reent+0x8a>
 8004cc8:	4620      	mov	r0, r4
 8004cca:	f000 f819 	bl	8004d00 <_free_r>
 8004cce:	e7ba      	b.n	8004c46 <_reclaim_reent+0x16>
 8004cd0:	680e      	ldr	r6, [r1, #0]
 8004cd2:	4620      	mov	r0, r4
 8004cd4:	f000 f814 	bl	8004d00 <_free_r>
 8004cd8:	4631      	mov	r1, r6
 8004cda:	e7ef      	b.n	8004cbc <_reclaim_reent+0x8c>
 8004cdc:	2500      	movs	r5, #0
 8004cde:	e7ef      	b.n	8004cc0 <_reclaim_reent+0x90>
 8004ce0:	bd70      	pop	{r4, r5, r6, pc}
 8004ce2:	bf00      	nop
 8004ce4:	24000014 	.word	0x24000014

08004ce8 <__malloc_lock>:
 8004ce8:	4801      	ldr	r0, [pc, #4]	; (8004cf0 <__malloc_lock+0x8>)
 8004cea:	f7ff bf89 	b.w	8004c00 <__retarget_lock_acquire_recursive>
 8004cee:	bf00      	nop
 8004cf0:	240040f4 	.word	0x240040f4

08004cf4 <__malloc_unlock>:
 8004cf4:	4801      	ldr	r0, [pc, #4]	; (8004cfc <__malloc_unlock+0x8>)
 8004cf6:	f7ff bf84 	b.w	8004c02 <__retarget_lock_release_recursive>
 8004cfa:	bf00      	nop
 8004cfc:	240040f4 	.word	0x240040f4

08004d00 <_free_r>:
 8004d00:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004d02:	2900      	cmp	r1, #0
 8004d04:	d048      	beq.n	8004d98 <_free_r+0x98>
 8004d06:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004d0a:	9001      	str	r0, [sp, #4]
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	f1a1 0404 	sub.w	r4, r1, #4
 8004d12:	bfb8      	it	lt
 8004d14:	18e4      	addlt	r4, r4, r3
 8004d16:	f7ff ffe7 	bl	8004ce8 <__malloc_lock>
 8004d1a:	4a20      	ldr	r2, [pc, #128]	; (8004d9c <_free_r+0x9c>)
 8004d1c:	9801      	ldr	r0, [sp, #4]
 8004d1e:	6813      	ldr	r3, [r2, #0]
 8004d20:	4615      	mov	r5, r2
 8004d22:	b933      	cbnz	r3, 8004d32 <_free_r+0x32>
 8004d24:	6063      	str	r3, [r4, #4]
 8004d26:	6014      	str	r4, [r2, #0]
 8004d28:	b003      	add	sp, #12
 8004d2a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004d2e:	f7ff bfe1 	b.w	8004cf4 <__malloc_unlock>
 8004d32:	42a3      	cmp	r3, r4
 8004d34:	d90b      	bls.n	8004d4e <_free_r+0x4e>
 8004d36:	6821      	ldr	r1, [r4, #0]
 8004d38:	1862      	adds	r2, r4, r1
 8004d3a:	4293      	cmp	r3, r2
 8004d3c:	bf04      	itt	eq
 8004d3e:	681a      	ldreq	r2, [r3, #0]
 8004d40:	685b      	ldreq	r3, [r3, #4]
 8004d42:	6063      	str	r3, [r4, #4]
 8004d44:	bf04      	itt	eq
 8004d46:	1852      	addeq	r2, r2, r1
 8004d48:	6022      	streq	r2, [r4, #0]
 8004d4a:	602c      	str	r4, [r5, #0]
 8004d4c:	e7ec      	b.n	8004d28 <_free_r+0x28>
 8004d4e:	461a      	mov	r2, r3
 8004d50:	685b      	ldr	r3, [r3, #4]
 8004d52:	b10b      	cbz	r3, 8004d58 <_free_r+0x58>
 8004d54:	42a3      	cmp	r3, r4
 8004d56:	d9fa      	bls.n	8004d4e <_free_r+0x4e>
 8004d58:	6811      	ldr	r1, [r2, #0]
 8004d5a:	1855      	adds	r5, r2, r1
 8004d5c:	42a5      	cmp	r5, r4
 8004d5e:	d10b      	bne.n	8004d78 <_free_r+0x78>
 8004d60:	6824      	ldr	r4, [r4, #0]
 8004d62:	4421      	add	r1, r4
 8004d64:	1854      	adds	r4, r2, r1
 8004d66:	42a3      	cmp	r3, r4
 8004d68:	6011      	str	r1, [r2, #0]
 8004d6a:	d1dd      	bne.n	8004d28 <_free_r+0x28>
 8004d6c:	681c      	ldr	r4, [r3, #0]
 8004d6e:	685b      	ldr	r3, [r3, #4]
 8004d70:	6053      	str	r3, [r2, #4]
 8004d72:	4421      	add	r1, r4
 8004d74:	6011      	str	r1, [r2, #0]
 8004d76:	e7d7      	b.n	8004d28 <_free_r+0x28>
 8004d78:	d902      	bls.n	8004d80 <_free_r+0x80>
 8004d7a:	230c      	movs	r3, #12
 8004d7c:	6003      	str	r3, [r0, #0]
 8004d7e:	e7d3      	b.n	8004d28 <_free_r+0x28>
 8004d80:	6825      	ldr	r5, [r4, #0]
 8004d82:	1961      	adds	r1, r4, r5
 8004d84:	428b      	cmp	r3, r1
 8004d86:	bf04      	itt	eq
 8004d88:	6819      	ldreq	r1, [r3, #0]
 8004d8a:	685b      	ldreq	r3, [r3, #4]
 8004d8c:	6063      	str	r3, [r4, #4]
 8004d8e:	bf04      	itt	eq
 8004d90:	1949      	addeq	r1, r1, r5
 8004d92:	6021      	streq	r1, [r4, #0]
 8004d94:	6054      	str	r4, [r2, #4]
 8004d96:	e7c7      	b.n	8004d28 <_free_r+0x28>
 8004d98:	b003      	add	sp, #12
 8004d9a:	bd30      	pop	{r4, r5, pc}
 8004d9c:	2400409c 	.word	0x2400409c

08004da0 <_init>:
 8004da0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004da2:	bf00      	nop
 8004da4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004da6:	bc08      	pop	{r3}
 8004da8:	469e      	mov	lr, r3
 8004daa:	4770      	bx	lr

08004dac <_fini>:
 8004dac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004dae:	bf00      	nop
 8004db0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004db2:	bc08      	pop	{r3}
 8004db4:	469e      	mov	lr, r3
 8004db6:	4770      	bx	lr
