
nucleo_h745zi_q_temp__system_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006be4  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000005c  08006e84  08006e84  00016e84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006ee0  08006ee0  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08006ee0  08006ee0  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006ee0  08006ee0  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006ee0  08006ee0  00016ee0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006ee4  08006ee4  00016ee4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  24000000  08006ee8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000ec  24000074  08006f5c  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24000160  08006f5c  00020160  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001da00  00000000  00000000  000200a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000030f5  00000000  00000000  0003daa2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f60  00000000  00000000  00040b98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e48  00000000  00000000  00041af8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003a485  00000000  00000000  00042940  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000130bb  00000000  00000000  0007cdc5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00184d4c  00000000  00000000  0008fe80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00214bcc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004438  00000000  00000000  00214c20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000074 	.word	0x24000074
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08006e6c 	.word	0x08006e6c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000078 	.word	0x24000078
 80002dc:	08006e6c 	.word	0x08006e6c

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000380:	b480      	push	{r7}
 8000382:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000384:	4b3f      	ldr	r3, [pc, #252]	; (8000484 <SystemInit+0x104>)
 8000386:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800038a:	4a3e      	ldr	r2, [pc, #248]	; (8000484 <SystemInit+0x104>)
 800038c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000390:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8000394:	4b3b      	ldr	r3, [pc, #236]	; (8000484 <SystemInit+0x104>)
 8000396:	691b      	ldr	r3, [r3, #16]
 8000398:	4a3a      	ldr	r2, [pc, #232]	; (8000484 <SystemInit+0x104>)
 800039a:	f043 0310 	orr.w	r3, r3, #16
 800039e:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80003a0:	4b39      	ldr	r3, [pc, #228]	; (8000488 <SystemInit+0x108>)
 80003a2:	681b      	ldr	r3, [r3, #0]
 80003a4:	f003 030f 	and.w	r3, r3, #15
 80003a8:	2b06      	cmp	r3, #6
 80003aa:	d807      	bhi.n	80003bc <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80003ac:	4b36      	ldr	r3, [pc, #216]	; (8000488 <SystemInit+0x108>)
 80003ae:	681b      	ldr	r3, [r3, #0]
 80003b0:	f023 030f 	bic.w	r3, r3, #15
 80003b4:	4a34      	ldr	r2, [pc, #208]	; (8000488 <SystemInit+0x108>)
 80003b6:	f043 0307 	orr.w	r3, r3, #7
 80003ba:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80003bc:	4b33      	ldr	r3, [pc, #204]	; (800048c <SystemInit+0x10c>)
 80003be:	681b      	ldr	r3, [r3, #0]
 80003c0:	4a32      	ldr	r2, [pc, #200]	; (800048c <SystemInit+0x10c>)
 80003c2:	f043 0301 	orr.w	r3, r3, #1
 80003c6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80003c8:	4b30      	ldr	r3, [pc, #192]	; (800048c <SystemInit+0x10c>)
 80003ca:	2200      	movs	r2, #0
 80003cc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80003ce:	4b2f      	ldr	r3, [pc, #188]	; (800048c <SystemInit+0x10c>)
 80003d0:	681a      	ldr	r2, [r3, #0]
 80003d2:	492e      	ldr	r1, [pc, #184]	; (800048c <SystemInit+0x10c>)
 80003d4:	4b2e      	ldr	r3, [pc, #184]	; (8000490 <SystemInit+0x110>)
 80003d6:	4013      	ands	r3, r2
 80003d8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80003da:	4b2b      	ldr	r3, [pc, #172]	; (8000488 <SystemInit+0x108>)
 80003dc:	681b      	ldr	r3, [r3, #0]
 80003de:	f003 0308 	and.w	r3, r3, #8
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d007      	beq.n	80003f6 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80003e6:	4b28      	ldr	r3, [pc, #160]	; (8000488 <SystemInit+0x108>)
 80003e8:	681b      	ldr	r3, [r3, #0]
 80003ea:	f023 030f 	bic.w	r3, r3, #15
 80003ee:	4a26      	ldr	r2, [pc, #152]	; (8000488 <SystemInit+0x108>)
 80003f0:	f043 0307 	orr.w	r3, r3, #7
 80003f4:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80003f6:	4b25      	ldr	r3, [pc, #148]	; (800048c <SystemInit+0x10c>)
 80003f8:	2200      	movs	r2, #0
 80003fa:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80003fc:	4b23      	ldr	r3, [pc, #140]	; (800048c <SystemInit+0x10c>)
 80003fe:	2200      	movs	r2, #0
 8000400:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000402:	4b22      	ldr	r3, [pc, #136]	; (800048c <SystemInit+0x10c>)
 8000404:	2200      	movs	r2, #0
 8000406:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000408:	4b20      	ldr	r3, [pc, #128]	; (800048c <SystemInit+0x10c>)
 800040a:	4a22      	ldr	r2, [pc, #136]	; (8000494 <SystemInit+0x114>)
 800040c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800040e:	4b1f      	ldr	r3, [pc, #124]	; (800048c <SystemInit+0x10c>)
 8000410:	4a21      	ldr	r2, [pc, #132]	; (8000498 <SystemInit+0x118>)
 8000412:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000414:	4b1d      	ldr	r3, [pc, #116]	; (800048c <SystemInit+0x10c>)
 8000416:	4a21      	ldr	r2, [pc, #132]	; (800049c <SystemInit+0x11c>)
 8000418:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800041a:	4b1c      	ldr	r3, [pc, #112]	; (800048c <SystemInit+0x10c>)
 800041c:	2200      	movs	r2, #0
 800041e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000420:	4b1a      	ldr	r3, [pc, #104]	; (800048c <SystemInit+0x10c>)
 8000422:	4a1e      	ldr	r2, [pc, #120]	; (800049c <SystemInit+0x11c>)
 8000424:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000426:	4b19      	ldr	r3, [pc, #100]	; (800048c <SystemInit+0x10c>)
 8000428:	2200      	movs	r2, #0
 800042a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800042c:	4b17      	ldr	r3, [pc, #92]	; (800048c <SystemInit+0x10c>)
 800042e:	4a1b      	ldr	r2, [pc, #108]	; (800049c <SystemInit+0x11c>)
 8000430:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000432:	4b16      	ldr	r3, [pc, #88]	; (800048c <SystemInit+0x10c>)
 8000434:	2200      	movs	r2, #0
 8000436:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000438:	4b14      	ldr	r3, [pc, #80]	; (800048c <SystemInit+0x10c>)
 800043a:	681b      	ldr	r3, [r3, #0]
 800043c:	4a13      	ldr	r2, [pc, #76]	; (800048c <SystemInit+0x10c>)
 800043e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000442:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000444:	4b11      	ldr	r3, [pc, #68]	; (800048c <SystemInit+0x10c>)
 8000446:	2200      	movs	r2, #0
 8000448:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800044a:	4b15      	ldr	r3, [pc, #84]	; (80004a0 <SystemInit+0x120>)
 800044c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800044e:	4a14      	ldr	r2, [pc, #80]	; (80004a0 <SystemInit+0x120>)
 8000450:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000454:	6253      	str	r3, [r2, #36]	; 0x24


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000456:	4b13      	ldr	r3, [pc, #76]	; (80004a4 <SystemInit+0x124>)
 8000458:	681a      	ldr	r2, [r3, #0]
 800045a:	4b13      	ldr	r3, [pc, #76]	; (80004a8 <SystemInit+0x128>)
 800045c:	4013      	ands	r3, r2
 800045e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000462:	d202      	bcs.n	800046a <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000464:	4b11      	ldr	r3, [pc, #68]	; (80004ac <SystemInit+0x12c>)
 8000466:	2201      	movs	r2, #1
 8000468:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800046a:	4b11      	ldr	r3, [pc, #68]	; (80004b0 <SystemInit+0x130>)
 800046c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000470:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 8000472:	4b04      	ldr	r3, [pc, #16]	; (8000484 <SystemInit+0x104>)
 8000474:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000478:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 800047a:	bf00      	nop
 800047c:	46bd      	mov	sp, r7
 800047e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000482:	4770      	bx	lr
 8000484:	e000ed00 	.word	0xe000ed00
 8000488:	52002000 	.word	0x52002000
 800048c:	58024400 	.word	0x58024400
 8000490:	eaf6ed7f 	.word	0xeaf6ed7f
 8000494:	02020200 	.word	0x02020200
 8000498:	01ff0000 	.word	0x01ff0000
 800049c:	01010280 	.word	0x01010280
 80004a0:	580000c0 	.word	0x580000c0
 80004a4:	5c001000 	.word	0x5c001000
 80004a8:	ffff0000 	.word	0xffff0000
 80004ac:	51008108 	.word	0x51008108
 80004b0:	52004000 	.word	0x52004000

080004b4 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 80004b4:	b580      	push	{r7, lr}
 80004b6:	b086      	sub	sp, #24
 80004b8:	af02      	add	r7, sp, #8
 80004ba:	4603      	mov	r3, r0
 80004bc:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 80004be:	79fb      	ldrb	r3, [r7, #7]
 80004c0:	f023 030f 	bic.w	r3, r3, #15
 80004c4:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 80004c6:	79fb      	ldrb	r3, [r7, #7]
 80004c8:	011b      	lsls	r3, r3, #4
 80004ca:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80004cc:	7bfb      	ldrb	r3, [r7, #15]
 80004ce:	f043 030c 	orr.w	r3, r3, #12
 80004d2:	b2db      	uxtb	r3, r3
 80004d4:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 80004d6:	7bfb      	ldrb	r3, [r7, #15]
 80004d8:	f043 0308 	orr.w	r3, r3, #8
 80004dc:	b2db      	uxtb	r3, r3
 80004de:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 80004e0:	7bbb      	ldrb	r3, [r7, #14]
 80004e2:	f043 030c 	orr.w	r3, r3, #12
 80004e6:	b2db      	uxtb	r3, r3
 80004e8:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 80004ea:	7bbb      	ldrb	r3, [r7, #14]
 80004ec:	f043 0308 	orr.w	r3, r3, #8
 80004f0:	b2db      	uxtb	r3, r3
 80004f2:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80004f4:	f107 0208 	add.w	r2, r7, #8
 80004f8:	2364      	movs	r3, #100	; 0x64
 80004fa:	9300      	str	r3, [sp, #0]
 80004fc:	2304      	movs	r3, #4
 80004fe:	214e      	movs	r1, #78	; 0x4e
 8000500:	4803      	ldr	r0, [pc, #12]	; (8000510 <lcd_send_cmd+0x5c>)
 8000502:	f002 fbef 	bl	8002ce4 <HAL_I2C_Master_Transmit>
}
 8000506:	bf00      	nop
 8000508:	3710      	adds	r7, #16
 800050a:	46bd      	mov	sp, r7
 800050c:	bd80      	pop	{r7, pc}
 800050e:	bf00      	nop
 8000510:	2400009c 	.word	0x2400009c

08000514 <lcd_send_data>:

void lcd_send_data (char data)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b086      	sub	sp, #24
 8000518:	af02      	add	r7, sp, #8
 800051a:	4603      	mov	r3, r0
 800051c:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 800051e:	79fb      	ldrb	r3, [r7, #7]
 8000520:	f023 030f 	bic.w	r3, r3, #15
 8000524:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 8000526:	79fb      	ldrb	r3, [r7, #7]
 8000528:	011b      	lsls	r3, r3, #4
 800052a:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 800052c:	7bfb      	ldrb	r3, [r7, #15]
 800052e:	f043 030d 	orr.w	r3, r3, #13
 8000532:	b2db      	uxtb	r3, r3
 8000534:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8000536:	7bfb      	ldrb	r3, [r7, #15]
 8000538:	f043 0309 	orr.w	r3, r3, #9
 800053c:	b2db      	uxtb	r3, r3
 800053e:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8000540:	7bbb      	ldrb	r3, [r7, #14]
 8000542:	f043 030d 	orr.w	r3, r3, #13
 8000546:	b2db      	uxtb	r3, r3
 8000548:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 800054a:	7bbb      	ldrb	r3, [r7, #14]
 800054c:	f043 0309 	orr.w	r3, r3, #9
 8000550:	b2db      	uxtb	r3, r3
 8000552:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000554:	f107 0208 	add.w	r2, r7, #8
 8000558:	2364      	movs	r3, #100	; 0x64
 800055a:	9300      	str	r3, [sp, #0]
 800055c:	2304      	movs	r3, #4
 800055e:	214e      	movs	r1, #78	; 0x4e
 8000560:	4803      	ldr	r0, [pc, #12]	; (8000570 <lcd_send_data+0x5c>)
 8000562:	f002 fbbf 	bl	8002ce4 <HAL_I2C_Master_Transmit>
}
 8000566:	bf00      	nop
 8000568:	3710      	adds	r7, #16
 800056a:	46bd      	mov	sp, r7
 800056c:	bd80      	pop	{r7, pc}
 800056e:	bf00      	nop
 8000570:	2400009c 	.word	0x2400009c

08000574 <lcd_clear>:

void lcd_clear (void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b082      	sub	sp, #8
 8000578:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x80);
 800057a:	2080      	movs	r0, #128	; 0x80
 800057c:	f7ff ff9a 	bl	80004b4 <lcd_send_cmd>
	for (int i=0; i<70; i++)
 8000580:	2300      	movs	r3, #0
 8000582:	607b      	str	r3, [r7, #4]
 8000584:	e005      	b.n	8000592 <lcd_clear+0x1e>
	{
		lcd_send_data (' ');
 8000586:	2020      	movs	r0, #32
 8000588:	f7ff ffc4 	bl	8000514 <lcd_send_data>
	for (int i=0; i<70; i++)
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	3301      	adds	r3, #1
 8000590:	607b      	str	r3, [r7, #4]
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	2b45      	cmp	r3, #69	; 0x45
 8000596:	ddf6      	ble.n	8000586 <lcd_clear+0x12>
	}
}
 8000598:	bf00      	nop
 800059a:	bf00      	nop
 800059c:	3708      	adds	r7, #8
 800059e:	46bd      	mov	sp, r7
 80005a0:	bd80      	pop	{r7, pc}

080005a2 <lcd_put_cur>:

void lcd_put_cur(int row, int col)
{
 80005a2:	b580      	push	{r7, lr}
 80005a4:	b082      	sub	sp, #8
 80005a6:	af00      	add	r7, sp, #0
 80005a8:	6078      	str	r0, [r7, #4]
 80005aa:	6039      	str	r1, [r7, #0]
    switch (row)
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d003      	beq.n	80005ba <lcd_put_cur+0x18>
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	2b01      	cmp	r3, #1
 80005b6:	d005      	beq.n	80005c4 <lcd_put_cur+0x22>
 80005b8:	e009      	b.n	80005ce <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 80005ba:	683b      	ldr	r3, [r7, #0]
 80005bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005c0:	603b      	str	r3, [r7, #0]
            break;
 80005c2:	e004      	b.n	80005ce <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 80005c4:	683b      	ldr	r3, [r7, #0]
 80005c6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80005ca:	603b      	str	r3, [r7, #0]
            break;
 80005cc:	bf00      	nop
    }

    lcd_send_cmd (col);
 80005ce:	683b      	ldr	r3, [r7, #0]
 80005d0:	b2db      	uxtb	r3, r3
 80005d2:	4618      	mov	r0, r3
 80005d4:	f7ff ff6e 	bl	80004b4 <lcd_send_cmd>
}
 80005d8:	bf00      	nop
 80005da:	3708      	adds	r7, #8
 80005dc:	46bd      	mov	sp, r7
 80005de:	bd80      	pop	{r7, pc}

080005e0 <lcd_init>:


void lcd_init (void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 80005e4:	2032      	movs	r0, #50	; 0x32
 80005e6:	f000 fcc5 	bl	8000f74 <HAL_Delay>
	lcd_send_cmd (0x30);
 80005ea:	2030      	movs	r0, #48	; 0x30
 80005ec:	f7ff ff62 	bl	80004b4 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 80005f0:	2005      	movs	r0, #5
 80005f2:	f000 fcbf 	bl	8000f74 <HAL_Delay>
	lcd_send_cmd (0x30);
 80005f6:	2030      	movs	r0, #48	; 0x30
 80005f8:	f7ff ff5c 	bl	80004b4 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 80005fc:	2001      	movs	r0, #1
 80005fe:	f000 fcb9 	bl	8000f74 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000602:	2030      	movs	r0, #48	; 0x30
 8000604:	f7ff ff56 	bl	80004b4 <lcd_send_cmd>
	HAL_Delay(10);
 8000608:	200a      	movs	r0, #10
 800060a:	f000 fcb3 	bl	8000f74 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 800060e:	2020      	movs	r0, #32
 8000610:	f7ff ff50 	bl	80004b4 <lcd_send_cmd>
	HAL_Delay(10);
 8000614:	200a      	movs	r0, #10
 8000616:	f000 fcad 	bl	8000f74 <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 800061a:	2028      	movs	r0, #40	; 0x28
 800061c:	f7ff ff4a 	bl	80004b4 <lcd_send_cmd>
	HAL_Delay(1);
 8000620:	2001      	movs	r0, #1
 8000622:	f000 fca7 	bl	8000f74 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8000626:	2008      	movs	r0, #8
 8000628:	f7ff ff44 	bl	80004b4 <lcd_send_cmd>
	HAL_Delay(1);
 800062c:	2001      	movs	r0, #1
 800062e:	f000 fca1 	bl	8000f74 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 8000632:	2001      	movs	r0, #1
 8000634:	f7ff ff3e 	bl	80004b4 <lcd_send_cmd>
	HAL_Delay(1);
 8000638:	2001      	movs	r0, #1
 800063a:	f000 fc9b 	bl	8000f74 <HAL_Delay>
	HAL_Delay(1);
 800063e:	2001      	movs	r0, #1
 8000640:	f000 fc98 	bl	8000f74 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8000644:	2006      	movs	r0, #6
 8000646:	f7ff ff35 	bl	80004b4 <lcd_send_cmd>
	HAL_Delay(1);
 800064a:	2001      	movs	r0, #1
 800064c:	f000 fc92 	bl	8000f74 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8000650:	200c      	movs	r0, #12
 8000652:	f7ff ff2f 	bl	80004b4 <lcd_send_cmd>
}
 8000656:	bf00      	nop
 8000658:	bd80      	pop	{r7, pc}

0800065a <lcd_send_string>:

void lcd_send_string (char *str)
{
 800065a:	b580      	push	{r7, lr}
 800065c:	b082      	sub	sp, #8
 800065e:	af00      	add	r7, sp, #0
 8000660:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8000662:	e006      	b.n	8000672 <lcd_send_string+0x18>
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	1c5a      	adds	r2, r3, #1
 8000668:	607a      	str	r2, [r7, #4]
 800066a:	781b      	ldrb	r3, [r3, #0]
 800066c:	4618      	mov	r0, r3
 800066e:	f7ff ff51 	bl	8000514 <lcd_send_data>
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	781b      	ldrb	r3, [r3, #0]
 8000676:	2b00      	cmp	r3, #0
 8000678:	d1f4      	bne.n	8000664 <lcd_send_string+0xa>
}
 800067a:	bf00      	nop
 800067c:	bf00      	nop
 800067e:	3708      	adds	r7, #8
 8000680:	46bd      	mov	sp, r7
 8000682:	bd80      	pop	{r7, pc}

08000684 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b08a      	sub	sp, #40	; 0x28
 8000688:	af00      	add	r7, sp, #0
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800068a:	4b76      	ldr	r3, [pc, #472]	; (8000864 <main+0x1e0>)
 800068c:	695b      	ldr	r3, [r3, #20]
 800068e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000692:	2b00      	cmp	r3, #0
 8000694:	d11b      	bne.n	80006ce <main+0x4a>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000696:	f3bf 8f4f 	dsb	sy
}
 800069a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800069c:	f3bf 8f6f 	isb	sy
}
 80006a0:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80006a2:	4b70      	ldr	r3, [pc, #448]	; (8000864 <main+0x1e0>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80006aa:	f3bf 8f4f 	dsb	sy
}
 80006ae:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80006b0:	f3bf 8f6f 	isb	sy
}
 80006b4:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80006b6:	4b6b      	ldr	r3, [pc, #428]	; (8000864 <main+0x1e0>)
 80006b8:	695b      	ldr	r3, [r3, #20]
 80006ba:	4a6a      	ldr	r2, [pc, #424]	; (8000864 <main+0x1e0>)
 80006bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006c0:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80006c2:	f3bf 8f4f 	dsb	sy
}
 80006c6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80006c8:	f3bf 8f6f 	isb	sy
}
 80006cc:	e000      	b.n	80006d0 <main+0x4c>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80006ce:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80006d0:	4b64      	ldr	r3, [pc, #400]	; (8000864 <main+0x1e0>)
 80006d2:	695b      	ldr	r3, [r3, #20]
 80006d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d138      	bne.n	800074e <main+0xca>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80006dc:	4b61      	ldr	r3, [pc, #388]	; (8000864 <main+0x1e0>)
 80006de:	2200      	movs	r2, #0
 80006e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80006e4:	f3bf 8f4f 	dsb	sy
}
 80006e8:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 80006ea:	4b5e      	ldr	r3, [pc, #376]	; (8000864 <main+0x1e0>)
 80006ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80006f0:	61fb      	str	r3, [r7, #28]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80006f2:	69fb      	ldr	r3, [r7, #28]
 80006f4:	0b5b      	lsrs	r3, r3, #13
 80006f6:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80006fa:	61bb      	str	r3, [r7, #24]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80006fc:	69fb      	ldr	r3, [r7, #28]
 80006fe:	08db      	lsrs	r3, r3, #3
 8000700:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000704:	617b      	str	r3, [r7, #20]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000706:	69bb      	ldr	r3, [r7, #24]
 8000708:	015a      	lsls	r2, r3, #5
 800070a:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 800070e:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000710:	697a      	ldr	r2, [r7, #20]
 8000712:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000714:	4953      	ldr	r1, [pc, #332]	; (8000864 <main+0x1e0>)
 8000716:	4313      	orrs	r3, r2
 8000718:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 800071c:	697b      	ldr	r3, [r7, #20]
 800071e:	1e5a      	subs	r2, r3, #1
 8000720:	617a      	str	r2, [r7, #20]
 8000722:	2b00      	cmp	r3, #0
 8000724:	d1ef      	bne.n	8000706 <main+0x82>
    } while(sets-- != 0U);
 8000726:	69bb      	ldr	r3, [r7, #24]
 8000728:	1e5a      	subs	r2, r3, #1
 800072a:	61ba      	str	r2, [r7, #24]
 800072c:	2b00      	cmp	r3, #0
 800072e:	d1e5      	bne.n	80006fc <main+0x78>
  __ASM volatile ("dsb 0xF":::"memory");
 8000730:	f3bf 8f4f 	dsb	sy
}
 8000734:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000736:	4b4b      	ldr	r3, [pc, #300]	; (8000864 <main+0x1e0>)
 8000738:	695b      	ldr	r3, [r3, #20]
 800073a:	4a4a      	ldr	r2, [pc, #296]	; (8000864 <main+0x1e0>)
 800073c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000740:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000742:	f3bf 8f4f 	dsb	sy
}
 8000746:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000748:	f3bf 8f6f 	isb	sy
}
 800074c:	e000      	b.n	8000750 <main+0xcc>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 800074e:	bf00      	nop
  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8000750:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000754:	627b      	str	r3, [r7, #36]	; 0x24
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000756:	bf00      	nop
 8000758:	4b43      	ldr	r3, [pc, #268]	; (8000868 <main+0x1e4>)
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000760:	2b00      	cmp	r3, #0
 8000762:	d004      	beq.n	800076e <main+0xea>
 8000764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000766:	1e5a      	subs	r2, r3, #1
 8000768:	627a      	str	r2, [r7, #36]	; 0x24
 800076a:	2b00      	cmp	r3, #0
 800076c:	dcf4      	bgt.n	8000758 <main+0xd4>
  if ( timeout < 0 )
 800076e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000770:	2b00      	cmp	r3, #0
 8000772:	da01      	bge.n	8000778 <main+0xf4>
  {
  Error_Handler();
 8000774:	f000 f9fe 	bl	8000b74 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000778:	f000 fb6a 	bl	8000e50 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800077c:	f000 f87e 	bl	800087c <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000780:	f000 f8fa 	bl	8000978 <PeriphCommonClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8000784:	4b38      	ldr	r3, [pc, #224]	; (8000868 <main+0x1e4>)
 8000786:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800078a:	4a37      	ldr	r2, [pc, #220]	; (8000868 <main+0x1e4>)
 800078c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000790:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000794:	4b34      	ldr	r3, [pc, #208]	; (8000868 <main+0x1e4>)
 8000796:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800079a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800079e:	607b      	str	r3, [r7, #4]
 80007a0:	687b      	ldr	r3, [r7, #4]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 80007a2:	2000      	movs	r0, #0
 80007a4:	f002 f9e0 	bl	8002b68 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 80007a8:	2100      	movs	r1, #0
 80007aa:	2000      	movs	r0, #0
 80007ac:	f002 f9f6 	bl	8002b9c <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 80007b0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80007b4:	627b      	str	r3, [r7, #36]	; 0x24
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 80007b6:	bf00      	nop
 80007b8:	4b2b      	ldr	r3, [pc, #172]	; (8000868 <main+0x1e4>)
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d104      	bne.n	80007ce <main+0x14a>
 80007c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007c6:	1e5a      	subs	r2, r3, #1
 80007c8:	627a      	str	r2, [r7, #36]	; 0x24
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	dcf4      	bgt.n	80007b8 <main+0x134>
if ( timeout < 0 )
 80007ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	da01      	bge.n	80007d8 <main+0x154>
{
Error_Handler();
 80007d4:	f000 f9ce 	bl	8000b74 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007d8:	f000 f9a2 	bl	8000b20 <MX_GPIO_Init>
  MX_ADC1_Init();
 80007dc:	f000 f8e8 	bl	80009b0 <MX_ADC1_Init>
  MX_I2C1_Init();
 80007e0:	f000 f95e 	bl	8000aa0 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  /* LCD */
  lcd_init();
 80007e4:	f7ff fefc 	bl	80005e0 <lcd_init>
  lcd_clear();
 80007e8:	f7ff fec4 	bl	8000574 <lcd_clear>
  lcd_put_cur(0,0);
 80007ec:	2100      	movs	r1, #0
 80007ee:	2000      	movs	r0, #0
 80007f0:	f7ff fed7 	bl	80005a2 <lcd_put_cur>
  lcd_send_string("GRAN");
 80007f4:	481d      	ldr	r0, [pc, #116]	; (800086c <main+0x1e8>)
 80007f6:	f7ff ff30 	bl	800065a <lcd_send_string>
  HAL_Delay(1000);
 80007fa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80007fe:	f000 fbb9 	bl	8000f74 <HAL_Delay>
  lcd_put_cur(1,0);
 8000802:	2100      	movs	r1, #0
 8000804:	2001      	movs	r0, #1
 8000806:	f7ff fecc 	bl	80005a2 <lcd_put_cur>
  lcd_send_string("SOLDADOR");
 800080a:	4819      	ldr	r0, [pc, #100]	; (8000870 <main+0x1ec>)
 800080c:	f7ff ff25 	bl	800065a <lcd_send_string>
  HAL_Delay(1000);
 8000810:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000814:	f000 fbae 	bl	8000f74 <HAL_Delay>
  lcd_clear();
 8000818:	f7ff feac 	bl	8000574 <lcd_clear>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // Get ADC value
	  HAL_ADC_Start(&hadc1);
 800081c:	4815      	ldr	r0, [pc, #84]	; (8000874 <main+0x1f0>)
 800081e:	f000 ff5b 	bl	80016d8 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000822:	f04f 31ff 	mov.w	r1, #4294967295
 8000826:	4813      	ldr	r0, [pc, #76]	; (8000874 <main+0x1f0>)
 8000828:	f001 f820 	bl	800186c <HAL_ADC_PollForConversion>
	  raw = HAL_ADC_GetValue(&hadc1);
 800082c:	4811      	ldr	r0, [pc, #68]	; (8000874 <main+0x1f0>)
 800082e:	f001 f911 	bl	8001a54 <HAL_ADC_GetValue>
 8000832:	4603      	mov	r3, r0
 8000834:	847b      	strh	r3, [r7, #34]	; 0x22

	  // Convert to string and print
	  snprintf( msg, 10, "%d", raw );
 8000836:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000838:	f107 0008 	add.w	r0, r7, #8
 800083c:	4a0e      	ldr	r2, [pc, #56]	; (8000878 <main+0x1f4>)
 800083e:	210a      	movs	r1, #10
 8000840:	f005 fed2 	bl	80065e8 <sniprintf>
	  lcd_clear();
 8000844:	f7ff fe96 	bl	8000574 <lcd_clear>
	  lcd_put_cur(1,0);
 8000848:	2100      	movs	r1, #0
 800084a:	2001      	movs	r0, #1
 800084c:	f7ff fea9 	bl	80005a2 <lcd_put_cur>
	  lcd_send_string(msg);
 8000850:	f107 0308 	add.w	r3, r7, #8
 8000854:	4618      	mov	r0, r3
 8000856:	f7ff ff00 	bl	800065a <lcd_send_string>

	  // Pretend we have to do something else for a while
	  HAL_Delay(1000);
 800085a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800085e:	f000 fb89 	bl	8000f74 <HAL_Delay>
	  HAL_ADC_Start(&hadc1);
 8000862:	e7db      	b.n	800081c <main+0x198>
 8000864:	e000ed00 	.word	0xe000ed00
 8000868:	58024400 	.word	0x58024400
 800086c:	08006e84 	.word	0x08006e84
 8000870:	08006e8c 	.word	0x08006e8c
 8000874:	240000e8 	.word	0x240000e8
 8000878:	08006e98 	.word	0x08006e98

0800087c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b09c      	sub	sp, #112	; 0x70
 8000880:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000882:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000886:	224c      	movs	r2, #76	; 0x4c
 8000888:	2100      	movs	r1, #0
 800088a:	4618      	mov	r0, r3
 800088c:	f005 fea4 	bl	80065d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000890:	1d3b      	adds	r3, r7, #4
 8000892:	2220      	movs	r2, #32
 8000894:	2100      	movs	r1, #0
 8000896:	4618      	mov	r0, r3
 8000898:	f005 fe9e 	bl	80065d8 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 800089c:	2004      	movs	r0, #4
 800089e:	f002 fd21 	bl	80032e4 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80008a2:	2300      	movs	r3, #0
 80008a4:	603b      	str	r3, [r7, #0]
 80008a6:	4b32      	ldr	r3, [pc, #200]	; (8000970 <SystemClock_Config+0xf4>)
 80008a8:	699b      	ldr	r3, [r3, #24]
 80008aa:	4a31      	ldr	r2, [pc, #196]	; (8000970 <SystemClock_Config+0xf4>)
 80008ac:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80008b0:	6193      	str	r3, [r2, #24]
 80008b2:	4b2f      	ldr	r3, [pc, #188]	; (8000970 <SystemClock_Config+0xf4>)
 80008b4:	699b      	ldr	r3, [r3, #24]
 80008b6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80008ba:	603b      	str	r3, [r7, #0]
 80008bc:	4b2d      	ldr	r3, [pc, #180]	; (8000974 <SystemClock_Config+0xf8>)
 80008be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008c0:	4a2c      	ldr	r2, [pc, #176]	; (8000974 <SystemClock_Config+0xf8>)
 80008c2:	f043 0301 	orr.w	r3, r3, #1
 80008c6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80008c8:	4b2a      	ldr	r3, [pc, #168]	; (8000974 <SystemClock_Config+0xf8>)
 80008ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008cc:	f003 0301 	and.w	r3, r3, #1
 80008d0:	603b      	str	r3, [r7, #0]
 80008d2:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80008d4:	bf00      	nop
 80008d6:	4b26      	ldr	r3, [pc, #152]	; (8000970 <SystemClock_Config+0xf4>)
 80008d8:	699b      	ldr	r3, [r3, #24]
 80008da:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80008de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80008e2:	d1f8      	bne.n	80008d6 <SystemClock_Config+0x5a>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80008e4:	2303      	movs	r3, #3
 80008e6:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80008e8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80008ec:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80008ee:	2301      	movs	r3, #1
 80008f0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008f2:	2340      	movs	r3, #64	; 0x40
 80008f4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008f6:	2302      	movs	r3, #2
 80008f8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008fa:	2302      	movs	r3, #2
 80008fc:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 5;
 80008fe:	2305      	movs	r3, #5
 8000900:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000902:	23c0      	movs	r3, #192	; 0xc0
 8000904:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000906:	2302      	movs	r3, #2
 8000908:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800090a:	2302      	movs	r3, #2
 800090c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800090e:	2302      	movs	r3, #2
 8000910:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8000912:	2308      	movs	r3, #8
 8000914:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000916:	2300      	movs	r3, #0
 8000918:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800091a:	2300      	movs	r3, #0
 800091c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800091e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000922:	4618      	mov	r0, r3
 8000924:	f002 fd38 	bl	8003398 <HAL_RCC_OscConfig>
 8000928:	4603      	mov	r3, r0
 800092a:	2b00      	cmp	r3, #0
 800092c:	d001      	beq.n	8000932 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 800092e:	f000 f921 	bl	8000b74 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000932:	233f      	movs	r3, #63	; 0x3f
 8000934:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000936:	2303      	movs	r3, #3
 8000938:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800093a:	2300      	movs	r3, #0
 800093c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800093e:	2308      	movs	r3, #8
 8000940:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000942:	2340      	movs	r3, #64	; 0x40
 8000944:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000946:	2340      	movs	r3, #64	; 0x40
 8000948:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800094a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800094e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000950:	2340      	movs	r3, #64	; 0x40
 8000952:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000954:	1d3b      	adds	r3, r7, #4
 8000956:	2104      	movs	r1, #4
 8000958:	4618      	mov	r0, r3
 800095a:	f003 f92d 	bl	8003bb8 <HAL_RCC_ClockConfig>
 800095e:	4603      	mov	r3, r0
 8000960:	2b00      	cmp	r3, #0
 8000962:	d001      	beq.n	8000968 <SystemClock_Config+0xec>
  {
    Error_Handler();
 8000964:	f000 f906 	bl	8000b74 <Error_Handler>
  }
}
 8000968:	bf00      	nop
 800096a:	3770      	adds	r7, #112	; 0x70
 800096c:	46bd      	mov	sp, r7
 800096e:	bd80      	pop	{r7, pc}
 8000970:	58024800 	.word	0x58024800
 8000974:	58000400 	.word	0x58000400

08000978 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b0b0      	sub	sp, #192	; 0xc0
 800097c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800097e:	1d3b      	adds	r3, r7, #4
 8000980:	22bc      	movs	r2, #188	; 0xbc
 8000982:	2100      	movs	r1, #0
 8000984:	4618      	mov	r0, r3
 8000986:	f005 fe27 	bl	80065d8 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CKPER;
 800098a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800098e:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.CkperClockSelection = RCC_CLKPSOURCE_HSI;
 8000990:	2300      	movs	r3, #0
 8000992:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000994:	1d3b      	adds	r3, r7, #4
 8000996:	4618      	mov	r0, r3
 8000998:	f003 fc6e 	bl	8004278 <HAL_RCCEx_PeriphCLKConfig>
 800099c:	4603      	mov	r3, r0
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d001      	beq.n	80009a6 <PeriphCommonClock_Config+0x2e>
  {
    Error_Handler();
 80009a2:	f000 f8e7 	bl	8000b74 <Error_Handler>
  }
}
 80009a6:	bf00      	nop
 80009a8:	37c0      	adds	r7, #192	; 0xc0
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bd80      	pop	{r7, pc}
	...

080009b0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b08a      	sub	sp, #40	; 0x28
 80009b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80009b6:	f107 031c 	add.w	r3, r7, #28
 80009ba:	2200      	movs	r2, #0
 80009bc:	601a      	str	r2, [r3, #0]
 80009be:	605a      	str	r2, [r3, #4]
 80009c0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80009c2:	463b      	mov	r3, r7
 80009c4:	2200      	movs	r2, #0
 80009c6:	601a      	str	r2, [r3, #0]
 80009c8:	605a      	str	r2, [r3, #4]
 80009ca:	609a      	str	r2, [r3, #8]
 80009cc:	60da      	str	r2, [r3, #12]
 80009ce:	611a      	str	r2, [r3, #16]
 80009d0:	615a      	str	r2, [r3, #20]
 80009d2:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80009d4:	4b2f      	ldr	r3, [pc, #188]	; (8000a94 <MX_ADC1_Init+0xe4>)
 80009d6:	4a30      	ldr	r2, [pc, #192]	; (8000a98 <MX_ADC1_Init+0xe8>)
 80009d8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80009da:	4b2e      	ldr	r3, [pc, #184]	; (8000a94 <MX_ADC1_Init+0xe4>)
 80009dc:	2200      	movs	r2, #0
 80009de:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 80009e0:	4b2c      	ldr	r3, [pc, #176]	; (8000a94 <MX_ADC1_Init+0xe4>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80009e6:	4b2b      	ldr	r3, [pc, #172]	; (8000a94 <MX_ADC1_Init+0xe4>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80009ec:	4b29      	ldr	r3, [pc, #164]	; (8000a94 <MX_ADC1_Init+0xe4>)
 80009ee:	2204      	movs	r2, #4
 80009f0:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80009f2:	4b28      	ldr	r3, [pc, #160]	; (8000a94 <MX_ADC1_Init+0xe4>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80009f8:	4b26      	ldr	r3, [pc, #152]	; (8000a94 <MX_ADC1_Init+0xe4>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 80009fe:	4b25      	ldr	r3, [pc, #148]	; (8000a94 <MX_ADC1_Init+0xe4>)
 8000a00:	2201      	movs	r2, #1
 8000a02:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000a04:	4b23      	ldr	r3, [pc, #140]	; (8000a94 <MX_ADC1_Init+0xe4>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a0a:	4b22      	ldr	r3, [pc, #136]	; (8000a94 <MX_ADC1_Init+0xe4>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000a10:	4b20      	ldr	r3, [pc, #128]	; (8000a94 <MX_ADC1_Init+0xe4>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000a16:	4b1f      	ldr	r3, [pc, #124]	; (8000a94 <MX_ADC1_Init+0xe4>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000a1c:	4b1d      	ldr	r3, [pc, #116]	; (8000a94 <MX_ADC1_Init+0xe4>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000a22:	4b1c      	ldr	r3, [pc, #112]	; (8000a94 <MX_ADC1_Init+0xe4>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000a28:	4b1a      	ldr	r3, [pc, #104]	; (8000a94 <MX_ADC1_Init+0xe4>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000a30:	4818      	ldr	r0, [pc, #96]	; (8000a94 <MX_ADC1_Init+0xe4>)
 8000a32:	f000 fcb1 	bl	8001398 <HAL_ADC_Init>
 8000a36:	4603      	mov	r3, r0
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d001      	beq.n	8000a40 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000a3c:	f000 f89a 	bl	8000b74 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000a40:	2300      	movs	r3, #0
 8000a42:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000a44:	f107 031c 	add.w	r3, r7, #28
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4812      	ldr	r0, [pc, #72]	; (8000a94 <MX_ADC1_Init+0xe4>)
 8000a4c:	f001 fd1a 	bl	8002484 <HAL_ADCEx_MultiModeConfigChannel>
 8000a50:	4603      	mov	r3, r0
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d001      	beq.n	8000a5a <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8000a56:	f000 f88d 	bl	8000b74 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000a5a:	4b10      	ldr	r3, [pc, #64]	; (8000a9c <MX_ADC1_Init+0xec>)
 8000a5c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000a5e:	2306      	movs	r3, #6
 8000a60:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000a62:	2300      	movs	r3, #0
 8000a64:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000a66:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000a6a:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000a6c:	2304      	movs	r3, #4
 8000a6e:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000a70:	2300      	movs	r3, #0
 8000a72:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000a74:	2300      	movs	r3, #0
 8000a76:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a78:	463b      	mov	r3, r7
 8000a7a:	4619      	mov	r1, r3
 8000a7c:	4805      	ldr	r0, [pc, #20]	; (8000a94 <MX_ADC1_Init+0xe4>)
 8000a7e:	f000 fff7 	bl	8001a70 <HAL_ADC_ConfigChannel>
 8000a82:	4603      	mov	r3, r0
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d001      	beq.n	8000a8c <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 8000a88:	f000 f874 	bl	8000b74 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000a8c:	bf00      	nop
 8000a8e:	3728      	adds	r7, #40	; 0x28
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bd80      	pop	{r7, pc}
 8000a94:	240000e8 	.word	0x240000e8
 8000a98:	40022000 	.word	0x40022000
 8000a9c:	14f00020 	.word	0x14f00020

08000aa0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000aa4:	4b1b      	ldr	r3, [pc, #108]	; (8000b14 <MX_I2C1_Init+0x74>)
 8000aa6:	4a1c      	ldr	r2, [pc, #112]	; (8000b18 <MX_I2C1_Init+0x78>)
 8000aa8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x307075B1;
 8000aaa:	4b1a      	ldr	r3, [pc, #104]	; (8000b14 <MX_I2C1_Init+0x74>)
 8000aac:	4a1b      	ldr	r2, [pc, #108]	; (8000b1c <MX_I2C1_Init+0x7c>)
 8000aae:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000ab0:	4b18      	ldr	r3, [pc, #96]	; (8000b14 <MX_I2C1_Init+0x74>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ab6:	4b17      	ldr	r3, [pc, #92]	; (8000b14 <MX_I2C1_Init+0x74>)
 8000ab8:	2201      	movs	r2, #1
 8000aba:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000abc:	4b15      	ldr	r3, [pc, #84]	; (8000b14 <MX_I2C1_Init+0x74>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000ac2:	4b14      	ldr	r3, [pc, #80]	; (8000b14 <MX_I2C1_Init+0x74>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000ac8:	4b12      	ldr	r3, [pc, #72]	; (8000b14 <MX_I2C1_Init+0x74>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ace:	4b11      	ldr	r3, [pc, #68]	; (8000b14 <MX_I2C1_Init+0x74>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ad4:	4b0f      	ldr	r3, [pc, #60]	; (8000b14 <MX_I2C1_Init+0x74>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000ada:	480e      	ldr	r0, [pc, #56]	; (8000b14 <MX_I2C1_Init+0x74>)
 8000adc:	f002 f872 	bl	8002bc4 <HAL_I2C_Init>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d001      	beq.n	8000aea <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000ae6:	f000 f845 	bl	8000b74 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000aea:	2100      	movs	r1, #0
 8000aec:	4809      	ldr	r0, [pc, #36]	; (8000b14 <MX_I2C1_Init+0x74>)
 8000aee:	f002 fb61 	bl	80031b4 <HAL_I2CEx_ConfigAnalogFilter>
 8000af2:	4603      	mov	r3, r0
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d001      	beq.n	8000afc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000af8:	f000 f83c 	bl	8000b74 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000afc:	2100      	movs	r1, #0
 8000afe:	4805      	ldr	r0, [pc, #20]	; (8000b14 <MX_I2C1_Init+0x74>)
 8000b00:	f002 fba3 	bl	800324a <HAL_I2CEx_ConfigDigitalFilter>
 8000b04:	4603      	mov	r3, r0
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d001      	beq.n	8000b0e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000b0a:	f000 f833 	bl	8000b74 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000b0e:	bf00      	nop
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	bf00      	nop
 8000b14:	2400009c 	.word	0x2400009c
 8000b18:	40005400 	.word	0x40005400
 8000b1c:	307075b1 	.word	0x307075b1

08000b20 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b20:	b480      	push	{r7}
 8000b22:	b083      	sub	sp, #12
 8000b24:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b26:	4b12      	ldr	r3, [pc, #72]	; (8000b70 <MX_GPIO_Init+0x50>)
 8000b28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b2c:	4a10      	ldr	r2, [pc, #64]	; (8000b70 <MX_GPIO_Init+0x50>)
 8000b2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b32:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b36:	4b0e      	ldr	r3, [pc, #56]	; (8000b70 <MX_GPIO_Init+0x50>)
 8000b38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b40:	607b      	str	r3, [r7, #4]
 8000b42:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b44:	4b0a      	ldr	r3, [pc, #40]	; (8000b70 <MX_GPIO_Init+0x50>)
 8000b46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b4a:	4a09      	ldr	r2, [pc, #36]	; (8000b70 <MX_GPIO_Init+0x50>)
 8000b4c:	f043 0302 	orr.w	r3, r3, #2
 8000b50:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b54:	4b06      	ldr	r3, [pc, #24]	; (8000b70 <MX_GPIO_Init+0x50>)
 8000b56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b5a:	f003 0302 	and.w	r3, r3, #2
 8000b5e:	603b      	str	r3, [r7, #0]
 8000b60:	683b      	ldr	r3, [r7, #0]

}
 8000b62:	bf00      	nop
 8000b64:	370c      	adds	r7, #12
 8000b66:	46bd      	mov	sp, r7
 8000b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6c:	4770      	bx	lr
 8000b6e:	bf00      	nop
 8000b70:	58024400 	.word	0x58024400

08000b74 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000b78:	b672      	cpsid	i
}
 8000b7a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b7c:	e7fe      	b.n	8000b7c <Error_Handler+0x8>
	...

08000b80 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	b083      	sub	sp, #12
 8000b84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b86:	4b0a      	ldr	r3, [pc, #40]	; (8000bb0 <HAL_MspInit+0x30>)
 8000b88:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000b8c:	4a08      	ldr	r2, [pc, #32]	; (8000bb0 <HAL_MspInit+0x30>)
 8000b8e:	f043 0302 	orr.w	r3, r3, #2
 8000b92:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000b96:	4b06      	ldr	r3, [pc, #24]	; (8000bb0 <HAL_MspInit+0x30>)
 8000b98:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000b9c:	f003 0302 	and.w	r3, r3, #2
 8000ba0:	607b      	str	r3, [r7, #4]
 8000ba2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ba4:	bf00      	nop
 8000ba6:	370c      	adds	r7, #12
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bae:	4770      	bx	lr
 8000bb0:	58024400 	.word	0x58024400

08000bb4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b0b8      	sub	sp, #224	; 0xe0
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bbc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	601a      	str	r2, [r3, #0]
 8000bc4:	605a      	str	r2, [r3, #4]
 8000bc6:	609a      	str	r2, [r3, #8]
 8000bc8:	60da      	str	r2, [r3, #12]
 8000bca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000bcc:	f107 0310 	add.w	r3, r7, #16
 8000bd0:	22bc      	movs	r2, #188	; 0xbc
 8000bd2:	2100      	movs	r1, #0
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	f005 fcff 	bl	80065d8 <memset>
  if(hadc->Instance==ADC1)
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	4a22      	ldr	r2, [pc, #136]	; (8000c68 <HAL_ADC_MspInit+0xb4>)
 8000be0:	4293      	cmp	r3, r2
 8000be2:	d13d      	bne.n	8000c60 <HAL_ADC_MspInit+0xac>
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000be4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000be8:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_CLKP;
 8000bea:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000bee:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000bf2:	f107 0310 	add.w	r3, r7, #16
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	f003 fb3e 	bl	8004278 <HAL_RCCEx_PeriphCLKConfig>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d001      	beq.n	8000c06 <HAL_ADC_MspInit+0x52>
    {
      Error_Handler();
 8000c02:	f7ff ffb7 	bl	8000b74 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000c06:	4b19      	ldr	r3, [pc, #100]	; (8000c6c <HAL_ADC_MspInit+0xb8>)
 8000c08:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000c0c:	4a17      	ldr	r2, [pc, #92]	; (8000c6c <HAL_ADC_MspInit+0xb8>)
 8000c0e:	f043 0320 	orr.w	r3, r3, #32
 8000c12:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000c16:	4b15      	ldr	r3, [pc, #84]	; (8000c6c <HAL_ADC_MspInit+0xb8>)
 8000c18:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000c1c:	f003 0320 	and.w	r3, r3, #32
 8000c20:	60fb      	str	r3, [r7, #12]
 8000c22:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c24:	4b11      	ldr	r3, [pc, #68]	; (8000c6c <HAL_ADC_MspInit+0xb8>)
 8000c26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c2a:	4a10      	ldr	r2, [pc, #64]	; (8000c6c <HAL_ADC_MspInit+0xb8>)
 8000c2c:	f043 0302 	orr.w	r3, r3, #2
 8000c30:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c34:	4b0d      	ldr	r3, [pc, #52]	; (8000c6c <HAL_ADC_MspInit+0xb8>)
 8000c36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c3a:	f003 0302 	and.w	r3, r3, #2
 8000c3e:	60bb      	str	r3, [r7, #8]
 8000c40:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_INP5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000c42:	2302      	movs	r3, #2
 8000c44:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c48:	2303      	movs	r3, #3
 8000c4a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c54:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000c58:	4619      	mov	r1, r3
 8000c5a:	4805      	ldr	r0, [pc, #20]	; (8000c70 <HAL_ADC_MspInit+0xbc>)
 8000c5c:	f001 fdd4 	bl	8002808 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000c60:	bf00      	nop
 8000c62:	37e0      	adds	r7, #224	; 0xe0
 8000c64:	46bd      	mov	sp, r7
 8000c66:	bd80      	pop	{r7, pc}
 8000c68:	40022000 	.word	0x40022000
 8000c6c:	58024400 	.word	0x58024400
 8000c70:	58020400 	.word	0x58020400

08000c74 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b0b8      	sub	sp, #224	; 0xe0
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c7c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000c80:	2200      	movs	r2, #0
 8000c82:	601a      	str	r2, [r3, #0]
 8000c84:	605a      	str	r2, [r3, #4]
 8000c86:	609a      	str	r2, [r3, #8]
 8000c88:	60da      	str	r2, [r3, #12]
 8000c8a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c8c:	f107 0310 	add.w	r3, r7, #16
 8000c90:	22bc      	movs	r2, #188	; 0xbc
 8000c92:	2100      	movs	r1, #0
 8000c94:	4618      	mov	r0, r3
 8000c96:	f005 fc9f 	bl	80065d8 <memset>
  if(hi2c->Instance==I2C1)
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	4a24      	ldr	r2, [pc, #144]	; (8000d30 <HAL_I2C_MspInit+0xbc>)
 8000ca0:	4293      	cmp	r3, r2
 8000ca2:	d141      	bne.n	8000d28 <HAL_I2C_MspInit+0xb4>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000ca4:	2308      	movs	r3, #8
 8000ca6:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000cae:	f107 0310 	add.w	r3, r7, #16
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	f003 fae0 	bl	8004278 <HAL_RCCEx_PeriphCLKConfig>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d001      	beq.n	8000cc2 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000cbe:	f7ff ff59 	bl	8000b74 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cc2:	4b1c      	ldr	r3, [pc, #112]	; (8000d34 <HAL_I2C_MspInit+0xc0>)
 8000cc4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cc8:	4a1a      	ldr	r2, [pc, #104]	; (8000d34 <HAL_I2C_MspInit+0xc0>)
 8000cca:	f043 0302 	orr.w	r3, r3, #2
 8000cce:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cd2:	4b18      	ldr	r3, [pc, #96]	; (8000d34 <HAL_I2C_MspInit+0xc0>)
 8000cd4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cd8:	f003 0302 	and.w	r3, r3, #2
 8000cdc:	60fb      	str	r3, [r7, #12]
 8000cde:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000ce0:	23c0      	movs	r3, #192	; 0xc0
 8000ce2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ce6:	2312      	movs	r3, #18
 8000ce8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cec:	2300      	movs	r3, #0
 8000cee:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000cf8:	2304      	movs	r3, #4
 8000cfa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cfe:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000d02:	4619      	mov	r1, r3
 8000d04:	480c      	ldr	r0, [pc, #48]	; (8000d38 <HAL_I2C_MspInit+0xc4>)
 8000d06:	f001 fd7f 	bl	8002808 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000d0a:	4b0a      	ldr	r3, [pc, #40]	; (8000d34 <HAL_I2C_MspInit+0xc0>)
 8000d0c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000d10:	4a08      	ldr	r2, [pc, #32]	; (8000d34 <HAL_I2C_MspInit+0xc0>)
 8000d12:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000d16:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000d1a:	4b06      	ldr	r3, [pc, #24]	; (8000d34 <HAL_I2C_MspInit+0xc0>)
 8000d1c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000d20:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d24:	60bb      	str	r3, [r7, #8]
 8000d26:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000d28:	bf00      	nop
 8000d2a:	37e0      	adds	r7, #224	; 0xe0
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bd80      	pop	{r7, pc}
 8000d30:	40005400 	.word	0x40005400
 8000d34:	58024400 	.word	0x58024400
 8000d38:	58020400 	.word	0x58020400

08000d3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d40:	e7fe      	b.n	8000d40 <NMI_Handler+0x4>

08000d42 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d42:	b480      	push	{r7}
 8000d44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d46:	e7fe      	b.n	8000d46 <HardFault_Handler+0x4>

08000d48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d4c:	e7fe      	b.n	8000d4c <MemManage_Handler+0x4>

08000d4e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d4e:	b480      	push	{r7}
 8000d50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d52:	e7fe      	b.n	8000d52 <BusFault_Handler+0x4>

08000d54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d58:	e7fe      	b.n	8000d58 <UsageFault_Handler+0x4>

08000d5a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d5a:	b480      	push	{r7}
 8000d5c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d5e:	bf00      	nop
 8000d60:	46bd      	mov	sp, r7
 8000d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d66:	4770      	bx	lr

08000d68 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d6c:	bf00      	nop
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d74:	4770      	bx	lr

08000d76 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d76:	b480      	push	{r7}
 8000d78:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d7a:	bf00      	nop
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d82:	4770      	bx	lr

08000d84 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d88:	f000 f8d4 	bl	8000f34 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d8c:	bf00      	nop
 8000d8e:	bd80      	pop	{r7, pc}

08000d90 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b086      	sub	sp, #24
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d98:	4a14      	ldr	r2, [pc, #80]	; (8000dec <_sbrk+0x5c>)
 8000d9a:	4b15      	ldr	r3, [pc, #84]	; (8000df0 <_sbrk+0x60>)
 8000d9c:	1ad3      	subs	r3, r2, r3
 8000d9e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000da0:	697b      	ldr	r3, [r7, #20]
 8000da2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000da4:	4b13      	ldr	r3, [pc, #76]	; (8000df4 <_sbrk+0x64>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d102      	bne.n	8000db2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000dac:	4b11      	ldr	r3, [pc, #68]	; (8000df4 <_sbrk+0x64>)
 8000dae:	4a12      	ldr	r2, [pc, #72]	; (8000df8 <_sbrk+0x68>)
 8000db0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000db2:	4b10      	ldr	r3, [pc, #64]	; (8000df4 <_sbrk+0x64>)
 8000db4:	681a      	ldr	r2, [r3, #0]
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	4413      	add	r3, r2
 8000dba:	693a      	ldr	r2, [r7, #16]
 8000dbc:	429a      	cmp	r2, r3
 8000dbe:	d207      	bcs.n	8000dd0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000dc0:	f005 fbe0 	bl	8006584 <__errno>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	220c      	movs	r2, #12
 8000dc8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000dca:	f04f 33ff 	mov.w	r3, #4294967295
 8000dce:	e009      	b.n	8000de4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000dd0:	4b08      	ldr	r3, [pc, #32]	; (8000df4 <_sbrk+0x64>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000dd6:	4b07      	ldr	r3, [pc, #28]	; (8000df4 <_sbrk+0x64>)
 8000dd8:	681a      	ldr	r2, [r3, #0]
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	4413      	add	r3, r2
 8000dde:	4a05      	ldr	r2, [pc, #20]	; (8000df4 <_sbrk+0x64>)
 8000de0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000de2:	68fb      	ldr	r3, [r7, #12]
}
 8000de4:	4618      	mov	r0, r3
 8000de6:	3718      	adds	r7, #24
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bd80      	pop	{r7, pc}
 8000dec:	24080000 	.word	0x24080000
 8000df0:	00000400 	.word	0x00000400
 8000df4:	24000090 	.word	0x24000090
 8000df8:	24000160 	.word	0x24000160

08000dfc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000dfc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e34 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000e00:	f7ff fabe 	bl	8000380 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e04:	480c      	ldr	r0, [pc, #48]	; (8000e38 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000e06:	490d      	ldr	r1, [pc, #52]	; (8000e3c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000e08:	4a0d      	ldr	r2, [pc, #52]	; (8000e40 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000e0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e0c:	e002      	b.n	8000e14 <LoopCopyDataInit>

08000e0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e12:	3304      	adds	r3, #4

08000e14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e18:	d3f9      	bcc.n	8000e0e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e1a:	4a0a      	ldr	r2, [pc, #40]	; (8000e44 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000e1c:	4c0a      	ldr	r4, [pc, #40]	; (8000e48 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000e1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e20:	e001      	b.n	8000e26 <LoopFillZerobss>

08000e22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e24:	3204      	adds	r2, #4

08000e26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e28:	d3fb      	bcc.n	8000e22 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e2a:	f005 fbb1 	bl	8006590 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e2e:	f7ff fc29 	bl	8000684 <main>
  bx  lr
 8000e32:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000e34:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000e38:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000e3c:	24000074 	.word	0x24000074
  ldr r2, =_sidata
 8000e40:	08006ee8 	.word	0x08006ee8
  ldr r2, =_sbss
 8000e44:	24000074 	.word	0x24000074
  ldr r4, =_ebss
 8000e48:	24000160 	.word	0x24000160

08000e4c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e4c:	e7fe      	b.n	8000e4c <ADC3_IRQHandler>
	...

08000e50 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b082      	sub	sp, #8
 8000e54:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e56:	2003      	movs	r0, #3
 8000e58:	f001 fca4 	bl	80027a4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000e5c:	f003 f862 	bl	8003f24 <HAL_RCC_GetSysClockFreq>
 8000e60:	4602      	mov	r2, r0
 8000e62:	4b15      	ldr	r3, [pc, #84]	; (8000eb8 <HAL_Init+0x68>)
 8000e64:	699b      	ldr	r3, [r3, #24]
 8000e66:	0a1b      	lsrs	r3, r3, #8
 8000e68:	f003 030f 	and.w	r3, r3, #15
 8000e6c:	4913      	ldr	r1, [pc, #76]	; (8000ebc <HAL_Init+0x6c>)
 8000e6e:	5ccb      	ldrb	r3, [r1, r3]
 8000e70:	f003 031f 	and.w	r3, r3, #31
 8000e74:	fa22 f303 	lsr.w	r3, r2, r3
 8000e78:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000e7a:	4b0f      	ldr	r3, [pc, #60]	; (8000eb8 <HAL_Init+0x68>)
 8000e7c:	699b      	ldr	r3, [r3, #24]
 8000e7e:	f003 030f 	and.w	r3, r3, #15
 8000e82:	4a0e      	ldr	r2, [pc, #56]	; (8000ebc <HAL_Init+0x6c>)
 8000e84:	5cd3      	ldrb	r3, [r2, r3]
 8000e86:	f003 031f 	and.w	r3, r3, #31
 8000e8a:	687a      	ldr	r2, [r7, #4]
 8000e8c:	fa22 f303 	lsr.w	r3, r2, r3
 8000e90:	4a0b      	ldr	r2, [pc, #44]	; (8000ec0 <HAL_Init+0x70>)
 8000e92:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000e94:	4a0b      	ldr	r2, [pc, #44]	; (8000ec4 <HAL_Init+0x74>)
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e9a:	2000      	movs	r0, #0
 8000e9c:	f000 f814 	bl	8000ec8 <HAL_InitTick>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d001      	beq.n	8000eaa <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000ea6:	2301      	movs	r3, #1
 8000ea8:	e002      	b.n	8000eb0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000eaa:	f7ff fe69 	bl	8000b80 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000eae:	2300      	movs	r3, #0
}
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	3708      	adds	r7, #8
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bd80      	pop	{r7, pc}
 8000eb8:	58024400 	.word	0x58024400
 8000ebc:	08006e9c 	.word	0x08006e9c
 8000ec0:	24000004 	.word	0x24000004
 8000ec4:	24000000 	.word	0x24000000

08000ec8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b082      	sub	sp, #8
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000ed0:	4b15      	ldr	r3, [pc, #84]	; (8000f28 <HAL_InitTick+0x60>)
 8000ed2:	781b      	ldrb	r3, [r3, #0]
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d101      	bne.n	8000edc <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000ed8:	2301      	movs	r3, #1
 8000eda:	e021      	b.n	8000f20 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000edc:	4b13      	ldr	r3, [pc, #76]	; (8000f2c <HAL_InitTick+0x64>)
 8000ede:	681a      	ldr	r2, [r3, #0]
 8000ee0:	4b11      	ldr	r3, [pc, #68]	; (8000f28 <HAL_InitTick+0x60>)
 8000ee2:	781b      	ldrb	r3, [r3, #0]
 8000ee4:	4619      	mov	r1, r3
 8000ee6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000eea:	fbb3 f3f1 	udiv	r3, r3, r1
 8000eee:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	f001 fc7b 	bl	80027ee <HAL_SYSTICK_Config>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d001      	beq.n	8000f02 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000efe:	2301      	movs	r3, #1
 8000f00:	e00e      	b.n	8000f20 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	2b0f      	cmp	r3, #15
 8000f06:	d80a      	bhi.n	8000f1e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f08:	2200      	movs	r2, #0
 8000f0a:	6879      	ldr	r1, [r7, #4]
 8000f0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000f10:	f001 fc53 	bl	80027ba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f14:	4a06      	ldr	r2, [pc, #24]	; (8000f30 <HAL_InitTick+0x68>)
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	e000      	b.n	8000f20 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000f1e:	2301      	movs	r3, #1
}
 8000f20:	4618      	mov	r0, r3
 8000f22:	3708      	adds	r7, #8
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bd80      	pop	{r7, pc}
 8000f28:	2400000c 	.word	0x2400000c
 8000f2c:	24000000 	.word	0x24000000
 8000f30:	24000008 	.word	0x24000008

08000f34 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f34:	b480      	push	{r7}
 8000f36:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000f38:	4b06      	ldr	r3, [pc, #24]	; (8000f54 <HAL_IncTick+0x20>)
 8000f3a:	781b      	ldrb	r3, [r3, #0]
 8000f3c:	461a      	mov	r2, r3
 8000f3e:	4b06      	ldr	r3, [pc, #24]	; (8000f58 <HAL_IncTick+0x24>)
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	4413      	add	r3, r2
 8000f44:	4a04      	ldr	r2, [pc, #16]	; (8000f58 <HAL_IncTick+0x24>)
 8000f46:	6013      	str	r3, [r2, #0]
}
 8000f48:	bf00      	nop
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f50:	4770      	bx	lr
 8000f52:	bf00      	nop
 8000f54:	2400000c 	.word	0x2400000c
 8000f58:	2400014c 	.word	0x2400014c

08000f5c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	af00      	add	r7, sp, #0
  return uwTick;
 8000f60:	4b03      	ldr	r3, [pc, #12]	; (8000f70 <HAL_GetTick+0x14>)
 8000f62:	681b      	ldr	r3, [r3, #0]
}
 8000f64:	4618      	mov	r0, r3
 8000f66:	46bd      	mov	sp, r7
 8000f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6c:	4770      	bx	lr
 8000f6e:	bf00      	nop
 8000f70:	2400014c 	.word	0x2400014c

08000f74 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b084      	sub	sp, #16
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f7c:	f7ff ffee 	bl	8000f5c <HAL_GetTick>
 8000f80:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f86:	68fb      	ldr	r3, [r7, #12]
 8000f88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f8c:	d005      	beq.n	8000f9a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f8e:	4b0a      	ldr	r3, [pc, #40]	; (8000fb8 <HAL_Delay+0x44>)
 8000f90:	781b      	ldrb	r3, [r3, #0]
 8000f92:	461a      	mov	r2, r3
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	4413      	add	r3, r2
 8000f98:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f9a:	bf00      	nop
 8000f9c:	f7ff ffde 	bl	8000f5c <HAL_GetTick>
 8000fa0:	4602      	mov	r2, r0
 8000fa2:	68bb      	ldr	r3, [r7, #8]
 8000fa4:	1ad3      	subs	r3, r2, r3
 8000fa6:	68fa      	ldr	r2, [r7, #12]
 8000fa8:	429a      	cmp	r2, r3
 8000faa:	d8f7      	bhi.n	8000f9c <HAL_Delay+0x28>
  {
  }
}
 8000fac:	bf00      	nop
 8000fae:	bf00      	nop
 8000fb0:	3710      	adds	r7, #16
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	2400000c 	.word	0x2400000c

08000fbc <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000fc0:	4b03      	ldr	r3, [pc, #12]	; (8000fd0 <HAL_GetREVID+0x14>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	0c1b      	lsrs	r3, r3, #16
}
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fce:	4770      	bx	lr
 8000fd0:	5c001000 	.word	0x5c001000

08000fd4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	b083      	sub	sp, #12
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
 8000fdc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	689b      	ldr	r3, [r3, #8]
 8000fe2:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	431a      	orrs	r2, r3
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	609a      	str	r2, [r3, #8]
}
 8000fee:	bf00      	nop
 8000ff0:	370c      	adds	r7, #12
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff8:	4770      	bx	lr

08000ffa <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000ffa:	b480      	push	{r7}
 8000ffc:	b083      	sub	sp, #12
 8000ffe:	af00      	add	r7, sp, #0
 8001000:	6078      	str	r0, [r7, #4]
 8001002:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	689b      	ldr	r3, [r3, #8]
 8001008:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	431a      	orrs	r2, r3
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	609a      	str	r2, [r3, #8]
}
 8001014:	bf00      	nop
 8001016:	370c      	adds	r7, #12
 8001018:	46bd      	mov	sp, r7
 800101a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101e:	4770      	bx	lr

08001020 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001020:	b480      	push	{r7}
 8001022:	b083      	sub	sp, #12
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	689b      	ldr	r3, [r3, #8]
 800102c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001030:	4618      	mov	r0, r3
 8001032:	370c      	adds	r7, #12
 8001034:	46bd      	mov	sp, r7
 8001036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103a:	4770      	bx	lr

0800103c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800103c:	b480      	push	{r7}
 800103e:	b087      	sub	sp, #28
 8001040:	af00      	add	r7, sp, #0
 8001042:	60f8      	str	r0, [r7, #12]
 8001044:	60b9      	str	r1, [r7, #8]
 8001046:	607a      	str	r2, [r7, #4]
 8001048:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	3360      	adds	r3, #96	; 0x60
 800104e:	461a      	mov	r2, r3
 8001050:	68bb      	ldr	r3, [r7, #8]
 8001052:	009b      	lsls	r3, r3, #2
 8001054:	4413      	add	r3, r2
 8001056:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8001058:	697b      	ldr	r3, [r7, #20]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	430b      	orrs	r3, r1
 800106a:	431a      	orrs	r2, r3
 800106c:	697b      	ldr	r3, [r7, #20]
 800106e:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8001070:	bf00      	nop
 8001072:	371c      	adds	r7, #28
 8001074:	46bd      	mov	sp, r7
 8001076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107a:	4770      	bx	lr

0800107c <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 800107c:	b480      	push	{r7}
 800107e:	b085      	sub	sp, #20
 8001080:	af00      	add	r7, sp, #0
 8001082:	60f8      	str	r0, [r7, #12]
 8001084:	60b9      	str	r1, [r7, #8]
 8001086:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	691b      	ldr	r3, [r3, #16]
 800108c:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8001090:	68bb      	ldr	r3, [r7, #8]
 8001092:	f003 031f 	and.w	r3, r3, #31
 8001096:	6879      	ldr	r1, [r7, #4]
 8001098:	fa01 f303 	lsl.w	r3, r1, r3
 800109c:	431a      	orrs	r2, r3
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	611a      	str	r2, [r3, #16]
}
 80010a2:	bf00      	nop
 80010a4:	3714      	adds	r7, #20
 80010a6:	46bd      	mov	sp, r7
 80010a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ac:	4770      	bx	lr

080010ae <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 80010ae:	b480      	push	{r7}
 80010b0:	b087      	sub	sp, #28
 80010b2:	af00      	add	r7, sp, #0
 80010b4:	60f8      	str	r0, [r7, #12]
 80010b6:	60b9      	str	r1, [r7, #8]
 80010b8:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	3360      	adds	r3, #96	; 0x60
 80010be:	461a      	mov	r2, r3
 80010c0:	68bb      	ldr	r3, [r7, #8]
 80010c2:	009b      	lsls	r3, r3, #2
 80010c4:	4413      	add	r3, r2
 80010c6:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80010c8:	697b      	ldr	r3, [r7, #20]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	431a      	orrs	r2, r3
 80010d4:	697b      	ldr	r3, [r7, #20]
 80010d6:	601a      	str	r2, [r3, #0]
  }
}
 80010d8:	bf00      	nop
 80010da:	371c      	adds	r7, #28
 80010dc:	46bd      	mov	sp, r7
 80010de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e2:	4770      	bx	lr

080010e4 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80010e4:	b480      	push	{r7}
 80010e6:	b083      	sub	sp, #12
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	68db      	ldr	r3, [r3, #12]
 80010f0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d101      	bne.n	80010fc <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80010f8:	2301      	movs	r3, #1
 80010fa:	e000      	b.n	80010fe <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80010fc:	2300      	movs	r3, #0
}
 80010fe:	4618      	mov	r0, r3
 8001100:	370c      	adds	r7, #12
 8001102:	46bd      	mov	sp, r7
 8001104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001108:	4770      	bx	lr

0800110a <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800110a:	b480      	push	{r7}
 800110c:	b087      	sub	sp, #28
 800110e:	af00      	add	r7, sp, #0
 8001110:	60f8      	str	r0, [r7, #12]
 8001112:	60b9      	str	r1, [r7, #8]
 8001114:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	3330      	adds	r3, #48	; 0x30
 800111a:	461a      	mov	r2, r3
 800111c:	68bb      	ldr	r3, [r7, #8]
 800111e:	0a1b      	lsrs	r3, r3, #8
 8001120:	009b      	lsls	r3, r3, #2
 8001122:	f003 030c 	and.w	r3, r3, #12
 8001126:	4413      	add	r3, r2
 8001128:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800112a:	697b      	ldr	r3, [r7, #20]
 800112c:	681a      	ldr	r2, [r3, #0]
 800112e:	68bb      	ldr	r3, [r7, #8]
 8001130:	f003 031f 	and.w	r3, r3, #31
 8001134:	211f      	movs	r1, #31
 8001136:	fa01 f303 	lsl.w	r3, r1, r3
 800113a:	43db      	mvns	r3, r3
 800113c:	401a      	ands	r2, r3
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	0e9b      	lsrs	r3, r3, #26
 8001142:	f003 011f 	and.w	r1, r3, #31
 8001146:	68bb      	ldr	r3, [r7, #8]
 8001148:	f003 031f 	and.w	r3, r3, #31
 800114c:	fa01 f303 	lsl.w	r3, r1, r3
 8001150:	431a      	orrs	r2, r3
 8001152:	697b      	ldr	r3, [r7, #20]
 8001154:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001156:	bf00      	nop
 8001158:	371c      	adds	r7, #28
 800115a:	46bd      	mov	sp, r7
 800115c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001160:	4770      	bx	lr

08001162 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001162:	b480      	push	{r7}
 8001164:	b087      	sub	sp, #28
 8001166:	af00      	add	r7, sp, #0
 8001168:	60f8      	str	r0, [r7, #12]
 800116a:	60b9      	str	r1, [r7, #8]
 800116c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	3314      	adds	r3, #20
 8001172:	461a      	mov	r2, r3
 8001174:	68bb      	ldr	r3, [r7, #8]
 8001176:	0e5b      	lsrs	r3, r3, #25
 8001178:	009b      	lsls	r3, r3, #2
 800117a:	f003 0304 	and.w	r3, r3, #4
 800117e:	4413      	add	r3, r2
 8001180:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001182:	697b      	ldr	r3, [r7, #20]
 8001184:	681a      	ldr	r2, [r3, #0]
 8001186:	68bb      	ldr	r3, [r7, #8]
 8001188:	0d1b      	lsrs	r3, r3, #20
 800118a:	f003 031f 	and.w	r3, r3, #31
 800118e:	2107      	movs	r1, #7
 8001190:	fa01 f303 	lsl.w	r3, r1, r3
 8001194:	43db      	mvns	r3, r3
 8001196:	401a      	ands	r2, r3
 8001198:	68bb      	ldr	r3, [r7, #8]
 800119a:	0d1b      	lsrs	r3, r3, #20
 800119c:	f003 031f 	and.w	r3, r3, #31
 80011a0:	6879      	ldr	r1, [r7, #4]
 80011a2:	fa01 f303 	lsl.w	r3, r1, r3
 80011a6:	431a      	orrs	r2, r3
 80011a8:	697b      	ldr	r3, [r7, #20]
 80011aa:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80011ac:	bf00      	nop
 80011ae:	371c      	adds	r7, #28
 80011b0:	46bd      	mov	sp, r7
 80011b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b6:	4770      	bx	lr

080011b8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80011b8:	b480      	push	{r7}
 80011ba:	b085      	sub	sp, #20
 80011bc:	af00      	add	r7, sp, #0
 80011be:	60f8      	str	r0, [r7, #12]
 80011c0:	60b9      	str	r1, [r7, #8]
 80011c2:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80011ca:	68bb      	ldr	r3, [r7, #8]
 80011cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80011d0:	43db      	mvns	r3, r3
 80011d2:	401a      	ands	r2, r3
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	f003 0318 	and.w	r3, r3, #24
 80011da:	4908      	ldr	r1, [pc, #32]	; (80011fc <LL_ADC_SetChannelSingleDiff+0x44>)
 80011dc:	40d9      	lsrs	r1, r3
 80011de:	68bb      	ldr	r3, [r7, #8]
 80011e0:	400b      	ands	r3, r1
 80011e2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80011e6:	431a      	orrs	r2, r3
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 80011ee:	bf00      	nop
 80011f0:	3714      	adds	r7, #20
 80011f2:	46bd      	mov	sp, r7
 80011f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f8:	4770      	bx	lr
 80011fa:	bf00      	nop
 80011fc:	000fffff 	.word	0x000fffff

08001200 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001200:	b480      	push	{r7}
 8001202:	b083      	sub	sp, #12
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	689b      	ldr	r3, [r3, #8]
 800120c:	f003 031f 	and.w	r3, r3, #31
}
 8001210:	4618      	mov	r0, r3
 8001212:	370c      	adds	r7, #12
 8001214:	46bd      	mov	sp, r7
 8001216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121a:	4770      	bx	lr

0800121c <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800121c:	b480      	push	{r7}
 800121e:	b083      	sub	sp, #12
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	689b      	ldr	r3, [r3, #8]
 8001228:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 800122c:	4618      	mov	r0, r3
 800122e:	370c      	adds	r7, #12
 8001230:	46bd      	mov	sp, r7
 8001232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001236:	4770      	bx	lr

08001238 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001238:	b480      	push	{r7}
 800123a:	b083      	sub	sp, #12
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	689a      	ldr	r2, [r3, #8]
 8001244:	4b04      	ldr	r3, [pc, #16]	; (8001258 <LL_ADC_DisableDeepPowerDown+0x20>)
 8001246:	4013      	ands	r3, r2
 8001248:	687a      	ldr	r2, [r7, #4]
 800124a:	6093      	str	r3, [r2, #8]
}
 800124c:	bf00      	nop
 800124e:	370c      	adds	r7, #12
 8001250:	46bd      	mov	sp, r7
 8001252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001256:	4770      	bx	lr
 8001258:	5fffffc0 	.word	0x5fffffc0

0800125c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 800125c:	b480      	push	{r7}
 800125e:	b083      	sub	sp, #12
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	689b      	ldr	r3, [r3, #8]
 8001268:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800126c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001270:	d101      	bne.n	8001276 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001272:	2301      	movs	r3, #1
 8001274:	e000      	b.n	8001278 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001276:	2300      	movs	r3, #0
}
 8001278:	4618      	mov	r0, r3
 800127a:	370c      	adds	r7, #12
 800127c:	46bd      	mov	sp, r7
 800127e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001282:	4770      	bx	lr

08001284 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001284:	b480      	push	{r7}
 8001286:	b083      	sub	sp, #12
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	689a      	ldr	r2, [r3, #8]
 8001290:	4b05      	ldr	r3, [pc, #20]	; (80012a8 <LL_ADC_EnableInternalRegulator+0x24>)
 8001292:	4013      	ands	r3, r2
 8001294:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800129c:	bf00      	nop
 800129e:	370c      	adds	r7, #12
 80012a0:	46bd      	mov	sp, r7
 80012a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a6:	4770      	bx	lr
 80012a8:	6fffffc0 	.word	0x6fffffc0

080012ac <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80012ac:	b480      	push	{r7}
 80012ae:	b083      	sub	sp, #12
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	689b      	ldr	r3, [r3, #8]
 80012b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012bc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80012c0:	d101      	bne.n	80012c6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80012c2:	2301      	movs	r3, #1
 80012c4:	e000      	b.n	80012c8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80012c6:	2300      	movs	r3, #0
}
 80012c8:	4618      	mov	r0, r3
 80012ca:	370c      	adds	r7, #12
 80012cc:	46bd      	mov	sp, r7
 80012ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d2:	4770      	bx	lr

080012d4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80012d4:	b480      	push	{r7}
 80012d6:	b083      	sub	sp, #12
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	689a      	ldr	r2, [r3, #8]
 80012e0:	4b05      	ldr	r3, [pc, #20]	; (80012f8 <LL_ADC_Enable+0x24>)
 80012e2:	4013      	ands	r3, r2
 80012e4:	f043 0201 	orr.w	r2, r3, #1
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80012ec:	bf00      	nop
 80012ee:	370c      	adds	r7, #12
 80012f0:	46bd      	mov	sp, r7
 80012f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f6:	4770      	bx	lr
 80012f8:	7fffffc0 	.word	0x7fffffc0

080012fc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80012fc:	b480      	push	{r7}
 80012fe:	b083      	sub	sp, #12
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	689b      	ldr	r3, [r3, #8]
 8001308:	f003 0301 	and.w	r3, r3, #1
 800130c:	2b01      	cmp	r3, #1
 800130e:	d101      	bne.n	8001314 <LL_ADC_IsEnabled+0x18>
 8001310:	2301      	movs	r3, #1
 8001312:	e000      	b.n	8001316 <LL_ADC_IsEnabled+0x1a>
 8001314:	2300      	movs	r3, #0
}
 8001316:	4618      	mov	r0, r3
 8001318:	370c      	adds	r7, #12
 800131a:	46bd      	mov	sp, r7
 800131c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001320:	4770      	bx	lr
	...

08001324 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001324:	b480      	push	{r7}
 8001326:	b083      	sub	sp, #12
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	689a      	ldr	r2, [r3, #8]
 8001330:	4b05      	ldr	r3, [pc, #20]	; (8001348 <LL_ADC_REG_StartConversion+0x24>)
 8001332:	4013      	ands	r3, r2
 8001334:	f043 0204 	orr.w	r2, r3, #4
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800133c:	bf00      	nop
 800133e:	370c      	adds	r7, #12
 8001340:	46bd      	mov	sp, r7
 8001342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001346:	4770      	bx	lr
 8001348:	7fffffc0 	.word	0x7fffffc0

0800134c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800134c:	b480      	push	{r7}
 800134e:	b083      	sub	sp, #12
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	689b      	ldr	r3, [r3, #8]
 8001358:	f003 0304 	and.w	r3, r3, #4
 800135c:	2b04      	cmp	r3, #4
 800135e:	d101      	bne.n	8001364 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001360:	2301      	movs	r3, #1
 8001362:	e000      	b.n	8001366 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001364:	2300      	movs	r3, #0
}
 8001366:	4618      	mov	r0, r3
 8001368:	370c      	adds	r7, #12
 800136a:	46bd      	mov	sp, r7
 800136c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001370:	4770      	bx	lr

08001372 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001372:	b480      	push	{r7}
 8001374:	b083      	sub	sp, #12
 8001376:	af00      	add	r7, sp, #0
 8001378:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	689b      	ldr	r3, [r3, #8]
 800137e:	f003 0308 	and.w	r3, r3, #8
 8001382:	2b08      	cmp	r3, #8
 8001384:	d101      	bne.n	800138a <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001386:	2301      	movs	r3, #1
 8001388:	e000      	b.n	800138c <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800138a:	2300      	movs	r3, #0
}
 800138c:	4618      	mov	r0, r3
 800138e:	370c      	adds	r7, #12
 8001390:	46bd      	mov	sp, r7
 8001392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001396:	4770      	bx	lr

08001398 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001398:	b590      	push	{r4, r7, lr}
 800139a:	b089      	sub	sp, #36	; 0x24
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80013a0:	2300      	movs	r3, #0
 80013a2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80013a4:	2300      	movs	r3, #0
 80013a6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d101      	bne.n	80013b2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80013ae:	2301      	movs	r3, #1
 80013b0:	e18e      	b.n	80016d0 <HAL_ADC_Init+0x338>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	68db      	ldr	r3, [r3, #12]
 80013b6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d109      	bne.n	80013d4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80013c0:	6878      	ldr	r0, [r7, #4]
 80013c2:	f7ff fbf7 	bl	8000bb4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	2200      	movs	r2, #0
 80013ca:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	2200      	movs	r2, #0
 80013d0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	4618      	mov	r0, r3
 80013da:	f7ff ff3f 	bl	800125c <LL_ADC_IsDeepPowerDownEnabled>
 80013de:	4603      	mov	r3, r0
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d004      	beq.n	80013ee <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	4618      	mov	r0, r3
 80013ea:	f7ff ff25 	bl	8001238 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	4618      	mov	r0, r3
 80013f4:	f7ff ff5a 	bl	80012ac <LL_ADC_IsInternalRegulatorEnabled>
 80013f8:	4603      	mov	r3, r0
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d114      	bne.n	8001428 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	4618      	mov	r0, r3
 8001404:	f7ff ff3e 	bl	8001284 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001408:	4b9a      	ldr	r3, [pc, #616]	; (8001674 <HAL_ADC_Init+0x2dc>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	099b      	lsrs	r3, r3, #6
 800140e:	4a9a      	ldr	r2, [pc, #616]	; (8001678 <HAL_ADC_Init+0x2e0>)
 8001410:	fba2 2303 	umull	r2, r3, r2, r3
 8001414:	099b      	lsrs	r3, r3, #6
 8001416:	3301      	adds	r3, #1
 8001418:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800141a:	e002      	b.n	8001422 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 800141c:	68bb      	ldr	r3, [r7, #8]
 800141e:	3b01      	subs	r3, #1
 8001420:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001422:	68bb      	ldr	r3, [r7, #8]
 8001424:	2b00      	cmp	r3, #0
 8001426:	d1f9      	bne.n	800141c <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	4618      	mov	r0, r3
 800142e:	f7ff ff3d 	bl	80012ac <LL_ADC_IsInternalRegulatorEnabled>
 8001432:	4603      	mov	r3, r0
 8001434:	2b00      	cmp	r3, #0
 8001436:	d10d      	bne.n	8001454 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800143c:	f043 0210 	orr.w	r2, r3, #16
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001448:	f043 0201 	orr.w	r2, r3, #1
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001450:	2301      	movs	r3, #1
 8001452:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	4618      	mov	r0, r3
 800145a:	f7ff ff77 	bl	800134c <LL_ADC_REG_IsConversionOngoing>
 800145e:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001464:	f003 0310 	and.w	r3, r3, #16
 8001468:	2b00      	cmp	r3, #0
 800146a:	f040 8128 	bne.w	80016be <HAL_ADC_Init+0x326>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800146e:	697b      	ldr	r3, [r7, #20]
 8001470:	2b00      	cmp	r3, #0
 8001472:	f040 8124 	bne.w	80016be <HAL_ADC_Init+0x326>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800147a:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800147e:	f043 0202 	orr.w	r2, r3, #2
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	4618      	mov	r0, r3
 800148c:	f7ff ff36 	bl	80012fc <LL_ADC_IsEnabled>
 8001490:	4603      	mov	r3, r0
 8001492:	2b00      	cmp	r3, #0
 8001494:	d136      	bne.n	8001504 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	4a78      	ldr	r2, [pc, #480]	; (800167c <HAL_ADC_Init+0x2e4>)
 800149c:	4293      	cmp	r3, r2
 800149e:	d004      	beq.n	80014aa <HAL_ADC_Init+0x112>
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	4a76      	ldr	r2, [pc, #472]	; (8001680 <HAL_ADC_Init+0x2e8>)
 80014a6:	4293      	cmp	r3, r2
 80014a8:	d10e      	bne.n	80014c8 <HAL_ADC_Init+0x130>
 80014aa:	4874      	ldr	r0, [pc, #464]	; (800167c <HAL_ADC_Init+0x2e4>)
 80014ac:	f7ff ff26 	bl	80012fc <LL_ADC_IsEnabled>
 80014b0:	4604      	mov	r4, r0
 80014b2:	4873      	ldr	r0, [pc, #460]	; (8001680 <HAL_ADC_Init+0x2e8>)
 80014b4:	f7ff ff22 	bl	80012fc <LL_ADC_IsEnabled>
 80014b8:	4603      	mov	r3, r0
 80014ba:	4323      	orrs	r3, r4
 80014bc:	2b00      	cmp	r3, #0
 80014be:	bf0c      	ite	eq
 80014c0:	2301      	moveq	r3, #1
 80014c2:	2300      	movne	r3, #0
 80014c4:	b2db      	uxtb	r3, r3
 80014c6:	e008      	b.n	80014da <HAL_ADC_Init+0x142>
 80014c8:	486e      	ldr	r0, [pc, #440]	; (8001684 <HAL_ADC_Init+0x2ec>)
 80014ca:	f7ff ff17 	bl	80012fc <LL_ADC_IsEnabled>
 80014ce:	4603      	mov	r3, r0
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	bf0c      	ite	eq
 80014d4:	2301      	moveq	r3, #1
 80014d6:	2300      	movne	r3, #0
 80014d8:	b2db      	uxtb	r3, r3
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d012      	beq.n	8001504 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	4a66      	ldr	r2, [pc, #408]	; (800167c <HAL_ADC_Init+0x2e4>)
 80014e4:	4293      	cmp	r3, r2
 80014e6:	d004      	beq.n	80014f2 <HAL_ADC_Init+0x15a>
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	4a64      	ldr	r2, [pc, #400]	; (8001680 <HAL_ADC_Init+0x2e8>)
 80014ee:	4293      	cmp	r3, r2
 80014f0:	d101      	bne.n	80014f6 <HAL_ADC_Init+0x15e>
 80014f2:	4a65      	ldr	r2, [pc, #404]	; (8001688 <HAL_ADC_Init+0x2f0>)
 80014f4:	e000      	b.n	80014f8 <HAL_ADC_Init+0x160>
 80014f6:	4a65      	ldr	r2, [pc, #404]	; (800168c <HAL_ADC_Init+0x2f4>)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	4619      	mov	r1, r3
 80014fe:	4610      	mov	r0, r2
 8001500:	f7ff fd68 	bl	8000fd4 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8001504:	f7ff fd5a 	bl	8000fbc <HAL_GetREVID>
 8001508:	4603      	mov	r3, r0
 800150a:	f241 0203 	movw	r2, #4099	; 0x1003
 800150e:	4293      	cmp	r3, r2
 8001510:	d914      	bls.n	800153c <HAL_ADC_Init+0x1a4>
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	689b      	ldr	r3, [r3, #8]
 8001516:	2b10      	cmp	r3, #16
 8001518:	d110      	bne.n	800153c <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	7d5b      	ldrb	r3, [r3, #21]
 800151e:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001524:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 800152a:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	7f1b      	ldrb	r3, [r3, #28]
 8001530:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8001532:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001534:	f043 030c 	orr.w	r3, r3, #12
 8001538:	61bb      	str	r3, [r7, #24]
 800153a:	e00d      	b.n	8001558 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	7d5b      	ldrb	r3, [r3, #21]
 8001540:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001546:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 800154c:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	7f1b      	ldrb	r3, [r3, #28]
 8001552:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001554:	4313      	orrs	r3, r2
 8001556:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	7f1b      	ldrb	r3, [r3, #28]
 800155c:	2b01      	cmp	r3, #1
 800155e:	d106      	bne.n	800156e <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	6a1b      	ldr	r3, [r3, #32]
 8001564:	3b01      	subs	r3, #1
 8001566:	045b      	lsls	r3, r3, #17
 8001568:	69ba      	ldr	r2, [r7, #24]
 800156a:	4313      	orrs	r3, r2
 800156c:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001572:	2b00      	cmp	r3, #0
 8001574:	d009      	beq.n	800158a <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800157a:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001582:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001584:	69ba      	ldr	r2, [r7, #24]
 8001586:	4313      	orrs	r3, r2
 8001588:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	68da      	ldr	r2, [r3, #12]
 8001590:	4b3f      	ldr	r3, [pc, #252]	; (8001690 <HAL_ADC_Init+0x2f8>)
 8001592:	4013      	ands	r3, r2
 8001594:	687a      	ldr	r2, [r7, #4]
 8001596:	6812      	ldr	r2, [r2, #0]
 8001598:	69b9      	ldr	r1, [r7, #24]
 800159a:	430b      	orrs	r3, r1
 800159c:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	4618      	mov	r0, r3
 80015a4:	f7ff fed2 	bl	800134c <LL_ADC_REG_IsConversionOngoing>
 80015a8:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	4618      	mov	r0, r3
 80015b0:	f7ff fedf 	bl	8001372 <LL_ADC_INJ_IsConversionOngoing>
 80015b4:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80015b6:	693b      	ldr	r3, [r7, #16]
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d14a      	bne.n	8001652 <HAL_ADC_Init+0x2ba>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d147      	bne.n	8001652 <HAL_ADC_Init+0x2ba>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	7d1b      	ldrb	r3, [r3, #20]
 80015c6:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 80015cc:	4313      	orrs	r3, r2
 80015ce:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	68da      	ldr	r2, [r3, #12]
 80015d6:	4b2f      	ldr	r3, [pc, #188]	; (8001694 <HAL_ADC_Init+0x2fc>)
 80015d8:	4013      	ands	r3, r2
 80015da:	687a      	ldr	r2, [r7, #4]
 80015dc:	6812      	ldr	r2, [r2, #0]
 80015de:	69b9      	ldr	r1, [r7, #24]
 80015e0:	430b      	orrs	r3, r1
 80015e2:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80015ea:	2b01      	cmp	r3, #1
 80015ec:	d11b      	bne.n	8001626 <HAL_ADC_Init+0x28e>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015f2:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	691a      	ldr	r2, [r3, #16]
 80015fa:	4b27      	ldr	r3, [pc, #156]	; (8001698 <HAL_ADC_Init+0x300>)
 80015fc:	4013      	ands	r3, r2
 80015fe:	687a      	ldr	r2, [r7, #4]
 8001600:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001602:	3a01      	subs	r2, #1
 8001604:	0411      	lsls	r1, r2, #16
 8001606:	687a      	ldr	r2, [r7, #4]
 8001608:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800160a:	4311      	orrs	r1, r2
 800160c:	687a      	ldr	r2, [r7, #4]
 800160e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001610:	4311      	orrs	r1, r2
 8001612:	687a      	ldr	r2, [r7, #4]
 8001614:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001616:	430a      	orrs	r2, r1
 8001618:	431a      	orrs	r2, r3
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f042 0201 	orr.w	r2, r2, #1
 8001622:	611a      	str	r2, [r3, #16]
 8001624:	e007      	b.n	8001636 <HAL_ADC_Init+0x29e>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	691a      	ldr	r2, [r3, #16]
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f022 0201 	bic.w	r2, r2, #1
 8001634:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	691b      	ldr	r3, [r3, #16]
 800163c:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	430a      	orrs	r2, r1
 800164a:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 800164c:	6878      	ldr	r0, [r7, #4]
 800164e:	f000 fde9 	bl	8002224 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	68db      	ldr	r3, [r3, #12]
 8001656:	2b01      	cmp	r3, #1
 8001658:	d120      	bne.n	800169c <HAL_ADC_Init+0x304>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001660:	f023 010f 	bic.w	r1, r3, #15
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	699b      	ldr	r3, [r3, #24]
 8001668:	1e5a      	subs	r2, r3, #1
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	430a      	orrs	r2, r1
 8001670:	631a      	str	r2, [r3, #48]	; 0x30
 8001672:	e01b      	b.n	80016ac <HAL_ADC_Init+0x314>
 8001674:	24000000 	.word	0x24000000
 8001678:	053e2d63 	.word	0x053e2d63
 800167c:	40022000 	.word	0x40022000
 8001680:	40022100 	.word	0x40022100
 8001684:	58026000 	.word	0x58026000
 8001688:	40022300 	.word	0x40022300
 800168c:	58026300 	.word	0x58026300
 8001690:	fff0c003 	.word	0xfff0c003
 8001694:	ffffbffc 	.word	0xffffbffc
 8001698:	fc00f81e 	.word	0xfc00f81e
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f022 020f 	bic.w	r2, r2, #15
 80016aa:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016b0:	f023 0303 	bic.w	r3, r3, #3
 80016b4:	f043 0201 	orr.w	r2, r3, #1
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	655a      	str	r2, [r3, #84]	; 0x54
 80016bc:	e007      	b.n	80016ce <HAL_ADC_Init+0x336>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016c2:	f043 0210 	orr.w	r2, r3, #16
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80016ca:	2301      	movs	r3, #1
 80016cc:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80016ce:	7ffb      	ldrb	r3, [r7, #31]
}
 80016d0:	4618      	mov	r0, r3
 80016d2:	3724      	adds	r7, #36	; 0x24
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bd90      	pop	{r4, r7, pc}

080016d8 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b086      	sub	sp, #24
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4a5c      	ldr	r2, [pc, #368]	; (8001858 <HAL_ADC_Start+0x180>)
 80016e6:	4293      	cmp	r3, r2
 80016e8:	d004      	beq.n	80016f4 <HAL_ADC_Start+0x1c>
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	4a5b      	ldr	r2, [pc, #364]	; (800185c <HAL_ADC_Start+0x184>)
 80016f0:	4293      	cmp	r3, r2
 80016f2:	d101      	bne.n	80016f8 <HAL_ADC_Start+0x20>
 80016f4:	4b5a      	ldr	r3, [pc, #360]	; (8001860 <HAL_ADC_Start+0x188>)
 80016f6:	e000      	b.n	80016fa <HAL_ADC_Start+0x22>
 80016f8:	4b5a      	ldr	r3, [pc, #360]	; (8001864 <HAL_ADC_Start+0x18c>)
 80016fa:	4618      	mov	r0, r3
 80016fc:	f7ff fd80 	bl	8001200 <LL_ADC_GetMultimode>
 8001700:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	4618      	mov	r0, r3
 8001708:	f7ff fe20 	bl	800134c <LL_ADC_REG_IsConversionOngoing>
 800170c:	4603      	mov	r3, r0
 800170e:	2b00      	cmp	r3, #0
 8001710:	f040 809a 	bne.w	8001848 <HAL_ADC_Start+0x170>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800171a:	2b01      	cmp	r3, #1
 800171c:	d101      	bne.n	8001722 <HAL_ADC_Start+0x4a>
 800171e:	2302      	movs	r3, #2
 8001720:	e095      	b.n	800184e <HAL_ADC_Start+0x176>
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	2201      	movs	r2, #1
 8001726:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800172a:	6878      	ldr	r0, [r7, #4]
 800172c:	f000 fcf0 	bl	8002110 <ADC_Enable>
 8001730:	4603      	mov	r3, r0
 8001732:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001734:	7dfb      	ldrb	r3, [r7, #23]
 8001736:	2b00      	cmp	r3, #0
 8001738:	f040 8081 	bne.w	800183e <HAL_ADC_Start+0x166>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001740:	4b49      	ldr	r3, [pc, #292]	; (8001868 <HAL_ADC_Start+0x190>)
 8001742:	4013      	ands	r3, r2
 8001744:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4a42      	ldr	r2, [pc, #264]	; (800185c <HAL_ADC_Start+0x184>)
 8001752:	4293      	cmp	r3, r2
 8001754:	d002      	beq.n	800175c <HAL_ADC_Start+0x84>
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	e000      	b.n	800175e <HAL_ADC_Start+0x86>
 800175c:	4b3e      	ldr	r3, [pc, #248]	; (8001858 <HAL_ADC_Start+0x180>)
 800175e:	687a      	ldr	r2, [r7, #4]
 8001760:	6812      	ldr	r2, [r2, #0]
 8001762:	4293      	cmp	r3, r2
 8001764:	d002      	beq.n	800176c <HAL_ADC_Start+0x94>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001766:	693b      	ldr	r3, [r7, #16]
 8001768:	2b00      	cmp	r3, #0
 800176a:	d105      	bne.n	8001778 <HAL_ADC_Start+0xa0>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001770:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800177c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001780:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001784:	d106      	bne.n	8001794 <HAL_ADC_Start+0xbc>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800178a:	f023 0206 	bic.w	r2, r3, #6
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	659a      	str	r2, [r3, #88]	; 0x58
 8001792:	e002      	b.n	800179a <HAL_ADC_Start+0xc2>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	2200      	movs	r2, #0
 8001798:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	221c      	movs	r2, #28
 80017a0:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	2200      	movs	r2, #0
 80017a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	4a2b      	ldr	r2, [pc, #172]	; (800185c <HAL_ADC_Start+0x184>)
 80017b0:	4293      	cmp	r3, r2
 80017b2:	d002      	beq.n	80017ba <HAL_ADC_Start+0xe2>
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	e000      	b.n	80017bc <HAL_ADC_Start+0xe4>
 80017ba:	4b27      	ldr	r3, [pc, #156]	; (8001858 <HAL_ADC_Start+0x180>)
 80017bc:	687a      	ldr	r2, [r7, #4]
 80017be:	6812      	ldr	r2, [r2, #0]
 80017c0:	4293      	cmp	r3, r2
 80017c2:	d008      	beq.n	80017d6 <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80017c4:	693b      	ldr	r3, [r7, #16]
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d005      	beq.n	80017d6 <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80017ca:	693b      	ldr	r3, [r7, #16]
 80017cc:	2b05      	cmp	r3, #5
 80017ce:	d002      	beq.n	80017d6 <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80017d0:	693b      	ldr	r3, [r7, #16]
 80017d2:	2b09      	cmp	r3, #9
 80017d4:	d114      	bne.n	8001800 <HAL_ADC_Start+0x128>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	68db      	ldr	r3, [r3, #12]
 80017dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d007      	beq.n	80017f4 <HAL_ADC_Start+0x11c>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017e8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80017ec:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4618      	mov	r0, r3
 80017fa:	f7ff fd93 	bl	8001324 <LL_ADC_REG_StartConversion>
 80017fe:	e025      	b.n	800184c <HAL_ADC_Start+0x174>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001804:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4a12      	ldr	r2, [pc, #72]	; (800185c <HAL_ADC_Start+0x184>)
 8001812:	4293      	cmp	r3, r2
 8001814:	d002      	beq.n	800181c <HAL_ADC_Start+0x144>
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	e000      	b.n	800181e <HAL_ADC_Start+0x146>
 800181c:	4b0e      	ldr	r3, [pc, #56]	; (8001858 <HAL_ADC_Start+0x180>)
 800181e:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	68db      	ldr	r3, [r3, #12]
 8001824:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001828:	2b00      	cmp	r3, #0
 800182a:	d00f      	beq.n	800184c <HAL_ADC_Start+0x174>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001830:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001834:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	655a      	str	r2, [r3, #84]	; 0x54
 800183c:	e006      	b.n	800184c <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	2200      	movs	r2, #0
 8001842:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8001846:	e001      	b.n	800184c <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001848:	2302      	movs	r3, #2
 800184a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800184c:	7dfb      	ldrb	r3, [r7, #23]
}
 800184e:	4618      	mov	r0, r3
 8001850:	3718      	adds	r7, #24
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}
 8001856:	bf00      	nop
 8001858:	40022000 	.word	0x40022000
 800185c:	40022100 	.word	0x40022100
 8001860:	40022300 	.word	0x40022300
 8001864:	58026300 	.word	0x58026300
 8001868:	fffff0fe 	.word	0xfffff0fe

0800186c <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b088      	sub	sp, #32
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
 8001874:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	4a72      	ldr	r2, [pc, #456]	; (8001a44 <HAL_ADC_PollForConversion+0x1d8>)
 800187c:	4293      	cmp	r3, r2
 800187e:	d004      	beq.n	800188a <HAL_ADC_PollForConversion+0x1e>
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4a70      	ldr	r2, [pc, #448]	; (8001a48 <HAL_ADC_PollForConversion+0x1dc>)
 8001886:	4293      	cmp	r3, r2
 8001888:	d101      	bne.n	800188e <HAL_ADC_PollForConversion+0x22>
 800188a:	4b70      	ldr	r3, [pc, #448]	; (8001a4c <HAL_ADC_PollForConversion+0x1e0>)
 800188c:	e000      	b.n	8001890 <HAL_ADC_PollForConversion+0x24>
 800188e:	4b70      	ldr	r3, [pc, #448]	; (8001a50 <HAL_ADC_PollForConversion+0x1e4>)
 8001890:	4618      	mov	r0, r3
 8001892:	f7ff fcb5 	bl	8001200 <LL_ADC_GetMultimode>
 8001896:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	691b      	ldr	r3, [r3, #16]
 800189c:	2b08      	cmp	r3, #8
 800189e:	d102      	bne.n	80018a6 <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 80018a0:	2308      	movs	r3, #8
 80018a2:	61fb      	str	r3, [r7, #28]
 80018a4:	e037      	b.n	8001916 <HAL_ADC_PollForConversion+0xaa>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80018a6:	697b      	ldr	r3, [r7, #20]
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d005      	beq.n	80018b8 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80018ac:	697b      	ldr	r3, [r7, #20]
 80018ae:	2b05      	cmp	r3, #5
 80018b0:	d002      	beq.n	80018b8 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80018b2:	697b      	ldr	r3, [r7, #20]
 80018b4:	2b09      	cmp	r3, #9
 80018b6:	d111      	bne.n	80018dc <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check DMNGT bit in handle ADC CFGR register */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	68db      	ldr	r3, [r3, #12]
 80018be:	f003 0301 	and.w	r3, r3, #1
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d007      	beq.n	80018d6 <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018ca:	f043 0220 	orr.w	r2, r3, #32
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 80018d2:	2301      	movs	r3, #1
 80018d4:	e0b1      	b.n	8001a3a <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80018d6:	2304      	movs	r3, #4
 80018d8:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 80018da:	e01c      	b.n	8001916 <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	4a58      	ldr	r2, [pc, #352]	; (8001a44 <HAL_ADC_PollForConversion+0x1d8>)
 80018e2:	4293      	cmp	r3, r2
 80018e4:	d004      	beq.n	80018f0 <HAL_ADC_PollForConversion+0x84>
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	4a57      	ldr	r2, [pc, #348]	; (8001a48 <HAL_ADC_PollForConversion+0x1dc>)
 80018ec:	4293      	cmp	r3, r2
 80018ee:	d101      	bne.n	80018f4 <HAL_ADC_PollForConversion+0x88>
 80018f0:	4b56      	ldr	r3, [pc, #344]	; (8001a4c <HAL_ADC_PollForConversion+0x1e0>)
 80018f2:	e000      	b.n	80018f6 <HAL_ADC_PollForConversion+0x8a>
 80018f4:	4b56      	ldr	r3, [pc, #344]	; (8001a50 <HAL_ADC_PollForConversion+0x1e4>)
 80018f6:	4618      	mov	r0, r3
 80018f8:	f7ff fc90 	bl	800121c <LL_ADC_GetMultiDMATransfer>
 80018fc:	4603      	mov	r3, r0
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d007      	beq.n	8001912 <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001906:	f043 0220 	orr.w	r2, r3, #32
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 800190e:	2301      	movs	r3, #1
 8001910:	e093      	b.n	8001a3a <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001912:	2304      	movs	r3, #4
 8001914:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8001916:	f7ff fb21 	bl	8000f5c <HAL_GetTick>
 800191a:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800191c:	e021      	b.n	8001962 <HAL_ADC_PollForConversion+0xf6>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001924:	d01d      	beq.n	8001962 <HAL_ADC_PollForConversion+0xf6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8001926:	f7ff fb19 	bl	8000f5c <HAL_GetTick>
 800192a:	4602      	mov	r2, r0
 800192c:	693b      	ldr	r3, [r7, #16]
 800192e:	1ad3      	subs	r3, r2, r3
 8001930:	683a      	ldr	r2, [r7, #0]
 8001932:	429a      	cmp	r2, r3
 8001934:	d302      	bcc.n	800193c <HAL_ADC_PollForConversion+0xd0>
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	2b00      	cmp	r3, #0
 800193a:	d112      	bne.n	8001962 <HAL_ADC_PollForConversion+0xf6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	681a      	ldr	r2, [r3, #0]
 8001942:	69fb      	ldr	r3, [r7, #28]
 8001944:	4013      	ands	r3, r2
 8001946:	2b00      	cmp	r3, #0
 8001948:	d10b      	bne.n	8001962 <HAL_ADC_PollForConversion+0xf6>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800194e:	f043 0204 	orr.w	r2, r3, #4
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	2200      	movs	r2, #0
 800195a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 800195e:	2303      	movs	r3, #3
 8001960:	e06b      	b.n	8001a3a <HAL_ADC_PollForConversion+0x1ce>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	681a      	ldr	r2, [r3, #0]
 8001968:	69fb      	ldr	r3, [r7, #28]
 800196a:	4013      	ands	r3, r2
 800196c:	2b00      	cmp	r3, #0
 800196e:	d0d6      	beq.n	800191e <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001974:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	4618      	mov	r0, r3
 8001982:	f7ff fbaf 	bl	80010e4 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001986:	4603      	mov	r3, r0
 8001988:	2b00      	cmp	r3, #0
 800198a:	d01c      	beq.n	80019c6 <HAL_ADC_PollForConversion+0x15a>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	7d5b      	ldrb	r3, [r3, #21]
 8001990:	2b00      	cmp	r3, #0
 8001992:	d118      	bne.n	80019c6 <HAL_ADC_PollForConversion+0x15a>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f003 0308 	and.w	r3, r3, #8
 800199e:	2b08      	cmp	r3, #8
 80019a0:	d111      	bne.n	80019c6 <HAL_ADC_PollForConversion+0x15a>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019a6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019b2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d105      	bne.n	80019c6 <HAL_ADC_PollForConversion+0x15a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019be:	f043 0201 	orr.w	r2, r3, #1
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	4a1f      	ldr	r2, [pc, #124]	; (8001a48 <HAL_ADC_PollForConversion+0x1dc>)
 80019cc:	4293      	cmp	r3, r2
 80019ce:	d002      	beq.n	80019d6 <HAL_ADC_PollForConversion+0x16a>
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	e000      	b.n	80019d8 <HAL_ADC_PollForConversion+0x16c>
 80019d6:	4b1b      	ldr	r3, [pc, #108]	; (8001a44 <HAL_ADC_PollForConversion+0x1d8>)
 80019d8:	687a      	ldr	r2, [r7, #4]
 80019da:	6812      	ldr	r2, [r2, #0]
 80019dc:	4293      	cmp	r3, r2
 80019de:	d008      	beq.n	80019f2 <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80019e0:	697b      	ldr	r3, [r7, #20]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d005      	beq.n	80019f2 <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80019e6:	697b      	ldr	r3, [r7, #20]
 80019e8:	2b05      	cmp	r3, #5
 80019ea:	d002      	beq.n	80019f2 <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80019ec:	697b      	ldr	r3, [r7, #20]
 80019ee:	2b09      	cmp	r3, #9
 80019f0:	d104      	bne.n	80019fc <HAL_ADC_PollForConversion+0x190>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	68db      	ldr	r3, [r3, #12]
 80019f8:	61bb      	str	r3, [r7, #24]
 80019fa:	e00c      	b.n	8001a16 <HAL_ADC_PollForConversion+0x1aa>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	4a11      	ldr	r2, [pc, #68]	; (8001a48 <HAL_ADC_PollForConversion+0x1dc>)
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d002      	beq.n	8001a0c <HAL_ADC_PollForConversion+0x1a0>
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	e000      	b.n	8001a0e <HAL_ADC_PollForConversion+0x1a2>
 8001a0c:	4b0d      	ldr	r3, [pc, #52]	; (8001a44 <HAL_ADC_PollForConversion+0x1d8>)
 8001a0e:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	68db      	ldr	r3, [r3, #12]
 8001a14:	61bb      	str	r3, [r7, #24]
  }

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8001a16:	69fb      	ldr	r3, [r7, #28]
 8001a18:	2b08      	cmp	r3, #8
 8001a1a:	d104      	bne.n	8001a26 <HAL_ADC_PollForConversion+0x1ba>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	2208      	movs	r2, #8
 8001a22:	601a      	str	r2, [r3, #0]
 8001a24:	e008      	b.n	8001a38 <HAL_ADC_PollForConversion+0x1cc>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8001a26:	69bb      	ldr	r3, [r7, #24]
 8001a28:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d103      	bne.n	8001a38 <HAL_ADC_PollForConversion+0x1cc>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	220c      	movs	r2, #12
 8001a36:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8001a38:	2300      	movs	r3, #0
}
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	3720      	adds	r7, #32
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	bf00      	nop
 8001a44:	40022000 	.word	0x40022000
 8001a48:	40022100 	.word	0x40022100
 8001a4c:	40022300 	.word	0x40022300
 8001a50:	58026300 	.word	0x58026300

08001a54 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001a54:	b480      	push	{r7}
 8001a56:	b083      	sub	sp, #12
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001a62:	4618      	mov	r0, r3
 8001a64:	370c      	adds	r7, #12
 8001a66:	46bd      	mov	sp, r7
 8001a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6c:	4770      	bx	lr
	...

08001a70 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001a70:	b590      	push	{r4, r7, lr}
 8001a72:	b0a1      	sub	sp, #132	; 0x84
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
 8001a78:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8001a80:	2300      	movs	r3, #0
 8001a82:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	68db      	ldr	r3, [r3, #12]
 8001a88:	4a9d      	ldr	r2, [pc, #628]	; (8001d00 <HAL_ADC_ConfigChannel+0x290>)
 8001a8a:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001a92:	2b01      	cmp	r3, #1
 8001a94:	d101      	bne.n	8001a9a <HAL_ADC_ConfigChannel+0x2a>
 8001a96:	2302      	movs	r3, #2
 8001a98:	e321      	b.n	80020de <HAL_ADC_ConfigChannel+0x66e>
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	2201      	movs	r2, #1
 8001a9e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	f7ff fc50 	bl	800134c <LL_ADC_REG_IsConversionOngoing>
 8001aac:	4603      	mov	r3, r0
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	f040 8306 	bne.w	80020c0 <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d108      	bne.n	8001ad2 <HAL_ADC_ConfigChannel+0x62>
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	0e9b      	lsrs	r3, r3, #26
 8001ac6:	f003 031f 	and.w	r3, r3, #31
 8001aca:	2201      	movs	r2, #1
 8001acc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad0:	e016      	b.n	8001b00 <HAL_ADC_ConfigChannel+0x90>
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ad8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001ada:	fa93 f3a3 	rbit	r3, r3
 8001ade:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001ae0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001ae2:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001ae4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d101      	bne.n	8001aee <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 8001aea:	2320      	movs	r3, #32
 8001aec:	e003      	b.n	8001af6 <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 8001aee:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001af0:	fab3 f383 	clz	r3, r3
 8001af4:	b2db      	uxtb	r3, r3
 8001af6:	f003 031f 	and.w	r3, r3, #31
 8001afa:	2201      	movs	r2, #1
 8001afc:	fa02 f303 	lsl.w	r3, r2, r3
 8001b00:	687a      	ldr	r2, [r7, #4]
 8001b02:	6812      	ldr	r2, [r2, #0]
 8001b04:	69d1      	ldr	r1, [r2, #28]
 8001b06:	687a      	ldr	r2, [r7, #4]
 8001b08:	6812      	ldr	r2, [r2, #0]
 8001b0a:	430b      	orrs	r3, r1
 8001b0c:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	6818      	ldr	r0, [r3, #0]
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	6859      	ldr	r1, [r3, #4]
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	461a      	mov	r2, r3
 8001b1c:	f7ff faf5 	bl	800110a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4618      	mov	r0, r3
 8001b26:	f7ff fc11 	bl	800134c <LL_ADC_REG_IsConversionOngoing>
 8001b2a:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4618      	mov	r0, r3
 8001b32:	f7ff fc1e 	bl	8001372 <LL_ADC_INJ_IsConversionOngoing>
 8001b36:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001b38:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	f040 80b3 	bne.w	8001ca6 <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001b40:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	f040 80af 	bne.w	8001ca6 <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	6818      	ldr	r0, [r3, #0]
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	6819      	ldr	r1, [r3, #0]
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	689b      	ldr	r3, [r3, #8]
 8001b54:	461a      	mov	r2, r3
 8001b56:	f7ff fb04 	bl	8001162 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001b5a:	4b6a      	ldr	r3, [pc, #424]	; (8001d04 <HAL_ADC_ConfigChannel+0x294>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8001b62:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001b66:	d10b      	bne.n	8001b80 <HAL_ADC_ConfigChannel+0x110>
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	695a      	ldr	r2, [r3, #20]
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	68db      	ldr	r3, [r3, #12]
 8001b72:	089b      	lsrs	r3, r3, #2
 8001b74:	f003 0307 	and.w	r3, r3, #7
 8001b78:	005b      	lsls	r3, r3, #1
 8001b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7e:	e01d      	b.n	8001bbc <HAL_ADC_ConfigChannel+0x14c>
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	68db      	ldr	r3, [r3, #12]
 8001b86:	f003 0310 	and.w	r3, r3, #16
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d10b      	bne.n	8001ba6 <HAL_ADC_ConfigChannel+0x136>
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	695a      	ldr	r2, [r3, #20]
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	68db      	ldr	r3, [r3, #12]
 8001b98:	089b      	lsrs	r3, r3, #2
 8001b9a:	f003 0307 	and.w	r3, r3, #7
 8001b9e:	005b      	lsls	r3, r3, #1
 8001ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba4:	e00a      	b.n	8001bbc <HAL_ADC_ConfigChannel+0x14c>
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	695a      	ldr	r2, [r3, #20]
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	68db      	ldr	r3, [r3, #12]
 8001bb0:	089b      	lsrs	r3, r3, #2
 8001bb2:	f003 0304 	and.w	r3, r3, #4
 8001bb6:	005b      	lsls	r3, r3, #1
 8001bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bbc:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	691b      	ldr	r3, [r3, #16]
 8001bc2:	2b04      	cmp	r3, #4
 8001bc4:	d027      	beq.n	8001c16 <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	6818      	ldr	r0, [r3, #0]
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	6919      	ldr	r1, [r3, #16]
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	681a      	ldr	r2, [r3, #0]
 8001bd2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001bd4:	f7ff fa32 	bl	800103c <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	6818      	ldr	r0, [r3, #0]
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	6919      	ldr	r1, [r3, #16]
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	7e5b      	ldrb	r3, [r3, #25]
 8001be4:	2b01      	cmp	r3, #1
 8001be6:	d102      	bne.n	8001bee <HAL_ADC_ConfigChannel+0x17e>
 8001be8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8001bec:	e000      	b.n	8001bf0 <HAL_ADC_ConfigChannel+0x180>
 8001bee:	2300      	movs	r3, #0
 8001bf0:	461a      	mov	r2, r3
 8001bf2:	f7ff fa5c 	bl	80010ae <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	6818      	ldr	r0, [r3, #0]
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	6919      	ldr	r1, [r3, #16]
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	7e1b      	ldrb	r3, [r3, #24]
 8001c02:	2b01      	cmp	r3, #1
 8001c04:	d102      	bne.n	8001c0c <HAL_ADC_ConfigChannel+0x19c>
 8001c06:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001c0a:	e000      	b.n	8001c0e <HAL_ADC_ConfigChannel+0x19e>
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	461a      	mov	r2, r3
 8001c10:	f7ff fa34 	bl	800107c <LL_ADC_SetDataRightShift>
 8001c14:	e047      	b.n	8001ca6 <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c1c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	069b      	lsls	r3, r3, #26
 8001c26:	429a      	cmp	r2, r3
 8001c28:	d107      	bne.n	8001c3a <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001c38:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001c40:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	069b      	lsls	r3, r3, #26
 8001c4a:	429a      	cmp	r2, r3
 8001c4c:	d107      	bne.n	8001c5e <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001c5c:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001c64:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	069b      	lsls	r3, r3, #26
 8001c6e:	429a      	cmp	r2, r3
 8001c70:	d107      	bne.n	8001c82 <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001c80:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001c88:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	069b      	lsls	r3, r3, #26
 8001c92:	429a      	cmp	r2, r3
 8001c94:	d107      	bne.n	8001ca6 <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001ca4:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	4618      	mov	r0, r3
 8001cac:	f7ff fb26 	bl	80012fc <LL_ADC_IsEnabled>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	f040 820d 	bne.w	80020d2 <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	6818      	ldr	r0, [r3, #0]
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	6819      	ldr	r1, [r3, #0]
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	68db      	ldr	r3, [r3, #12]
 8001cc4:	461a      	mov	r2, r3
 8001cc6:	f7ff fa77 	bl	80011b8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	68db      	ldr	r3, [r3, #12]
 8001cce:	4a0c      	ldr	r2, [pc, #48]	; (8001d00 <HAL_ADC_ConfigChannel+0x290>)
 8001cd0:	4293      	cmp	r3, r2
 8001cd2:	f040 8133 	bne.w	8001f3c <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d110      	bne.n	8001d08 <HAL_ADC_ConfigChannel+0x298>
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	0e9b      	lsrs	r3, r3, #26
 8001cec:	3301      	adds	r3, #1
 8001cee:	f003 031f 	and.w	r3, r3, #31
 8001cf2:	2b09      	cmp	r3, #9
 8001cf4:	bf94      	ite	ls
 8001cf6:	2301      	movls	r3, #1
 8001cf8:	2300      	movhi	r3, #0
 8001cfa:	b2db      	uxtb	r3, r3
 8001cfc:	e01e      	b.n	8001d3c <HAL_ADC_ConfigChannel+0x2cc>
 8001cfe:	bf00      	nop
 8001d00:	47ff0000 	.word	0x47ff0000
 8001d04:	5c001000 	.word	0x5c001000
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d0e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001d10:	fa93 f3a3 	rbit	r3, r3
 8001d14:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8001d16:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d18:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8001d1a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d101      	bne.n	8001d24 <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 8001d20:	2320      	movs	r3, #32
 8001d22:	e003      	b.n	8001d2c <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8001d24:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001d26:	fab3 f383 	clz	r3, r3
 8001d2a:	b2db      	uxtb	r3, r3
 8001d2c:	3301      	adds	r3, #1
 8001d2e:	f003 031f 	and.w	r3, r3, #31
 8001d32:	2b09      	cmp	r3, #9
 8001d34:	bf94      	ite	ls
 8001d36:	2301      	movls	r3, #1
 8001d38:	2300      	movhi	r3, #0
 8001d3a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d079      	beq.n	8001e34 <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d107      	bne.n	8001d5c <HAL_ADC_ConfigChannel+0x2ec>
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	0e9b      	lsrs	r3, r3, #26
 8001d52:	3301      	adds	r3, #1
 8001d54:	069b      	lsls	r3, r3, #26
 8001d56:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001d5a:	e015      	b.n	8001d88 <HAL_ADC_ConfigChannel+0x318>
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001d64:	fa93 f3a3 	rbit	r3, r3
 8001d68:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8001d6a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001d6c:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8001d6e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d101      	bne.n	8001d78 <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 8001d74:	2320      	movs	r3, #32
 8001d76:	e003      	b.n	8001d80 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8001d78:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001d7a:	fab3 f383 	clz	r3, r3
 8001d7e:	b2db      	uxtb	r3, r3
 8001d80:	3301      	adds	r3, #1
 8001d82:	069b      	lsls	r3, r3, #26
 8001d84:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d109      	bne.n	8001da8 <HAL_ADC_ConfigChannel+0x338>
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	0e9b      	lsrs	r3, r3, #26
 8001d9a:	3301      	adds	r3, #1
 8001d9c:	f003 031f 	and.w	r3, r3, #31
 8001da0:	2101      	movs	r1, #1
 8001da2:	fa01 f303 	lsl.w	r3, r1, r3
 8001da6:	e017      	b.n	8001dd8 <HAL_ADC_ConfigChannel+0x368>
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001db0:	fa93 f3a3 	rbit	r3, r3
 8001db4:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8001db6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001db8:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8001dba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d101      	bne.n	8001dc4 <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 8001dc0:	2320      	movs	r3, #32
 8001dc2:	e003      	b.n	8001dcc <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 8001dc4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001dc6:	fab3 f383 	clz	r3, r3
 8001dca:	b2db      	uxtb	r3, r3
 8001dcc:	3301      	adds	r3, #1
 8001dce:	f003 031f 	and.w	r3, r3, #31
 8001dd2:	2101      	movs	r1, #1
 8001dd4:	fa01 f303 	lsl.w	r3, r1, r3
 8001dd8:	ea42 0103 	orr.w	r1, r2, r3
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d10a      	bne.n	8001dfe <HAL_ADC_ConfigChannel+0x38e>
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	0e9b      	lsrs	r3, r3, #26
 8001dee:	3301      	adds	r3, #1
 8001df0:	f003 021f 	and.w	r2, r3, #31
 8001df4:	4613      	mov	r3, r2
 8001df6:	005b      	lsls	r3, r3, #1
 8001df8:	4413      	add	r3, r2
 8001dfa:	051b      	lsls	r3, r3, #20
 8001dfc:	e018      	b.n	8001e30 <HAL_ADC_ConfigChannel+0x3c0>
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e06:	fa93 f3a3 	rbit	r3, r3
 8001e0a:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8001e0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e0e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8001e10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d101      	bne.n	8001e1a <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 8001e16:	2320      	movs	r3, #32
 8001e18:	e003      	b.n	8001e22 <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 8001e1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e1c:	fab3 f383 	clz	r3, r3
 8001e20:	b2db      	uxtb	r3, r3
 8001e22:	3301      	adds	r3, #1
 8001e24:	f003 021f 	and.w	r2, r3, #31
 8001e28:	4613      	mov	r3, r2
 8001e2a:	005b      	lsls	r3, r3, #1
 8001e2c:	4413      	add	r3, r2
 8001e2e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001e30:	430b      	orrs	r3, r1
 8001e32:	e07e      	b.n	8001f32 <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d107      	bne.n	8001e50 <HAL_ADC_ConfigChannel+0x3e0>
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	0e9b      	lsrs	r3, r3, #26
 8001e46:	3301      	adds	r3, #1
 8001e48:	069b      	lsls	r3, r3, #26
 8001e4a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001e4e:	e015      	b.n	8001e7c <HAL_ADC_ConfigChannel+0x40c>
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e58:	fa93 f3a3 	rbit	r3, r3
 8001e5c:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8001e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e60:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8001e62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d101      	bne.n	8001e6c <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8001e68:	2320      	movs	r3, #32
 8001e6a:	e003      	b.n	8001e74 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8001e6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e6e:	fab3 f383 	clz	r3, r3
 8001e72:	b2db      	uxtb	r3, r3
 8001e74:	3301      	adds	r3, #1
 8001e76:	069b      	lsls	r3, r3, #26
 8001e78:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d109      	bne.n	8001e9c <HAL_ADC_ConfigChannel+0x42c>
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	0e9b      	lsrs	r3, r3, #26
 8001e8e:	3301      	adds	r3, #1
 8001e90:	f003 031f 	and.w	r3, r3, #31
 8001e94:	2101      	movs	r1, #1
 8001e96:	fa01 f303 	lsl.w	r3, r1, r3
 8001e9a:	e017      	b.n	8001ecc <HAL_ADC_ConfigChannel+0x45c>
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ea2:	69fb      	ldr	r3, [r7, #28]
 8001ea4:	fa93 f3a3 	rbit	r3, r3
 8001ea8:	61bb      	str	r3, [r7, #24]
  return result;
 8001eaa:	69bb      	ldr	r3, [r7, #24]
 8001eac:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8001eae:	6a3b      	ldr	r3, [r7, #32]
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d101      	bne.n	8001eb8 <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 8001eb4:	2320      	movs	r3, #32
 8001eb6:	e003      	b.n	8001ec0 <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 8001eb8:	6a3b      	ldr	r3, [r7, #32]
 8001eba:	fab3 f383 	clz	r3, r3
 8001ebe:	b2db      	uxtb	r3, r3
 8001ec0:	3301      	adds	r3, #1
 8001ec2:	f003 031f 	and.w	r3, r3, #31
 8001ec6:	2101      	movs	r1, #1
 8001ec8:	fa01 f303 	lsl.w	r3, r1, r3
 8001ecc:	ea42 0103 	orr.w	r1, r2, r3
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d10d      	bne.n	8001ef8 <HAL_ADC_ConfigChannel+0x488>
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	0e9b      	lsrs	r3, r3, #26
 8001ee2:	3301      	adds	r3, #1
 8001ee4:	f003 021f 	and.w	r2, r3, #31
 8001ee8:	4613      	mov	r3, r2
 8001eea:	005b      	lsls	r3, r3, #1
 8001eec:	4413      	add	r3, r2
 8001eee:	3b1e      	subs	r3, #30
 8001ef0:	051b      	lsls	r3, r3, #20
 8001ef2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001ef6:	e01b      	b.n	8001f30 <HAL_ADC_ConfigChannel+0x4c0>
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001efe:	693b      	ldr	r3, [r7, #16]
 8001f00:	fa93 f3a3 	rbit	r3, r3
 8001f04:	60fb      	str	r3, [r7, #12]
  return result;
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8001f0a:	697b      	ldr	r3, [r7, #20]
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d101      	bne.n	8001f14 <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 8001f10:	2320      	movs	r3, #32
 8001f12:	e003      	b.n	8001f1c <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 8001f14:	697b      	ldr	r3, [r7, #20]
 8001f16:	fab3 f383 	clz	r3, r3
 8001f1a:	b2db      	uxtb	r3, r3
 8001f1c:	3301      	adds	r3, #1
 8001f1e:	f003 021f 	and.w	r2, r3, #31
 8001f22:	4613      	mov	r3, r2
 8001f24:	005b      	lsls	r3, r3, #1
 8001f26:	4413      	add	r3, r2
 8001f28:	3b1e      	subs	r3, #30
 8001f2a:	051b      	lsls	r3, r3, #20
 8001f2c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001f30:	430b      	orrs	r3, r1
 8001f32:	683a      	ldr	r2, [r7, #0]
 8001f34:	6892      	ldr	r2, [r2, #8]
 8001f36:	4619      	mov	r1, r3
 8001f38:	f7ff f913 	bl	8001162 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	f280 80c6 	bge.w	80020d2 <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	4a67      	ldr	r2, [pc, #412]	; (80020e8 <HAL_ADC_ConfigChannel+0x678>)
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	d004      	beq.n	8001f5a <HAL_ADC_ConfigChannel+0x4ea>
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4a65      	ldr	r2, [pc, #404]	; (80020ec <HAL_ADC_ConfigChannel+0x67c>)
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d101      	bne.n	8001f5e <HAL_ADC_ConfigChannel+0x4ee>
 8001f5a:	4b65      	ldr	r3, [pc, #404]	; (80020f0 <HAL_ADC_ConfigChannel+0x680>)
 8001f5c:	e000      	b.n	8001f60 <HAL_ADC_ConfigChannel+0x4f0>
 8001f5e:	4b65      	ldr	r3, [pc, #404]	; (80020f4 <HAL_ADC_ConfigChannel+0x684>)
 8001f60:	4618      	mov	r0, r3
 8001f62:	f7ff f85d 	bl	8001020 <LL_ADC_GetCommonPathInternalCh>
 8001f66:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	4a5e      	ldr	r2, [pc, #376]	; (80020e8 <HAL_ADC_ConfigChannel+0x678>)
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d004      	beq.n	8001f7c <HAL_ADC_ConfigChannel+0x50c>
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	4a5d      	ldr	r2, [pc, #372]	; (80020ec <HAL_ADC_ConfigChannel+0x67c>)
 8001f78:	4293      	cmp	r3, r2
 8001f7a:	d10e      	bne.n	8001f9a <HAL_ADC_ConfigChannel+0x52a>
 8001f7c:	485a      	ldr	r0, [pc, #360]	; (80020e8 <HAL_ADC_ConfigChannel+0x678>)
 8001f7e:	f7ff f9bd 	bl	80012fc <LL_ADC_IsEnabled>
 8001f82:	4604      	mov	r4, r0
 8001f84:	4859      	ldr	r0, [pc, #356]	; (80020ec <HAL_ADC_ConfigChannel+0x67c>)
 8001f86:	f7ff f9b9 	bl	80012fc <LL_ADC_IsEnabled>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	4323      	orrs	r3, r4
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	bf0c      	ite	eq
 8001f92:	2301      	moveq	r3, #1
 8001f94:	2300      	movne	r3, #0
 8001f96:	b2db      	uxtb	r3, r3
 8001f98:	e008      	b.n	8001fac <HAL_ADC_ConfigChannel+0x53c>
 8001f9a:	4857      	ldr	r0, [pc, #348]	; (80020f8 <HAL_ADC_ConfigChannel+0x688>)
 8001f9c:	f7ff f9ae 	bl	80012fc <LL_ADC_IsEnabled>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	bf0c      	ite	eq
 8001fa6:	2301      	moveq	r3, #1
 8001fa8:	2300      	movne	r3, #0
 8001faa:	b2db      	uxtb	r3, r3
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d07d      	beq.n	80020ac <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4a51      	ldr	r2, [pc, #324]	; (80020fc <HAL_ADC_ConfigChannel+0x68c>)
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d130      	bne.n	800201c <HAL_ADC_ConfigChannel+0x5ac>
 8001fba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001fbc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d12b      	bne.n	800201c <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4a4b      	ldr	r2, [pc, #300]	; (80020f8 <HAL_ADC_ConfigChannel+0x688>)
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	f040 8081 	bne.w	80020d2 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	4a44      	ldr	r2, [pc, #272]	; (80020e8 <HAL_ADC_ConfigChannel+0x678>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d004      	beq.n	8001fe4 <HAL_ADC_ConfigChannel+0x574>
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4a43      	ldr	r2, [pc, #268]	; (80020ec <HAL_ADC_ConfigChannel+0x67c>)
 8001fe0:	4293      	cmp	r3, r2
 8001fe2:	d101      	bne.n	8001fe8 <HAL_ADC_ConfigChannel+0x578>
 8001fe4:	4a42      	ldr	r2, [pc, #264]	; (80020f0 <HAL_ADC_ConfigChannel+0x680>)
 8001fe6:	e000      	b.n	8001fea <HAL_ADC_ConfigChannel+0x57a>
 8001fe8:	4a42      	ldr	r2, [pc, #264]	; (80020f4 <HAL_ADC_ConfigChannel+0x684>)
 8001fea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001fec:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001ff0:	4619      	mov	r1, r3
 8001ff2:	4610      	mov	r0, r2
 8001ff4:	f7ff f801 	bl	8000ffa <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001ff8:	4b41      	ldr	r3, [pc, #260]	; (8002100 <HAL_ADC_ConfigChannel+0x690>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	099b      	lsrs	r3, r3, #6
 8001ffe:	4a41      	ldr	r2, [pc, #260]	; (8002104 <HAL_ADC_ConfigChannel+0x694>)
 8002000:	fba2 2303 	umull	r2, r3, r2, r3
 8002004:	099b      	lsrs	r3, r3, #6
 8002006:	3301      	adds	r3, #1
 8002008:	005b      	lsls	r3, r3, #1
 800200a:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800200c:	e002      	b.n	8002014 <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 800200e:	68bb      	ldr	r3, [r7, #8]
 8002010:	3b01      	subs	r3, #1
 8002012:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002014:	68bb      	ldr	r3, [r7, #8]
 8002016:	2b00      	cmp	r3, #0
 8002018:	d1f9      	bne.n	800200e <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800201a:	e05a      	b.n	80020d2 <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4a39      	ldr	r2, [pc, #228]	; (8002108 <HAL_ADC_ConfigChannel+0x698>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d11e      	bne.n	8002064 <HAL_ADC_ConfigChannel+0x5f4>
 8002026:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002028:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800202c:	2b00      	cmp	r3, #0
 800202e:	d119      	bne.n	8002064 <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4a30      	ldr	r2, [pc, #192]	; (80020f8 <HAL_ADC_ConfigChannel+0x688>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d14b      	bne.n	80020d2 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	4a2a      	ldr	r2, [pc, #168]	; (80020e8 <HAL_ADC_ConfigChannel+0x678>)
 8002040:	4293      	cmp	r3, r2
 8002042:	d004      	beq.n	800204e <HAL_ADC_ConfigChannel+0x5de>
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4a28      	ldr	r2, [pc, #160]	; (80020ec <HAL_ADC_ConfigChannel+0x67c>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d101      	bne.n	8002052 <HAL_ADC_ConfigChannel+0x5e2>
 800204e:	4a28      	ldr	r2, [pc, #160]	; (80020f0 <HAL_ADC_ConfigChannel+0x680>)
 8002050:	e000      	b.n	8002054 <HAL_ADC_ConfigChannel+0x5e4>
 8002052:	4a28      	ldr	r2, [pc, #160]	; (80020f4 <HAL_ADC_ConfigChannel+0x684>)
 8002054:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002056:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800205a:	4619      	mov	r1, r3
 800205c:	4610      	mov	r0, r2
 800205e:	f7fe ffcc 	bl	8000ffa <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002062:	e036      	b.n	80020d2 <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	4a28      	ldr	r2, [pc, #160]	; (800210c <HAL_ADC_ConfigChannel+0x69c>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d131      	bne.n	80020d2 <HAL_ADC_ConfigChannel+0x662>
 800206e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002070:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002074:	2b00      	cmp	r3, #0
 8002076:	d12c      	bne.n	80020d2 <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4a1e      	ldr	r2, [pc, #120]	; (80020f8 <HAL_ADC_ConfigChannel+0x688>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d127      	bne.n	80020d2 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	4a18      	ldr	r2, [pc, #96]	; (80020e8 <HAL_ADC_ConfigChannel+0x678>)
 8002088:	4293      	cmp	r3, r2
 800208a:	d004      	beq.n	8002096 <HAL_ADC_ConfigChannel+0x626>
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4a16      	ldr	r2, [pc, #88]	; (80020ec <HAL_ADC_ConfigChannel+0x67c>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d101      	bne.n	800209a <HAL_ADC_ConfigChannel+0x62a>
 8002096:	4a16      	ldr	r2, [pc, #88]	; (80020f0 <HAL_ADC_ConfigChannel+0x680>)
 8002098:	e000      	b.n	800209c <HAL_ADC_ConfigChannel+0x62c>
 800209a:	4a16      	ldr	r2, [pc, #88]	; (80020f4 <HAL_ADC_ConfigChannel+0x684>)
 800209c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800209e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80020a2:	4619      	mov	r1, r3
 80020a4:	4610      	mov	r0, r2
 80020a6:	f7fe ffa8 	bl	8000ffa <LL_ADC_SetCommonPathInternalCh>
 80020aa:	e012      	b.n	80020d2 <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020b0:	f043 0220 	orr.w	r2, r3, #32
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 80020b8:	2301      	movs	r3, #1
 80020ba:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80020be:	e008      	b.n	80020d2 <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020c4:	f043 0220 	orr.w	r2, r3, #32
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80020cc:	2301      	movs	r3, #1
 80020ce:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	2200      	movs	r2, #0
 80020d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80020da:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80020de:	4618      	mov	r0, r3
 80020e0:	3784      	adds	r7, #132	; 0x84
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bd90      	pop	{r4, r7, pc}
 80020e6:	bf00      	nop
 80020e8:	40022000 	.word	0x40022000
 80020ec:	40022100 	.word	0x40022100
 80020f0:	40022300 	.word	0x40022300
 80020f4:	58026300 	.word	0x58026300
 80020f8:	58026000 	.word	0x58026000
 80020fc:	cb840000 	.word	0xcb840000
 8002100:	24000000 	.word	0x24000000
 8002104:	053e2d63 	.word	0x053e2d63
 8002108:	c7520000 	.word	0xc7520000
 800210c:	cfb80000 	.word	0xcfb80000

08002110 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b084      	sub	sp, #16
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4618      	mov	r0, r3
 800211e:	f7ff f8ed 	bl	80012fc <LL_ADC_IsEnabled>
 8002122:	4603      	mov	r3, r0
 8002124:	2b00      	cmp	r3, #0
 8002126:	d16e      	bne.n	8002206 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	689a      	ldr	r2, [r3, #8]
 800212e:	4b38      	ldr	r3, [pc, #224]	; (8002210 <ADC_Enable+0x100>)
 8002130:	4013      	ands	r3, r2
 8002132:	2b00      	cmp	r3, #0
 8002134:	d00d      	beq.n	8002152 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800213a:	f043 0210 	orr.w	r2, r3, #16
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002146:	f043 0201 	orr.w	r2, r3, #1
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 800214e:	2301      	movs	r3, #1
 8002150:	e05a      	b.n	8002208 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	4618      	mov	r0, r3
 8002158:	f7ff f8bc 	bl	80012d4 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800215c:	f7fe fefe 	bl	8000f5c <HAL_GetTick>
 8002160:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4a2b      	ldr	r2, [pc, #172]	; (8002214 <ADC_Enable+0x104>)
 8002168:	4293      	cmp	r3, r2
 800216a:	d004      	beq.n	8002176 <ADC_Enable+0x66>
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4a29      	ldr	r2, [pc, #164]	; (8002218 <ADC_Enable+0x108>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d101      	bne.n	800217a <ADC_Enable+0x6a>
 8002176:	4b29      	ldr	r3, [pc, #164]	; (800221c <ADC_Enable+0x10c>)
 8002178:	e000      	b.n	800217c <ADC_Enable+0x6c>
 800217a:	4b29      	ldr	r3, [pc, #164]	; (8002220 <ADC_Enable+0x110>)
 800217c:	4618      	mov	r0, r3
 800217e:	f7ff f83f 	bl	8001200 <LL_ADC_GetMultimode>
 8002182:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4a23      	ldr	r2, [pc, #140]	; (8002218 <ADC_Enable+0x108>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d002      	beq.n	8002194 <ADC_Enable+0x84>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	e000      	b.n	8002196 <ADC_Enable+0x86>
 8002194:	4b1f      	ldr	r3, [pc, #124]	; (8002214 <ADC_Enable+0x104>)
 8002196:	687a      	ldr	r2, [r7, #4]
 8002198:	6812      	ldr	r2, [r2, #0]
 800219a:	4293      	cmp	r3, r2
 800219c:	d02c      	beq.n	80021f8 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800219e:	68bb      	ldr	r3, [r7, #8]
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d130      	bne.n	8002206 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80021a4:	e028      	b.n	80021f8 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	4618      	mov	r0, r3
 80021ac:	f7ff f8a6 	bl	80012fc <LL_ADC_IsEnabled>
 80021b0:	4603      	mov	r3, r0
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d104      	bne.n	80021c0 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4618      	mov	r0, r3
 80021bc:	f7ff f88a 	bl	80012d4 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80021c0:	f7fe fecc 	bl	8000f5c <HAL_GetTick>
 80021c4:	4602      	mov	r2, r0
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	1ad3      	subs	r3, r2, r3
 80021ca:	2b02      	cmp	r3, #2
 80021cc:	d914      	bls.n	80021f8 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f003 0301 	and.w	r3, r3, #1
 80021d8:	2b01      	cmp	r3, #1
 80021da:	d00d      	beq.n	80021f8 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021e0:	f043 0210 	orr.w	r2, r3, #16
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021ec:	f043 0201 	orr.w	r2, r3, #1
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 80021f4:	2301      	movs	r3, #1
 80021f6:	e007      	b.n	8002208 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f003 0301 	and.w	r3, r3, #1
 8002202:	2b01      	cmp	r3, #1
 8002204:	d1cf      	bne.n	80021a6 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002206:	2300      	movs	r3, #0
}
 8002208:	4618      	mov	r0, r3
 800220a:	3710      	adds	r7, #16
 800220c:	46bd      	mov	sp, r7
 800220e:	bd80      	pop	{r7, pc}
 8002210:	8000003f 	.word	0x8000003f
 8002214:	40022000 	.word	0x40022000
 8002218:	40022100 	.word	0x40022100
 800221c:	40022300 	.word	0x40022300
 8002220:	58026300 	.word	0x58026300

08002224 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b084      	sub	sp, #16
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4a79      	ldr	r2, [pc, #484]	; (8002418 <ADC_ConfigureBoostMode+0x1f4>)
 8002232:	4293      	cmp	r3, r2
 8002234:	d004      	beq.n	8002240 <ADC_ConfigureBoostMode+0x1c>
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	4a78      	ldr	r2, [pc, #480]	; (800241c <ADC_ConfigureBoostMode+0x1f8>)
 800223c:	4293      	cmp	r3, r2
 800223e:	d109      	bne.n	8002254 <ADC_ConfigureBoostMode+0x30>
 8002240:	4b77      	ldr	r3, [pc, #476]	; (8002420 <ADC_ConfigureBoostMode+0x1fc>)
 8002242:	689b      	ldr	r3, [r3, #8]
 8002244:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002248:	2b00      	cmp	r3, #0
 800224a:	bf14      	ite	ne
 800224c:	2301      	movne	r3, #1
 800224e:	2300      	moveq	r3, #0
 8002250:	b2db      	uxtb	r3, r3
 8002252:	e008      	b.n	8002266 <ADC_ConfigureBoostMode+0x42>
 8002254:	4b73      	ldr	r3, [pc, #460]	; (8002424 <ADC_ConfigureBoostMode+0x200>)
 8002256:	689b      	ldr	r3, [r3, #8]
 8002258:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800225c:	2b00      	cmp	r3, #0
 800225e:	bf14      	ite	ne
 8002260:	2301      	movne	r3, #1
 8002262:	2300      	moveq	r3, #0
 8002264:	b2db      	uxtb	r3, r3
 8002266:	2b00      	cmp	r3, #0
 8002268:	d01c      	beq.n	80022a4 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 800226a:	f001 ffd5 	bl	8004218 <HAL_RCC_GetHCLKFreq>
 800226e:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002278:	d010      	beq.n	800229c <ADC_ConfigureBoostMode+0x78>
 800227a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800227e:	d871      	bhi.n	8002364 <ADC_ConfigureBoostMode+0x140>
 8002280:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002284:	d002      	beq.n	800228c <ADC_ConfigureBoostMode+0x68>
 8002286:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800228a:	d16b      	bne.n	8002364 <ADC_ConfigureBoostMode+0x140>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	0c1b      	lsrs	r3, r3, #16
 8002292:	68fa      	ldr	r2, [r7, #12]
 8002294:	fbb2 f3f3 	udiv	r3, r2, r3
 8002298:	60fb      	str	r3, [r7, #12]
        break;
 800229a:	e066      	b.n	800236a <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	089b      	lsrs	r3, r3, #2
 80022a0:	60fb      	str	r3, [r7, #12]
        break;
 80022a2:	e062      	b.n	800236a <ADC_ConfigureBoostMode+0x146>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80022a4:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80022a8:	f002 ff26 	bl	80050f8 <HAL_RCCEx_GetPeriphCLKFreq>
 80022ac:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	685b      	ldr	r3, [r3, #4]
 80022b2:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80022b6:	d051      	beq.n	800235c <ADC_ConfigureBoostMode+0x138>
 80022b8:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80022bc:	d854      	bhi.n	8002368 <ADC_ConfigureBoostMode+0x144>
 80022be:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80022c2:	d047      	beq.n	8002354 <ADC_ConfigureBoostMode+0x130>
 80022c4:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80022c8:	d84e      	bhi.n	8002368 <ADC_ConfigureBoostMode+0x144>
 80022ca:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80022ce:	d03d      	beq.n	800234c <ADC_ConfigureBoostMode+0x128>
 80022d0:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80022d4:	d848      	bhi.n	8002368 <ADC_ConfigureBoostMode+0x144>
 80022d6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80022da:	d033      	beq.n	8002344 <ADC_ConfigureBoostMode+0x120>
 80022dc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80022e0:	d842      	bhi.n	8002368 <ADC_ConfigureBoostMode+0x144>
 80022e2:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80022e6:	d029      	beq.n	800233c <ADC_ConfigureBoostMode+0x118>
 80022e8:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80022ec:	d83c      	bhi.n	8002368 <ADC_ConfigureBoostMode+0x144>
 80022ee:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80022f2:	d01a      	beq.n	800232a <ADC_ConfigureBoostMode+0x106>
 80022f4:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80022f8:	d836      	bhi.n	8002368 <ADC_ConfigureBoostMode+0x144>
 80022fa:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80022fe:	d014      	beq.n	800232a <ADC_ConfigureBoostMode+0x106>
 8002300:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8002304:	d830      	bhi.n	8002368 <ADC_ConfigureBoostMode+0x144>
 8002306:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800230a:	d00e      	beq.n	800232a <ADC_ConfigureBoostMode+0x106>
 800230c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002310:	d82a      	bhi.n	8002368 <ADC_ConfigureBoostMode+0x144>
 8002312:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002316:	d008      	beq.n	800232a <ADC_ConfigureBoostMode+0x106>
 8002318:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800231c:	d824      	bhi.n	8002368 <ADC_ConfigureBoostMode+0x144>
 800231e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002322:	d002      	beq.n	800232a <ADC_ConfigureBoostMode+0x106>
 8002324:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002328:	d11e      	bne.n	8002368 <ADC_ConfigureBoostMode+0x144>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	685b      	ldr	r3, [r3, #4]
 800232e:	0c9b      	lsrs	r3, r3, #18
 8002330:	005b      	lsls	r3, r3, #1
 8002332:	68fa      	ldr	r2, [r7, #12]
 8002334:	fbb2 f3f3 	udiv	r3, r2, r3
 8002338:	60fb      	str	r3, [r7, #12]
        break;
 800233a:	e016      	b.n	800236a <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	091b      	lsrs	r3, r3, #4
 8002340:	60fb      	str	r3, [r7, #12]
        break;
 8002342:	e012      	b.n	800236a <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	095b      	lsrs	r3, r3, #5
 8002348:	60fb      	str	r3, [r7, #12]
        break;
 800234a:	e00e      	b.n	800236a <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	099b      	lsrs	r3, r3, #6
 8002350:	60fb      	str	r3, [r7, #12]
        break;
 8002352:	e00a      	b.n	800236a <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	09db      	lsrs	r3, r3, #7
 8002358:	60fb      	str	r3, [r7, #12]
        break;
 800235a:	e006      	b.n	800236a <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	0a1b      	lsrs	r3, r3, #8
 8002360:	60fb      	str	r3, [r7, #12]
        break;
 8002362:	e002      	b.n	800236a <ADC_ConfigureBoostMode+0x146>
        break;
 8002364:	bf00      	nop
 8002366:	e000      	b.n	800236a <ADC_ConfigureBoostMode+0x146>
      default:
        break;
 8002368:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 800236a:	f7fe fe27 	bl	8000fbc <HAL_GetREVID>
 800236e:	4603      	mov	r3, r0
 8002370:	f241 0203 	movw	r2, #4099	; 0x1003
 8002374:	4293      	cmp	r3, r2
 8002376:	d815      	bhi.n	80023a4 <ADC_ConfigureBoostMode+0x180>
  {
    if (freq > 20000000UL)
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	4a2b      	ldr	r2, [pc, #172]	; (8002428 <ADC_ConfigureBoostMode+0x204>)
 800237c:	4293      	cmp	r3, r2
 800237e:	d908      	bls.n	8002392 <ADC_ConfigureBoostMode+0x16e>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	689a      	ldr	r2, [r3, #8]
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800238e:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8002390:	e03e      	b.n	8002410 <ADC_ConfigureBoostMode+0x1ec>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	689a      	ldr	r2, [r3, #8]
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80023a0:	609a      	str	r2, [r3, #8]
}
 80023a2:	e035      	b.n	8002410 <ADC_ConfigureBoostMode+0x1ec>
    freq /= 2U; /* divider by 2 for Rev.V */
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	085b      	lsrs	r3, r3, #1
 80023a8:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	4a1f      	ldr	r2, [pc, #124]	; (800242c <ADC_ConfigureBoostMode+0x208>)
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d808      	bhi.n	80023c4 <ADC_ConfigureBoostMode+0x1a0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	689a      	ldr	r2, [r3, #8]
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80023c0:	609a      	str	r2, [r3, #8]
}
 80023c2:	e025      	b.n	8002410 <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 12500000UL)
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	4a1a      	ldr	r2, [pc, #104]	; (8002430 <ADC_ConfigureBoostMode+0x20c>)
 80023c8:	4293      	cmp	r3, r2
 80023ca:	d80a      	bhi.n	80023e2 <ADC_ConfigureBoostMode+0x1be>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	689b      	ldr	r3, [r3, #8]
 80023d2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80023de:	609a      	str	r2, [r3, #8]
}
 80023e0:	e016      	b.n	8002410 <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 25000000UL)
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	4a13      	ldr	r2, [pc, #76]	; (8002434 <ADC_ConfigureBoostMode+0x210>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d80a      	bhi.n	8002400 <ADC_ConfigureBoostMode+0x1dc>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	689b      	ldr	r3, [r3, #8]
 80023f0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023fc:	609a      	str	r2, [r3, #8]
}
 80023fe:	e007      	b.n	8002410 <ADC_ConfigureBoostMode+0x1ec>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	689a      	ldr	r2, [r3, #8]
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800240e:	609a      	str	r2, [r3, #8]
}
 8002410:	bf00      	nop
 8002412:	3710      	adds	r7, #16
 8002414:	46bd      	mov	sp, r7
 8002416:	bd80      	pop	{r7, pc}
 8002418:	40022000 	.word	0x40022000
 800241c:	40022100 	.word	0x40022100
 8002420:	40022300 	.word	0x40022300
 8002424:	58026300 	.word	0x58026300
 8002428:	01312d00 	.word	0x01312d00
 800242c:	005f5e10 	.word	0x005f5e10
 8002430:	00bebc20 	.word	0x00bebc20
 8002434:	017d7840 	.word	0x017d7840

08002438 <LL_ADC_IsEnabled>:
{
 8002438:	b480      	push	{r7}
 800243a:	b083      	sub	sp, #12
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	689b      	ldr	r3, [r3, #8]
 8002444:	f003 0301 	and.w	r3, r3, #1
 8002448:	2b01      	cmp	r3, #1
 800244a:	d101      	bne.n	8002450 <LL_ADC_IsEnabled+0x18>
 800244c:	2301      	movs	r3, #1
 800244e:	e000      	b.n	8002452 <LL_ADC_IsEnabled+0x1a>
 8002450:	2300      	movs	r3, #0
}
 8002452:	4618      	mov	r0, r3
 8002454:	370c      	adds	r7, #12
 8002456:	46bd      	mov	sp, r7
 8002458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245c:	4770      	bx	lr

0800245e <LL_ADC_REG_IsConversionOngoing>:
{
 800245e:	b480      	push	{r7}
 8002460:	b083      	sub	sp, #12
 8002462:	af00      	add	r7, sp, #0
 8002464:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	689b      	ldr	r3, [r3, #8]
 800246a:	f003 0304 	and.w	r3, r3, #4
 800246e:	2b04      	cmp	r3, #4
 8002470:	d101      	bne.n	8002476 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002472:	2301      	movs	r3, #1
 8002474:	e000      	b.n	8002478 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002476:	2300      	movs	r3, #0
}
 8002478:	4618      	mov	r0, r3
 800247a:	370c      	adds	r7, #12
 800247c:	46bd      	mov	sp, r7
 800247e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002482:	4770      	bx	lr

08002484 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002484:	b590      	push	{r4, r7, lr}
 8002486:	b09f      	sub	sp, #124	; 0x7c
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
 800248c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800248e:	2300      	movs	r3, #0
 8002490:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800249a:	2b01      	cmp	r3, #1
 800249c:	d101      	bne.n	80024a2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800249e:	2302      	movs	r3, #2
 80024a0:	e0be      	b.n	8002620 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	2201      	movs	r2, #1
 80024a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 80024aa:	2300      	movs	r3, #0
 80024ac:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 80024ae:	2300      	movs	r3, #0
 80024b0:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4a5c      	ldr	r2, [pc, #368]	; (8002628 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80024b8:	4293      	cmp	r3, r2
 80024ba:	d102      	bne.n	80024c2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80024bc:	4b5b      	ldr	r3, [pc, #364]	; (800262c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80024be:	60bb      	str	r3, [r7, #8]
 80024c0:	e001      	b.n	80024c6 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80024c2:	2300      	movs	r3, #0
 80024c4:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80024c6:	68bb      	ldr	r3, [r7, #8]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d10b      	bne.n	80024e4 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024d0:	f043 0220 	orr.w	r2, r3, #32
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2200      	movs	r2, #0
 80024dc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 80024e0:	2301      	movs	r3, #1
 80024e2:	e09d      	b.n	8002620 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80024e4:	68bb      	ldr	r3, [r7, #8]
 80024e6:	4618      	mov	r0, r3
 80024e8:	f7ff ffb9 	bl	800245e <LL_ADC_REG_IsConversionOngoing>
 80024ec:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4618      	mov	r0, r3
 80024f4:	f7ff ffb3 	bl	800245e <LL_ADC_REG_IsConversionOngoing>
 80024f8:	4603      	mov	r3, r0
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d17f      	bne.n	80025fe <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80024fe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002500:	2b00      	cmp	r3, #0
 8002502:	d17c      	bne.n	80025fe <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4a47      	ldr	r2, [pc, #284]	; (8002628 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800250a:	4293      	cmp	r3, r2
 800250c:	d004      	beq.n	8002518 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4a46      	ldr	r2, [pc, #280]	; (800262c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002514:	4293      	cmp	r3, r2
 8002516:	d101      	bne.n	800251c <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8002518:	4b45      	ldr	r3, [pc, #276]	; (8002630 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800251a:	e000      	b.n	800251e <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 800251c:	4b45      	ldr	r3, [pc, #276]	; (8002634 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800251e:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	2b00      	cmp	r3, #0
 8002526:	d039      	beq.n	800259c <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8002528:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800252a:	689b      	ldr	r3, [r3, #8]
 800252c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	431a      	orrs	r2, r3
 8002536:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002538:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4a3a      	ldr	r2, [pc, #232]	; (8002628 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002540:	4293      	cmp	r3, r2
 8002542:	d004      	beq.n	800254e <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4a38      	ldr	r2, [pc, #224]	; (800262c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d10e      	bne.n	800256c <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 800254e:	4836      	ldr	r0, [pc, #216]	; (8002628 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002550:	f7ff ff72 	bl	8002438 <LL_ADC_IsEnabled>
 8002554:	4604      	mov	r4, r0
 8002556:	4835      	ldr	r0, [pc, #212]	; (800262c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002558:	f7ff ff6e 	bl	8002438 <LL_ADC_IsEnabled>
 800255c:	4603      	mov	r3, r0
 800255e:	4323      	orrs	r3, r4
 8002560:	2b00      	cmp	r3, #0
 8002562:	bf0c      	ite	eq
 8002564:	2301      	moveq	r3, #1
 8002566:	2300      	movne	r3, #0
 8002568:	b2db      	uxtb	r3, r3
 800256a:	e008      	b.n	800257e <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 800256c:	4832      	ldr	r0, [pc, #200]	; (8002638 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 800256e:	f7ff ff63 	bl	8002438 <LL_ADC_IsEnabled>
 8002572:	4603      	mov	r3, r0
 8002574:	2b00      	cmp	r3, #0
 8002576:	bf0c      	ite	eq
 8002578:	2301      	moveq	r3, #1
 800257a:	2300      	movne	r3, #0
 800257c:	b2db      	uxtb	r3, r3
 800257e:	2b00      	cmp	r3, #0
 8002580:	d047      	beq.n	8002612 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002582:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002584:	689a      	ldr	r2, [r3, #8]
 8002586:	4b2d      	ldr	r3, [pc, #180]	; (800263c <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8002588:	4013      	ands	r3, r2
 800258a:	683a      	ldr	r2, [r7, #0]
 800258c:	6811      	ldr	r1, [r2, #0]
 800258e:	683a      	ldr	r2, [r7, #0]
 8002590:	6892      	ldr	r2, [r2, #8]
 8002592:	430a      	orrs	r2, r1
 8002594:	431a      	orrs	r2, r3
 8002596:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002598:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800259a:	e03a      	b.n	8002612 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 800259c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800259e:	689b      	ldr	r3, [r3, #8]
 80025a0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80025a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80025a6:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4a1e      	ldr	r2, [pc, #120]	; (8002628 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d004      	beq.n	80025bc <HAL_ADCEx_MultiModeConfigChannel+0x138>
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	4a1d      	ldr	r2, [pc, #116]	; (800262c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80025b8:	4293      	cmp	r3, r2
 80025ba:	d10e      	bne.n	80025da <HAL_ADCEx_MultiModeConfigChannel+0x156>
 80025bc:	481a      	ldr	r0, [pc, #104]	; (8002628 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80025be:	f7ff ff3b 	bl	8002438 <LL_ADC_IsEnabled>
 80025c2:	4604      	mov	r4, r0
 80025c4:	4819      	ldr	r0, [pc, #100]	; (800262c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80025c6:	f7ff ff37 	bl	8002438 <LL_ADC_IsEnabled>
 80025ca:	4603      	mov	r3, r0
 80025cc:	4323      	orrs	r3, r4
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	bf0c      	ite	eq
 80025d2:	2301      	moveq	r3, #1
 80025d4:	2300      	movne	r3, #0
 80025d6:	b2db      	uxtb	r3, r3
 80025d8:	e008      	b.n	80025ec <HAL_ADCEx_MultiModeConfigChannel+0x168>
 80025da:	4817      	ldr	r0, [pc, #92]	; (8002638 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80025dc:	f7ff ff2c 	bl	8002438 <LL_ADC_IsEnabled>
 80025e0:	4603      	mov	r3, r0
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	bf0c      	ite	eq
 80025e6:	2301      	moveq	r3, #1
 80025e8:	2300      	movne	r3, #0
 80025ea:	b2db      	uxtb	r3, r3
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d010      	beq.n	8002612 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80025f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80025f2:	689a      	ldr	r2, [r3, #8]
 80025f4:	4b11      	ldr	r3, [pc, #68]	; (800263c <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 80025f6:	4013      	ands	r3, r2
 80025f8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80025fa:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80025fc:	e009      	b.n	8002612 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002602:	f043 0220 	orr.w	r2, r3, #32
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800260a:	2301      	movs	r3, #1
 800260c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8002610:	e000      	b.n	8002614 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002612:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2200      	movs	r2, #0
 8002618:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800261c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8002620:	4618      	mov	r0, r3
 8002622:	377c      	adds	r7, #124	; 0x7c
 8002624:	46bd      	mov	sp, r7
 8002626:	bd90      	pop	{r4, r7, pc}
 8002628:	40022000 	.word	0x40022000
 800262c:	40022100 	.word	0x40022100
 8002630:	40022300 	.word	0x40022300
 8002634:	58026300 	.word	0x58026300
 8002638:	58026000 	.word	0x58026000
 800263c:	fffff0e0 	.word	0xfffff0e0

08002640 <__NVIC_SetPriorityGrouping>:
{
 8002640:	b480      	push	{r7}
 8002642:	b085      	sub	sp, #20
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	f003 0307 	and.w	r3, r3, #7
 800264e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002650:	4b0b      	ldr	r3, [pc, #44]	; (8002680 <__NVIC_SetPriorityGrouping+0x40>)
 8002652:	68db      	ldr	r3, [r3, #12]
 8002654:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002656:	68ba      	ldr	r2, [r7, #8]
 8002658:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800265c:	4013      	ands	r3, r2
 800265e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002664:	68bb      	ldr	r3, [r7, #8]
 8002666:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002668:	4b06      	ldr	r3, [pc, #24]	; (8002684 <__NVIC_SetPriorityGrouping+0x44>)
 800266a:	4313      	orrs	r3, r2
 800266c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800266e:	4a04      	ldr	r2, [pc, #16]	; (8002680 <__NVIC_SetPriorityGrouping+0x40>)
 8002670:	68bb      	ldr	r3, [r7, #8]
 8002672:	60d3      	str	r3, [r2, #12]
}
 8002674:	bf00      	nop
 8002676:	3714      	adds	r7, #20
 8002678:	46bd      	mov	sp, r7
 800267a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267e:	4770      	bx	lr
 8002680:	e000ed00 	.word	0xe000ed00
 8002684:	05fa0000 	.word	0x05fa0000

08002688 <__NVIC_GetPriorityGrouping>:
{
 8002688:	b480      	push	{r7}
 800268a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800268c:	4b04      	ldr	r3, [pc, #16]	; (80026a0 <__NVIC_GetPriorityGrouping+0x18>)
 800268e:	68db      	ldr	r3, [r3, #12]
 8002690:	0a1b      	lsrs	r3, r3, #8
 8002692:	f003 0307 	and.w	r3, r3, #7
}
 8002696:	4618      	mov	r0, r3
 8002698:	46bd      	mov	sp, r7
 800269a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269e:	4770      	bx	lr
 80026a0:	e000ed00 	.word	0xe000ed00

080026a4 <__NVIC_SetPriority>:
{
 80026a4:	b480      	push	{r7}
 80026a6:	b083      	sub	sp, #12
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	4603      	mov	r3, r0
 80026ac:	6039      	str	r1, [r7, #0]
 80026ae:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80026b0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	db0a      	blt.n	80026ce <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	b2da      	uxtb	r2, r3
 80026bc:	490c      	ldr	r1, [pc, #48]	; (80026f0 <__NVIC_SetPriority+0x4c>)
 80026be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80026c2:	0112      	lsls	r2, r2, #4
 80026c4:	b2d2      	uxtb	r2, r2
 80026c6:	440b      	add	r3, r1
 80026c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80026cc:	e00a      	b.n	80026e4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	b2da      	uxtb	r2, r3
 80026d2:	4908      	ldr	r1, [pc, #32]	; (80026f4 <__NVIC_SetPriority+0x50>)
 80026d4:	88fb      	ldrh	r3, [r7, #6]
 80026d6:	f003 030f 	and.w	r3, r3, #15
 80026da:	3b04      	subs	r3, #4
 80026dc:	0112      	lsls	r2, r2, #4
 80026de:	b2d2      	uxtb	r2, r2
 80026e0:	440b      	add	r3, r1
 80026e2:	761a      	strb	r2, [r3, #24]
}
 80026e4:	bf00      	nop
 80026e6:	370c      	adds	r7, #12
 80026e8:	46bd      	mov	sp, r7
 80026ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ee:	4770      	bx	lr
 80026f0:	e000e100 	.word	0xe000e100
 80026f4:	e000ed00 	.word	0xe000ed00

080026f8 <NVIC_EncodePriority>:
{
 80026f8:	b480      	push	{r7}
 80026fa:	b089      	sub	sp, #36	; 0x24
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	60f8      	str	r0, [r7, #12]
 8002700:	60b9      	str	r1, [r7, #8]
 8002702:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	f003 0307 	and.w	r3, r3, #7
 800270a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800270c:	69fb      	ldr	r3, [r7, #28]
 800270e:	f1c3 0307 	rsb	r3, r3, #7
 8002712:	2b04      	cmp	r3, #4
 8002714:	bf28      	it	cs
 8002716:	2304      	movcs	r3, #4
 8002718:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800271a:	69fb      	ldr	r3, [r7, #28]
 800271c:	3304      	adds	r3, #4
 800271e:	2b06      	cmp	r3, #6
 8002720:	d902      	bls.n	8002728 <NVIC_EncodePriority+0x30>
 8002722:	69fb      	ldr	r3, [r7, #28]
 8002724:	3b03      	subs	r3, #3
 8002726:	e000      	b.n	800272a <NVIC_EncodePriority+0x32>
 8002728:	2300      	movs	r3, #0
 800272a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800272c:	f04f 32ff 	mov.w	r2, #4294967295
 8002730:	69bb      	ldr	r3, [r7, #24]
 8002732:	fa02 f303 	lsl.w	r3, r2, r3
 8002736:	43da      	mvns	r2, r3
 8002738:	68bb      	ldr	r3, [r7, #8]
 800273a:	401a      	ands	r2, r3
 800273c:	697b      	ldr	r3, [r7, #20]
 800273e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002740:	f04f 31ff 	mov.w	r1, #4294967295
 8002744:	697b      	ldr	r3, [r7, #20]
 8002746:	fa01 f303 	lsl.w	r3, r1, r3
 800274a:	43d9      	mvns	r1, r3
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002750:	4313      	orrs	r3, r2
}
 8002752:	4618      	mov	r0, r3
 8002754:	3724      	adds	r7, #36	; 0x24
 8002756:	46bd      	mov	sp, r7
 8002758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275c:	4770      	bx	lr
	...

08002760 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b082      	sub	sp, #8
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	3b01      	subs	r3, #1
 800276c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002770:	d301      	bcc.n	8002776 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002772:	2301      	movs	r3, #1
 8002774:	e00f      	b.n	8002796 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002776:	4a0a      	ldr	r2, [pc, #40]	; (80027a0 <SysTick_Config+0x40>)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	3b01      	subs	r3, #1
 800277c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800277e:	210f      	movs	r1, #15
 8002780:	f04f 30ff 	mov.w	r0, #4294967295
 8002784:	f7ff ff8e 	bl	80026a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002788:	4b05      	ldr	r3, [pc, #20]	; (80027a0 <SysTick_Config+0x40>)
 800278a:	2200      	movs	r2, #0
 800278c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800278e:	4b04      	ldr	r3, [pc, #16]	; (80027a0 <SysTick_Config+0x40>)
 8002790:	2207      	movs	r2, #7
 8002792:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002794:	2300      	movs	r3, #0
}
 8002796:	4618      	mov	r0, r3
 8002798:	3708      	adds	r7, #8
 800279a:	46bd      	mov	sp, r7
 800279c:	bd80      	pop	{r7, pc}
 800279e:	bf00      	nop
 80027a0:	e000e010 	.word	0xe000e010

080027a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b082      	sub	sp, #8
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80027ac:	6878      	ldr	r0, [r7, #4]
 80027ae:	f7ff ff47 	bl	8002640 <__NVIC_SetPriorityGrouping>
}
 80027b2:	bf00      	nop
 80027b4:	3708      	adds	r7, #8
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bd80      	pop	{r7, pc}

080027ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027ba:	b580      	push	{r7, lr}
 80027bc:	b086      	sub	sp, #24
 80027be:	af00      	add	r7, sp, #0
 80027c0:	4603      	mov	r3, r0
 80027c2:	60b9      	str	r1, [r7, #8]
 80027c4:	607a      	str	r2, [r7, #4]
 80027c6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80027c8:	f7ff ff5e 	bl	8002688 <__NVIC_GetPriorityGrouping>
 80027cc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80027ce:	687a      	ldr	r2, [r7, #4]
 80027d0:	68b9      	ldr	r1, [r7, #8]
 80027d2:	6978      	ldr	r0, [r7, #20]
 80027d4:	f7ff ff90 	bl	80026f8 <NVIC_EncodePriority>
 80027d8:	4602      	mov	r2, r0
 80027da:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80027de:	4611      	mov	r1, r2
 80027e0:	4618      	mov	r0, r3
 80027e2:	f7ff ff5f 	bl	80026a4 <__NVIC_SetPriority>
}
 80027e6:	bf00      	nop
 80027e8:	3718      	adds	r7, #24
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bd80      	pop	{r7, pc}

080027ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80027ee:	b580      	push	{r7, lr}
 80027f0:	b082      	sub	sp, #8
 80027f2:	af00      	add	r7, sp, #0
 80027f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80027f6:	6878      	ldr	r0, [r7, #4]
 80027f8:	f7ff ffb2 	bl	8002760 <SysTick_Config>
 80027fc:	4603      	mov	r3, r0
}
 80027fe:	4618      	mov	r0, r3
 8002800:	3708      	adds	r7, #8
 8002802:	46bd      	mov	sp, r7
 8002804:	bd80      	pop	{r7, pc}
	...

08002808 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002808:	b480      	push	{r7}
 800280a:	b089      	sub	sp, #36	; 0x24
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
 8002810:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002812:	2300      	movs	r3, #0
 8002814:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002816:	4b89      	ldr	r3, [pc, #548]	; (8002a3c <HAL_GPIO_Init+0x234>)
 8002818:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800281a:	e194      	b.n	8002b46 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	681a      	ldr	r2, [r3, #0]
 8002820:	2101      	movs	r1, #1
 8002822:	69fb      	ldr	r3, [r7, #28]
 8002824:	fa01 f303 	lsl.w	r3, r1, r3
 8002828:	4013      	ands	r3, r2
 800282a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800282c:	693b      	ldr	r3, [r7, #16]
 800282e:	2b00      	cmp	r3, #0
 8002830:	f000 8186 	beq.w	8002b40 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	2b01      	cmp	r3, #1
 800283a:	d00b      	beq.n	8002854 <HAL_GPIO_Init+0x4c>
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	685b      	ldr	r3, [r3, #4]
 8002840:	2b02      	cmp	r3, #2
 8002842:	d007      	beq.n	8002854 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002848:	2b11      	cmp	r3, #17
 800284a:	d003      	beq.n	8002854 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	685b      	ldr	r3, [r3, #4]
 8002850:	2b12      	cmp	r3, #18
 8002852:	d130      	bne.n	80028b6 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	689b      	ldr	r3, [r3, #8]
 8002858:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800285a:	69fb      	ldr	r3, [r7, #28]
 800285c:	005b      	lsls	r3, r3, #1
 800285e:	2203      	movs	r2, #3
 8002860:	fa02 f303 	lsl.w	r3, r2, r3
 8002864:	43db      	mvns	r3, r3
 8002866:	69ba      	ldr	r2, [r7, #24]
 8002868:	4013      	ands	r3, r2
 800286a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	68da      	ldr	r2, [r3, #12]
 8002870:	69fb      	ldr	r3, [r7, #28]
 8002872:	005b      	lsls	r3, r3, #1
 8002874:	fa02 f303 	lsl.w	r3, r2, r3
 8002878:	69ba      	ldr	r2, [r7, #24]
 800287a:	4313      	orrs	r3, r2
 800287c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	69ba      	ldr	r2, [r7, #24]
 8002882:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800288a:	2201      	movs	r2, #1
 800288c:	69fb      	ldr	r3, [r7, #28]
 800288e:	fa02 f303 	lsl.w	r3, r2, r3
 8002892:	43db      	mvns	r3, r3
 8002894:	69ba      	ldr	r2, [r7, #24]
 8002896:	4013      	ands	r3, r2
 8002898:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	091b      	lsrs	r3, r3, #4
 80028a0:	f003 0201 	and.w	r2, r3, #1
 80028a4:	69fb      	ldr	r3, [r7, #28]
 80028a6:	fa02 f303 	lsl.w	r3, r2, r3
 80028aa:	69ba      	ldr	r2, [r7, #24]
 80028ac:	4313      	orrs	r3, r2
 80028ae:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	69ba      	ldr	r2, [r7, #24]
 80028b4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	68db      	ldr	r3, [r3, #12]
 80028ba:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80028bc:	69fb      	ldr	r3, [r7, #28]
 80028be:	005b      	lsls	r3, r3, #1
 80028c0:	2203      	movs	r2, #3
 80028c2:	fa02 f303 	lsl.w	r3, r2, r3
 80028c6:	43db      	mvns	r3, r3
 80028c8:	69ba      	ldr	r2, [r7, #24]
 80028ca:	4013      	ands	r3, r2
 80028cc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	689a      	ldr	r2, [r3, #8]
 80028d2:	69fb      	ldr	r3, [r7, #28]
 80028d4:	005b      	lsls	r3, r3, #1
 80028d6:	fa02 f303 	lsl.w	r3, r2, r3
 80028da:	69ba      	ldr	r2, [r7, #24]
 80028dc:	4313      	orrs	r3, r2
 80028de:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	69ba      	ldr	r2, [r7, #24]
 80028e4:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	685b      	ldr	r3, [r3, #4]
 80028ea:	2b02      	cmp	r3, #2
 80028ec:	d003      	beq.n	80028f6 <HAL_GPIO_Init+0xee>
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	685b      	ldr	r3, [r3, #4]
 80028f2:	2b12      	cmp	r3, #18
 80028f4:	d123      	bne.n	800293e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80028f6:	69fb      	ldr	r3, [r7, #28]
 80028f8:	08da      	lsrs	r2, r3, #3
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	3208      	adds	r2, #8
 80028fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002902:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002904:	69fb      	ldr	r3, [r7, #28]
 8002906:	f003 0307 	and.w	r3, r3, #7
 800290a:	009b      	lsls	r3, r3, #2
 800290c:	220f      	movs	r2, #15
 800290e:	fa02 f303 	lsl.w	r3, r2, r3
 8002912:	43db      	mvns	r3, r3
 8002914:	69ba      	ldr	r2, [r7, #24]
 8002916:	4013      	ands	r3, r2
 8002918:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	691a      	ldr	r2, [r3, #16]
 800291e:	69fb      	ldr	r3, [r7, #28]
 8002920:	f003 0307 	and.w	r3, r3, #7
 8002924:	009b      	lsls	r3, r3, #2
 8002926:	fa02 f303 	lsl.w	r3, r2, r3
 800292a:	69ba      	ldr	r2, [r7, #24]
 800292c:	4313      	orrs	r3, r2
 800292e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002930:	69fb      	ldr	r3, [r7, #28]
 8002932:	08da      	lsrs	r2, r3, #3
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	3208      	adds	r2, #8
 8002938:	69b9      	ldr	r1, [r7, #24]
 800293a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002944:	69fb      	ldr	r3, [r7, #28]
 8002946:	005b      	lsls	r3, r3, #1
 8002948:	2203      	movs	r2, #3
 800294a:	fa02 f303 	lsl.w	r3, r2, r3
 800294e:	43db      	mvns	r3, r3
 8002950:	69ba      	ldr	r2, [r7, #24]
 8002952:	4013      	ands	r3, r2
 8002954:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	685b      	ldr	r3, [r3, #4]
 800295a:	f003 0203 	and.w	r2, r3, #3
 800295e:	69fb      	ldr	r3, [r7, #28]
 8002960:	005b      	lsls	r3, r3, #1
 8002962:	fa02 f303 	lsl.w	r3, r2, r3
 8002966:	69ba      	ldr	r2, [r7, #24]
 8002968:	4313      	orrs	r3, r2
 800296a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	69ba      	ldr	r2, [r7, #24]
 8002970:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800297a:	2b00      	cmp	r3, #0
 800297c:	f000 80e0 	beq.w	8002b40 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002980:	4b2f      	ldr	r3, [pc, #188]	; (8002a40 <HAL_GPIO_Init+0x238>)
 8002982:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002986:	4a2e      	ldr	r2, [pc, #184]	; (8002a40 <HAL_GPIO_Init+0x238>)
 8002988:	f043 0302 	orr.w	r3, r3, #2
 800298c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002990:	4b2b      	ldr	r3, [pc, #172]	; (8002a40 <HAL_GPIO_Init+0x238>)
 8002992:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002996:	f003 0302 	and.w	r3, r3, #2
 800299a:	60fb      	str	r3, [r7, #12]
 800299c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800299e:	4a29      	ldr	r2, [pc, #164]	; (8002a44 <HAL_GPIO_Init+0x23c>)
 80029a0:	69fb      	ldr	r3, [r7, #28]
 80029a2:	089b      	lsrs	r3, r3, #2
 80029a4:	3302      	adds	r3, #2
 80029a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80029ac:	69fb      	ldr	r3, [r7, #28]
 80029ae:	f003 0303 	and.w	r3, r3, #3
 80029b2:	009b      	lsls	r3, r3, #2
 80029b4:	220f      	movs	r2, #15
 80029b6:	fa02 f303 	lsl.w	r3, r2, r3
 80029ba:	43db      	mvns	r3, r3
 80029bc:	69ba      	ldr	r2, [r7, #24]
 80029be:	4013      	ands	r3, r2
 80029c0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	4a20      	ldr	r2, [pc, #128]	; (8002a48 <HAL_GPIO_Init+0x240>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d052      	beq.n	8002a70 <HAL_GPIO_Init+0x268>
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	4a1f      	ldr	r2, [pc, #124]	; (8002a4c <HAL_GPIO_Init+0x244>)
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d031      	beq.n	8002a36 <HAL_GPIO_Init+0x22e>
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	4a1e      	ldr	r2, [pc, #120]	; (8002a50 <HAL_GPIO_Init+0x248>)
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d02b      	beq.n	8002a32 <HAL_GPIO_Init+0x22a>
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	4a1d      	ldr	r2, [pc, #116]	; (8002a54 <HAL_GPIO_Init+0x24c>)
 80029de:	4293      	cmp	r3, r2
 80029e0:	d025      	beq.n	8002a2e <HAL_GPIO_Init+0x226>
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	4a1c      	ldr	r2, [pc, #112]	; (8002a58 <HAL_GPIO_Init+0x250>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d01f      	beq.n	8002a2a <HAL_GPIO_Init+0x222>
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	4a1b      	ldr	r2, [pc, #108]	; (8002a5c <HAL_GPIO_Init+0x254>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d019      	beq.n	8002a26 <HAL_GPIO_Init+0x21e>
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	4a1a      	ldr	r2, [pc, #104]	; (8002a60 <HAL_GPIO_Init+0x258>)
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d013      	beq.n	8002a22 <HAL_GPIO_Init+0x21a>
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	4a19      	ldr	r2, [pc, #100]	; (8002a64 <HAL_GPIO_Init+0x25c>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d00d      	beq.n	8002a1e <HAL_GPIO_Init+0x216>
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	4a18      	ldr	r2, [pc, #96]	; (8002a68 <HAL_GPIO_Init+0x260>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d007      	beq.n	8002a1a <HAL_GPIO_Init+0x212>
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	4a17      	ldr	r2, [pc, #92]	; (8002a6c <HAL_GPIO_Init+0x264>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d101      	bne.n	8002a16 <HAL_GPIO_Init+0x20e>
 8002a12:	2309      	movs	r3, #9
 8002a14:	e02d      	b.n	8002a72 <HAL_GPIO_Init+0x26a>
 8002a16:	230a      	movs	r3, #10
 8002a18:	e02b      	b.n	8002a72 <HAL_GPIO_Init+0x26a>
 8002a1a:	2308      	movs	r3, #8
 8002a1c:	e029      	b.n	8002a72 <HAL_GPIO_Init+0x26a>
 8002a1e:	2307      	movs	r3, #7
 8002a20:	e027      	b.n	8002a72 <HAL_GPIO_Init+0x26a>
 8002a22:	2306      	movs	r3, #6
 8002a24:	e025      	b.n	8002a72 <HAL_GPIO_Init+0x26a>
 8002a26:	2305      	movs	r3, #5
 8002a28:	e023      	b.n	8002a72 <HAL_GPIO_Init+0x26a>
 8002a2a:	2304      	movs	r3, #4
 8002a2c:	e021      	b.n	8002a72 <HAL_GPIO_Init+0x26a>
 8002a2e:	2303      	movs	r3, #3
 8002a30:	e01f      	b.n	8002a72 <HAL_GPIO_Init+0x26a>
 8002a32:	2302      	movs	r3, #2
 8002a34:	e01d      	b.n	8002a72 <HAL_GPIO_Init+0x26a>
 8002a36:	2301      	movs	r3, #1
 8002a38:	e01b      	b.n	8002a72 <HAL_GPIO_Init+0x26a>
 8002a3a:	bf00      	nop
 8002a3c:	58000080 	.word	0x58000080
 8002a40:	58024400 	.word	0x58024400
 8002a44:	58000400 	.word	0x58000400
 8002a48:	58020000 	.word	0x58020000
 8002a4c:	58020400 	.word	0x58020400
 8002a50:	58020800 	.word	0x58020800
 8002a54:	58020c00 	.word	0x58020c00
 8002a58:	58021000 	.word	0x58021000
 8002a5c:	58021400 	.word	0x58021400
 8002a60:	58021800 	.word	0x58021800
 8002a64:	58021c00 	.word	0x58021c00
 8002a68:	58022000 	.word	0x58022000
 8002a6c:	58022400 	.word	0x58022400
 8002a70:	2300      	movs	r3, #0
 8002a72:	69fa      	ldr	r2, [r7, #28]
 8002a74:	f002 0203 	and.w	r2, r2, #3
 8002a78:	0092      	lsls	r2, r2, #2
 8002a7a:	4093      	lsls	r3, r2
 8002a7c:	69ba      	ldr	r2, [r7, #24]
 8002a7e:	4313      	orrs	r3, r2
 8002a80:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002a82:	4938      	ldr	r1, [pc, #224]	; (8002b64 <HAL_GPIO_Init+0x35c>)
 8002a84:	69fb      	ldr	r3, [r7, #28]
 8002a86:	089b      	lsrs	r3, r3, #2
 8002a88:	3302      	adds	r3, #2
 8002a8a:	69ba      	ldr	r2, [r7, #24]
 8002a8c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002a90:	697b      	ldr	r3, [r7, #20]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002a96:	693b      	ldr	r3, [r7, #16]
 8002a98:	43db      	mvns	r3, r3
 8002a9a:	69ba      	ldr	r2, [r7, #24]
 8002a9c:	4013      	ands	r3, r2
 8002a9e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d003      	beq.n	8002ab4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002aac:	69ba      	ldr	r2, [r7, #24]
 8002aae:	693b      	ldr	r3, [r7, #16]
 8002ab0:	4313      	orrs	r3, r2
 8002ab2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002ab4:	697b      	ldr	r3, [r7, #20]
 8002ab6:	69ba      	ldr	r2, [r7, #24]
 8002ab8:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8002aba:	697b      	ldr	r3, [r7, #20]
 8002abc:	685b      	ldr	r3, [r3, #4]
 8002abe:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002ac0:	693b      	ldr	r3, [r7, #16]
 8002ac2:	43db      	mvns	r3, r3
 8002ac4:	69ba      	ldr	r2, [r7, #24]
 8002ac6:	4013      	ands	r3, r2
 8002ac8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	685b      	ldr	r3, [r3, #4]
 8002ace:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d003      	beq.n	8002ade <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002ad6:	69ba      	ldr	r2, [r7, #24]
 8002ad8:	693b      	ldr	r3, [r7, #16]
 8002ada:	4313      	orrs	r3, r2
 8002adc:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002ade:	697b      	ldr	r3, [r7, #20]
 8002ae0:	69ba      	ldr	r2, [r7, #24]
 8002ae2:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002ae4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002aec:	693b      	ldr	r3, [r7, #16]
 8002aee:	43db      	mvns	r3, r3
 8002af0:	69ba      	ldr	r2, [r7, #24]
 8002af2:	4013      	ands	r3, r2
 8002af4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d003      	beq.n	8002b0a <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8002b02:	69ba      	ldr	r2, [r7, #24]
 8002b04:	693b      	ldr	r3, [r7, #16]
 8002b06:	4313      	orrs	r3, r2
 8002b08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002b0a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002b0e:	69bb      	ldr	r3, [r7, #24]
 8002b10:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002b12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b16:	685b      	ldr	r3, [r3, #4]
 8002b18:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002b1a:	693b      	ldr	r3, [r7, #16]
 8002b1c:	43db      	mvns	r3, r3
 8002b1e:	69ba      	ldr	r2, [r7, #24]
 8002b20:	4013      	ands	r3, r2
 8002b22:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d003      	beq.n	8002b38 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8002b30:	69ba      	ldr	r2, [r7, #24]
 8002b32:	693b      	ldr	r3, [r7, #16]
 8002b34:	4313      	orrs	r3, r2
 8002b36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002b38:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002b3c:	69bb      	ldr	r3, [r7, #24]
 8002b3e:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8002b40:	69fb      	ldr	r3, [r7, #28]
 8002b42:	3301      	adds	r3, #1
 8002b44:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	681a      	ldr	r2, [r3, #0]
 8002b4a:	69fb      	ldr	r3, [r7, #28]
 8002b4c:	fa22 f303 	lsr.w	r3, r2, r3
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	f47f ae63 	bne.w	800281c <HAL_GPIO_Init+0x14>
  }
}
 8002b56:	bf00      	nop
 8002b58:	bf00      	nop
 8002b5a:	3724      	adds	r7, #36	; 0x24
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b62:	4770      	bx	lr
 8002b64:	58000400 	.word	0x58000400

08002b68 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	b083      	sub	sp, #12
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8002b70:	4a08      	ldr	r2, [pc, #32]	; (8002b94 <HAL_HSEM_FastTake+0x2c>)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	3320      	adds	r3, #32
 8002b76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b7a:	4a07      	ldr	r2, [pc, #28]	; (8002b98 <HAL_HSEM_FastTake+0x30>)
 8002b7c:	4293      	cmp	r3, r2
 8002b7e:	d101      	bne.n	8002b84 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8002b80:	2300      	movs	r3, #0
 8002b82:	e000      	b.n	8002b86 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8002b84:	2301      	movs	r3, #1
}
 8002b86:	4618      	mov	r0, r3
 8002b88:	370c      	adds	r7, #12
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b90:	4770      	bx	lr
 8002b92:	bf00      	nop
 8002b94:	58026400 	.word	0x58026400
 8002b98:	80000300 	.word	0x80000300

08002b9c <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	b083      	sub	sp, #12
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
 8002ba4:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8002ba6:	4906      	ldr	r1, [pc, #24]	; (8002bc0 <HAL_HSEM_Release+0x24>)
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8002bb4:	bf00      	nop
 8002bb6:	370c      	adds	r7, #12
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbe:	4770      	bx	lr
 8002bc0:	58026400 	.word	0x58026400

08002bc4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b082      	sub	sp, #8
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d101      	bne.n	8002bd6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	e07f      	b.n	8002cd6 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002bdc:	b2db      	uxtb	r3, r3
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d106      	bne.n	8002bf0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2200      	movs	r2, #0
 8002be6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002bea:	6878      	ldr	r0, [r7, #4]
 8002bec:	f7fe f842 	bl	8000c74 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2224      	movs	r2, #36	; 0x24
 8002bf4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	681a      	ldr	r2, [r3, #0]
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f022 0201 	bic.w	r2, r2, #1
 8002c06:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	685a      	ldr	r2, [r3, #4]
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002c14:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	689a      	ldr	r2, [r3, #8]
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002c24:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	68db      	ldr	r3, [r3, #12]
 8002c2a:	2b01      	cmp	r3, #1
 8002c2c:	d107      	bne.n	8002c3e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	689a      	ldr	r2, [r3, #8]
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002c3a:	609a      	str	r2, [r3, #8]
 8002c3c:	e006      	b.n	8002c4c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	689a      	ldr	r2, [r3, #8]
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002c4a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	68db      	ldr	r3, [r3, #12]
 8002c50:	2b02      	cmp	r3, #2
 8002c52:	d104      	bne.n	8002c5e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002c5c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	6859      	ldr	r1, [r3, #4]
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681a      	ldr	r2, [r3, #0]
 8002c68:	4b1d      	ldr	r3, [pc, #116]	; (8002ce0 <HAL_I2C_Init+0x11c>)
 8002c6a:	430b      	orrs	r3, r1
 8002c6c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	68da      	ldr	r2, [r3, #12]
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002c7c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	691a      	ldr	r2, [r3, #16]
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	695b      	ldr	r3, [r3, #20]
 8002c86:	ea42 0103 	orr.w	r1, r2, r3
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	699b      	ldr	r3, [r3, #24]
 8002c8e:	021a      	lsls	r2, r3, #8
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	430a      	orrs	r2, r1
 8002c96:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	69d9      	ldr	r1, [r3, #28]
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6a1a      	ldr	r2, [r3, #32]
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	430a      	orrs	r2, r1
 8002ca6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	681a      	ldr	r2, [r3, #0]
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f042 0201 	orr.w	r2, r2, #1
 8002cb6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2200      	movs	r2, #0
 8002cbc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	2220      	movs	r2, #32
 8002cc2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	2200      	movs	r2, #0
 8002cca:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2200      	movs	r2, #0
 8002cd0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002cd4:	2300      	movs	r3, #0
}
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	3708      	adds	r7, #8
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	bd80      	pop	{r7, pc}
 8002cde:	bf00      	nop
 8002ce0:	02008000 	.word	0x02008000

08002ce4 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b088      	sub	sp, #32
 8002ce8:	af02      	add	r7, sp, #8
 8002cea:	60f8      	str	r0, [r7, #12]
 8002cec:	607a      	str	r2, [r7, #4]
 8002cee:	461a      	mov	r2, r3
 8002cf0:	460b      	mov	r3, r1
 8002cf2:	817b      	strh	r3, [r7, #10]
 8002cf4:	4613      	mov	r3, r2
 8002cf6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002cfe:	b2db      	uxtb	r3, r3
 8002d00:	2b20      	cmp	r3, #32
 8002d02:	f040 80da 	bne.w	8002eba <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002d0c:	2b01      	cmp	r3, #1
 8002d0e:	d101      	bne.n	8002d14 <HAL_I2C_Master_Transmit+0x30>
 8002d10:	2302      	movs	r3, #2
 8002d12:	e0d3      	b.n	8002ebc <HAL_I2C_Master_Transmit+0x1d8>
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	2201      	movs	r2, #1
 8002d18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002d1c:	f7fe f91e 	bl	8000f5c <HAL_GetTick>
 8002d20:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002d22:	697b      	ldr	r3, [r7, #20]
 8002d24:	9300      	str	r3, [sp, #0]
 8002d26:	2319      	movs	r3, #25
 8002d28:	2201      	movs	r2, #1
 8002d2a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002d2e:	68f8      	ldr	r0, [r7, #12]
 8002d30:	f000 f8f0 	bl	8002f14 <I2C_WaitOnFlagUntilTimeout>
 8002d34:	4603      	mov	r3, r0
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d001      	beq.n	8002d3e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	e0be      	b.n	8002ebc <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	2221      	movs	r2, #33	; 0x21
 8002d42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	2210      	movs	r2, #16
 8002d4a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	2200      	movs	r2, #0
 8002d52:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	687a      	ldr	r2, [r7, #4]
 8002d58:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	893a      	ldrh	r2, [r7, #8]
 8002d5e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	2200      	movs	r2, #0
 8002d64:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d6a:	b29b      	uxth	r3, r3
 8002d6c:	2bff      	cmp	r3, #255	; 0xff
 8002d6e:	d90e      	bls.n	8002d8e <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	22ff      	movs	r2, #255	; 0xff
 8002d74:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d7a:	b2da      	uxtb	r2, r3
 8002d7c:	8979      	ldrh	r1, [r7, #10]
 8002d7e:	4b51      	ldr	r3, [pc, #324]	; (8002ec4 <HAL_I2C_Master_Transmit+0x1e0>)
 8002d80:	9300      	str	r3, [sp, #0]
 8002d82:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002d86:	68f8      	ldr	r0, [r7, #12]
 8002d88:	f000 f9e6 	bl	8003158 <I2C_TransferConfig>
 8002d8c:	e06c      	b.n	8002e68 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d92:	b29a      	uxth	r2, r3
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d9c:	b2da      	uxtb	r2, r3
 8002d9e:	8979      	ldrh	r1, [r7, #10]
 8002da0:	4b48      	ldr	r3, [pc, #288]	; (8002ec4 <HAL_I2C_Master_Transmit+0x1e0>)
 8002da2:	9300      	str	r3, [sp, #0]
 8002da4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002da8:	68f8      	ldr	r0, [r7, #12]
 8002daa:	f000 f9d5 	bl	8003158 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8002dae:	e05b      	b.n	8002e68 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002db0:	697a      	ldr	r2, [r7, #20]
 8002db2:	6a39      	ldr	r1, [r7, #32]
 8002db4:	68f8      	ldr	r0, [r7, #12]
 8002db6:	f000 f8ed 	bl	8002f94 <I2C_WaitOnTXISFlagUntilTimeout>
 8002dba:	4603      	mov	r3, r0
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d001      	beq.n	8002dc4 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	e07b      	b.n	8002ebc <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dc8:	781a      	ldrb	r2, [r3, #0]
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dd4:	1c5a      	adds	r2, r3, #1
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dde:	b29b      	uxth	r3, r3
 8002de0:	3b01      	subs	r3, #1
 8002de2:	b29a      	uxth	r2, r3
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dec:	3b01      	subs	r3, #1
 8002dee:	b29a      	uxth	r2, r3
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002df8:	b29b      	uxth	r3, r3
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d034      	beq.n	8002e68 <HAL_I2C_Master_Transmit+0x184>
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d130      	bne.n	8002e68 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002e06:	697b      	ldr	r3, [r7, #20]
 8002e08:	9300      	str	r3, [sp, #0]
 8002e0a:	6a3b      	ldr	r3, [r7, #32]
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	2180      	movs	r1, #128	; 0x80
 8002e10:	68f8      	ldr	r0, [r7, #12]
 8002e12:	f000 f87f 	bl	8002f14 <I2C_WaitOnFlagUntilTimeout>
 8002e16:	4603      	mov	r3, r0
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d001      	beq.n	8002e20 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8002e1c:	2301      	movs	r3, #1
 8002e1e:	e04d      	b.n	8002ebc <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e24:	b29b      	uxth	r3, r3
 8002e26:	2bff      	cmp	r3, #255	; 0xff
 8002e28:	d90e      	bls.n	8002e48 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	22ff      	movs	r2, #255	; 0xff
 8002e2e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e34:	b2da      	uxtb	r2, r3
 8002e36:	8979      	ldrh	r1, [r7, #10]
 8002e38:	2300      	movs	r3, #0
 8002e3a:	9300      	str	r3, [sp, #0]
 8002e3c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002e40:	68f8      	ldr	r0, [r7, #12]
 8002e42:	f000 f989 	bl	8003158 <I2C_TransferConfig>
 8002e46:	e00f      	b.n	8002e68 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e4c:	b29a      	uxth	r2, r3
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e56:	b2da      	uxtb	r2, r3
 8002e58:	8979      	ldrh	r1, [r7, #10]
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	9300      	str	r3, [sp, #0]
 8002e5e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002e62:	68f8      	ldr	r0, [r7, #12]
 8002e64:	f000 f978 	bl	8003158 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e6c:	b29b      	uxth	r3, r3
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d19e      	bne.n	8002db0 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e72:	697a      	ldr	r2, [r7, #20]
 8002e74:	6a39      	ldr	r1, [r7, #32]
 8002e76:	68f8      	ldr	r0, [r7, #12]
 8002e78:	f000 f8cc 	bl	8003014 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d001      	beq.n	8002e86 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8002e82:	2301      	movs	r3, #1
 8002e84:	e01a      	b.n	8002ebc <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	2220      	movs	r2, #32
 8002e8c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	6859      	ldr	r1, [r3, #4]
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	681a      	ldr	r2, [r3, #0]
 8002e98:	4b0b      	ldr	r3, [pc, #44]	; (8002ec8 <HAL_I2C_Master_Transmit+0x1e4>)
 8002e9a:	400b      	ands	r3, r1
 8002e9c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	2220      	movs	r2, #32
 8002ea2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	e000      	b.n	8002ebc <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8002eba:	2302      	movs	r3, #2
  }
}
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	3718      	adds	r7, #24
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	bd80      	pop	{r7, pc}
 8002ec4:	80002000 	.word	0x80002000
 8002ec8:	fe00e800 	.word	0xfe00e800

08002ecc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002ecc:	b480      	push	{r7}
 8002ece:	b083      	sub	sp, #12
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	699b      	ldr	r3, [r3, #24]
 8002eda:	f003 0302 	and.w	r3, r3, #2
 8002ede:	2b02      	cmp	r3, #2
 8002ee0:	d103      	bne.n	8002eea <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	699b      	ldr	r3, [r3, #24]
 8002ef0:	f003 0301 	and.w	r3, r3, #1
 8002ef4:	2b01      	cmp	r3, #1
 8002ef6:	d007      	beq.n	8002f08 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	699a      	ldr	r2, [r3, #24]
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f042 0201 	orr.w	r2, r2, #1
 8002f06:	619a      	str	r2, [r3, #24]
  }
}
 8002f08:	bf00      	nop
 8002f0a:	370c      	adds	r7, #12
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f12:	4770      	bx	lr

08002f14 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b084      	sub	sp, #16
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	60f8      	str	r0, [r7, #12]
 8002f1c:	60b9      	str	r1, [r7, #8]
 8002f1e:	603b      	str	r3, [r7, #0]
 8002f20:	4613      	mov	r3, r2
 8002f22:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002f24:	e022      	b.n	8002f6c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f2c:	d01e      	beq.n	8002f6c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f2e:	f7fe f815 	bl	8000f5c <HAL_GetTick>
 8002f32:	4602      	mov	r2, r0
 8002f34:	69bb      	ldr	r3, [r7, #24]
 8002f36:	1ad3      	subs	r3, r2, r3
 8002f38:	683a      	ldr	r2, [r7, #0]
 8002f3a:	429a      	cmp	r2, r3
 8002f3c:	d302      	bcc.n	8002f44 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d113      	bne.n	8002f6c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f48:	f043 0220 	orr.w	r2, r3, #32
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	2220      	movs	r2, #32
 8002f54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	2200      	movs	r2, #0
 8002f64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8002f68:	2301      	movs	r3, #1
 8002f6a:	e00f      	b.n	8002f8c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	699a      	ldr	r2, [r3, #24]
 8002f72:	68bb      	ldr	r3, [r7, #8]
 8002f74:	4013      	ands	r3, r2
 8002f76:	68ba      	ldr	r2, [r7, #8]
 8002f78:	429a      	cmp	r2, r3
 8002f7a:	bf0c      	ite	eq
 8002f7c:	2301      	moveq	r3, #1
 8002f7e:	2300      	movne	r3, #0
 8002f80:	b2db      	uxtb	r3, r3
 8002f82:	461a      	mov	r2, r3
 8002f84:	79fb      	ldrb	r3, [r7, #7]
 8002f86:	429a      	cmp	r2, r3
 8002f88:	d0cd      	beq.n	8002f26 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002f8a:	2300      	movs	r3, #0
}
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	3710      	adds	r7, #16
 8002f90:	46bd      	mov	sp, r7
 8002f92:	bd80      	pop	{r7, pc}

08002f94 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b084      	sub	sp, #16
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	60f8      	str	r0, [r7, #12]
 8002f9c:	60b9      	str	r1, [r7, #8]
 8002f9e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002fa0:	e02c      	b.n	8002ffc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002fa2:	687a      	ldr	r2, [r7, #4]
 8002fa4:	68b9      	ldr	r1, [r7, #8]
 8002fa6:	68f8      	ldr	r0, [r7, #12]
 8002fa8:	f000 f870 	bl	800308c <I2C_IsAcknowledgeFailed>
 8002fac:	4603      	mov	r3, r0
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d001      	beq.n	8002fb6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	e02a      	b.n	800300c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002fb6:	68bb      	ldr	r3, [r7, #8]
 8002fb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fbc:	d01e      	beq.n	8002ffc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fbe:	f7fd ffcd 	bl	8000f5c <HAL_GetTick>
 8002fc2:	4602      	mov	r2, r0
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	1ad3      	subs	r3, r2, r3
 8002fc8:	68ba      	ldr	r2, [r7, #8]
 8002fca:	429a      	cmp	r2, r3
 8002fcc:	d302      	bcc.n	8002fd4 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002fce:	68bb      	ldr	r3, [r7, #8]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d113      	bne.n	8002ffc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fd8:	f043 0220 	orr.w	r2, r3, #32
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	2220      	movs	r2, #32
 8002fe4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	2200      	movs	r2, #0
 8002fec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002ff8:	2301      	movs	r3, #1
 8002ffa:	e007      	b.n	800300c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	699b      	ldr	r3, [r3, #24]
 8003002:	f003 0302 	and.w	r3, r3, #2
 8003006:	2b02      	cmp	r3, #2
 8003008:	d1cb      	bne.n	8002fa2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800300a:	2300      	movs	r3, #0
}
 800300c:	4618      	mov	r0, r3
 800300e:	3710      	adds	r7, #16
 8003010:	46bd      	mov	sp, r7
 8003012:	bd80      	pop	{r7, pc}

08003014 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b084      	sub	sp, #16
 8003018:	af00      	add	r7, sp, #0
 800301a:	60f8      	str	r0, [r7, #12]
 800301c:	60b9      	str	r1, [r7, #8]
 800301e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003020:	e028      	b.n	8003074 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003022:	687a      	ldr	r2, [r7, #4]
 8003024:	68b9      	ldr	r1, [r7, #8]
 8003026:	68f8      	ldr	r0, [r7, #12]
 8003028:	f000 f830 	bl	800308c <I2C_IsAcknowledgeFailed>
 800302c:	4603      	mov	r3, r0
 800302e:	2b00      	cmp	r3, #0
 8003030:	d001      	beq.n	8003036 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003032:	2301      	movs	r3, #1
 8003034:	e026      	b.n	8003084 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003036:	f7fd ff91 	bl	8000f5c <HAL_GetTick>
 800303a:	4602      	mov	r2, r0
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	1ad3      	subs	r3, r2, r3
 8003040:	68ba      	ldr	r2, [r7, #8]
 8003042:	429a      	cmp	r2, r3
 8003044:	d302      	bcc.n	800304c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003046:	68bb      	ldr	r3, [r7, #8]
 8003048:	2b00      	cmp	r3, #0
 800304a:	d113      	bne.n	8003074 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003050:	f043 0220 	orr.w	r2, r3, #32
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	2220      	movs	r2, #32
 800305c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	2200      	movs	r2, #0
 8003064:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	2200      	movs	r2, #0
 800306c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003070:	2301      	movs	r3, #1
 8003072:	e007      	b.n	8003084 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	699b      	ldr	r3, [r3, #24]
 800307a:	f003 0320 	and.w	r3, r3, #32
 800307e:	2b20      	cmp	r3, #32
 8003080:	d1cf      	bne.n	8003022 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003082:	2300      	movs	r3, #0
}
 8003084:	4618      	mov	r0, r3
 8003086:	3710      	adds	r7, #16
 8003088:	46bd      	mov	sp, r7
 800308a:	bd80      	pop	{r7, pc}

0800308c <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b084      	sub	sp, #16
 8003090:	af00      	add	r7, sp, #0
 8003092:	60f8      	str	r0, [r7, #12]
 8003094:	60b9      	str	r1, [r7, #8]
 8003096:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	699b      	ldr	r3, [r3, #24]
 800309e:	f003 0310 	and.w	r3, r3, #16
 80030a2:	2b10      	cmp	r3, #16
 80030a4:	d151      	bne.n	800314a <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80030a6:	e022      	b.n	80030ee <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80030a8:	68bb      	ldr	r3, [r7, #8]
 80030aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030ae:	d01e      	beq.n	80030ee <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030b0:	f7fd ff54 	bl	8000f5c <HAL_GetTick>
 80030b4:	4602      	mov	r2, r0
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	1ad3      	subs	r3, r2, r3
 80030ba:	68ba      	ldr	r2, [r7, #8]
 80030bc:	429a      	cmp	r2, r3
 80030be:	d302      	bcc.n	80030c6 <I2C_IsAcknowledgeFailed+0x3a>
 80030c0:	68bb      	ldr	r3, [r7, #8]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d113      	bne.n	80030ee <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030ca:	f043 0220 	orr.w	r2, r3, #32
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	2220      	movs	r2, #32
 80030d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	2200      	movs	r2, #0
 80030de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	2200      	movs	r2, #0
 80030e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80030ea:	2301      	movs	r3, #1
 80030ec:	e02e      	b.n	800314c <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	699b      	ldr	r3, [r3, #24]
 80030f4:	f003 0320 	and.w	r3, r3, #32
 80030f8:	2b20      	cmp	r3, #32
 80030fa:	d1d5      	bne.n	80030a8 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	2210      	movs	r2, #16
 8003102:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	2220      	movs	r2, #32
 800310a:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800310c:	68f8      	ldr	r0, [r7, #12]
 800310e:	f7ff fedd 	bl	8002ecc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	6859      	ldr	r1, [r3, #4]
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	681a      	ldr	r2, [r3, #0]
 800311c:	4b0d      	ldr	r3, [pc, #52]	; (8003154 <I2C_IsAcknowledgeFailed+0xc8>)
 800311e:	400b      	ands	r3, r1
 8003120:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003126:	f043 0204 	orr.w	r2, r3, #4
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	2220      	movs	r2, #32
 8003132:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	2200      	movs	r2, #0
 800313a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	2200      	movs	r2, #0
 8003142:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8003146:	2301      	movs	r3, #1
 8003148:	e000      	b.n	800314c <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800314a:	2300      	movs	r3, #0
}
 800314c:	4618      	mov	r0, r3
 800314e:	3710      	adds	r7, #16
 8003150:	46bd      	mov	sp, r7
 8003152:	bd80      	pop	{r7, pc}
 8003154:	fe00e800 	.word	0xfe00e800

08003158 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003158:	b480      	push	{r7}
 800315a:	b085      	sub	sp, #20
 800315c:	af00      	add	r7, sp, #0
 800315e:	60f8      	str	r0, [r7, #12]
 8003160:	607b      	str	r3, [r7, #4]
 8003162:	460b      	mov	r3, r1
 8003164:	817b      	strh	r3, [r7, #10]
 8003166:	4613      	mov	r3, r2
 8003168:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	685a      	ldr	r2, [r3, #4]
 8003170:	69bb      	ldr	r3, [r7, #24]
 8003172:	0d5b      	lsrs	r3, r3, #21
 8003174:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003178:	4b0d      	ldr	r3, [pc, #52]	; (80031b0 <I2C_TransferConfig+0x58>)
 800317a:	430b      	orrs	r3, r1
 800317c:	43db      	mvns	r3, r3
 800317e:	ea02 0103 	and.w	r1, r2, r3
 8003182:	897b      	ldrh	r3, [r7, #10]
 8003184:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003188:	7a7b      	ldrb	r3, [r7, #9]
 800318a:	041b      	lsls	r3, r3, #16
 800318c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003190:	431a      	orrs	r2, r3
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	431a      	orrs	r2, r3
 8003196:	69bb      	ldr	r3, [r7, #24]
 8003198:	431a      	orrs	r2, r3
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	430a      	orrs	r2, r1
 80031a0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 80031a2:	bf00      	nop
 80031a4:	3714      	adds	r7, #20
 80031a6:	46bd      	mov	sp, r7
 80031a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ac:	4770      	bx	lr
 80031ae:	bf00      	nop
 80031b0:	03ff63ff 	.word	0x03ff63ff

080031b4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80031b4:	b480      	push	{r7}
 80031b6:	b083      	sub	sp, #12
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
 80031bc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80031c4:	b2db      	uxtb	r3, r3
 80031c6:	2b20      	cmp	r3, #32
 80031c8:	d138      	bne.n	800323c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80031d0:	2b01      	cmp	r3, #1
 80031d2:	d101      	bne.n	80031d8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80031d4:	2302      	movs	r3, #2
 80031d6:	e032      	b.n	800323e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2201      	movs	r2, #1
 80031dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2224      	movs	r2, #36	; 0x24
 80031e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	681a      	ldr	r2, [r3, #0]
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f022 0201 	bic.w	r2, r2, #1
 80031f6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	681a      	ldr	r2, [r3, #0]
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003206:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	6819      	ldr	r1, [r3, #0]
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	683a      	ldr	r2, [r7, #0]
 8003214:	430a      	orrs	r2, r1
 8003216:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	681a      	ldr	r2, [r3, #0]
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f042 0201 	orr.w	r2, r2, #1
 8003226:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2220      	movs	r2, #32
 800322c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2200      	movs	r2, #0
 8003234:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003238:	2300      	movs	r3, #0
 800323a:	e000      	b.n	800323e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800323c:	2302      	movs	r3, #2
  }
}
 800323e:	4618      	mov	r0, r3
 8003240:	370c      	adds	r7, #12
 8003242:	46bd      	mov	sp, r7
 8003244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003248:	4770      	bx	lr

0800324a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800324a:	b480      	push	{r7}
 800324c:	b085      	sub	sp, #20
 800324e:	af00      	add	r7, sp, #0
 8003250:	6078      	str	r0, [r7, #4]
 8003252:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800325a:	b2db      	uxtb	r3, r3
 800325c:	2b20      	cmp	r3, #32
 800325e:	d139      	bne.n	80032d4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003266:	2b01      	cmp	r3, #1
 8003268:	d101      	bne.n	800326e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800326a:	2302      	movs	r3, #2
 800326c:	e033      	b.n	80032d6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	2201      	movs	r2, #1
 8003272:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	2224      	movs	r2, #36	; 0x24
 800327a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	681a      	ldr	r2, [r3, #0]
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f022 0201 	bic.w	r2, r2, #1
 800328c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800329c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	021b      	lsls	r3, r3, #8
 80032a2:	68fa      	ldr	r2, [r7, #12]
 80032a4:	4313      	orrs	r3, r2
 80032a6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	68fa      	ldr	r2, [r7, #12]
 80032ae:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	681a      	ldr	r2, [r3, #0]
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f042 0201 	orr.w	r2, r2, #1
 80032be:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2220      	movs	r2, #32
 80032c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2200      	movs	r2, #0
 80032cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80032d0:	2300      	movs	r3, #0
 80032d2:	e000      	b.n	80032d6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80032d4:	2302      	movs	r3, #2
  }
}
 80032d6:	4618      	mov	r0, r3
 80032d8:	3714      	adds	r7, #20
 80032da:	46bd      	mov	sp, r7
 80032dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e0:	4770      	bx	lr
	...

080032e4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b084      	sub	sp, #16
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80032ec:	4b29      	ldr	r3, [pc, #164]	; (8003394 <HAL_PWREx_ConfigSupply+0xb0>)
 80032ee:	68db      	ldr	r3, [r3, #12]
 80032f0:	f003 0307 	and.w	r3, r3, #7
 80032f4:	2b06      	cmp	r3, #6
 80032f6:	d00a      	beq.n	800330e <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80032f8:	4b26      	ldr	r3, [pc, #152]	; (8003394 <HAL_PWREx_ConfigSupply+0xb0>)
 80032fa:	68db      	ldr	r3, [r3, #12]
 80032fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003300:	687a      	ldr	r2, [r7, #4]
 8003302:	429a      	cmp	r2, r3
 8003304:	d001      	beq.n	800330a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8003306:	2301      	movs	r3, #1
 8003308:	e040      	b.n	800338c <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800330a:	2300      	movs	r3, #0
 800330c:	e03e      	b.n	800338c <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800330e:	4b21      	ldr	r3, [pc, #132]	; (8003394 <HAL_PWREx_ConfigSupply+0xb0>)
 8003310:	68db      	ldr	r3, [r3, #12]
 8003312:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8003316:	491f      	ldr	r1, [pc, #124]	; (8003394 <HAL_PWREx_ConfigSupply+0xb0>)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	4313      	orrs	r3, r2
 800331c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800331e:	f7fd fe1d 	bl	8000f5c <HAL_GetTick>
 8003322:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003324:	e009      	b.n	800333a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003326:	f7fd fe19 	bl	8000f5c <HAL_GetTick>
 800332a:	4602      	mov	r2, r0
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	1ad3      	subs	r3, r2, r3
 8003330:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003334:	d901      	bls.n	800333a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8003336:	2301      	movs	r3, #1
 8003338:	e028      	b.n	800338c <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800333a:	4b16      	ldr	r3, [pc, #88]	; (8003394 <HAL_PWREx_ConfigSupply+0xb0>)
 800333c:	685b      	ldr	r3, [r3, #4]
 800333e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003342:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003346:	d1ee      	bne.n	8003326 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2b1e      	cmp	r3, #30
 800334c:	d008      	beq.n	8003360 <HAL_PWREx_ConfigSupply+0x7c>
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2b2e      	cmp	r3, #46	; 0x2e
 8003352:	d005      	beq.n	8003360 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2b1d      	cmp	r3, #29
 8003358:	d002      	beq.n	8003360 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	2b2d      	cmp	r3, #45	; 0x2d
 800335e:	d114      	bne.n	800338a <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8003360:	f7fd fdfc 	bl	8000f5c <HAL_GetTick>
 8003364:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8003366:	e009      	b.n	800337c <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003368:	f7fd fdf8 	bl	8000f5c <HAL_GetTick>
 800336c:	4602      	mov	r2, r0
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	1ad3      	subs	r3, r2, r3
 8003372:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003376:	d901      	bls.n	800337c <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8003378:	2301      	movs	r3, #1
 800337a:	e007      	b.n	800338c <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800337c:	4b05      	ldr	r3, [pc, #20]	; (8003394 <HAL_PWREx_ConfigSupply+0xb0>)
 800337e:	68db      	ldr	r3, [r3, #12]
 8003380:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003384:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003388:	d1ee      	bne.n	8003368 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800338a:	2300      	movs	r3, #0
}
 800338c:	4618      	mov	r0, r3
 800338e:	3710      	adds	r7, #16
 8003390:	46bd      	mov	sp, r7
 8003392:	bd80      	pop	{r7, pc}
 8003394:	58024800 	.word	0x58024800

08003398 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b08c      	sub	sp, #48	; 0x30
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d101      	bne.n	80033aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80033a6:	2301      	movs	r3, #1
 80033a8:	e3ff      	b.n	8003baa <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f003 0301 	and.w	r3, r3, #1
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	f000 8087 	beq.w	80034c6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80033b8:	4b99      	ldr	r3, [pc, #612]	; (8003620 <HAL_RCC_OscConfig+0x288>)
 80033ba:	691b      	ldr	r3, [r3, #16]
 80033bc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80033c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80033c2:	4b97      	ldr	r3, [pc, #604]	; (8003620 <HAL_RCC_OscConfig+0x288>)
 80033c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033c6:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80033c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033ca:	2b10      	cmp	r3, #16
 80033cc:	d007      	beq.n	80033de <HAL_RCC_OscConfig+0x46>
 80033ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033d0:	2b18      	cmp	r3, #24
 80033d2:	d110      	bne.n	80033f6 <HAL_RCC_OscConfig+0x5e>
 80033d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033d6:	f003 0303 	and.w	r3, r3, #3
 80033da:	2b02      	cmp	r3, #2
 80033dc:	d10b      	bne.n	80033f6 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033de:	4b90      	ldr	r3, [pc, #576]	; (8003620 <HAL_RCC_OscConfig+0x288>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d06c      	beq.n	80034c4 <HAL_RCC_OscConfig+0x12c>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	685b      	ldr	r3, [r3, #4]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d168      	bne.n	80034c4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80033f2:	2301      	movs	r3, #1
 80033f4:	e3d9      	b.n	8003baa <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033fe:	d106      	bne.n	800340e <HAL_RCC_OscConfig+0x76>
 8003400:	4b87      	ldr	r3, [pc, #540]	; (8003620 <HAL_RCC_OscConfig+0x288>)
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	4a86      	ldr	r2, [pc, #536]	; (8003620 <HAL_RCC_OscConfig+0x288>)
 8003406:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800340a:	6013      	str	r3, [r2, #0]
 800340c:	e02e      	b.n	800346c <HAL_RCC_OscConfig+0xd4>
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	685b      	ldr	r3, [r3, #4]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d10c      	bne.n	8003430 <HAL_RCC_OscConfig+0x98>
 8003416:	4b82      	ldr	r3, [pc, #520]	; (8003620 <HAL_RCC_OscConfig+0x288>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4a81      	ldr	r2, [pc, #516]	; (8003620 <HAL_RCC_OscConfig+0x288>)
 800341c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003420:	6013      	str	r3, [r2, #0]
 8003422:	4b7f      	ldr	r3, [pc, #508]	; (8003620 <HAL_RCC_OscConfig+0x288>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	4a7e      	ldr	r2, [pc, #504]	; (8003620 <HAL_RCC_OscConfig+0x288>)
 8003428:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800342c:	6013      	str	r3, [r2, #0]
 800342e:	e01d      	b.n	800346c <HAL_RCC_OscConfig+0xd4>
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	685b      	ldr	r3, [r3, #4]
 8003434:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003438:	d10c      	bne.n	8003454 <HAL_RCC_OscConfig+0xbc>
 800343a:	4b79      	ldr	r3, [pc, #484]	; (8003620 <HAL_RCC_OscConfig+0x288>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	4a78      	ldr	r2, [pc, #480]	; (8003620 <HAL_RCC_OscConfig+0x288>)
 8003440:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003444:	6013      	str	r3, [r2, #0]
 8003446:	4b76      	ldr	r3, [pc, #472]	; (8003620 <HAL_RCC_OscConfig+0x288>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	4a75      	ldr	r2, [pc, #468]	; (8003620 <HAL_RCC_OscConfig+0x288>)
 800344c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003450:	6013      	str	r3, [r2, #0]
 8003452:	e00b      	b.n	800346c <HAL_RCC_OscConfig+0xd4>
 8003454:	4b72      	ldr	r3, [pc, #456]	; (8003620 <HAL_RCC_OscConfig+0x288>)
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	4a71      	ldr	r2, [pc, #452]	; (8003620 <HAL_RCC_OscConfig+0x288>)
 800345a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800345e:	6013      	str	r3, [r2, #0]
 8003460:	4b6f      	ldr	r3, [pc, #444]	; (8003620 <HAL_RCC_OscConfig+0x288>)
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	4a6e      	ldr	r2, [pc, #440]	; (8003620 <HAL_RCC_OscConfig+0x288>)
 8003466:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800346a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	685b      	ldr	r3, [r3, #4]
 8003470:	2b00      	cmp	r3, #0
 8003472:	d013      	beq.n	800349c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003474:	f7fd fd72 	bl	8000f5c <HAL_GetTick>
 8003478:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800347a:	e008      	b.n	800348e <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800347c:	f7fd fd6e 	bl	8000f5c <HAL_GetTick>
 8003480:	4602      	mov	r2, r0
 8003482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003484:	1ad3      	subs	r3, r2, r3
 8003486:	2b64      	cmp	r3, #100	; 0x64
 8003488:	d901      	bls.n	800348e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800348a:	2303      	movs	r3, #3
 800348c:	e38d      	b.n	8003baa <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800348e:	4b64      	ldr	r3, [pc, #400]	; (8003620 <HAL_RCC_OscConfig+0x288>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003496:	2b00      	cmp	r3, #0
 8003498:	d0f0      	beq.n	800347c <HAL_RCC_OscConfig+0xe4>
 800349a:	e014      	b.n	80034c6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800349c:	f7fd fd5e 	bl	8000f5c <HAL_GetTick>
 80034a0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80034a2:	e008      	b.n	80034b6 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80034a4:	f7fd fd5a 	bl	8000f5c <HAL_GetTick>
 80034a8:	4602      	mov	r2, r0
 80034aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ac:	1ad3      	subs	r3, r2, r3
 80034ae:	2b64      	cmp	r3, #100	; 0x64
 80034b0:	d901      	bls.n	80034b6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80034b2:	2303      	movs	r3, #3
 80034b4:	e379      	b.n	8003baa <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80034b6:	4b5a      	ldr	r3, [pc, #360]	; (8003620 <HAL_RCC_OscConfig+0x288>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d1f0      	bne.n	80034a4 <HAL_RCC_OscConfig+0x10c>
 80034c2:	e000      	b.n	80034c6 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f003 0302 	and.w	r3, r3, #2
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	f000 80ae 	beq.w	8003630 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80034d4:	4b52      	ldr	r3, [pc, #328]	; (8003620 <HAL_RCC_OscConfig+0x288>)
 80034d6:	691b      	ldr	r3, [r3, #16]
 80034d8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80034dc:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80034de:	4b50      	ldr	r3, [pc, #320]	; (8003620 <HAL_RCC_OscConfig+0x288>)
 80034e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034e2:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80034e4:	6a3b      	ldr	r3, [r7, #32]
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d007      	beq.n	80034fa <HAL_RCC_OscConfig+0x162>
 80034ea:	6a3b      	ldr	r3, [r7, #32]
 80034ec:	2b18      	cmp	r3, #24
 80034ee:	d13a      	bne.n	8003566 <HAL_RCC_OscConfig+0x1ce>
 80034f0:	69fb      	ldr	r3, [r7, #28]
 80034f2:	f003 0303 	and.w	r3, r3, #3
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d135      	bne.n	8003566 <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80034fa:	4b49      	ldr	r3, [pc, #292]	; (8003620 <HAL_RCC_OscConfig+0x288>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f003 0304 	and.w	r3, r3, #4
 8003502:	2b00      	cmp	r3, #0
 8003504:	d005      	beq.n	8003512 <HAL_RCC_OscConfig+0x17a>
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	68db      	ldr	r3, [r3, #12]
 800350a:	2b00      	cmp	r3, #0
 800350c:	d101      	bne.n	8003512 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800350e:	2301      	movs	r3, #1
 8003510:	e34b      	b.n	8003baa <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003512:	f7fd fd53 	bl	8000fbc <HAL_GetREVID>
 8003516:	4603      	mov	r3, r0
 8003518:	f241 0203 	movw	r2, #4099	; 0x1003
 800351c:	4293      	cmp	r3, r2
 800351e:	d817      	bhi.n	8003550 <HAL_RCC_OscConfig+0x1b8>
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	691b      	ldr	r3, [r3, #16]
 8003524:	2b40      	cmp	r3, #64	; 0x40
 8003526:	d108      	bne.n	800353a <HAL_RCC_OscConfig+0x1a2>
 8003528:	4b3d      	ldr	r3, [pc, #244]	; (8003620 <HAL_RCC_OscConfig+0x288>)
 800352a:	685b      	ldr	r3, [r3, #4]
 800352c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003530:	4a3b      	ldr	r2, [pc, #236]	; (8003620 <HAL_RCC_OscConfig+0x288>)
 8003532:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003536:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003538:	e07a      	b.n	8003630 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800353a:	4b39      	ldr	r3, [pc, #228]	; (8003620 <HAL_RCC_OscConfig+0x288>)
 800353c:	685b      	ldr	r3, [r3, #4]
 800353e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	691b      	ldr	r3, [r3, #16]
 8003546:	031b      	lsls	r3, r3, #12
 8003548:	4935      	ldr	r1, [pc, #212]	; (8003620 <HAL_RCC_OscConfig+0x288>)
 800354a:	4313      	orrs	r3, r2
 800354c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800354e:	e06f      	b.n	8003630 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003550:	4b33      	ldr	r3, [pc, #204]	; (8003620 <HAL_RCC_OscConfig+0x288>)
 8003552:	685b      	ldr	r3, [r3, #4]
 8003554:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	691b      	ldr	r3, [r3, #16]
 800355c:	061b      	lsls	r3, r3, #24
 800355e:	4930      	ldr	r1, [pc, #192]	; (8003620 <HAL_RCC_OscConfig+0x288>)
 8003560:	4313      	orrs	r3, r2
 8003562:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003564:	e064      	b.n	8003630 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	68db      	ldr	r3, [r3, #12]
 800356a:	2b00      	cmp	r3, #0
 800356c:	d045      	beq.n	80035fa <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800356e:	4b2c      	ldr	r3, [pc, #176]	; (8003620 <HAL_RCC_OscConfig+0x288>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f023 0219 	bic.w	r2, r3, #25
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	68db      	ldr	r3, [r3, #12]
 800357a:	4929      	ldr	r1, [pc, #164]	; (8003620 <HAL_RCC_OscConfig+0x288>)
 800357c:	4313      	orrs	r3, r2
 800357e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003580:	f7fd fcec 	bl	8000f5c <HAL_GetTick>
 8003584:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003586:	e008      	b.n	800359a <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003588:	f7fd fce8 	bl	8000f5c <HAL_GetTick>
 800358c:	4602      	mov	r2, r0
 800358e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003590:	1ad3      	subs	r3, r2, r3
 8003592:	2b02      	cmp	r3, #2
 8003594:	d901      	bls.n	800359a <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8003596:	2303      	movs	r3, #3
 8003598:	e307      	b.n	8003baa <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800359a:	4b21      	ldr	r3, [pc, #132]	; (8003620 <HAL_RCC_OscConfig+0x288>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f003 0304 	and.w	r3, r3, #4
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d0f0      	beq.n	8003588 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035a6:	f7fd fd09 	bl	8000fbc <HAL_GetREVID>
 80035aa:	4603      	mov	r3, r0
 80035ac:	f241 0203 	movw	r2, #4099	; 0x1003
 80035b0:	4293      	cmp	r3, r2
 80035b2:	d817      	bhi.n	80035e4 <HAL_RCC_OscConfig+0x24c>
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	691b      	ldr	r3, [r3, #16]
 80035b8:	2b40      	cmp	r3, #64	; 0x40
 80035ba:	d108      	bne.n	80035ce <HAL_RCC_OscConfig+0x236>
 80035bc:	4b18      	ldr	r3, [pc, #96]	; (8003620 <HAL_RCC_OscConfig+0x288>)
 80035be:	685b      	ldr	r3, [r3, #4]
 80035c0:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80035c4:	4a16      	ldr	r2, [pc, #88]	; (8003620 <HAL_RCC_OscConfig+0x288>)
 80035c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80035ca:	6053      	str	r3, [r2, #4]
 80035cc:	e030      	b.n	8003630 <HAL_RCC_OscConfig+0x298>
 80035ce:	4b14      	ldr	r3, [pc, #80]	; (8003620 <HAL_RCC_OscConfig+0x288>)
 80035d0:	685b      	ldr	r3, [r3, #4]
 80035d2:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	691b      	ldr	r3, [r3, #16]
 80035da:	031b      	lsls	r3, r3, #12
 80035dc:	4910      	ldr	r1, [pc, #64]	; (8003620 <HAL_RCC_OscConfig+0x288>)
 80035de:	4313      	orrs	r3, r2
 80035e0:	604b      	str	r3, [r1, #4]
 80035e2:	e025      	b.n	8003630 <HAL_RCC_OscConfig+0x298>
 80035e4:	4b0e      	ldr	r3, [pc, #56]	; (8003620 <HAL_RCC_OscConfig+0x288>)
 80035e6:	685b      	ldr	r3, [r3, #4]
 80035e8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	691b      	ldr	r3, [r3, #16]
 80035f0:	061b      	lsls	r3, r3, #24
 80035f2:	490b      	ldr	r1, [pc, #44]	; (8003620 <HAL_RCC_OscConfig+0x288>)
 80035f4:	4313      	orrs	r3, r2
 80035f6:	604b      	str	r3, [r1, #4]
 80035f8:	e01a      	b.n	8003630 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80035fa:	4b09      	ldr	r3, [pc, #36]	; (8003620 <HAL_RCC_OscConfig+0x288>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	4a08      	ldr	r2, [pc, #32]	; (8003620 <HAL_RCC_OscConfig+0x288>)
 8003600:	f023 0301 	bic.w	r3, r3, #1
 8003604:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003606:	f7fd fca9 	bl	8000f5c <HAL_GetTick>
 800360a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800360c:	e00a      	b.n	8003624 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800360e:	f7fd fca5 	bl	8000f5c <HAL_GetTick>
 8003612:	4602      	mov	r2, r0
 8003614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003616:	1ad3      	subs	r3, r2, r3
 8003618:	2b02      	cmp	r3, #2
 800361a:	d903      	bls.n	8003624 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 800361c:	2303      	movs	r3, #3
 800361e:	e2c4      	b.n	8003baa <HAL_RCC_OscConfig+0x812>
 8003620:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003624:	4ba4      	ldr	r3, [pc, #656]	; (80038b8 <HAL_RCC_OscConfig+0x520>)
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f003 0304 	and.w	r3, r3, #4
 800362c:	2b00      	cmp	r3, #0
 800362e:	d1ee      	bne.n	800360e <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f003 0310 	and.w	r3, r3, #16
 8003638:	2b00      	cmp	r3, #0
 800363a:	f000 80a9 	beq.w	8003790 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800363e:	4b9e      	ldr	r3, [pc, #632]	; (80038b8 <HAL_RCC_OscConfig+0x520>)
 8003640:	691b      	ldr	r3, [r3, #16]
 8003642:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003646:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003648:	4b9b      	ldr	r3, [pc, #620]	; (80038b8 <HAL_RCC_OscConfig+0x520>)
 800364a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800364c:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800364e:	69bb      	ldr	r3, [r7, #24]
 8003650:	2b08      	cmp	r3, #8
 8003652:	d007      	beq.n	8003664 <HAL_RCC_OscConfig+0x2cc>
 8003654:	69bb      	ldr	r3, [r7, #24]
 8003656:	2b18      	cmp	r3, #24
 8003658:	d13a      	bne.n	80036d0 <HAL_RCC_OscConfig+0x338>
 800365a:	697b      	ldr	r3, [r7, #20]
 800365c:	f003 0303 	and.w	r3, r3, #3
 8003660:	2b01      	cmp	r3, #1
 8003662:	d135      	bne.n	80036d0 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003664:	4b94      	ldr	r3, [pc, #592]	; (80038b8 <HAL_RCC_OscConfig+0x520>)
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800366c:	2b00      	cmp	r3, #0
 800366e:	d005      	beq.n	800367c <HAL_RCC_OscConfig+0x2e4>
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	69db      	ldr	r3, [r3, #28]
 8003674:	2b80      	cmp	r3, #128	; 0x80
 8003676:	d001      	beq.n	800367c <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8003678:	2301      	movs	r3, #1
 800367a:	e296      	b.n	8003baa <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800367c:	f7fd fc9e 	bl	8000fbc <HAL_GetREVID>
 8003680:	4603      	mov	r3, r0
 8003682:	f241 0203 	movw	r2, #4099	; 0x1003
 8003686:	4293      	cmp	r3, r2
 8003688:	d817      	bhi.n	80036ba <HAL_RCC_OscConfig+0x322>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6a1b      	ldr	r3, [r3, #32]
 800368e:	2b20      	cmp	r3, #32
 8003690:	d108      	bne.n	80036a4 <HAL_RCC_OscConfig+0x30c>
 8003692:	4b89      	ldr	r3, [pc, #548]	; (80038b8 <HAL_RCC_OscConfig+0x520>)
 8003694:	685b      	ldr	r3, [r3, #4]
 8003696:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800369a:	4a87      	ldr	r2, [pc, #540]	; (80038b8 <HAL_RCC_OscConfig+0x520>)
 800369c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80036a0:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80036a2:	e075      	b.n	8003790 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80036a4:	4b84      	ldr	r3, [pc, #528]	; (80038b8 <HAL_RCC_OscConfig+0x520>)
 80036a6:	685b      	ldr	r3, [r3, #4]
 80036a8:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6a1b      	ldr	r3, [r3, #32]
 80036b0:	069b      	lsls	r3, r3, #26
 80036b2:	4981      	ldr	r1, [pc, #516]	; (80038b8 <HAL_RCC_OscConfig+0x520>)
 80036b4:	4313      	orrs	r3, r2
 80036b6:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80036b8:	e06a      	b.n	8003790 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80036ba:	4b7f      	ldr	r3, [pc, #508]	; (80038b8 <HAL_RCC_OscConfig+0x520>)
 80036bc:	68db      	ldr	r3, [r3, #12]
 80036be:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6a1b      	ldr	r3, [r3, #32]
 80036c6:	061b      	lsls	r3, r3, #24
 80036c8:	497b      	ldr	r1, [pc, #492]	; (80038b8 <HAL_RCC_OscConfig+0x520>)
 80036ca:	4313      	orrs	r3, r2
 80036cc:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80036ce:	e05f      	b.n	8003790 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	69db      	ldr	r3, [r3, #28]
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d042      	beq.n	800375e <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80036d8:	4b77      	ldr	r3, [pc, #476]	; (80038b8 <HAL_RCC_OscConfig+0x520>)
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4a76      	ldr	r2, [pc, #472]	; (80038b8 <HAL_RCC_OscConfig+0x520>)
 80036de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80036e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036e4:	f7fd fc3a 	bl	8000f5c <HAL_GetTick>
 80036e8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80036ea:	e008      	b.n	80036fe <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80036ec:	f7fd fc36 	bl	8000f5c <HAL_GetTick>
 80036f0:	4602      	mov	r2, r0
 80036f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036f4:	1ad3      	subs	r3, r2, r3
 80036f6:	2b02      	cmp	r3, #2
 80036f8:	d901      	bls.n	80036fe <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 80036fa:	2303      	movs	r3, #3
 80036fc:	e255      	b.n	8003baa <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80036fe:	4b6e      	ldr	r3, [pc, #440]	; (80038b8 <HAL_RCC_OscConfig+0x520>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003706:	2b00      	cmp	r3, #0
 8003708:	d0f0      	beq.n	80036ec <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800370a:	f7fd fc57 	bl	8000fbc <HAL_GetREVID>
 800370e:	4603      	mov	r3, r0
 8003710:	f241 0203 	movw	r2, #4099	; 0x1003
 8003714:	4293      	cmp	r3, r2
 8003716:	d817      	bhi.n	8003748 <HAL_RCC_OscConfig+0x3b0>
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6a1b      	ldr	r3, [r3, #32]
 800371c:	2b20      	cmp	r3, #32
 800371e:	d108      	bne.n	8003732 <HAL_RCC_OscConfig+0x39a>
 8003720:	4b65      	ldr	r3, [pc, #404]	; (80038b8 <HAL_RCC_OscConfig+0x520>)
 8003722:	685b      	ldr	r3, [r3, #4]
 8003724:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003728:	4a63      	ldr	r2, [pc, #396]	; (80038b8 <HAL_RCC_OscConfig+0x520>)
 800372a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800372e:	6053      	str	r3, [r2, #4]
 8003730:	e02e      	b.n	8003790 <HAL_RCC_OscConfig+0x3f8>
 8003732:	4b61      	ldr	r3, [pc, #388]	; (80038b8 <HAL_RCC_OscConfig+0x520>)
 8003734:	685b      	ldr	r3, [r3, #4]
 8003736:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6a1b      	ldr	r3, [r3, #32]
 800373e:	069b      	lsls	r3, r3, #26
 8003740:	495d      	ldr	r1, [pc, #372]	; (80038b8 <HAL_RCC_OscConfig+0x520>)
 8003742:	4313      	orrs	r3, r2
 8003744:	604b      	str	r3, [r1, #4]
 8003746:	e023      	b.n	8003790 <HAL_RCC_OscConfig+0x3f8>
 8003748:	4b5b      	ldr	r3, [pc, #364]	; (80038b8 <HAL_RCC_OscConfig+0x520>)
 800374a:	68db      	ldr	r3, [r3, #12]
 800374c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6a1b      	ldr	r3, [r3, #32]
 8003754:	061b      	lsls	r3, r3, #24
 8003756:	4958      	ldr	r1, [pc, #352]	; (80038b8 <HAL_RCC_OscConfig+0x520>)
 8003758:	4313      	orrs	r3, r2
 800375a:	60cb      	str	r3, [r1, #12]
 800375c:	e018      	b.n	8003790 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800375e:	4b56      	ldr	r3, [pc, #344]	; (80038b8 <HAL_RCC_OscConfig+0x520>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	4a55      	ldr	r2, [pc, #340]	; (80038b8 <HAL_RCC_OscConfig+0x520>)
 8003764:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003768:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800376a:	f7fd fbf7 	bl	8000f5c <HAL_GetTick>
 800376e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003770:	e008      	b.n	8003784 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003772:	f7fd fbf3 	bl	8000f5c <HAL_GetTick>
 8003776:	4602      	mov	r2, r0
 8003778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800377a:	1ad3      	subs	r3, r2, r3
 800377c:	2b02      	cmp	r3, #2
 800377e:	d901      	bls.n	8003784 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8003780:	2303      	movs	r3, #3
 8003782:	e212      	b.n	8003baa <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003784:	4b4c      	ldr	r3, [pc, #304]	; (80038b8 <HAL_RCC_OscConfig+0x520>)
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800378c:	2b00      	cmp	r3, #0
 800378e:	d1f0      	bne.n	8003772 <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f003 0308 	and.w	r3, r3, #8
 8003798:	2b00      	cmp	r3, #0
 800379a:	d036      	beq.n	800380a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	695b      	ldr	r3, [r3, #20]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d019      	beq.n	80037d8 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80037a4:	4b44      	ldr	r3, [pc, #272]	; (80038b8 <HAL_RCC_OscConfig+0x520>)
 80037a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037a8:	4a43      	ldr	r2, [pc, #268]	; (80038b8 <HAL_RCC_OscConfig+0x520>)
 80037aa:	f043 0301 	orr.w	r3, r3, #1
 80037ae:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037b0:	f7fd fbd4 	bl	8000f5c <HAL_GetTick>
 80037b4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80037b6:	e008      	b.n	80037ca <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80037b8:	f7fd fbd0 	bl	8000f5c <HAL_GetTick>
 80037bc:	4602      	mov	r2, r0
 80037be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037c0:	1ad3      	subs	r3, r2, r3
 80037c2:	2b02      	cmp	r3, #2
 80037c4:	d901      	bls.n	80037ca <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 80037c6:	2303      	movs	r3, #3
 80037c8:	e1ef      	b.n	8003baa <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80037ca:	4b3b      	ldr	r3, [pc, #236]	; (80038b8 <HAL_RCC_OscConfig+0x520>)
 80037cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037ce:	f003 0302 	and.w	r3, r3, #2
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d0f0      	beq.n	80037b8 <HAL_RCC_OscConfig+0x420>
 80037d6:	e018      	b.n	800380a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80037d8:	4b37      	ldr	r3, [pc, #220]	; (80038b8 <HAL_RCC_OscConfig+0x520>)
 80037da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037dc:	4a36      	ldr	r2, [pc, #216]	; (80038b8 <HAL_RCC_OscConfig+0x520>)
 80037de:	f023 0301 	bic.w	r3, r3, #1
 80037e2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037e4:	f7fd fbba 	bl	8000f5c <HAL_GetTick>
 80037e8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80037ea:	e008      	b.n	80037fe <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80037ec:	f7fd fbb6 	bl	8000f5c <HAL_GetTick>
 80037f0:	4602      	mov	r2, r0
 80037f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037f4:	1ad3      	subs	r3, r2, r3
 80037f6:	2b02      	cmp	r3, #2
 80037f8:	d901      	bls.n	80037fe <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 80037fa:	2303      	movs	r3, #3
 80037fc:	e1d5      	b.n	8003baa <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80037fe:	4b2e      	ldr	r3, [pc, #184]	; (80038b8 <HAL_RCC_OscConfig+0x520>)
 8003800:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003802:	f003 0302 	and.w	r3, r3, #2
 8003806:	2b00      	cmp	r3, #0
 8003808:	d1f0      	bne.n	80037ec <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f003 0320 	and.w	r3, r3, #32
 8003812:	2b00      	cmp	r3, #0
 8003814:	d036      	beq.n	8003884 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	699b      	ldr	r3, [r3, #24]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d019      	beq.n	8003852 <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800381e:	4b26      	ldr	r3, [pc, #152]	; (80038b8 <HAL_RCC_OscConfig+0x520>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	4a25      	ldr	r2, [pc, #148]	; (80038b8 <HAL_RCC_OscConfig+0x520>)
 8003824:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003828:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800382a:	f7fd fb97 	bl	8000f5c <HAL_GetTick>
 800382e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003830:	e008      	b.n	8003844 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003832:	f7fd fb93 	bl	8000f5c <HAL_GetTick>
 8003836:	4602      	mov	r2, r0
 8003838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800383a:	1ad3      	subs	r3, r2, r3
 800383c:	2b02      	cmp	r3, #2
 800383e:	d901      	bls.n	8003844 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8003840:	2303      	movs	r3, #3
 8003842:	e1b2      	b.n	8003baa <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003844:	4b1c      	ldr	r3, [pc, #112]	; (80038b8 <HAL_RCC_OscConfig+0x520>)
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800384c:	2b00      	cmp	r3, #0
 800384e:	d0f0      	beq.n	8003832 <HAL_RCC_OscConfig+0x49a>
 8003850:	e018      	b.n	8003884 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003852:	4b19      	ldr	r3, [pc, #100]	; (80038b8 <HAL_RCC_OscConfig+0x520>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	4a18      	ldr	r2, [pc, #96]	; (80038b8 <HAL_RCC_OscConfig+0x520>)
 8003858:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800385c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800385e:	f7fd fb7d 	bl	8000f5c <HAL_GetTick>
 8003862:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003864:	e008      	b.n	8003878 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003866:	f7fd fb79 	bl	8000f5c <HAL_GetTick>
 800386a:	4602      	mov	r2, r0
 800386c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800386e:	1ad3      	subs	r3, r2, r3
 8003870:	2b02      	cmp	r3, #2
 8003872:	d901      	bls.n	8003878 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8003874:	2303      	movs	r3, #3
 8003876:	e198      	b.n	8003baa <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003878:	4b0f      	ldr	r3, [pc, #60]	; (80038b8 <HAL_RCC_OscConfig+0x520>)
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003880:	2b00      	cmp	r3, #0
 8003882:	d1f0      	bne.n	8003866 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f003 0304 	and.w	r3, r3, #4
 800388c:	2b00      	cmp	r3, #0
 800388e:	f000 8085 	beq.w	800399c <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003892:	4b0a      	ldr	r3, [pc, #40]	; (80038bc <HAL_RCC_OscConfig+0x524>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	4a09      	ldr	r2, [pc, #36]	; (80038bc <HAL_RCC_OscConfig+0x524>)
 8003898:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800389c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800389e:	f7fd fb5d 	bl	8000f5c <HAL_GetTick>
 80038a2:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80038a4:	e00c      	b.n	80038c0 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80038a6:	f7fd fb59 	bl	8000f5c <HAL_GetTick>
 80038aa:	4602      	mov	r2, r0
 80038ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ae:	1ad3      	subs	r3, r2, r3
 80038b0:	2b64      	cmp	r3, #100	; 0x64
 80038b2:	d905      	bls.n	80038c0 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 80038b4:	2303      	movs	r3, #3
 80038b6:	e178      	b.n	8003baa <HAL_RCC_OscConfig+0x812>
 80038b8:	58024400 	.word	0x58024400
 80038bc:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80038c0:	4b96      	ldr	r3, [pc, #600]	; (8003b1c <HAL_RCC_OscConfig+0x784>)
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d0ec      	beq.n	80038a6 <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	689b      	ldr	r3, [r3, #8]
 80038d0:	2b01      	cmp	r3, #1
 80038d2:	d106      	bne.n	80038e2 <HAL_RCC_OscConfig+0x54a>
 80038d4:	4b92      	ldr	r3, [pc, #584]	; (8003b20 <HAL_RCC_OscConfig+0x788>)
 80038d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038d8:	4a91      	ldr	r2, [pc, #580]	; (8003b20 <HAL_RCC_OscConfig+0x788>)
 80038da:	f043 0301 	orr.w	r3, r3, #1
 80038de:	6713      	str	r3, [r2, #112]	; 0x70
 80038e0:	e02d      	b.n	800393e <HAL_RCC_OscConfig+0x5a6>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	689b      	ldr	r3, [r3, #8]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d10c      	bne.n	8003904 <HAL_RCC_OscConfig+0x56c>
 80038ea:	4b8d      	ldr	r3, [pc, #564]	; (8003b20 <HAL_RCC_OscConfig+0x788>)
 80038ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038ee:	4a8c      	ldr	r2, [pc, #560]	; (8003b20 <HAL_RCC_OscConfig+0x788>)
 80038f0:	f023 0301 	bic.w	r3, r3, #1
 80038f4:	6713      	str	r3, [r2, #112]	; 0x70
 80038f6:	4b8a      	ldr	r3, [pc, #552]	; (8003b20 <HAL_RCC_OscConfig+0x788>)
 80038f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038fa:	4a89      	ldr	r2, [pc, #548]	; (8003b20 <HAL_RCC_OscConfig+0x788>)
 80038fc:	f023 0304 	bic.w	r3, r3, #4
 8003900:	6713      	str	r3, [r2, #112]	; 0x70
 8003902:	e01c      	b.n	800393e <HAL_RCC_OscConfig+0x5a6>
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	689b      	ldr	r3, [r3, #8]
 8003908:	2b05      	cmp	r3, #5
 800390a:	d10c      	bne.n	8003926 <HAL_RCC_OscConfig+0x58e>
 800390c:	4b84      	ldr	r3, [pc, #528]	; (8003b20 <HAL_RCC_OscConfig+0x788>)
 800390e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003910:	4a83      	ldr	r2, [pc, #524]	; (8003b20 <HAL_RCC_OscConfig+0x788>)
 8003912:	f043 0304 	orr.w	r3, r3, #4
 8003916:	6713      	str	r3, [r2, #112]	; 0x70
 8003918:	4b81      	ldr	r3, [pc, #516]	; (8003b20 <HAL_RCC_OscConfig+0x788>)
 800391a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800391c:	4a80      	ldr	r2, [pc, #512]	; (8003b20 <HAL_RCC_OscConfig+0x788>)
 800391e:	f043 0301 	orr.w	r3, r3, #1
 8003922:	6713      	str	r3, [r2, #112]	; 0x70
 8003924:	e00b      	b.n	800393e <HAL_RCC_OscConfig+0x5a6>
 8003926:	4b7e      	ldr	r3, [pc, #504]	; (8003b20 <HAL_RCC_OscConfig+0x788>)
 8003928:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800392a:	4a7d      	ldr	r2, [pc, #500]	; (8003b20 <HAL_RCC_OscConfig+0x788>)
 800392c:	f023 0301 	bic.w	r3, r3, #1
 8003930:	6713      	str	r3, [r2, #112]	; 0x70
 8003932:	4b7b      	ldr	r3, [pc, #492]	; (8003b20 <HAL_RCC_OscConfig+0x788>)
 8003934:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003936:	4a7a      	ldr	r2, [pc, #488]	; (8003b20 <HAL_RCC_OscConfig+0x788>)
 8003938:	f023 0304 	bic.w	r3, r3, #4
 800393c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	689b      	ldr	r3, [r3, #8]
 8003942:	2b00      	cmp	r3, #0
 8003944:	d015      	beq.n	8003972 <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003946:	f7fd fb09 	bl	8000f5c <HAL_GetTick>
 800394a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800394c:	e00a      	b.n	8003964 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800394e:	f7fd fb05 	bl	8000f5c <HAL_GetTick>
 8003952:	4602      	mov	r2, r0
 8003954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003956:	1ad3      	subs	r3, r2, r3
 8003958:	f241 3288 	movw	r2, #5000	; 0x1388
 800395c:	4293      	cmp	r3, r2
 800395e:	d901      	bls.n	8003964 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8003960:	2303      	movs	r3, #3
 8003962:	e122      	b.n	8003baa <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003964:	4b6e      	ldr	r3, [pc, #440]	; (8003b20 <HAL_RCC_OscConfig+0x788>)
 8003966:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003968:	f003 0302 	and.w	r3, r3, #2
 800396c:	2b00      	cmp	r3, #0
 800396e:	d0ee      	beq.n	800394e <HAL_RCC_OscConfig+0x5b6>
 8003970:	e014      	b.n	800399c <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003972:	f7fd faf3 	bl	8000f5c <HAL_GetTick>
 8003976:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003978:	e00a      	b.n	8003990 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800397a:	f7fd faef 	bl	8000f5c <HAL_GetTick>
 800397e:	4602      	mov	r2, r0
 8003980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003982:	1ad3      	subs	r3, r2, r3
 8003984:	f241 3288 	movw	r2, #5000	; 0x1388
 8003988:	4293      	cmp	r3, r2
 800398a:	d901      	bls.n	8003990 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 800398c:	2303      	movs	r3, #3
 800398e:	e10c      	b.n	8003baa <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003990:	4b63      	ldr	r3, [pc, #396]	; (8003b20 <HAL_RCC_OscConfig+0x788>)
 8003992:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003994:	f003 0302 	and.w	r3, r3, #2
 8003998:	2b00      	cmp	r3, #0
 800399a:	d1ee      	bne.n	800397a <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	f000 8101 	beq.w	8003ba8 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80039a6:	4b5e      	ldr	r3, [pc, #376]	; (8003b20 <HAL_RCC_OscConfig+0x788>)
 80039a8:	691b      	ldr	r3, [r3, #16]
 80039aa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80039ae:	2b18      	cmp	r3, #24
 80039b0:	f000 80bc 	beq.w	8003b2c <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039b8:	2b02      	cmp	r3, #2
 80039ba:	f040 8095 	bne.w	8003ae8 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039be:	4b58      	ldr	r3, [pc, #352]	; (8003b20 <HAL_RCC_OscConfig+0x788>)
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	4a57      	ldr	r2, [pc, #348]	; (8003b20 <HAL_RCC_OscConfig+0x788>)
 80039c4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80039c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039ca:	f7fd fac7 	bl	8000f5c <HAL_GetTick>
 80039ce:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80039d0:	e008      	b.n	80039e4 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80039d2:	f7fd fac3 	bl	8000f5c <HAL_GetTick>
 80039d6:	4602      	mov	r2, r0
 80039d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039da:	1ad3      	subs	r3, r2, r3
 80039dc:	2b02      	cmp	r3, #2
 80039de:	d901      	bls.n	80039e4 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 80039e0:	2303      	movs	r3, #3
 80039e2:	e0e2      	b.n	8003baa <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80039e4:	4b4e      	ldr	r3, [pc, #312]	; (8003b20 <HAL_RCC_OscConfig+0x788>)
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d1f0      	bne.n	80039d2 <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80039f0:	4b4b      	ldr	r3, [pc, #300]	; (8003b20 <HAL_RCC_OscConfig+0x788>)
 80039f2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80039f4:	4b4b      	ldr	r3, [pc, #300]	; (8003b24 <HAL_RCC_OscConfig+0x78c>)
 80039f6:	4013      	ands	r3, r2
 80039f8:	687a      	ldr	r2, [r7, #4]
 80039fa:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80039fc:	687a      	ldr	r2, [r7, #4]
 80039fe:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003a00:	0112      	lsls	r2, r2, #4
 8003a02:	430a      	orrs	r2, r1
 8003a04:	4946      	ldr	r1, [pc, #280]	; (8003b20 <HAL_RCC_OscConfig+0x788>)
 8003a06:	4313      	orrs	r3, r2
 8003a08:	628b      	str	r3, [r1, #40]	; 0x28
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a0e:	3b01      	subs	r3, #1
 8003a10:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a18:	3b01      	subs	r3, #1
 8003a1a:	025b      	lsls	r3, r3, #9
 8003a1c:	b29b      	uxth	r3, r3
 8003a1e:	431a      	orrs	r2, r3
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a24:	3b01      	subs	r3, #1
 8003a26:	041b      	lsls	r3, r3, #16
 8003a28:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003a2c:	431a      	orrs	r2, r3
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a32:	3b01      	subs	r3, #1
 8003a34:	061b      	lsls	r3, r3, #24
 8003a36:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003a3a:	4939      	ldr	r1, [pc, #228]	; (8003b20 <HAL_RCC_OscConfig+0x788>)
 8003a3c:	4313      	orrs	r3, r2
 8003a3e:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8003a40:	4b37      	ldr	r3, [pc, #220]	; (8003b20 <HAL_RCC_OscConfig+0x788>)
 8003a42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a44:	4a36      	ldr	r2, [pc, #216]	; (8003b20 <HAL_RCC_OscConfig+0x788>)
 8003a46:	f023 0301 	bic.w	r3, r3, #1
 8003a4a:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003a4c:	4b34      	ldr	r3, [pc, #208]	; (8003b20 <HAL_RCC_OscConfig+0x788>)
 8003a4e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a50:	4b35      	ldr	r3, [pc, #212]	; (8003b28 <HAL_RCC_OscConfig+0x790>)
 8003a52:	4013      	ands	r3, r2
 8003a54:	687a      	ldr	r2, [r7, #4]
 8003a56:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003a58:	00d2      	lsls	r2, r2, #3
 8003a5a:	4931      	ldr	r1, [pc, #196]	; (8003b20 <HAL_RCC_OscConfig+0x788>)
 8003a5c:	4313      	orrs	r3, r2
 8003a5e:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003a60:	4b2f      	ldr	r3, [pc, #188]	; (8003b20 <HAL_RCC_OscConfig+0x788>)
 8003a62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a64:	f023 020c 	bic.w	r2, r3, #12
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a6c:	492c      	ldr	r1, [pc, #176]	; (8003b20 <HAL_RCC_OscConfig+0x788>)
 8003a6e:	4313      	orrs	r3, r2
 8003a70:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003a72:	4b2b      	ldr	r3, [pc, #172]	; (8003b20 <HAL_RCC_OscConfig+0x788>)
 8003a74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a76:	f023 0202 	bic.w	r2, r3, #2
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a7e:	4928      	ldr	r1, [pc, #160]	; (8003b20 <HAL_RCC_OscConfig+0x788>)
 8003a80:	4313      	orrs	r3, r2
 8003a82:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003a84:	4b26      	ldr	r3, [pc, #152]	; (8003b20 <HAL_RCC_OscConfig+0x788>)
 8003a86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a88:	4a25      	ldr	r2, [pc, #148]	; (8003b20 <HAL_RCC_OscConfig+0x788>)
 8003a8a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a8e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a90:	4b23      	ldr	r3, [pc, #140]	; (8003b20 <HAL_RCC_OscConfig+0x788>)
 8003a92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a94:	4a22      	ldr	r2, [pc, #136]	; (8003b20 <HAL_RCC_OscConfig+0x788>)
 8003a96:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a9a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003a9c:	4b20      	ldr	r3, [pc, #128]	; (8003b20 <HAL_RCC_OscConfig+0x788>)
 8003a9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aa0:	4a1f      	ldr	r2, [pc, #124]	; (8003b20 <HAL_RCC_OscConfig+0x788>)
 8003aa2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003aa6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8003aa8:	4b1d      	ldr	r3, [pc, #116]	; (8003b20 <HAL_RCC_OscConfig+0x788>)
 8003aaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aac:	4a1c      	ldr	r2, [pc, #112]	; (8003b20 <HAL_RCC_OscConfig+0x788>)
 8003aae:	f043 0301 	orr.w	r3, r3, #1
 8003ab2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ab4:	4b1a      	ldr	r3, [pc, #104]	; (8003b20 <HAL_RCC_OscConfig+0x788>)
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4a19      	ldr	r2, [pc, #100]	; (8003b20 <HAL_RCC_OscConfig+0x788>)
 8003aba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003abe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ac0:	f7fd fa4c 	bl	8000f5c <HAL_GetTick>
 8003ac4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003ac6:	e008      	b.n	8003ada <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ac8:	f7fd fa48 	bl	8000f5c <HAL_GetTick>
 8003acc:	4602      	mov	r2, r0
 8003ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ad0:	1ad3      	subs	r3, r2, r3
 8003ad2:	2b02      	cmp	r3, #2
 8003ad4:	d901      	bls.n	8003ada <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 8003ad6:	2303      	movs	r3, #3
 8003ad8:	e067      	b.n	8003baa <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003ada:	4b11      	ldr	r3, [pc, #68]	; (8003b20 <HAL_RCC_OscConfig+0x788>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d0f0      	beq.n	8003ac8 <HAL_RCC_OscConfig+0x730>
 8003ae6:	e05f      	b.n	8003ba8 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ae8:	4b0d      	ldr	r3, [pc, #52]	; (8003b20 <HAL_RCC_OscConfig+0x788>)
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4a0c      	ldr	r2, [pc, #48]	; (8003b20 <HAL_RCC_OscConfig+0x788>)
 8003aee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003af2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003af4:	f7fd fa32 	bl	8000f5c <HAL_GetTick>
 8003af8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003afa:	e008      	b.n	8003b0e <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003afc:	f7fd fa2e 	bl	8000f5c <HAL_GetTick>
 8003b00:	4602      	mov	r2, r0
 8003b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b04:	1ad3      	subs	r3, r2, r3
 8003b06:	2b02      	cmp	r3, #2
 8003b08:	d901      	bls.n	8003b0e <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 8003b0a:	2303      	movs	r3, #3
 8003b0c:	e04d      	b.n	8003baa <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003b0e:	4b04      	ldr	r3, [pc, #16]	; (8003b20 <HAL_RCC_OscConfig+0x788>)
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d1f0      	bne.n	8003afc <HAL_RCC_OscConfig+0x764>
 8003b1a:	e045      	b.n	8003ba8 <HAL_RCC_OscConfig+0x810>
 8003b1c:	58024800 	.word	0x58024800
 8003b20:	58024400 	.word	0x58024400
 8003b24:	fffffc0c 	.word	0xfffffc0c
 8003b28:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003b2c:	4b21      	ldr	r3, [pc, #132]	; (8003bb4 <HAL_RCC_OscConfig+0x81c>)
 8003b2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b30:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003b32:	4b20      	ldr	r3, [pc, #128]	; (8003bb4 <HAL_RCC_OscConfig+0x81c>)
 8003b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b36:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b3c:	2b01      	cmp	r3, #1
 8003b3e:	d031      	beq.n	8003ba4 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b40:	693b      	ldr	r3, [r7, #16]
 8003b42:	f003 0203 	and.w	r2, r3, #3
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b4a:	429a      	cmp	r2, r3
 8003b4c:	d12a      	bne.n	8003ba4 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003b4e:	693b      	ldr	r3, [r7, #16]
 8003b50:	091b      	lsrs	r3, r3, #4
 8003b52:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b5a:	429a      	cmp	r2, r3
 8003b5c:	d122      	bne.n	8003ba4 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b68:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003b6a:	429a      	cmp	r2, r3
 8003b6c:	d11a      	bne.n	8003ba4 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	0a5b      	lsrs	r3, r3, #9
 8003b72:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b7a:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003b7c:	429a      	cmp	r2, r3
 8003b7e:	d111      	bne.n	8003ba4 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	0c1b      	lsrs	r3, r3, #16
 8003b84:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b8c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003b8e:	429a      	cmp	r2, r3
 8003b90:	d108      	bne.n	8003ba4 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	0e1b      	lsrs	r3, r3, #24
 8003b96:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b9e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003ba0:	429a      	cmp	r2, r3
 8003ba2:	d001      	beq.n	8003ba8 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8003ba4:	2301      	movs	r3, #1
 8003ba6:	e000      	b.n	8003baa <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8003ba8:	2300      	movs	r3, #0
}
 8003baa:	4618      	mov	r0, r3
 8003bac:	3730      	adds	r7, #48	; 0x30
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	bd80      	pop	{r7, pc}
 8003bb2:	bf00      	nop
 8003bb4:	58024400 	.word	0x58024400

08003bb8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b086      	sub	sp, #24
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
 8003bc0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d101      	bne.n	8003bcc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003bc8:	2301      	movs	r3, #1
 8003bca:	e19c      	b.n	8003f06 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003bcc:	4b8a      	ldr	r3, [pc, #552]	; (8003df8 <HAL_RCC_ClockConfig+0x240>)
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f003 030f 	and.w	r3, r3, #15
 8003bd4:	683a      	ldr	r2, [r7, #0]
 8003bd6:	429a      	cmp	r2, r3
 8003bd8:	d910      	bls.n	8003bfc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bda:	4b87      	ldr	r3, [pc, #540]	; (8003df8 <HAL_RCC_ClockConfig+0x240>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f023 020f 	bic.w	r2, r3, #15
 8003be2:	4985      	ldr	r1, [pc, #532]	; (8003df8 <HAL_RCC_ClockConfig+0x240>)
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	4313      	orrs	r3, r2
 8003be8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bea:	4b83      	ldr	r3, [pc, #524]	; (8003df8 <HAL_RCC_ClockConfig+0x240>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f003 030f 	and.w	r3, r3, #15
 8003bf2:	683a      	ldr	r2, [r7, #0]
 8003bf4:	429a      	cmp	r2, r3
 8003bf6:	d001      	beq.n	8003bfc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003bf8:	2301      	movs	r3, #1
 8003bfa:	e184      	b.n	8003f06 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f003 0304 	and.w	r3, r3, #4
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d010      	beq.n	8003c2a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	691a      	ldr	r2, [r3, #16]
 8003c0c:	4b7b      	ldr	r3, [pc, #492]	; (8003dfc <HAL_RCC_ClockConfig+0x244>)
 8003c0e:	699b      	ldr	r3, [r3, #24]
 8003c10:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003c14:	429a      	cmp	r2, r3
 8003c16:	d908      	bls.n	8003c2a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003c18:	4b78      	ldr	r3, [pc, #480]	; (8003dfc <HAL_RCC_ClockConfig+0x244>)
 8003c1a:	699b      	ldr	r3, [r3, #24]
 8003c1c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	691b      	ldr	r3, [r3, #16]
 8003c24:	4975      	ldr	r1, [pc, #468]	; (8003dfc <HAL_RCC_ClockConfig+0x244>)
 8003c26:	4313      	orrs	r3, r2
 8003c28:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f003 0308 	and.w	r3, r3, #8
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d010      	beq.n	8003c58 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	695a      	ldr	r2, [r3, #20]
 8003c3a:	4b70      	ldr	r3, [pc, #448]	; (8003dfc <HAL_RCC_ClockConfig+0x244>)
 8003c3c:	69db      	ldr	r3, [r3, #28]
 8003c3e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003c42:	429a      	cmp	r2, r3
 8003c44:	d908      	bls.n	8003c58 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003c46:	4b6d      	ldr	r3, [pc, #436]	; (8003dfc <HAL_RCC_ClockConfig+0x244>)
 8003c48:	69db      	ldr	r3, [r3, #28]
 8003c4a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	695b      	ldr	r3, [r3, #20]
 8003c52:	496a      	ldr	r1, [pc, #424]	; (8003dfc <HAL_RCC_ClockConfig+0x244>)
 8003c54:	4313      	orrs	r3, r2
 8003c56:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f003 0310 	and.w	r3, r3, #16
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d010      	beq.n	8003c86 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	699a      	ldr	r2, [r3, #24]
 8003c68:	4b64      	ldr	r3, [pc, #400]	; (8003dfc <HAL_RCC_ClockConfig+0x244>)
 8003c6a:	69db      	ldr	r3, [r3, #28]
 8003c6c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003c70:	429a      	cmp	r2, r3
 8003c72:	d908      	bls.n	8003c86 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003c74:	4b61      	ldr	r3, [pc, #388]	; (8003dfc <HAL_RCC_ClockConfig+0x244>)
 8003c76:	69db      	ldr	r3, [r3, #28]
 8003c78:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	699b      	ldr	r3, [r3, #24]
 8003c80:	495e      	ldr	r1, [pc, #376]	; (8003dfc <HAL_RCC_ClockConfig+0x244>)
 8003c82:	4313      	orrs	r3, r2
 8003c84:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f003 0320 	and.w	r3, r3, #32
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d010      	beq.n	8003cb4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	69da      	ldr	r2, [r3, #28]
 8003c96:	4b59      	ldr	r3, [pc, #356]	; (8003dfc <HAL_RCC_ClockConfig+0x244>)
 8003c98:	6a1b      	ldr	r3, [r3, #32]
 8003c9a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003c9e:	429a      	cmp	r2, r3
 8003ca0:	d908      	bls.n	8003cb4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003ca2:	4b56      	ldr	r3, [pc, #344]	; (8003dfc <HAL_RCC_ClockConfig+0x244>)
 8003ca4:	6a1b      	ldr	r3, [r3, #32]
 8003ca6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	69db      	ldr	r3, [r3, #28]
 8003cae:	4953      	ldr	r1, [pc, #332]	; (8003dfc <HAL_RCC_ClockConfig+0x244>)
 8003cb0:	4313      	orrs	r3, r2
 8003cb2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f003 0302 	and.w	r3, r3, #2
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d010      	beq.n	8003ce2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	68da      	ldr	r2, [r3, #12]
 8003cc4:	4b4d      	ldr	r3, [pc, #308]	; (8003dfc <HAL_RCC_ClockConfig+0x244>)
 8003cc6:	699b      	ldr	r3, [r3, #24]
 8003cc8:	f003 030f 	and.w	r3, r3, #15
 8003ccc:	429a      	cmp	r2, r3
 8003cce:	d908      	bls.n	8003ce2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003cd0:	4b4a      	ldr	r3, [pc, #296]	; (8003dfc <HAL_RCC_ClockConfig+0x244>)
 8003cd2:	699b      	ldr	r3, [r3, #24]
 8003cd4:	f023 020f 	bic.w	r2, r3, #15
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	68db      	ldr	r3, [r3, #12]
 8003cdc:	4947      	ldr	r1, [pc, #284]	; (8003dfc <HAL_RCC_ClockConfig+0x244>)
 8003cde:	4313      	orrs	r3, r2
 8003ce0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f003 0301 	and.w	r3, r3, #1
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d055      	beq.n	8003d9a <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003cee:	4b43      	ldr	r3, [pc, #268]	; (8003dfc <HAL_RCC_ClockConfig+0x244>)
 8003cf0:	699b      	ldr	r3, [r3, #24]
 8003cf2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	689b      	ldr	r3, [r3, #8]
 8003cfa:	4940      	ldr	r1, [pc, #256]	; (8003dfc <HAL_RCC_ClockConfig+0x244>)
 8003cfc:	4313      	orrs	r3, r2
 8003cfe:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	685b      	ldr	r3, [r3, #4]
 8003d04:	2b02      	cmp	r3, #2
 8003d06:	d107      	bne.n	8003d18 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003d08:	4b3c      	ldr	r3, [pc, #240]	; (8003dfc <HAL_RCC_ClockConfig+0x244>)
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d121      	bne.n	8003d58 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003d14:	2301      	movs	r3, #1
 8003d16:	e0f6      	b.n	8003f06 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	685b      	ldr	r3, [r3, #4]
 8003d1c:	2b03      	cmp	r3, #3
 8003d1e:	d107      	bne.n	8003d30 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003d20:	4b36      	ldr	r3, [pc, #216]	; (8003dfc <HAL_RCC_ClockConfig+0x244>)
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d115      	bne.n	8003d58 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003d2c:	2301      	movs	r3, #1
 8003d2e:	e0ea      	b.n	8003f06 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	685b      	ldr	r3, [r3, #4]
 8003d34:	2b01      	cmp	r3, #1
 8003d36:	d107      	bne.n	8003d48 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003d38:	4b30      	ldr	r3, [pc, #192]	; (8003dfc <HAL_RCC_ClockConfig+0x244>)
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d109      	bne.n	8003d58 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003d44:	2301      	movs	r3, #1
 8003d46:	e0de      	b.n	8003f06 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003d48:	4b2c      	ldr	r3, [pc, #176]	; (8003dfc <HAL_RCC_ClockConfig+0x244>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f003 0304 	and.w	r3, r3, #4
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d101      	bne.n	8003d58 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003d54:	2301      	movs	r3, #1
 8003d56:	e0d6      	b.n	8003f06 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003d58:	4b28      	ldr	r3, [pc, #160]	; (8003dfc <HAL_RCC_ClockConfig+0x244>)
 8003d5a:	691b      	ldr	r3, [r3, #16]
 8003d5c:	f023 0207 	bic.w	r2, r3, #7
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	685b      	ldr	r3, [r3, #4]
 8003d64:	4925      	ldr	r1, [pc, #148]	; (8003dfc <HAL_RCC_ClockConfig+0x244>)
 8003d66:	4313      	orrs	r3, r2
 8003d68:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d6a:	f7fd f8f7 	bl	8000f5c <HAL_GetTick>
 8003d6e:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d70:	e00a      	b.n	8003d88 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d72:	f7fd f8f3 	bl	8000f5c <HAL_GetTick>
 8003d76:	4602      	mov	r2, r0
 8003d78:	697b      	ldr	r3, [r7, #20]
 8003d7a:	1ad3      	subs	r3, r2, r3
 8003d7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d80:	4293      	cmp	r3, r2
 8003d82:	d901      	bls.n	8003d88 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8003d84:	2303      	movs	r3, #3
 8003d86:	e0be      	b.n	8003f06 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d88:	4b1c      	ldr	r3, [pc, #112]	; (8003dfc <HAL_RCC_ClockConfig+0x244>)
 8003d8a:	691b      	ldr	r3, [r3, #16]
 8003d8c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	685b      	ldr	r3, [r3, #4]
 8003d94:	00db      	lsls	r3, r3, #3
 8003d96:	429a      	cmp	r2, r3
 8003d98:	d1eb      	bne.n	8003d72 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f003 0302 	and.w	r3, r3, #2
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d010      	beq.n	8003dc8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	68da      	ldr	r2, [r3, #12]
 8003daa:	4b14      	ldr	r3, [pc, #80]	; (8003dfc <HAL_RCC_ClockConfig+0x244>)
 8003dac:	699b      	ldr	r3, [r3, #24]
 8003dae:	f003 030f 	and.w	r3, r3, #15
 8003db2:	429a      	cmp	r2, r3
 8003db4:	d208      	bcs.n	8003dc8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003db6:	4b11      	ldr	r3, [pc, #68]	; (8003dfc <HAL_RCC_ClockConfig+0x244>)
 8003db8:	699b      	ldr	r3, [r3, #24]
 8003dba:	f023 020f 	bic.w	r2, r3, #15
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	68db      	ldr	r3, [r3, #12]
 8003dc2:	490e      	ldr	r1, [pc, #56]	; (8003dfc <HAL_RCC_ClockConfig+0x244>)
 8003dc4:	4313      	orrs	r3, r2
 8003dc6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003dc8:	4b0b      	ldr	r3, [pc, #44]	; (8003df8 <HAL_RCC_ClockConfig+0x240>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f003 030f 	and.w	r3, r3, #15
 8003dd0:	683a      	ldr	r2, [r7, #0]
 8003dd2:	429a      	cmp	r2, r3
 8003dd4:	d214      	bcs.n	8003e00 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003dd6:	4b08      	ldr	r3, [pc, #32]	; (8003df8 <HAL_RCC_ClockConfig+0x240>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f023 020f 	bic.w	r2, r3, #15
 8003dde:	4906      	ldr	r1, [pc, #24]	; (8003df8 <HAL_RCC_ClockConfig+0x240>)
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	4313      	orrs	r3, r2
 8003de4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003de6:	4b04      	ldr	r3, [pc, #16]	; (8003df8 <HAL_RCC_ClockConfig+0x240>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f003 030f 	and.w	r3, r3, #15
 8003dee:	683a      	ldr	r2, [r7, #0]
 8003df0:	429a      	cmp	r2, r3
 8003df2:	d005      	beq.n	8003e00 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003df4:	2301      	movs	r3, #1
 8003df6:	e086      	b.n	8003f06 <HAL_RCC_ClockConfig+0x34e>
 8003df8:	52002000 	.word	0x52002000
 8003dfc:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f003 0304 	and.w	r3, r3, #4
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d010      	beq.n	8003e2e <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	691a      	ldr	r2, [r3, #16]
 8003e10:	4b3f      	ldr	r3, [pc, #252]	; (8003f10 <HAL_RCC_ClockConfig+0x358>)
 8003e12:	699b      	ldr	r3, [r3, #24]
 8003e14:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003e18:	429a      	cmp	r2, r3
 8003e1a:	d208      	bcs.n	8003e2e <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003e1c:	4b3c      	ldr	r3, [pc, #240]	; (8003f10 <HAL_RCC_ClockConfig+0x358>)
 8003e1e:	699b      	ldr	r3, [r3, #24]
 8003e20:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	691b      	ldr	r3, [r3, #16]
 8003e28:	4939      	ldr	r1, [pc, #228]	; (8003f10 <HAL_RCC_ClockConfig+0x358>)
 8003e2a:	4313      	orrs	r3, r2
 8003e2c:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f003 0308 	and.w	r3, r3, #8
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d010      	beq.n	8003e5c <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	695a      	ldr	r2, [r3, #20]
 8003e3e:	4b34      	ldr	r3, [pc, #208]	; (8003f10 <HAL_RCC_ClockConfig+0x358>)
 8003e40:	69db      	ldr	r3, [r3, #28]
 8003e42:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003e46:	429a      	cmp	r2, r3
 8003e48:	d208      	bcs.n	8003e5c <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003e4a:	4b31      	ldr	r3, [pc, #196]	; (8003f10 <HAL_RCC_ClockConfig+0x358>)
 8003e4c:	69db      	ldr	r3, [r3, #28]
 8003e4e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	695b      	ldr	r3, [r3, #20]
 8003e56:	492e      	ldr	r1, [pc, #184]	; (8003f10 <HAL_RCC_ClockConfig+0x358>)
 8003e58:	4313      	orrs	r3, r2
 8003e5a:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f003 0310 	and.w	r3, r3, #16
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d010      	beq.n	8003e8a <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	699a      	ldr	r2, [r3, #24]
 8003e6c:	4b28      	ldr	r3, [pc, #160]	; (8003f10 <HAL_RCC_ClockConfig+0x358>)
 8003e6e:	69db      	ldr	r3, [r3, #28]
 8003e70:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003e74:	429a      	cmp	r2, r3
 8003e76:	d208      	bcs.n	8003e8a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003e78:	4b25      	ldr	r3, [pc, #148]	; (8003f10 <HAL_RCC_ClockConfig+0x358>)
 8003e7a:	69db      	ldr	r3, [r3, #28]
 8003e7c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	699b      	ldr	r3, [r3, #24]
 8003e84:	4922      	ldr	r1, [pc, #136]	; (8003f10 <HAL_RCC_ClockConfig+0x358>)
 8003e86:	4313      	orrs	r3, r2
 8003e88:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f003 0320 	and.w	r3, r3, #32
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d010      	beq.n	8003eb8 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	69da      	ldr	r2, [r3, #28]
 8003e9a:	4b1d      	ldr	r3, [pc, #116]	; (8003f10 <HAL_RCC_ClockConfig+0x358>)
 8003e9c:	6a1b      	ldr	r3, [r3, #32]
 8003e9e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003ea2:	429a      	cmp	r2, r3
 8003ea4:	d208      	bcs.n	8003eb8 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003ea6:	4b1a      	ldr	r3, [pc, #104]	; (8003f10 <HAL_RCC_ClockConfig+0x358>)
 8003ea8:	6a1b      	ldr	r3, [r3, #32]
 8003eaa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	69db      	ldr	r3, [r3, #28]
 8003eb2:	4917      	ldr	r1, [pc, #92]	; (8003f10 <HAL_RCC_ClockConfig+0x358>)
 8003eb4:	4313      	orrs	r3, r2
 8003eb6:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003eb8:	f000 f834 	bl	8003f24 <HAL_RCC_GetSysClockFreq>
 8003ebc:	4602      	mov	r2, r0
 8003ebe:	4b14      	ldr	r3, [pc, #80]	; (8003f10 <HAL_RCC_ClockConfig+0x358>)
 8003ec0:	699b      	ldr	r3, [r3, #24]
 8003ec2:	0a1b      	lsrs	r3, r3, #8
 8003ec4:	f003 030f 	and.w	r3, r3, #15
 8003ec8:	4912      	ldr	r1, [pc, #72]	; (8003f14 <HAL_RCC_ClockConfig+0x35c>)
 8003eca:	5ccb      	ldrb	r3, [r1, r3]
 8003ecc:	f003 031f 	and.w	r3, r3, #31
 8003ed0:	fa22 f303 	lsr.w	r3, r2, r3
 8003ed4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003ed6:	4b0e      	ldr	r3, [pc, #56]	; (8003f10 <HAL_RCC_ClockConfig+0x358>)
 8003ed8:	699b      	ldr	r3, [r3, #24]
 8003eda:	f003 030f 	and.w	r3, r3, #15
 8003ede:	4a0d      	ldr	r2, [pc, #52]	; (8003f14 <HAL_RCC_ClockConfig+0x35c>)
 8003ee0:	5cd3      	ldrb	r3, [r2, r3]
 8003ee2:	f003 031f 	and.w	r3, r3, #31
 8003ee6:	693a      	ldr	r2, [r7, #16]
 8003ee8:	fa22 f303 	lsr.w	r3, r2, r3
 8003eec:	4a0a      	ldr	r2, [pc, #40]	; (8003f18 <HAL_RCC_ClockConfig+0x360>)
 8003eee:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003ef0:	4a0a      	ldr	r2, [pc, #40]	; (8003f1c <HAL_RCC_ClockConfig+0x364>)
 8003ef2:	693b      	ldr	r3, [r7, #16]
 8003ef4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8003ef6:	4b0a      	ldr	r3, [pc, #40]	; (8003f20 <HAL_RCC_ClockConfig+0x368>)
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	4618      	mov	r0, r3
 8003efc:	f7fc ffe4 	bl	8000ec8 <HAL_InitTick>
 8003f00:	4603      	mov	r3, r0
 8003f02:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003f04:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f06:	4618      	mov	r0, r3
 8003f08:	3718      	adds	r7, #24
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	bd80      	pop	{r7, pc}
 8003f0e:	bf00      	nop
 8003f10:	58024400 	.word	0x58024400
 8003f14:	08006e9c 	.word	0x08006e9c
 8003f18:	24000004 	.word	0x24000004
 8003f1c:	24000000 	.word	0x24000000
 8003f20:	24000008 	.word	0x24000008

08003f24 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f24:	b480      	push	{r7}
 8003f26:	b089      	sub	sp, #36	; 0x24
 8003f28:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003f2a:	4bb3      	ldr	r3, [pc, #716]	; (80041f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003f2c:	691b      	ldr	r3, [r3, #16]
 8003f2e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003f32:	2b18      	cmp	r3, #24
 8003f34:	f200 8155 	bhi.w	80041e2 <HAL_RCC_GetSysClockFreq+0x2be>
 8003f38:	a201      	add	r2, pc, #4	; (adr r2, 8003f40 <HAL_RCC_GetSysClockFreq+0x1c>)
 8003f3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f3e:	bf00      	nop
 8003f40:	08003fa5 	.word	0x08003fa5
 8003f44:	080041e3 	.word	0x080041e3
 8003f48:	080041e3 	.word	0x080041e3
 8003f4c:	080041e3 	.word	0x080041e3
 8003f50:	080041e3 	.word	0x080041e3
 8003f54:	080041e3 	.word	0x080041e3
 8003f58:	080041e3 	.word	0x080041e3
 8003f5c:	080041e3 	.word	0x080041e3
 8003f60:	08003fcb 	.word	0x08003fcb
 8003f64:	080041e3 	.word	0x080041e3
 8003f68:	080041e3 	.word	0x080041e3
 8003f6c:	080041e3 	.word	0x080041e3
 8003f70:	080041e3 	.word	0x080041e3
 8003f74:	080041e3 	.word	0x080041e3
 8003f78:	080041e3 	.word	0x080041e3
 8003f7c:	080041e3 	.word	0x080041e3
 8003f80:	08003fd1 	.word	0x08003fd1
 8003f84:	080041e3 	.word	0x080041e3
 8003f88:	080041e3 	.word	0x080041e3
 8003f8c:	080041e3 	.word	0x080041e3
 8003f90:	080041e3 	.word	0x080041e3
 8003f94:	080041e3 	.word	0x080041e3
 8003f98:	080041e3 	.word	0x080041e3
 8003f9c:	080041e3 	.word	0x080041e3
 8003fa0:	08003fd7 	.word	0x08003fd7
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003fa4:	4b94      	ldr	r3, [pc, #592]	; (80041f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f003 0320 	and.w	r3, r3, #32
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d009      	beq.n	8003fc4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003fb0:	4b91      	ldr	r3, [pc, #580]	; (80041f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	08db      	lsrs	r3, r3, #3
 8003fb6:	f003 0303 	and.w	r3, r3, #3
 8003fba:	4a90      	ldr	r2, [pc, #576]	; (80041fc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003fbc:	fa22 f303 	lsr.w	r3, r2, r3
 8003fc0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8003fc2:	e111      	b.n	80041e8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003fc4:	4b8d      	ldr	r3, [pc, #564]	; (80041fc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003fc6:	61bb      	str	r3, [r7, #24]
    break;
 8003fc8:	e10e      	b.n	80041e8 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8003fca:	4b8d      	ldr	r3, [pc, #564]	; (8004200 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003fcc:	61bb      	str	r3, [r7, #24]
    break;
 8003fce:	e10b      	b.n	80041e8 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8003fd0:	4b8c      	ldr	r3, [pc, #560]	; (8004204 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003fd2:	61bb      	str	r3, [r7, #24]
    break;
 8003fd4:	e108      	b.n	80041e8 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003fd6:	4b88      	ldr	r3, [pc, #544]	; (80041f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003fd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fda:	f003 0303 	and.w	r3, r3, #3
 8003fde:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8003fe0:	4b85      	ldr	r3, [pc, #532]	; (80041f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003fe2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fe4:	091b      	lsrs	r3, r3, #4
 8003fe6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003fea:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003fec:	4b82      	ldr	r3, [pc, #520]	; (80041f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003fee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ff0:	f003 0301 	and.w	r3, r3, #1
 8003ff4:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8003ff6:	4b80      	ldr	r3, [pc, #512]	; (80041f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003ff8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ffa:	08db      	lsrs	r3, r3, #3
 8003ffc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004000:	68fa      	ldr	r2, [r7, #12]
 8004002:	fb02 f303 	mul.w	r3, r2, r3
 8004006:	ee07 3a90 	vmov	s15, r3
 800400a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800400e:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8004012:	693b      	ldr	r3, [r7, #16]
 8004014:	2b00      	cmp	r3, #0
 8004016:	f000 80e1 	beq.w	80041dc <HAL_RCC_GetSysClockFreq+0x2b8>
 800401a:	697b      	ldr	r3, [r7, #20]
 800401c:	2b02      	cmp	r3, #2
 800401e:	f000 8083 	beq.w	8004128 <HAL_RCC_GetSysClockFreq+0x204>
 8004022:	697b      	ldr	r3, [r7, #20]
 8004024:	2b02      	cmp	r3, #2
 8004026:	f200 80a1 	bhi.w	800416c <HAL_RCC_GetSysClockFreq+0x248>
 800402a:	697b      	ldr	r3, [r7, #20]
 800402c:	2b00      	cmp	r3, #0
 800402e:	d003      	beq.n	8004038 <HAL_RCC_GetSysClockFreq+0x114>
 8004030:	697b      	ldr	r3, [r7, #20]
 8004032:	2b01      	cmp	r3, #1
 8004034:	d056      	beq.n	80040e4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8004036:	e099      	b.n	800416c <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004038:	4b6f      	ldr	r3, [pc, #444]	; (80041f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f003 0320 	and.w	r3, r3, #32
 8004040:	2b00      	cmp	r3, #0
 8004042:	d02d      	beq.n	80040a0 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004044:	4b6c      	ldr	r3, [pc, #432]	; (80041f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	08db      	lsrs	r3, r3, #3
 800404a:	f003 0303 	and.w	r3, r3, #3
 800404e:	4a6b      	ldr	r2, [pc, #428]	; (80041fc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004050:	fa22 f303 	lsr.w	r3, r2, r3
 8004054:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	ee07 3a90 	vmov	s15, r3
 800405c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004060:	693b      	ldr	r3, [r7, #16]
 8004062:	ee07 3a90 	vmov	s15, r3
 8004066:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800406a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800406e:	4b62      	ldr	r3, [pc, #392]	; (80041f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004072:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004076:	ee07 3a90 	vmov	s15, r3
 800407a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800407e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004082:	eddf 5a61 	vldr	s11, [pc, #388]	; 8004208 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004086:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800408a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800408e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004092:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004096:	ee67 7a27 	vmul.f32	s15, s14, s15
 800409a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800409e:	e087      	b.n	80041b0 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80040a0:	693b      	ldr	r3, [r7, #16]
 80040a2:	ee07 3a90 	vmov	s15, r3
 80040a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80040aa:	eddf 6a58 	vldr	s13, [pc, #352]	; 800420c <HAL_RCC_GetSysClockFreq+0x2e8>
 80040ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80040b2:	4b51      	ldr	r3, [pc, #324]	; (80041f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80040b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040ba:	ee07 3a90 	vmov	s15, r3
 80040be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80040c2:	ed97 6a02 	vldr	s12, [r7, #8]
 80040c6:	eddf 5a50 	vldr	s11, [pc, #320]	; 8004208 <HAL_RCC_GetSysClockFreq+0x2e4>
 80040ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80040ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80040d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80040d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80040da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80040de:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80040e2:	e065      	b.n	80041b0 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80040e4:	693b      	ldr	r3, [r7, #16]
 80040e6:	ee07 3a90 	vmov	s15, r3
 80040ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80040ee:	eddf 6a48 	vldr	s13, [pc, #288]	; 8004210 <HAL_RCC_GetSysClockFreq+0x2ec>
 80040f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80040f6:	4b40      	ldr	r3, [pc, #256]	; (80041f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80040f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040fe:	ee07 3a90 	vmov	s15, r3
 8004102:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004106:	ed97 6a02 	vldr	s12, [r7, #8]
 800410a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8004208 <HAL_RCC_GetSysClockFreq+0x2e4>
 800410e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004112:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004116:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800411a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800411e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004122:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004126:	e043      	b.n	80041b0 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004128:	693b      	ldr	r3, [r7, #16]
 800412a:	ee07 3a90 	vmov	s15, r3
 800412e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004132:	eddf 6a38 	vldr	s13, [pc, #224]	; 8004214 <HAL_RCC_GetSysClockFreq+0x2f0>
 8004136:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800413a:	4b2f      	ldr	r3, [pc, #188]	; (80041f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800413c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800413e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004142:	ee07 3a90 	vmov	s15, r3
 8004146:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800414a:	ed97 6a02 	vldr	s12, [r7, #8]
 800414e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8004208 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004152:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004156:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800415a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800415e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004162:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004166:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800416a:	e021      	b.n	80041b0 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800416c:	693b      	ldr	r3, [r7, #16]
 800416e:	ee07 3a90 	vmov	s15, r3
 8004172:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004176:	eddf 6a26 	vldr	s13, [pc, #152]	; 8004210 <HAL_RCC_GetSysClockFreq+0x2ec>
 800417a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800417e:	4b1e      	ldr	r3, [pc, #120]	; (80041f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004182:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004186:	ee07 3a90 	vmov	s15, r3
 800418a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800418e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004192:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8004208 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004196:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800419a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800419e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80041a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80041a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80041aa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80041ae:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80041b0:	4b11      	ldr	r3, [pc, #68]	; (80041f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80041b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041b4:	0a5b      	lsrs	r3, r3, #9
 80041b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80041ba:	3301      	adds	r3, #1
 80041bc:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	ee07 3a90 	vmov	s15, r3
 80041c4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80041c8:	edd7 6a07 	vldr	s13, [r7, #28]
 80041cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80041d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80041d4:	ee17 3a90 	vmov	r3, s15
 80041d8:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80041da:	e005      	b.n	80041e8 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80041dc:	2300      	movs	r3, #0
 80041de:	61bb      	str	r3, [r7, #24]
    break;
 80041e0:	e002      	b.n	80041e8 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80041e2:	4b07      	ldr	r3, [pc, #28]	; (8004200 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80041e4:	61bb      	str	r3, [r7, #24]
    break;
 80041e6:	bf00      	nop
  }

  return sysclockfreq;
 80041e8:	69bb      	ldr	r3, [r7, #24]
}
 80041ea:	4618      	mov	r0, r3
 80041ec:	3724      	adds	r7, #36	; 0x24
 80041ee:	46bd      	mov	sp, r7
 80041f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f4:	4770      	bx	lr
 80041f6:	bf00      	nop
 80041f8:	58024400 	.word	0x58024400
 80041fc:	03d09000 	.word	0x03d09000
 8004200:	003d0900 	.word	0x003d0900
 8004204:	017d7840 	.word	0x017d7840
 8004208:	46000000 	.word	0x46000000
 800420c:	4c742400 	.word	0x4c742400
 8004210:	4a742400 	.word	0x4a742400
 8004214:	4bbebc20 	.word	0x4bbebc20

08004218 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004218:	b580      	push	{r7, lr}
 800421a:	b082      	sub	sp, #8
 800421c:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800421e:	f7ff fe81 	bl	8003f24 <HAL_RCC_GetSysClockFreq>
 8004222:	4602      	mov	r2, r0
 8004224:	4b10      	ldr	r3, [pc, #64]	; (8004268 <HAL_RCC_GetHCLKFreq+0x50>)
 8004226:	699b      	ldr	r3, [r3, #24]
 8004228:	0a1b      	lsrs	r3, r3, #8
 800422a:	f003 030f 	and.w	r3, r3, #15
 800422e:	490f      	ldr	r1, [pc, #60]	; (800426c <HAL_RCC_GetHCLKFreq+0x54>)
 8004230:	5ccb      	ldrb	r3, [r1, r3]
 8004232:	f003 031f 	and.w	r3, r3, #31
 8004236:	fa22 f303 	lsr.w	r3, r2, r3
 800423a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800423c:	4b0a      	ldr	r3, [pc, #40]	; (8004268 <HAL_RCC_GetHCLKFreq+0x50>)
 800423e:	699b      	ldr	r3, [r3, #24]
 8004240:	f003 030f 	and.w	r3, r3, #15
 8004244:	4a09      	ldr	r2, [pc, #36]	; (800426c <HAL_RCC_GetHCLKFreq+0x54>)
 8004246:	5cd3      	ldrb	r3, [r2, r3]
 8004248:	f003 031f 	and.w	r3, r3, #31
 800424c:	687a      	ldr	r2, [r7, #4]
 800424e:	fa22 f303 	lsr.w	r3, r2, r3
 8004252:	4a07      	ldr	r2, [pc, #28]	; (8004270 <HAL_RCC_GetHCLKFreq+0x58>)
 8004254:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004256:	4a07      	ldr	r2, [pc, #28]	; (8004274 <HAL_RCC_GetHCLKFreq+0x5c>)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800425c:	4b04      	ldr	r3, [pc, #16]	; (8004270 <HAL_RCC_GetHCLKFreq+0x58>)
 800425e:	681b      	ldr	r3, [r3, #0]
}
 8004260:	4618      	mov	r0, r3
 8004262:	3708      	adds	r7, #8
 8004264:	46bd      	mov	sp, r7
 8004266:	bd80      	pop	{r7, pc}
 8004268:	58024400 	.word	0x58024400
 800426c:	08006e9c 	.word	0x08006e9c
 8004270:	24000004 	.word	0x24000004
 8004274:	24000000 	.word	0x24000000

08004278 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004278:	b580      	push	{r7, lr}
 800427a:	b086      	sub	sp, #24
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004280:	2300      	movs	r3, #0
 8004282:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004284:	2300      	movs	r3, #0
 8004286:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004290:	2b00      	cmp	r3, #0
 8004292:	d03f      	beq.n	8004314 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004298:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800429c:	d02a      	beq.n	80042f4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800429e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80042a2:	d824      	bhi.n	80042ee <HAL_RCCEx_PeriphCLKConfig+0x76>
 80042a4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80042a8:	d018      	beq.n	80042dc <HAL_RCCEx_PeriphCLKConfig+0x64>
 80042aa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80042ae:	d81e      	bhi.n	80042ee <HAL_RCCEx_PeriphCLKConfig+0x76>
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d003      	beq.n	80042bc <HAL_RCCEx_PeriphCLKConfig+0x44>
 80042b4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80042b8:	d007      	beq.n	80042ca <HAL_RCCEx_PeriphCLKConfig+0x52>
 80042ba:	e018      	b.n	80042ee <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80042bc:	4bab      	ldr	r3, [pc, #684]	; (800456c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80042be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042c0:	4aaa      	ldr	r2, [pc, #680]	; (800456c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80042c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80042c6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80042c8:	e015      	b.n	80042f6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	3304      	adds	r3, #4
 80042ce:	2102      	movs	r1, #2
 80042d0:	4618      	mov	r0, r3
 80042d2:	f001 fff3 	bl	80062bc <RCCEx_PLL2_Config>
 80042d6:	4603      	mov	r3, r0
 80042d8:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80042da:	e00c      	b.n	80042f6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	3324      	adds	r3, #36	; 0x24
 80042e0:	2102      	movs	r1, #2
 80042e2:	4618      	mov	r0, r3
 80042e4:	f002 f89c 	bl	8006420 <RCCEx_PLL3_Config>
 80042e8:	4603      	mov	r3, r0
 80042ea:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80042ec:	e003      	b.n	80042f6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80042ee:	2301      	movs	r3, #1
 80042f0:	75fb      	strb	r3, [r7, #23]
      break;
 80042f2:	e000      	b.n	80042f6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80042f4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80042f6:	7dfb      	ldrb	r3, [r7, #23]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d109      	bne.n	8004310 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80042fc:	4b9b      	ldr	r3, [pc, #620]	; (800456c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80042fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004300:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004308:	4998      	ldr	r1, [pc, #608]	; (800456c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800430a:	4313      	orrs	r3, r2
 800430c:	650b      	str	r3, [r1, #80]	; 0x50
 800430e:	e001      	b.n	8004314 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004310:	7dfb      	ldrb	r3, [r7, #23]
 8004312:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800431c:	2b00      	cmp	r3, #0
 800431e:	d03d      	beq.n	800439c <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004324:	2b04      	cmp	r3, #4
 8004326:	d826      	bhi.n	8004376 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8004328:	a201      	add	r2, pc, #4	; (adr r2, 8004330 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800432a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800432e:	bf00      	nop
 8004330:	08004345 	.word	0x08004345
 8004334:	08004353 	.word	0x08004353
 8004338:	08004365 	.word	0x08004365
 800433c:	0800437d 	.word	0x0800437d
 8004340:	0800437d 	.word	0x0800437d
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004344:	4b89      	ldr	r3, [pc, #548]	; (800456c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004346:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004348:	4a88      	ldr	r2, [pc, #544]	; (800456c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800434a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800434e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004350:	e015      	b.n	800437e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	3304      	adds	r3, #4
 8004356:	2100      	movs	r1, #0
 8004358:	4618      	mov	r0, r3
 800435a:	f001 ffaf 	bl	80062bc <RCCEx_PLL2_Config>
 800435e:	4603      	mov	r3, r0
 8004360:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004362:	e00c      	b.n	800437e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	3324      	adds	r3, #36	; 0x24
 8004368:	2100      	movs	r1, #0
 800436a:	4618      	mov	r0, r3
 800436c:	f002 f858 	bl	8006420 <RCCEx_PLL3_Config>
 8004370:	4603      	mov	r3, r0
 8004372:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004374:	e003      	b.n	800437e <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004376:	2301      	movs	r3, #1
 8004378:	75fb      	strb	r3, [r7, #23]
      break;
 800437a:	e000      	b.n	800437e <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 800437c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800437e:	7dfb      	ldrb	r3, [r7, #23]
 8004380:	2b00      	cmp	r3, #0
 8004382:	d109      	bne.n	8004398 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004384:	4b79      	ldr	r3, [pc, #484]	; (800456c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004386:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004388:	f023 0207 	bic.w	r2, r3, #7
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004390:	4976      	ldr	r1, [pc, #472]	; (800456c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004392:	4313      	orrs	r3, r2
 8004394:	650b      	str	r3, [r1, #80]	; 0x50
 8004396:	e001      	b.n	800439c <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004398:	7dfb      	ldrb	r3, [r7, #23]
 800439a:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d042      	beq.n	800442e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80043b0:	d02b      	beq.n	800440a <HAL_RCCEx_PeriphCLKConfig+0x192>
 80043b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80043b6:	d825      	bhi.n	8004404 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80043b8:	2bc0      	cmp	r3, #192	; 0xc0
 80043ba:	d028      	beq.n	800440e <HAL_RCCEx_PeriphCLKConfig+0x196>
 80043bc:	2bc0      	cmp	r3, #192	; 0xc0
 80043be:	d821      	bhi.n	8004404 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80043c0:	2b80      	cmp	r3, #128	; 0x80
 80043c2:	d016      	beq.n	80043f2 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 80043c4:	2b80      	cmp	r3, #128	; 0x80
 80043c6:	d81d      	bhi.n	8004404 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d002      	beq.n	80043d2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 80043cc:	2b40      	cmp	r3, #64	; 0x40
 80043ce:	d007      	beq.n	80043e0 <HAL_RCCEx_PeriphCLKConfig+0x168>
 80043d0:	e018      	b.n	8004404 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80043d2:	4b66      	ldr	r3, [pc, #408]	; (800456c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80043d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043d6:	4a65      	ldr	r2, [pc, #404]	; (800456c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80043d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80043dc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80043de:	e017      	b.n	8004410 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	3304      	adds	r3, #4
 80043e4:	2100      	movs	r1, #0
 80043e6:	4618      	mov	r0, r3
 80043e8:	f001 ff68 	bl	80062bc <RCCEx_PLL2_Config>
 80043ec:	4603      	mov	r3, r0
 80043ee:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80043f0:	e00e      	b.n	8004410 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	3324      	adds	r3, #36	; 0x24
 80043f6:	2100      	movs	r1, #0
 80043f8:	4618      	mov	r0, r3
 80043fa:	f002 f811 	bl	8006420 <RCCEx_PLL3_Config>
 80043fe:	4603      	mov	r3, r0
 8004400:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8004402:	e005      	b.n	8004410 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004404:	2301      	movs	r3, #1
 8004406:	75fb      	strb	r3, [r7, #23]
      break;
 8004408:	e002      	b.n	8004410 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800440a:	bf00      	nop
 800440c:	e000      	b.n	8004410 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800440e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004410:	7dfb      	ldrb	r3, [r7, #23]
 8004412:	2b00      	cmp	r3, #0
 8004414:	d109      	bne.n	800442a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8004416:	4b55      	ldr	r3, [pc, #340]	; (800456c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004418:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800441a:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004422:	4952      	ldr	r1, [pc, #328]	; (800456c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004424:	4313      	orrs	r3, r2
 8004426:	650b      	str	r3, [r1, #80]	; 0x50
 8004428:	e001      	b.n	800442e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800442a:	7dfb      	ldrb	r3, [r7, #23]
 800442c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004436:	2b00      	cmp	r3, #0
 8004438:	d049      	beq.n	80044ce <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004440:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004444:	d030      	beq.n	80044a8 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8004446:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800444a:	d82a      	bhi.n	80044a2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800444c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004450:	d02c      	beq.n	80044ac <HAL_RCCEx_PeriphCLKConfig+0x234>
 8004452:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004456:	d824      	bhi.n	80044a2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8004458:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800445c:	d018      	beq.n	8004490 <HAL_RCCEx_PeriphCLKConfig+0x218>
 800445e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004462:	d81e      	bhi.n	80044a2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8004464:	2b00      	cmp	r3, #0
 8004466:	d003      	beq.n	8004470 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8004468:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800446c:	d007      	beq.n	800447e <HAL_RCCEx_PeriphCLKConfig+0x206>
 800446e:	e018      	b.n	80044a2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004470:	4b3e      	ldr	r3, [pc, #248]	; (800456c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004472:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004474:	4a3d      	ldr	r2, [pc, #244]	; (800456c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004476:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800447a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800447c:	e017      	b.n	80044ae <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	3304      	adds	r3, #4
 8004482:	2100      	movs	r1, #0
 8004484:	4618      	mov	r0, r3
 8004486:	f001 ff19 	bl	80062bc <RCCEx_PLL2_Config>
 800448a:	4603      	mov	r3, r0
 800448c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800448e:	e00e      	b.n	80044ae <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	3324      	adds	r3, #36	; 0x24
 8004494:	2100      	movs	r1, #0
 8004496:	4618      	mov	r0, r3
 8004498:	f001 ffc2 	bl	8006420 <RCCEx_PLL3_Config>
 800449c:	4603      	mov	r3, r0
 800449e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80044a0:	e005      	b.n	80044ae <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80044a2:	2301      	movs	r3, #1
 80044a4:	75fb      	strb	r3, [r7, #23]
      break;
 80044a6:	e002      	b.n	80044ae <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80044a8:	bf00      	nop
 80044aa:	e000      	b.n	80044ae <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80044ac:	bf00      	nop
    }

    if(ret == HAL_OK)
 80044ae:	7dfb      	ldrb	r3, [r7, #23]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d10a      	bne.n	80044ca <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80044b4:	4b2d      	ldr	r3, [pc, #180]	; (800456c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80044b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044b8:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80044c2:	492a      	ldr	r1, [pc, #168]	; (800456c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80044c4:	4313      	orrs	r3, r2
 80044c6:	658b      	str	r3, [r1, #88]	; 0x58
 80044c8:	e001      	b.n	80044ce <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044ca:	7dfb      	ldrb	r3, [r7, #23]
 80044cc:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d04c      	beq.n	8004574 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80044e0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80044e4:	d030      	beq.n	8004548 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 80044e6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80044ea:	d82a      	bhi.n	8004542 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80044ec:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80044f0:	d02c      	beq.n	800454c <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 80044f2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80044f6:	d824      	bhi.n	8004542 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80044f8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80044fc:	d018      	beq.n	8004530 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 80044fe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004502:	d81e      	bhi.n	8004542 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8004504:	2b00      	cmp	r3, #0
 8004506:	d003      	beq.n	8004510 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8004508:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800450c:	d007      	beq.n	800451e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800450e:	e018      	b.n	8004542 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004510:	4b16      	ldr	r3, [pc, #88]	; (800456c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004512:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004514:	4a15      	ldr	r2, [pc, #84]	; (800456c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004516:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800451a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800451c:	e017      	b.n	800454e <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	3304      	adds	r3, #4
 8004522:	2100      	movs	r1, #0
 8004524:	4618      	mov	r0, r3
 8004526:	f001 fec9 	bl	80062bc <RCCEx_PLL2_Config>
 800452a:	4603      	mov	r3, r0
 800452c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800452e:	e00e      	b.n	800454e <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	3324      	adds	r3, #36	; 0x24
 8004534:	2100      	movs	r1, #0
 8004536:	4618      	mov	r0, r3
 8004538:	f001 ff72 	bl	8006420 <RCCEx_PLL3_Config>
 800453c:	4603      	mov	r3, r0
 800453e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004540:	e005      	b.n	800454e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8004542:	2301      	movs	r3, #1
 8004544:	75fb      	strb	r3, [r7, #23]
      break;
 8004546:	e002      	b.n	800454e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8004548:	bf00      	nop
 800454a:	e000      	b.n	800454e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 800454c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800454e:	7dfb      	ldrb	r3, [r7, #23]
 8004550:	2b00      	cmp	r3, #0
 8004552:	d10d      	bne.n	8004570 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8004554:	4b05      	ldr	r3, [pc, #20]	; (800456c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004556:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004558:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004562:	4902      	ldr	r1, [pc, #8]	; (800456c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004564:	4313      	orrs	r3, r2
 8004566:	658b      	str	r3, [r1, #88]	; 0x58
 8004568:	e004      	b.n	8004574 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 800456a:	bf00      	nop
 800456c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004570:	7dfb      	ldrb	r3, [r7, #23]
 8004572:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800457c:	2b00      	cmp	r3, #0
 800457e:	d032      	beq.n	80045e6 <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004584:	2b30      	cmp	r3, #48	; 0x30
 8004586:	d01c      	beq.n	80045c2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8004588:	2b30      	cmp	r3, #48	; 0x30
 800458a:	d817      	bhi.n	80045bc <HAL_RCCEx_PeriphCLKConfig+0x344>
 800458c:	2b20      	cmp	r3, #32
 800458e:	d00c      	beq.n	80045aa <HAL_RCCEx_PeriphCLKConfig+0x332>
 8004590:	2b20      	cmp	r3, #32
 8004592:	d813      	bhi.n	80045bc <HAL_RCCEx_PeriphCLKConfig+0x344>
 8004594:	2b00      	cmp	r3, #0
 8004596:	d016      	beq.n	80045c6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8004598:	2b10      	cmp	r3, #16
 800459a:	d10f      	bne.n	80045bc <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800459c:	4baf      	ldr	r3, [pc, #700]	; (800485c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800459e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045a0:	4aae      	ldr	r2, [pc, #696]	; (800485c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80045a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80045a6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80045a8:	e00e      	b.n	80045c8 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	3304      	adds	r3, #4
 80045ae:	2102      	movs	r1, #2
 80045b0:	4618      	mov	r0, r3
 80045b2:	f001 fe83 	bl	80062bc <RCCEx_PLL2_Config>
 80045b6:	4603      	mov	r3, r0
 80045b8:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80045ba:	e005      	b.n	80045c8 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80045bc:	2301      	movs	r3, #1
 80045be:	75fb      	strb	r3, [r7, #23]
      break;
 80045c0:	e002      	b.n	80045c8 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 80045c2:	bf00      	nop
 80045c4:	e000      	b.n	80045c8 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 80045c6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80045c8:	7dfb      	ldrb	r3, [r7, #23]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d109      	bne.n	80045e2 <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80045ce:	4ba3      	ldr	r3, [pc, #652]	; (800485c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80045d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045d2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80045da:	49a0      	ldr	r1, [pc, #640]	; (800485c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80045dc:	4313      	orrs	r3, r2
 80045de:	64cb      	str	r3, [r1, #76]	; 0x4c
 80045e0:	e001      	b.n	80045e6 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045e2:	7dfb      	ldrb	r3, [r7, #23]
 80045e4:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d047      	beq.n	8004682 <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045f6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80045fa:	d030      	beq.n	800465e <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 80045fc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004600:	d82a      	bhi.n	8004658 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8004602:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004606:	d02c      	beq.n	8004662 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8004608:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800460c:	d824      	bhi.n	8004658 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800460e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004612:	d018      	beq.n	8004646 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8004614:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004618:	d81e      	bhi.n	8004658 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800461a:	2b00      	cmp	r3, #0
 800461c:	d003      	beq.n	8004626 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 800461e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004622:	d007      	beq.n	8004634 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8004624:	e018      	b.n	8004658 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004626:	4b8d      	ldr	r3, [pc, #564]	; (800485c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004628:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800462a:	4a8c      	ldr	r2, [pc, #560]	; (800485c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800462c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004630:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004632:	e017      	b.n	8004664 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	3304      	adds	r3, #4
 8004638:	2100      	movs	r1, #0
 800463a:	4618      	mov	r0, r3
 800463c:	f001 fe3e 	bl	80062bc <RCCEx_PLL2_Config>
 8004640:	4603      	mov	r3, r0
 8004642:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004644:	e00e      	b.n	8004664 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	3324      	adds	r3, #36	; 0x24
 800464a:	2100      	movs	r1, #0
 800464c:	4618      	mov	r0, r3
 800464e:	f001 fee7 	bl	8006420 <RCCEx_PLL3_Config>
 8004652:	4603      	mov	r3, r0
 8004654:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004656:	e005      	b.n	8004664 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004658:	2301      	movs	r3, #1
 800465a:	75fb      	strb	r3, [r7, #23]
      break;
 800465c:	e002      	b.n	8004664 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 800465e:	bf00      	nop
 8004660:	e000      	b.n	8004664 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8004662:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004664:	7dfb      	ldrb	r3, [r7, #23]
 8004666:	2b00      	cmp	r3, #0
 8004668:	d109      	bne.n	800467e <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800466a:	4b7c      	ldr	r3, [pc, #496]	; (800485c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800466c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800466e:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004676:	4979      	ldr	r1, [pc, #484]	; (800485c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004678:	4313      	orrs	r3, r2
 800467a:	650b      	str	r3, [r1, #80]	; 0x50
 800467c:	e001      	b.n	8004682 <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800467e:	7dfb      	ldrb	r3, [r7, #23]
 8004680:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800468a:	2b00      	cmp	r3, #0
 800468c:	d049      	beq.n	8004722 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004692:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004696:	d02e      	beq.n	80046f6 <HAL_RCCEx_PeriphCLKConfig+0x47e>
 8004698:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800469c:	d828      	bhi.n	80046f0 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800469e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80046a2:	d02a      	beq.n	80046fa <HAL_RCCEx_PeriphCLKConfig+0x482>
 80046a4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80046a8:	d822      	bhi.n	80046f0 <HAL_RCCEx_PeriphCLKConfig+0x478>
 80046aa:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80046ae:	d026      	beq.n	80046fe <HAL_RCCEx_PeriphCLKConfig+0x486>
 80046b0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80046b4:	d81c      	bhi.n	80046f0 <HAL_RCCEx_PeriphCLKConfig+0x478>
 80046b6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80046ba:	d010      	beq.n	80046de <HAL_RCCEx_PeriphCLKConfig+0x466>
 80046bc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80046c0:	d816      	bhi.n	80046f0 <HAL_RCCEx_PeriphCLKConfig+0x478>
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d01d      	beq.n	8004702 <HAL_RCCEx_PeriphCLKConfig+0x48a>
 80046c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046ca:	d111      	bne.n	80046f0 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	3304      	adds	r3, #4
 80046d0:	2101      	movs	r1, #1
 80046d2:	4618      	mov	r0, r3
 80046d4:	f001 fdf2 	bl	80062bc <RCCEx_PLL2_Config>
 80046d8:	4603      	mov	r3, r0
 80046da:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80046dc:	e012      	b.n	8004704 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	3324      	adds	r3, #36	; 0x24
 80046e2:	2101      	movs	r1, #1
 80046e4:	4618      	mov	r0, r3
 80046e6:	f001 fe9b 	bl	8006420 <RCCEx_PLL3_Config>
 80046ea:	4603      	mov	r3, r0
 80046ec:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80046ee:	e009      	b.n	8004704 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80046f0:	2301      	movs	r3, #1
 80046f2:	75fb      	strb	r3, [r7, #23]
      break;
 80046f4:	e006      	b.n	8004704 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80046f6:	bf00      	nop
 80046f8:	e004      	b.n	8004704 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80046fa:	bf00      	nop
 80046fc:	e002      	b.n	8004704 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80046fe:	bf00      	nop
 8004700:	e000      	b.n	8004704 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8004702:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004704:	7dfb      	ldrb	r3, [r7, #23]
 8004706:	2b00      	cmp	r3, #0
 8004708:	d109      	bne.n	800471e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800470a:	4b54      	ldr	r3, [pc, #336]	; (800485c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800470c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800470e:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004716:	4951      	ldr	r1, [pc, #324]	; (800485c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004718:	4313      	orrs	r3, r2
 800471a:	650b      	str	r3, [r1, #80]	; 0x50
 800471c:	e001      	b.n	8004722 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800471e:	7dfb      	ldrb	r3, [r7, #23]
 8004720:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800472a:	2b00      	cmp	r3, #0
 800472c:	d04b      	beq.n	80047c6 <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004734:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004738:	d02e      	beq.n	8004798 <HAL_RCCEx_PeriphCLKConfig+0x520>
 800473a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800473e:	d828      	bhi.n	8004792 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8004740:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004744:	d02a      	beq.n	800479c <HAL_RCCEx_PeriphCLKConfig+0x524>
 8004746:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800474a:	d822      	bhi.n	8004792 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800474c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004750:	d026      	beq.n	80047a0 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8004752:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004756:	d81c      	bhi.n	8004792 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8004758:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800475c:	d010      	beq.n	8004780 <HAL_RCCEx_PeriphCLKConfig+0x508>
 800475e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004762:	d816      	bhi.n	8004792 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8004764:	2b00      	cmp	r3, #0
 8004766:	d01d      	beq.n	80047a4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8004768:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800476c:	d111      	bne.n	8004792 <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	3304      	adds	r3, #4
 8004772:	2101      	movs	r1, #1
 8004774:	4618      	mov	r0, r3
 8004776:	f001 fda1 	bl	80062bc <RCCEx_PLL2_Config>
 800477a:	4603      	mov	r3, r0
 800477c:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800477e:	e012      	b.n	80047a6 <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	3324      	adds	r3, #36	; 0x24
 8004784:	2101      	movs	r1, #1
 8004786:	4618      	mov	r0, r3
 8004788:	f001 fe4a 	bl	8006420 <RCCEx_PLL3_Config>
 800478c:	4603      	mov	r3, r0
 800478e:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8004790:	e009      	b.n	80047a6 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8004792:	2301      	movs	r3, #1
 8004794:	75fb      	strb	r3, [r7, #23]
      break;
 8004796:	e006      	b.n	80047a6 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8004798:	bf00      	nop
 800479a:	e004      	b.n	80047a6 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800479c:	bf00      	nop
 800479e:	e002      	b.n	80047a6 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80047a0:	bf00      	nop
 80047a2:	e000      	b.n	80047a6 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80047a4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80047a6:	7dfb      	ldrb	r3, [r7, #23]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d10a      	bne.n	80047c2 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80047ac:	4b2b      	ldr	r3, [pc, #172]	; (800485c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80047ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047b0:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80047ba:	4928      	ldr	r1, [pc, #160]	; (800485c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80047bc:	4313      	orrs	r3, r2
 80047be:	658b      	str	r3, [r1, #88]	; 0x58
 80047c0:	e001      	b.n	80047c6 <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047c2:	7dfb      	ldrb	r3, [r7, #23]
 80047c4:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d02f      	beq.n	8004832 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80047d6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80047da:	d00e      	beq.n	80047fa <HAL_RCCEx_PeriphCLKConfig+0x582>
 80047dc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80047e0:	d814      	bhi.n	800480c <HAL_RCCEx_PeriphCLKConfig+0x594>
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d015      	beq.n	8004812 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80047e6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80047ea:	d10f      	bne.n	800480c <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80047ec:	4b1b      	ldr	r3, [pc, #108]	; (800485c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80047ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047f0:	4a1a      	ldr	r2, [pc, #104]	; (800485c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80047f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80047f6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80047f8:	e00c      	b.n	8004814 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	3304      	adds	r3, #4
 80047fe:	2101      	movs	r1, #1
 8004800:	4618      	mov	r0, r3
 8004802:	f001 fd5b 	bl	80062bc <RCCEx_PLL2_Config>
 8004806:	4603      	mov	r3, r0
 8004808:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800480a:	e003      	b.n	8004814 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800480c:	2301      	movs	r3, #1
 800480e:	75fb      	strb	r3, [r7, #23]
      break;
 8004810:	e000      	b.n	8004814 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8004812:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004814:	7dfb      	ldrb	r3, [r7, #23]
 8004816:	2b00      	cmp	r3, #0
 8004818:	d109      	bne.n	800482e <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800481a:	4b10      	ldr	r3, [pc, #64]	; (800485c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800481c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800481e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004826:	490d      	ldr	r1, [pc, #52]	; (800485c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004828:	4313      	orrs	r3, r2
 800482a:	650b      	str	r3, [r1, #80]	; 0x50
 800482c:	e001      	b.n	8004832 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800482e:	7dfb      	ldrb	r3, [r7, #23]
 8004830:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800483a:	2b00      	cmp	r3, #0
 800483c:	d033      	beq.n	80048a6 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004842:	2b03      	cmp	r3, #3
 8004844:	d81c      	bhi.n	8004880 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8004846:	a201      	add	r2, pc, #4	; (adr r2, 800484c <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 8004848:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800484c:	08004887 	.word	0x08004887
 8004850:	08004861 	.word	0x08004861
 8004854:	0800486f 	.word	0x0800486f
 8004858:	08004887 	.word	0x08004887
 800485c:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004860:	4bb8      	ldr	r3, [pc, #736]	; (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004862:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004864:	4ab7      	ldr	r2, [pc, #732]	; (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004866:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800486a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 800486c:	e00c      	b.n	8004888 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	3304      	adds	r3, #4
 8004872:	2102      	movs	r1, #2
 8004874:	4618      	mov	r0, r3
 8004876:	f001 fd21 	bl	80062bc <RCCEx_PLL2_Config>
 800487a:	4603      	mov	r3, r0
 800487c:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800487e:	e003      	b.n	8004888 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8004880:	2301      	movs	r3, #1
 8004882:	75fb      	strb	r3, [r7, #23]
      break;
 8004884:	e000      	b.n	8004888 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8004886:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004888:	7dfb      	ldrb	r3, [r7, #23]
 800488a:	2b00      	cmp	r3, #0
 800488c:	d109      	bne.n	80048a2 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800488e:	4bad      	ldr	r3, [pc, #692]	; (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004890:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004892:	f023 0203 	bic.w	r2, r3, #3
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800489a:	49aa      	ldr	r1, [pc, #680]	; (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800489c:	4313      	orrs	r3, r2
 800489e:	64cb      	str	r3, [r1, #76]	; 0x4c
 80048a0:	e001      	b.n	80048a6 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048a2:	7dfb      	ldrb	r3, [r7, #23]
 80048a4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	f000 8086 	beq.w	80049c0 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80048b4:	4ba4      	ldr	r3, [pc, #656]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	4aa3      	ldr	r2, [pc, #652]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 80048ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048be:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80048c0:	f7fc fb4c 	bl	8000f5c <HAL_GetTick>
 80048c4:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80048c6:	e009      	b.n	80048dc <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80048c8:	f7fc fb48 	bl	8000f5c <HAL_GetTick>
 80048cc:	4602      	mov	r2, r0
 80048ce:	693b      	ldr	r3, [r7, #16]
 80048d0:	1ad3      	subs	r3, r2, r3
 80048d2:	2b64      	cmp	r3, #100	; 0x64
 80048d4:	d902      	bls.n	80048dc <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 80048d6:	2303      	movs	r3, #3
 80048d8:	75fb      	strb	r3, [r7, #23]
        break;
 80048da:	e005      	b.n	80048e8 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80048dc:	4b9a      	ldr	r3, [pc, #616]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d0ef      	beq.n	80048c8 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 80048e8:	7dfb      	ldrb	r3, [r7, #23]
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d166      	bne.n	80049bc <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80048ee:	4b95      	ldr	r3, [pc, #596]	; (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80048f0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80048f8:	4053      	eors	r3, r2
 80048fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d013      	beq.n	800492a <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004902:	4b90      	ldr	r3, [pc, #576]	; (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004904:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004906:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800490a:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800490c:	4b8d      	ldr	r3, [pc, #564]	; (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800490e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004910:	4a8c      	ldr	r2, [pc, #560]	; (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004912:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004916:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004918:	4b8a      	ldr	r3, [pc, #552]	; (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800491a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800491c:	4a89      	ldr	r2, [pc, #548]	; (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800491e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004922:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8004924:	4a87      	ldr	r2, [pc, #540]	; (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004930:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004934:	d115      	bne.n	8004962 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004936:	f7fc fb11 	bl	8000f5c <HAL_GetTick>
 800493a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800493c:	e00b      	b.n	8004956 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800493e:	f7fc fb0d 	bl	8000f5c <HAL_GetTick>
 8004942:	4602      	mov	r2, r0
 8004944:	693b      	ldr	r3, [r7, #16]
 8004946:	1ad3      	subs	r3, r2, r3
 8004948:	f241 3288 	movw	r2, #5000	; 0x1388
 800494c:	4293      	cmp	r3, r2
 800494e:	d902      	bls.n	8004956 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8004950:	2303      	movs	r3, #3
 8004952:	75fb      	strb	r3, [r7, #23]
            break;
 8004954:	e005      	b.n	8004962 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004956:	4b7b      	ldr	r3, [pc, #492]	; (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004958:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800495a:	f003 0302 	and.w	r3, r3, #2
 800495e:	2b00      	cmp	r3, #0
 8004960:	d0ed      	beq.n	800493e <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8004962:	7dfb      	ldrb	r3, [r7, #23]
 8004964:	2b00      	cmp	r3, #0
 8004966:	d126      	bne.n	80049b6 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800496e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004972:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004976:	d10d      	bne.n	8004994 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8004978:	4b72      	ldr	r3, [pc, #456]	; (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800497a:	691b      	ldr	r3, [r3, #16]
 800497c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004986:	0919      	lsrs	r1, r3, #4
 8004988:	4b70      	ldr	r3, [pc, #448]	; (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 800498a:	400b      	ands	r3, r1
 800498c:	496d      	ldr	r1, [pc, #436]	; (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800498e:	4313      	orrs	r3, r2
 8004990:	610b      	str	r3, [r1, #16]
 8004992:	e005      	b.n	80049a0 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8004994:	4b6b      	ldr	r3, [pc, #428]	; (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004996:	691b      	ldr	r3, [r3, #16]
 8004998:	4a6a      	ldr	r2, [pc, #424]	; (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800499a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800499e:	6113      	str	r3, [r2, #16]
 80049a0:	4b68      	ldr	r3, [pc, #416]	; (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80049a2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80049aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80049ae:	4965      	ldr	r1, [pc, #404]	; (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80049b0:	4313      	orrs	r3, r2
 80049b2:	670b      	str	r3, [r1, #112]	; 0x70
 80049b4:	e004      	b.n	80049c0 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80049b6:	7dfb      	ldrb	r3, [r7, #23]
 80049b8:	75bb      	strb	r3, [r7, #22]
 80049ba:	e001      	b.n	80049c0 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049bc:	7dfb      	ldrb	r3, [r7, #23]
 80049be:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f003 0301 	and.w	r3, r3, #1
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d07e      	beq.n	8004aca <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80049d0:	2b28      	cmp	r3, #40	; 0x28
 80049d2:	d867      	bhi.n	8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 80049d4:	a201      	add	r2, pc, #4	; (adr r2, 80049dc <HAL_RCCEx_PeriphCLKConfig+0x764>)
 80049d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049da:	bf00      	nop
 80049dc:	08004aab 	.word	0x08004aab
 80049e0:	08004aa5 	.word	0x08004aa5
 80049e4:	08004aa5 	.word	0x08004aa5
 80049e8:	08004aa5 	.word	0x08004aa5
 80049ec:	08004aa5 	.word	0x08004aa5
 80049f0:	08004aa5 	.word	0x08004aa5
 80049f4:	08004aa5 	.word	0x08004aa5
 80049f8:	08004aa5 	.word	0x08004aa5
 80049fc:	08004a81 	.word	0x08004a81
 8004a00:	08004aa5 	.word	0x08004aa5
 8004a04:	08004aa5 	.word	0x08004aa5
 8004a08:	08004aa5 	.word	0x08004aa5
 8004a0c:	08004aa5 	.word	0x08004aa5
 8004a10:	08004aa5 	.word	0x08004aa5
 8004a14:	08004aa5 	.word	0x08004aa5
 8004a18:	08004aa5 	.word	0x08004aa5
 8004a1c:	08004a93 	.word	0x08004a93
 8004a20:	08004aa5 	.word	0x08004aa5
 8004a24:	08004aa5 	.word	0x08004aa5
 8004a28:	08004aa5 	.word	0x08004aa5
 8004a2c:	08004aa5 	.word	0x08004aa5
 8004a30:	08004aa5 	.word	0x08004aa5
 8004a34:	08004aa5 	.word	0x08004aa5
 8004a38:	08004aa5 	.word	0x08004aa5
 8004a3c:	08004aab 	.word	0x08004aab
 8004a40:	08004aa5 	.word	0x08004aa5
 8004a44:	08004aa5 	.word	0x08004aa5
 8004a48:	08004aa5 	.word	0x08004aa5
 8004a4c:	08004aa5 	.word	0x08004aa5
 8004a50:	08004aa5 	.word	0x08004aa5
 8004a54:	08004aa5 	.word	0x08004aa5
 8004a58:	08004aa5 	.word	0x08004aa5
 8004a5c:	08004aab 	.word	0x08004aab
 8004a60:	08004aa5 	.word	0x08004aa5
 8004a64:	08004aa5 	.word	0x08004aa5
 8004a68:	08004aa5 	.word	0x08004aa5
 8004a6c:	08004aa5 	.word	0x08004aa5
 8004a70:	08004aa5 	.word	0x08004aa5
 8004a74:	08004aa5 	.word	0x08004aa5
 8004a78:	08004aa5 	.word	0x08004aa5
 8004a7c:	08004aab 	.word	0x08004aab
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	3304      	adds	r3, #4
 8004a84:	2101      	movs	r1, #1
 8004a86:	4618      	mov	r0, r3
 8004a88:	f001 fc18 	bl	80062bc <RCCEx_PLL2_Config>
 8004a8c:	4603      	mov	r3, r0
 8004a8e:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8004a90:	e00c      	b.n	8004aac <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	3324      	adds	r3, #36	; 0x24
 8004a96:	2101      	movs	r1, #1
 8004a98:	4618      	mov	r0, r3
 8004a9a:	f001 fcc1 	bl	8006420 <RCCEx_PLL3_Config>
 8004a9e:	4603      	mov	r3, r0
 8004aa0:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8004aa2:	e003      	b.n	8004aac <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004aa4:	2301      	movs	r3, #1
 8004aa6:	75fb      	strb	r3, [r7, #23]
      break;
 8004aa8:	e000      	b.n	8004aac <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 8004aaa:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004aac:	7dfb      	ldrb	r3, [r7, #23]
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d109      	bne.n	8004ac6 <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004ab2:	4b24      	ldr	r3, [pc, #144]	; (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004ab4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ab6:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004abe:	4921      	ldr	r1, [pc, #132]	; (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004ac0:	4313      	orrs	r3, r2
 8004ac2:	654b      	str	r3, [r1, #84]	; 0x54
 8004ac4:	e001      	b.n	8004aca <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ac6:	7dfb      	ldrb	r3, [r7, #23]
 8004ac8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f003 0302 	and.w	r3, r3, #2
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d03e      	beq.n	8004b54 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ada:	2b05      	cmp	r3, #5
 8004adc:	d820      	bhi.n	8004b20 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 8004ade:	a201      	add	r2, pc, #4	; (adr r2, 8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 8004ae0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ae4:	08004b27 	.word	0x08004b27
 8004ae8:	08004afd 	.word	0x08004afd
 8004aec:	08004b0f 	.word	0x08004b0f
 8004af0:	08004b27 	.word	0x08004b27
 8004af4:	08004b27 	.word	0x08004b27
 8004af8:	08004b27 	.word	0x08004b27
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	3304      	adds	r3, #4
 8004b00:	2101      	movs	r1, #1
 8004b02:	4618      	mov	r0, r3
 8004b04:	f001 fbda 	bl	80062bc <RCCEx_PLL2_Config>
 8004b08:	4603      	mov	r3, r0
 8004b0a:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8004b0c:	e00c      	b.n	8004b28 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	3324      	adds	r3, #36	; 0x24
 8004b12:	2101      	movs	r1, #1
 8004b14:	4618      	mov	r0, r3
 8004b16:	f001 fc83 	bl	8006420 <RCCEx_PLL3_Config>
 8004b1a:	4603      	mov	r3, r0
 8004b1c:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8004b1e:	e003      	b.n	8004b28 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004b20:	2301      	movs	r3, #1
 8004b22:	75fb      	strb	r3, [r7, #23]
      break;
 8004b24:	e000      	b.n	8004b28 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 8004b26:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004b28:	7dfb      	ldrb	r3, [r7, #23]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d110      	bne.n	8004b50 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004b2e:	4b05      	ldr	r3, [pc, #20]	; (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004b30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b32:	f023 0207 	bic.w	r2, r3, #7
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b3a:	4902      	ldr	r1, [pc, #8]	; (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004b3c:	4313      	orrs	r3, r2
 8004b3e:	654b      	str	r3, [r1, #84]	; 0x54
 8004b40:	e008      	b.n	8004b54 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 8004b42:	bf00      	nop
 8004b44:	58024400 	.word	0x58024400
 8004b48:	58024800 	.word	0x58024800
 8004b4c:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b50:	7dfb      	ldrb	r3, [r7, #23]
 8004b52:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f003 0304 	and.w	r3, r3, #4
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d039      	beq.n	8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b66:	2b05      	cmp	r3, #5
 8004b68:	d820      	bhi.n	8004bac <HAL_RCCEx_PeriphCLKConfig+0x934>
 8004b6a:	a201      	add	r2, pc, #4	; (adr r2, 8004b70 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 8004b6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b70:	08004bb3 	.word	0x08004bb3
 8004b74:	08004b89 	.word	0x08004b89
 8004b78:	08004b9b 	.word	0x08004b9b
 8004b7c:	08004bb3 	.word	0x08004bb3
 8004b80:	08004bb3 	.word	0x08004bb3
 8004b84:	08004bb3 	.word	0x08004bb3
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	3304      	adds	r3, #4
 8004b8c:	2101      	movs	r1, #1
 8004b8e:	4618      	mov	r0, r3
 8004b90:	f001 fb94 	bl	80062bc <RCCEx_PLL2_Config>
 8004b94:	4603      	mov	r3, r0
 8004b96:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8004b98:	e00c      	b.n	8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	3324      	adds	r3, #36	; 0x24
 8004b9e:	2101      	movs	r1, #1
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	f001 fc3d 	bl	8006420 <RCCEx_PLL3_Config>
 8004ba6:	4603      	mov	r3, r0
 8004ba8:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8004baa:	e003      	b.n	8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004bac:	2301      	movs	r3, #1
 8004bae:	75fb      	strb	r3, [r7, #23]
      break;
 8004bb0:	e000      	b.n	8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 8004bb2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004bb4:	7dfb      	ldrb	r3, [r7, #23]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d10a      	bne.n	8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004bba:	4bb7      	ldr	r3, [pc, #732]	; (8004e98 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004bbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bbe:	f023 0207 	bic.w	r2, r3, #7
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bc8:	49b3      	ldr	r1, [pc, #716]	; (8004e98 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004bca:	4313      	orrs	r3, r2
 8004bcc:	658b      	str	r3, [r1, #88]	; 0x58
 8004bce:	e001      	b.n	8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bd0:	7dfb      	ldrb	r3, [r7, #23]
 8004bd2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f003 0320 	and.w	r3, r3, #32
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d04b      	beq.n	8004c78 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004be6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004bea:	d02e      	beq.n	8004c4a <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 8004bec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004bf0:	d828      	bhi.n	8004c44 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8004bf2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004bf6:	d02a      	beq.n	8004c4e <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8004bf8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004bfc:	d822      	bhi.n	8004c44 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8004bfe:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004c02:	d026      	beq.n	8004c52 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8004c04:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004c08:	d81c      	bhi.n	8004c44 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8004c0a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004c0e:	d010      	beq.n	8004c32 <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 8004c10:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004c14:	d816      	bhi.n	8004c44 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d01d      	beq.n	8004c56 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8004c1a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004c1e:	d111      	bne.n	8004c44 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	3304      	adds	r3, #4
 8004c24:	2100      	movs	r1, #0
 8004c26:	4618      	mov	r0, r3
 8004c28:	f001 fb48 	bl	80062bc <RCCEx_PLL2_Config>
 8004c2c:	4603      	mov	r3, r0
 8004c2e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8004c30:	e012      	b.n	8004c58 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	3324      	adds	r3, #36	; 0x24
 8004c36:	2102      	movs	r1, #2
 8004c38:	4618      	mov	r0, r3
 8004c3a:	f001 fbf1 	bl	8006420 <RCCEx_PLL3_Config>
 8004c3e:	4603      	mov	r3, r0
 8004c40:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8004c42:	e009      	b.n	8004c58 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004c44:	2301      	movs	r3, #1
 8004c46:	75fb      	strb	r3, [r7, #23]
      break;
 8004c48:	e006      	b.n	8004c58 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8004c4a:	bf00      	nop
 8004c4c:	e004      	b.n	8004c58 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8004c4e:	bf00      	nop
 8004c50:	e002      	b.n	8004c58 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8004c52:	bf00      	nop
 8004c54:	e000      	b.n	8004c58 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8004c56:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004c58:	7dfb      	ldrb	r3, [r7, #23]
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d10a      	bne.n	8004c74 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004c5e:	4b8e      	ldr	r3, [pc, #568]	; (8004e98 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004c60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c62:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004c6c:	498a      	ldr	r1, [pc, #552]	; (8004e98 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004c6e:	4313      	orrs	r3, r2
 8004c70:	654b      	str	r3, [r1, #84]	; 0x54
 8004c72:	e001      	b.n	8004c78 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c74:	7dfb      	ldrb	r3, [r7, #23]
 8004c76:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d04b      	beq.n	8004d1c <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004c8a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004c8e:	d02e      	beq.n	8004cee <HAL_RCCEx_PeriphCLKConfig+0xa76>
 8004c90:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004c94:	d828      	bhi.n	8004ce8 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8004c96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c9a:	d02a      	beq.n	8004cf2 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8004c9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ca0:	d822      	bhi.n	8004ce8 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8004ca2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004ca6:	d026      	beq.n	8004cf6 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8004ca8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004cac:	d81c      	bhi.n	8004ce8 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8004cae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004cb2:	d010      	beq.n	8004cd6 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 8004cb4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004cb8:	d816      	bhi.n	8004ce8 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d01d      	beq.n	8004cfa <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8004cbe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004cc2:	d111      	bne.n	8004ce8 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	3304      	adds	r3, #4
 8004cc8:	2100      	movs	r1, #0
 8004cca:	4618      	mov	r0, r3
 8004ccc:	f001 faf6 	bl	80062bc <RCCEx_PLL2_Config>
 8004cd0:	4603      	mov	r3, r0
 8004cd2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8004cd4:	e012      	b.n	8004cfc <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	3324      	adds	r3, #36	; 0x24
 8004cda:	2102      	movs	r1, #2
 8004cdc:	4618      	mov	r0, r3
 8004cde:	f001 fb9f 	bl	8006420 <RCCEx_PLL3_Config>
 8004ce2:	4603      	mov	r3, r0
 8004ce4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8004ce6:	e009      	b.n	8004cfc <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004ce8:	2301      	movs	r3, #1
 8004cea:	75fb      	strb	r3, [r7, #23]
      break;
 8004cec:	e006      	b.n	8004cfc <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8004cee:	bf00      	nop
 8004cf0:	e004      	b.n	8004cfc <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8004cf2:	bf00      	nop
 8004cf4:	e002      	b.n	8004cfc <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8004cf6:	bf00      	nop
 8004cf8:	e000      	b.n	8004cfc <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8004cfa:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004cfc:	7dfb      	ldrb	r3, [r7, #23]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d10a      	bne.n	8004d18 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004d02:	4b65      	ldr	r3, [pc, #404]	; (8004e98 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004d04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d06:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004d10:	4961      	ldr	r1, [pc, #388]	; (8004e98 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004d12:	4313      	orrs	r3, r2
 8004d14:	658b      	str	r3, [r1, #88]	; 0x58
 8004d16:	e001      	b.n	8004d1c <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d18:	7dfb      	ldrb	r3, [r7, #23]
 8004d1a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d04b      	beq.n	8004dc0 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004d2e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004d32:	d02e      	beq.n	8004d92 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 8004d34:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004d38:	d828      	bhi.n	8004d8c <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8004d3a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d3e:	d02a      	beq.n	8004d96 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 8004d40:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d44:	d822      	bhi.n	8004d8c <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8004d46:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004d4a:	d026      	beq.n	8004d9a <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8004d4c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004d50:	d81c      	bhi.n	8004d8c <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8004d52:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004d56:	d010      	beq.n	8004d7a <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8004d58:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004d5c:	d816      	bhi.n	8004d8c <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d01d      	beq.n	8004d9e <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8004d62:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d66:	d111      	bne.n	8004d8c <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	3304      	adds	r3, #4
 8004d6c:	2100      	movs	r1, #0
 8004d6e:	4618      	mov	r0, r3
 8004d70:	f001 faa4 	bl	80062bc <RCCEx_PLL2_Config>
 8004d74:	4603      	mov	r3, r0
 8004d76:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8004d78:	e012      	b.n	8004da0 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	3324      	adds	r3, #36	; 0x24
 8004d7e:	2102      	movs	r1, #2
 8004d80:	4618      	mov	r0, r3
 8004d82:	f001 fb4d 	bl	8006420 <RCCEx_PLL3_Config>
 8004d86:	4603      	mov	r3, r0
 8004d88:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8004d8a:	e009      	b.n	8004da0 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004d8c:	2301      	movs	r3, #1
 8004d8e:	75fb      	strb	r3, [r7, #23]
      break;
 8004d90:	e006      	b.n	8004da0 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8004d92:	bf00      	nop
 8004d94:	e004      	b.n	8004da0 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8004d96:	bf00      	nop
 8004d98:	e002      	b.n	8004da0 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8004d9a:	bf00      	nop
 8004d9c:	e000      	b.n	8004da0 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8004d9e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004da0:	7dfb      	ldrb	r3, [r7, #23]
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d10a      	bne.n	8004dbc <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004da6:	4b3c      	ldr	r3, [pc, #240]	; (8004e98 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004da8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004daa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004db4:	4938      	ldr	r1, [pc, #224]	; (8004e98 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004db6:	4313      	orrs	r3, r2
 8004db8:	658b      	str	r3, [r1, #88]	; 0x58
 8004dba:	e001      	b.n	8004dc0 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004dbc:	7dfb      	ldrb	r3, [r7, #23]
 8004dbe:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f003 0308 	and.w	r3, r3, #8
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d01a      	beq.n	8004e02 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004dd2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004dd6:	d10a      	bne.n	8004dee <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	3324      	adds	r3, #36	; 0x24
 8004ddc:	2102      	movs	r1, #2
 8004dde:	4618      	mov	r0, r3
 8004de0:	f001 fb1e 	bl	8006420 <RCCEx_PLL3_Config>
 8004de4:	4603      	mov	r3, r0
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d001      	beq.n	8004dee <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 8004dea:	2301      	movs	r3, #1
 8004dec:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004dee:	4b2a      	ldr	r3, [pc, #168]	; (8004e98 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004df0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004df2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004dfc:	4926      	ldr	r1, [pc, #152]	; (8004e98 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004dfe:	4313      	orrs	r3, r2
 8004e00:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f003 0310 	and.w	r3, r3, #16
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d01a      	beq.n	8004e44 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004e14:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e18:	d10a      	bne.n	8004e30 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	3324      	adds	r3, #36	; 0x24
 8004e1e:	2102      	movs	r1, #2
 8004e20:	4618      	mov	r0, r3
 8004e22:	f001 fafd 	bl	8006420 <RCCEx_PLL3_Config>
 8004e26:	4603      	mov	r3, r0
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d001      	beq.n	8004e30 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 8004e2c:	2301      	movs	r3, #1
 8004e2e:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004e30:	4b19      	ldr	r3, [pc, #100]	; (8004e98 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004e32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e34:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004e3e:	4916      	ldr	r1, [pc, #88]	; (8004e98 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004e40:	4313      	orrs	r3, r2
 8004e42:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d036      	beq.n	8004ebe <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004e56:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004e5a:	d01f      	beq.n	8004e9c <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8004e5c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004e60:	d817      	bhi.n	8004e92 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d003      	beq.n	8004e6e <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 8004e66:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e6a:	d009      	beq.n	8004e80 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8004e6c:	e011      	b.n	8004e92 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	3304      	adds	r3, #4
 8004e72:	2100      	movs	r1, #0
 8004e74:	4618      	mov	r0, r3
 8004e76:	f001 fa21 	bl	80062bc <RCCEx_PLL2_Config>
 8004e7a:	4603      	mov	r3, r0
 8004e7c:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8004e7e:	e00e      	b.n	8004e9e <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	3324      	adds	r3, #36	; 0x24
 8004e84:	2102      	movs	r1, #2
 8004e86:	4618      	mov	r0, r3
 8004e88:	f001 faca 	bl	8006420 <RCCEx_PLL3_Config>
 8004e8c:	4603      	mov	r3, r0
 8004e8e:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8004e90:	e005      	b.n	8004e9e <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004e92:	2301      	movs	r3, #1
 8004e94:	75fb      	strb	r3, [r7, #23]
      break;
 8004e96:	e002      	b.n	8004e9e <HAL_RCCEx_PeriphCLKConfig+0xc26>
 8004e98:	58024400 	.word	0x58024400
      break;
 8004e9c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004e9e:	7dfb      	ldrb	r3, [r7, #23]
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d10a      	bne.n	8004eba <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004ea4:	4b93      	ldr	r3, [pc, #588]	; (80050f4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004ea6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ea8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004eb2:	4990      	ldr	r1, [pc, #576]	; (80050f4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004eb4:	4313      	orrs	r3, r2
 8004eb6:	658b      	str	r3, [r1, #88]	; 0x58
 8004eb8:	e001      	b.n	8004ebe <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004eba:	7dfb      	ldrb	r3, [r7, #23]
 8004ebc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d033      	beq.n	8004f32 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ed0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004ed4:	d01c      	beq.n	8004f10 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 8004ed6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004eda:	d816      	bhi.n	8004f0a <HAL_RCCEx_PeriphCLKConfig+0xc92>
 8004edc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004ee0:	d003      	beq.n	8004eea <HAL_RCCEx_PeriphCLKConfig+0xc72>
 8004ee2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004ee6:	d007      	beq.n	8004ef8 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 8004ee8:	e00f      	b.n	8004f0a <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004eea:	4b82      	ldr	r3, [pc, #520]	; (80050f4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004eec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eee:	4a81      	ldr	r2, [pc, #516]	; (80050f4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004ef0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004ef4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8004ef6:	e00c      	b.n	8004f12 <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	3324      	adds	r3, #36	; 0x24
 8004efc:	2101      	movs	r1, #1
 8004efe:	4618      	mov	r0, r3
 8004f00:	f001 fa8e 	bl	8006420 <RCCEx_PLL3_Config>
 8004f04:	4603      	mov	r3, r0
 8004f06:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8004f08:	e003      	b.n	8004f12 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004f0a:	2301      	movs	r3, #1
 8004f0c:	75fb      	strb	r3, [r7, #23]
      break;
 8004f0e:	e000      	b.n	8004f12 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 8004f10:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004f12:	7dfb      	ldrb	r3, [r7, #23]
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d10a      	bne.n	8004f2e <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004f18:	4b76      	ldr	r3, [pc, #472]	; (80050f4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004f1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f1c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004f26:	4973      	ldr	r1, [pc, #460]	; (80050f4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004f28:	4313      	orrs	r3, r2
 8004f2a:	654b      	str	r3, [r1, #84]	; 0x54
 8004f2c:	e001      	b.n	8004f32 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f2e:	7dfb      	ldrb	r3, [r7, #23]
 8004f30:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d029      	beq.n	8004f92 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d003      	beq.n	8004f4e <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 8004f46:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f4a:	d007      	beq.n	8004f5c <HAL_RCCEx_PeriphCLKConfig+0xce4>
 8004f4c:	e00f      	b.n	8004f6e <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004f4e:	4b69      	ldr	r3, [pc, #420]	; (80050f4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004f50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f52:	4a68      	ldr	r2, [pc, #416]	; (80050f4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004f54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004f58:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8004f5a:	e00b      	b.n	8004f74 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	3304      	adds	r3, #4
 8004f60:	2102      	movs	r1, #2
 8004f62:	4618      	mov	r0, r3
 8004f64:	f001 f9aa 	bl	80062bc <RCCEx_PLL2_Config>
 8004f68:	4603      	mov	r3, r0
 8004f6a:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8004f6c:	e002      	b.n	8004f74 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 8004f6e:	2301      	movs	r3, #1
 8004f70:	75fb      	strb	r3, [r7, #23]
      break;
 8004f72:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004f74:	7dfb      	ldrb	r3, [r7, #23]
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d109      	bne.n	8004f8e <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004f7a:	4b5e      	ldr	r3, [pc, #376]	; (80050f4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004f7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f7e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f86:	495b      	ldr	r1, [pc, #364]	; (80050f4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004f88:	4313      	orrs	r3, r2
 8004f8a:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004f8c:	e001      	b.n	8004f92 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f8e:	7dfb      	ldrb	r3, [r7, #23]
 8004f90:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d00a      	beq.n	8004fb4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	3324      	adds	r3, #36	; 0x24
 8004fa2:	2102      	movs	r1, #2
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	f001 fa3b 	bl	8006420 <RCCEx_PLL3_Config>
 8004faa:	4603      	mov	r3, r0
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d001      	beq.n	8004fb4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 8004fb0:	2301      	movs	r3, #1
 8004fb2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d030      	beq.n	8005022 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004fc4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004fc8:	d017      	beq.n	8004ffa <HAL_RCCEx_PeriphCLKConfig+0xd82>
 8004fca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004fce:	d811      	bhi.n	8004ff4 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8004fd0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004fd4:	d013      	beq.n	8004ffe <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8004fd6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004fda:	d80b      	bhi.n	8004ff4 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d010      	beq.n	8005002 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8004fe0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004fe4:	d106      	bne.n	8004ff4 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004fe6:	4b43      	ldr	r3, [pc, #268]	; (80050f4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004fe8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fea:	4a42      	ldr	r2, [pc, #264]	; (80050f4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004fec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004ff0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8004ff2:	e007      	b.n	8005004 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004ff4:	2301      	movs	r3, #1
 8004ff6:	75fb      	strb	r3, [r7, #23]
      break;
 8004ff8:	e004      	b.n	8005004 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8004ffa:	bf00      	nop
 8004ffc:	e002      	b.n	8005004 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8004ffe:	bf00      	nop
 8005000:	e000      	b.n	8005004 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8005002:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005004:	7dfb      	ldrb	r3, [r7, #23]
 8005006:	2b00      	cmp	r3, #0
 8005008:	d109      	bne.n	800501e <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800500a:	4b3a      	ldr	r3, [pc, #232]	; (80050f4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800500c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800500e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005016:	4937      	ldr	r1, [pc, #220]	; (80050f4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005018:	4313      	orrs	r3, r2
 800501a:	654b      	str	r3, [r1, #84]	; 0x54
 800501c:	e001      	b.n	8005022 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800501e:	7dfb      	ldrb	r3, [r7, #23]
 8005020:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800502a:	2b00      	cmp	r3, #0
 800502c:	d008      	beq.n	8005040 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800502e:	4b31      	ldr	r3, [pc, #196]	; (80050f4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005030:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005032:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800503a:	492e      	ldr	r1, [pc, #184]	; (80050f4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800503c:	4313      	orrs	r3, r2
 800503e:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005048:	2b00      	cmp	r3, #0
 800504a:	d009      	beq.n	8005060 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800504c:	4b29      	ldr	r3, [pc, #164]	; (80050f4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800504e:	691b      	ldr	r3, [r3, #16]
 8005050:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800505a:	4926      	ldr	r1, [pc, #152]	; (80050f4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800505c:	4313      	orrs	r3, r2
 800505e:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005068:	2b00      	cmp	r3, #0
 800506a:	d008      	beq.n	800507e <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800506c:	4b21      	ldr	r3, [pc, #132]	; (80050f4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800506e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005070:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005078:	491e      	ldr	r1, [pc, #120]	; (80050f4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800507a:	4313      	orrs	r3, r2
 800507c:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005086:	2b00      	cmp	r3, #0
 8005088:	d00d      	beq.n	80050a6 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800508a:	4b1a      	ldr	r3, [pc, #104]	; (80050f4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800508c:	691b      	ldr	r3, [r3, #16]
 800508e:	4a19      	ldr	r2, [pc, #100]	; (80050f4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005090:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005094:	6113      	str	r3, [r2, #16]
 8005096:	4b17      	ldr	r3, [pc, #92]	; (80050f4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005098:	691a      	ldr	r2, [r3, #16]
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80050a0:	4914      	ldr	r1, [pc, #80]	; (80050f4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80050a2:	4313      	orrs	r3, r2
 80050a4:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	da08      	bge.n	80050c0 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80050ae:	4b11      	ldr	r3, [pc, #68]	; (80050f4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80050b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050b2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050ba:	490e      	ldr	r1, [pc, #56]	; (80050f4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80050bc:	4313      	orrs	r3, r2
 80050be:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d009      	beq.n	80050e0 <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80050cc:	4b09      	ldr	r3, [pc, #36]	; (80050f4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80050ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050d0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050da:	4906      	ldr	r1, [pc, #24]	; (80050f4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80050dc:	4313      	orrs	r3, r2
 80050de:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 80050e0:	7dbb      	ldrb	r3, [r7, #22]
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d101      	bne.n	80050ea <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 80050e6:	2300      	movs	r3, #0
 80050e8:	e000      	b.n	80050ec <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 80050ea:	2301      	movs	r3, #1
}
 80050ec:	4618      	mov	r0, r3
 80050ee:	3718      	adds	r7, #24
 80050f0:	46bd      	mov	sp, r7
 80050f2:	bd80      	pop	{r7, pc}
 80050f4:	58024400 	.word	0x58024400

080050f8 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80050f8:	b580      	push	{r7, lr}
 80050fa:	b090      	sub	sp, #64	; 0x40
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005106:	f040 8095 	bne.w	8005234 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 800510a:	4bae      	ldr	r3, [pc, #696]	; (80053c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800510c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800510e:	f003 0307 	and.w	r3, r3, #7
 8005112:	633b      	str	r3, [r7, #48]	; 0x30
 8005114:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005116:	2b04      	cmp	r3, #4
 8005118:	f200 8088 	bhi.w	800522c <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 800511c:	a201      	add	r2, pc, #4	; (adr r2, 8005124 <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 800511e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005122:	bf00      	nop
 8005124:	08005139 	.word	0x08005139
 8005128:	08005161 	.word	0x08005161
 800512c:	08005189 	.word	0x08005189
 8005130:	08005225 	.word	0x08005225
 8005134:	080051b1 	.word	0x080051b1

      switch (saiclocksource)
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005138:	4ba2      	ldr	r3, [pc, #648]	; (80053c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005140:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005144:	d108      	bne.n	8005158 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005146:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800514a:	4618      	mov	r0, r3
 800514c:	f000 ff64 	bl	8006018 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 8005150:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005152:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005154:	f000 bc95 	b.w	8005a82 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8005158:	2300      	movs	r3, #0
 800515a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800515c:	f000 bc91 	b.w	8005a82 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005160:	4b98      	ldr	r3, [pc, #608]	; (80053c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005168:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800516c:	d108      	bne.n	8005180 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800516e:	f107 0318 	add.w	r3, r7, #24
 8005172:	4618      	mov	r0, r3
 8005174:	f000 fca8 	bl	8005ac8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005178:	69bb      	ldr	r3, [r7, #24]
 800517a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800517c:	f000 bc81 	b.w	8005a82 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8005180:	2300      	movs	r3, #0
 8005182:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005184:	f000 bc7d 	b.w	8005a82 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005188:	4b8e      	ldr	r3, [pc, #568]	; (80053c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005190:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005194:	d108      	bne.n	80051a8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005196:	f107 030c 	add.w	r3, r7, #12
 800519a:	4618      	mov	r0, r3
 800519c:	f000 fde8 	bl	8005d70 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80051a4:	f000 bc6d 	b.w	8005a82 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80051a8:	2300      	movs	r3, #0
 80051aa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80051ac:	f000 bc69 	b.w	8005a82 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80051b0:	4b84      	ldr	r3, [pc, #528]	; (80053c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80051b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051b4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80051b8:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80051ba:	4b82      	ldr	r3, [pc, #520]	; (80053c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f003 0304 	and.w	r3, r3, #4
 80051c2:	2b04      	cmp	r3, #4
 80051c4:	d10c      	bne.n	80051e0 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 80051c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d109      	bne.n	80051e0 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80051cc:	4b7d      	ldr	r3, [pc, #500]	; (80053c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	08db      	lsrs	r3, r3, #3
 80051d2:	f003 0303 	and.w	r3, r3, #3
 80051d6:	4a7c      	ldr	r2, [pc, #496]	; (80053c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 80051d8:	fa22 f303 	lsr.w	r3, r2, r3
 80051dc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80051de:	e01f      	b.n	8005220 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80051e0:	4b78      	ldr	r3, [pc, #480]	; (80053c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80051ec:	d106      	bne.n	80051fc <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 80051ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051f0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80051f4:	d102      	bne.n	80051fc <HAL_RCCEx_GetPeriphCLKFreq+0x104>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80051f6:	4b75      	ldr	r3, [pc, #468]	; (80053cc <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 80051f8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80051fa:	e011      	b.n	8005220 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80051fc:	4b71      	ldr	r3, [pc, #452]	; (80053c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005204:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005208:	d106      	bne.n	8005218 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 800520a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800520c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005210:	d102      	bne.n	8005218 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8005212:	4b6f      	ldr	r3, [pc, #444]	; (80053d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 8005214:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005216:	e003      	b.n	8005220 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8005218:	2300      	movs	r3, #0
 800521a:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800521c:	f000 bc31 	b.w	8005a82 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8005220:	f000 bc2f 	b.w	8005a82 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8005224:	4b6b      	ldr	r3, [pc, #428]	; (80053d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8005226:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005228:	f000 bc2b 	b.w	8005a82 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 800522c:	2300      	movs	r3, #0
 800522e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005230:	f000 bc27 	b.w	8005a82 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800523a:	f040 8095 	bne.w	8005368 <HAL_RCCEx_GetPeriphCLKFreq+0x270>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 800523e:	4b61      	ldr	r3, [pc, #388]	; (80053c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8005240:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005242:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8005246:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8005248:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800524a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800524e:	d04d      	beq.n	80052ec <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 8005250:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005252:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005256:	f200 8084 	bhi.w	8005362 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800525a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800525c:	2bc0      	cmp	r3, #192	; 0xc0
 800525e:	d07d      	beq.n	800535c <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 8005260:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005262:	2bc0      	cmp	r3, #192	; 0xc0
 8005264:	d87d      	bhi.n	8005362 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8005266:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005268:	2b80      	cmp	r3, #128	; 0x80
 800526a:	d02d      	beq.n	80052c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 800526c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800526e:	2b80      	cmp	r3, #128	; 0x80
 8005270:	d877      	bhi.n	8005362 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8005272:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005274:	2b00      	cmp	r3, #0
 8005276:	d003      	beq.n	8005280 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
 8005278:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800527a:	2b40      	cmp	r3, #64	; 0x40
 800527c:	d012      	beq.n	80052a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 800527e:	e070      	b.n	8005362 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
      {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005280:	4b50      	ldr	r3, [pc, #320]	; (80053c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005288:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800528c:	d107      	bne.n	800529e <HAL_RCCEx_GetPeriphCLKFreq+0x1a6>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800528e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005292:	4618      	mov	r0, r3
 8005294:	f000 fec0 	bl	8006018 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005298:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800529a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800529c:	e3f1      	b.n	8005a82 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800529e:	2300      	movs	r3, #0
 80052a0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80052a2:	e3ee      	b.n	8005a82 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80052a4:	4b47      	ldr	r3, [pc, #284]	; (80053c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80052ac:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80052b0:	d107      	bne.n	80052c2 <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80052b2:	f107 0318 	add.w	r3, r7, #24
 80052b6:	4618      	mov	r0, r3
 80052b8:	f000 fc06 	bl	8005ac8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80052bc:	69bb      	ldr	r3, [r7, #24]
 80052be:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80052c0:	e3df      	b.n	8005a82 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80052c2:	2300      	movs	r3, #0
 80052c4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80052c6:	e3dc      	b.n	8005a82 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80052c8:	4b3e      	ldr	r3, [pc, #248]	; (80053c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80052d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80052d4:	d107      	bne.n	80052e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80052d6:	f107 030c 	add.w	r3, r7, #12
 80052da:	4618      	mov	r0, r3
 80052dc:	f000 fd48 	bl	8005d70 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80052e4:	e3cd      	b.n	8005a82 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80052e6:	2300      	movs	r3, #0
 80052e8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80052ea:	e3ca      	b.n	8005a82 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80052ec:	4b35      	ldr	r3, [pc, #212]	; (80053c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80052ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052f0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80052f4:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80052f6:	4b33      	ldr	r3, [pc, #204]	; (80053c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f003 0304 	and.w	r3, r3, #4
 80052fe:	2b04      	cmp	r3, #4
 8005300:	d10c      	bne.n	800531c <HAL_RCCEx_GetPeriphCLKFreq+0x224>
 8005302:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005304:	2b00      	cmp	r3, #0
 8005306:	d109      	bne.n	800531c <HAL_RCCEx_GetPeriphCLKFreq+0x224>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005308:	4b2e      	ldr	r3, [pc, #184]	; (80053c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	08db      	lsrs	r3, r3, #3
 800530e:	f003 0303 	and.w	r3, r3, #3
 8005312:	4a2d      	ldr	r2, [pc, #180]	; (80053c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 8005314:	fa22 f303 	lsr.w	r3, r2, r3
 8005318:	63fb      	str	r3, [r7, #60]	; 0x3c
 800531a:	e01e      	b.n	800535a <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800531c:	4b29      	ldr	r3, [pc, #164]	; (80053c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005324:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005328:	d106      	bne.n	8005338 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 800532a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800532c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005330:	d102      	bne.n	8005338 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8005332:	4b26      	ldr	r3, [pc, #152]	; (80053cc <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8005334:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005336:	e010      	b.n	800535a <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005338:	4b22      	ldr	r3, [pc, #136]	; (80053c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005340:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005344:	d106      	bne.n	8005354 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 8005346:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005348:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800534c:	d102      	bne.n	8005354 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800534e:	4b20      	ldr	r3, [pc, #128]	; (80053d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 8005350:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005352:	e002      	b.n	800535a <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8005354:	2300      	movs	r3, #0
 8005356:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8005358:	e393      	b.n	8005a82 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800535a:	e392      	b.n	8005a82 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800535c:	4b1d      	ldr	r3, [pc, #116]	; (80053d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 800535e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005360:	e38f      	b.n	8005a82 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 8005362:	2300      	movs	r3, #0
 8005364:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005366:	e38c      	b.n	8005a82 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800536e:	f040 80a7 	bne.w	80054c0 <HAL_RCCEx_GetPeriphCLKFreq+0x3c8>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 8005372:	4b14      	ldr	r3, [pc, #80]	; (80053c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8005374:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005376:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800537a:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800537c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800537e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005382:	d05f      	beq.n	8005444 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 8005384:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005386:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800538a:	f200 8096 	bhi.w	80054ba <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 800538e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005390:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005394:	f000 808e 	beq.w	80054b4 <HAL_RCCEx_GetPeriphCLKFreq+0x3bc>
 8005398:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800539a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800539e:	f200 808c 	bhi.w	80054ba <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 80053a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053a4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80053a8:	d03a      	beq.n	8005420 <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 80053aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053ac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80053b0:	f200 8083 	bhi.w	80054ba <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 80053b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d00e      	beq.n	80053d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>
 80053ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053bc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80053c0:	d01c      	beq.n	80053fc <HAL_RCCEx_GetPeriphCLKFreq+0x304>
 80053c2:	e07a      	b.n	80054ba <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 80053c4:	58024400 	.word	0x58024400
 80053c8:	03d09000 	.word	0x03d09000
 80053cc:	003d0900 	.word	0x003d0900
 80053d0:	017d7840 	.word	0x017d7840
 80053d4:	00bb8000 	.word	0x00bb8000
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80053d8:	4baa      	ldr	r3, [pc, #680]	; (8005684 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053e0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80053e4:	d107      	bne.n	80053f6 <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80053e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80053ea:	4618      	mov	r0, r3
 80053ec:	f000 fe14 	bl	8006018 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80053f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053f2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80053f4:	e345      	b.n	8005a82 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80053f6:	2300      	movs	r3, #0
 80053f8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80053fa:	e342      	b.n	8005a82 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80053fc:	4ba1      	ldr	r3, [pc, #644]	; (8005684 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005404:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005408:	d107      	bne.n	800541a <HAL_RCCEx_GetPeriphCLKFreq+0x322>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800540a:	f107 0318 	add.w	r3, r7, #24
 800540e:	4618      	mov	r0, r3
 8005410:	f000 fb5a 	bl	8005ac8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005414:	69bb      	ldr	r3, [r7, #24]
 8005416:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005418:	e333      	b.n	8005a82 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800541a:	2300      	movs	r3, #0
 800541c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800541e:	e330      	b.n	8005a82 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005420:	4b98      	ldr	r3, [pc, #608]	; (8005684 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005428:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800542c:	d107      	bne.n	800543e <HAL_RCCEx_GetPeriphCLKFreq+0x346>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800542e:	f107 030c 	add.w	r3, r7, #12
 8005432:	4618      	mov	r0, r3
 8005434:	f000 fc9c 	bl	8005d70 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800543c:	e321      	b.n	8005a82 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800543e:	2300      	movs	r3, #0
 8005440:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005442:	e31e      	b.n	8005a82 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8005444:	4b8f      	ldr	r3, [pc, #572]	; (8005684 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005446:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005448:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800544c:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800544e:	4b8d      	ldr	r3, [pc, #564]	; (8005684 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f003 0304 	and.w	r3, r3, #4
 8005456:	2b04      	cmp	r3, #4
 8005458:	d10c      	bne.n	8005474 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
 800545a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800545c:	2b00      	cmp	r3, #0
 800545e:	d109      	bne.n	8005474 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005460:	4b88      	ldr	r3, [pc, #544]	; (8005684 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	08db      	lsrs	r3, r3, #3
 8005466:	f003 0303 	and.w	r3, r3, #3
 800546a:	4a87      	ldr	r2, [pc, #540]	; (8005688 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800546c:	fa22 f303 	lsr.w	r3, r2, r3
 8005470:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005472:	e01e      	b.n	80054b2 <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005474:	4b83      	ldr	r3, [pc, #524]	; (8005684 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800547c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005480:	d106      	bne.n	8005490 <HAL_RCCEx_GetPeriphCLKFreq+0x398>
 8005482:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005484:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005488:	d102      	bne.n	8005490 <HAL_RCCEx_GetPeriphCLKFreq+0x398>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800548a:	4b80      	ldr	r3, [pc, #512]	; (800568c <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800548c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800548e:	e010      	b.n	80054b2 <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005490:	4b7c      	ldr	r3, [pc, #496]	; (8005684 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005498:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800549c:	d106      	bne.n	80054ac <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
 800549e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80054a4:	d102      	bne.n	80054ac <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80054a6:	4b7a      	ldr	r3, [pc, #488]	; (8005690 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80054a8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80054aa:	e002      	b.n	80054b2 <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80054ac:	2300      	movs	r3, #0
 80054ae:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80054b0:	e2e7      	b.n	8005a82 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80054b2:	e2e6      	b.n	8005a82 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80054b4:	4b77      	ldr	r3, [pc, #476]	; (8005694 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80054b6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80054b8:	e2e3      	b.n	8005a82 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 80054ba:	2300      	movs	r3, #0
 80054bc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80054be:	e2e0      	b.n	8005a82 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80054c6:	f040 809c 	bne.w	8005602 <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 80054ca:	4b6e      	ldr	r3, [pc, #440]	; (8005684 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80054cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054ce:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 80054d2:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80054d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054d6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80054da:	d054      	beq.n	8005586 <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
 80054dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054de:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80054e2:	f200 808b 	bhi.w	80055fc <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 80054e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054e8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80054ec:	f000 8083 	beq.w	80055f6 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
 80054f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054f2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80054f6:	f200 8081 	bhi.w	80055fc <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 80054fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054fc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005500:	d02f      	beq.n	8005562 <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 8005502:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005504:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005508:	d878      	bhi.n	80055fc <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 800550a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800550c:	2b00      	cmp	r3, #0
 800550e:	d004      	beq.n	800551a <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 8005510:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005512:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005516:	d012      	beq.n	800553e <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 8005518:	e070      	b.n	80055fc <HAL_RCCEx_GetPeriphCLKFreq+0x504>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800551a:	4b5a      	ldr	r3, [pc, #360]	; (8005684 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005522:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005526:	d107      	bne.n	8005538 <HAL_RCCEx_GetPeriphCLKFreq+0x440>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005528:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800552c:	4618      	mov	r0, r3
 800552e:	f000 fd73 	bl	8006018 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005532:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005534:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005536:	e2a4      	b.n	8005a82 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8005538:	2300      	movs	r3, #0
 800553a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800553c:	e2a1      	b.n	8005a82 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800553e:	4b51      	ldr	r3, [pc, #324]	; (8005684 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005546:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800554a:	d107      	bne.n	800555c <HAL_RCCEx_GetPeriphCLKFreq+0x464>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800554c:	f107 0318 	add.w	r3, r7, #24
 8005550:	4618      	mov	r0, r3
 8005552:	f000 fab9 	bl	8005ac8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005556:	69bb      	ldr	r3, [r7, #24]
 8005558:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 800555a:	e292      	b.n	8005a82 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800555c:	2300      	movs	r3, #0
 800555e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005560:	e28f      	b.n	8005a82 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005562:	4b48      	ldr	r3, [pc, #288]	; (8005684 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800556a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800556e:	d107      	bne.n	8005580 <HAL_RCCEx_GetPeriphCLKFreq+0x488>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005570:	f107 030c 	add.w	r3, r7, #12
 8005574:	4618      	mov	r0, r3
 8005576:	f000 fbfb 	bl	8005d70 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800557e:	e280      	b.n	8005a82 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8005580:	2300      	movs	r3, #0
 8005582:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005584:	e27d      	b.n	8005a82 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8005586:	4b3f      	ldr	r3, [pc, #252]	; (8005684 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005588:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800558a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800558e:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005590:	4b3c      	ldr	r3, [pc, #240]	; (8005684 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f003 0304 	and.w	r3, r3, #4
 8005598:	2b04      	cmp	r3, #4
 800559a:	d10c      	bne.n	80055b6 <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 800559c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d109      	bne.n	80055b6 <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80055a2:	4b38      	ldr	r3, [pc, #224]	; (8005684 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	08db      	lsrs	r3, r3, #3
 80055a8:	f003 0303 	and.w	r3, r3, #3
 80055ac:	4a36      	ldr	r2, [pc, #216]	; (8005688 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80055ae:	fa22 f303 	lsr.w	r3, r2, r3
 80055b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80055b4:	e01e      	b.n	80055f4 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80055b6:	4b33      	ldr	r3, [pc, #204]	; (8005684 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80055c2:	d106      	bne.n	80055d2 <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
 80055c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055c6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80055ca:	d102      	bne.n	80055d2 <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80055cc:	4b2f      	ldr	r3, [pc, #188]	; (800568c <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 80055ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 80055d0:	e010      	b.n	80055f4 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80055d2:	4b2c      	ldr	r3, [pc, #176]	; (8005684 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055da:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80055de:	d106      	bne.n	80055ee <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 80055e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055e2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80055e6:	d102      	bne.n	80055ee <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80055e8:	4b29      	ldr	r3, [pc, #164]	; (8005690 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80055ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80055ec:	e002      	b.n	80055f4 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80055ee:	2300      	movs	r3, #0
 80055f0:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80055f2:	e246      	b.n	8005a82 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80055f4:	e245      	b.n	8005a82 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80055f6:	4b27      	ldr	r3, [pc, #156]	; (8005694 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80055f8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80055fa:	e242      	b.n	8005a82 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 80055fc:	2300      	movs	r3, #0
 80055fe:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005600:	e23f      	b.n	8005a82 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005608:	f040 80a8 	bne.w	800575c <HAL_RCCEx_GetPeriphCLKFreq+0x664>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 800560c:	4b1d      	ldr	r3, [pc, #116]	; (8005684 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800560e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005610:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8005614:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8005616:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005618:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800561c:	d060      	beq.n	80056e0 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
 800561e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005620:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005624:	f200 8097 	bhi.w	8005756 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 8005628:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800562a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800562e:	f000 808f 	beq.w	8005750 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
 8005632:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005634:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005638:	f200 808d 	bhi.w	8005756 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 800563c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800563e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005642:	d03b      	beq.n	80056bc <HAL_RCCEx_GetPeriphCLKFreq+0x5c4>
 8005644:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005646:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800564a:	f200 8084 	bhi.w	8005756 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 800564e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005650:	2b00      	cmp	r3, #0
 8005652:	d004      	beq.n	800565e <HAL_RCCEx_GetPeriphCLKFreq+0x566>
 8005654:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005656:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800565a:	d01d      	beq.n	8005698 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>
 800565c:	e07b      	b.n	8005756 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800565e:	4b09      	ldr	r3, [pc, #36]	; (8005684 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005666:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800566a:	d107      	bne.n	800567c <HAL_RCCEx_GetPeriphCLKFreq+0x584>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800566c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005670:	4618      	mov	r0, r3
 8005672:	f000 fcd1 	bl	8006018 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005676:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005678:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800567a:	e202      	b.n	8005a82 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800567c:	2300      	movs	r3, #0
 800567e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005680:	e1ff      	b.n	8005a82 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8005682:	bf00      	nop
 8005684:	58024400 	.word	0x58024400
 8005688:	03d09000 	.word	0x03d09000
 800568c:	003d0900 	.word	0x003d0900
 8005690:	017d7840 	.word	0x017d7840
 8005694:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005698:	4ba3      	ldr	r3, [pc, #652]	; (8005928 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80056a0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80056a4:	d107      	bne.n	80056b6 <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80056a6:	f107 0318 	add.w	r3, r7, #24
 80056aa:	4618      	mov	r0, r3
 80056ac:	f000 fa0c 	bl	8005ac8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80056b0:	69bb      	ldr	r3, [r7, #24]
 80056b2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80056b4:	e1e5      	b.n	8005a82 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80056b6:	2300      	movs	r3, #0
 80056b8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80056ba:	e1e2      	b.n	8005a82 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80056bc:	4b9a      	ldr	r3, [pc, #616]	; (8005928 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80056c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80056c8:	d107      	bne.n	80056da <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80056ca:	f107 030c 	add.w	r3, r7, #12
 80056ce:	4618      	mov	r0, r3
 80056d0:	f000 fb4e 	bl	8005d70 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80056d8:	e1d3      	b.n	8005a82 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80056da:	2300      	movs	r3, #0
 80056dc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80056de:	e1d0      	b.n	8005a82 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80056e0:	4b91      	ldr	r3, [pc, #580]	; (8005928 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80056e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80056e4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80056e8:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80056ea:	4b8f      	ldr	r3, [pc, #572]	; (8005928 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	f003 0304 	and.w	r3, r3, #4
 80056f2:	2b04      	cmp	r3, #4
 80056f4:	d10c      	bne.n	8005710 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
 80056f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d109      	bne.n	8005710 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80056fc:	4b8a      	ldr	r3, [pc, #552]	; (8005928 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	08db      	lsrs	r3, r3, #3
 8005702:	f003 0303 	and.w	r3, r3, #3
 8005706:	4a89      	ldr	r2, [pc, #548]	; (800592c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8005708:	fa22 f303 	lsr.w	r3, r2, r3
 800570c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800570e:	e01e      	b.n	800574e <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005710:	4b85      	ldr	r3, [pc, #532]	; (8005928 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005718:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800571c:	d106      	bne.n	800572c <HAL_RCCEx_GetPeriphCLKFreq+0x634>
 800571e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005720:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005724:	d102      	bne.n	800572c <HAL_RCCEx_GetPeriphCLKFreq+0x634>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8005726:	4b82      	ldr	r3, [pc, #520]	; (8005930 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8005728:	63fb      	str	r3, [r7, #60]	; 0x3c
 800572a:	e010      	b.n	800574e <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800572c:	4b7e      	ldr	r3, [pc, #504]	; (8005928 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005734:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005738:	d106      	bne.n	8005748 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800573a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800573c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005740:	d102      	bne.n	8005748 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8005742:	4b7c      	ldr	r3, [pc, #496]	; (8005934 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8005744:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005746:	e002      	b.n	800574e <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8005748:	2300      	movs	r3, #0
 800574a:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800574c:	e199      	b.n	8005a82 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800574e:	e198      	b.n	8005a82 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8005750:	4b79      	ldr	r3, [pc, #484]	; (8005938 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8005752:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005754:	e195      	b.n	8005a82 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 8005756:	2300      	movs	r3, #0
 8005758:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800575a:	e192      	b.n	8005a82 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005762:	d173      	bne.n	800584c <HAL_RCCEx_GetPeriphCLKFreq+0x754>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8005764:	4b70      	ldr	r3, [pc, #448]	; (8005928 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005766:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005768:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800576c:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800576e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005770:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005774:	d02f      	beq.n	80057d6 <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
 8005776:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005778:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800577c:	d863      	bhi.n	8005846 <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
 800577e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005780:	2b00      	cmp	r3, #0
 8005782:	d004      	beq.n	800578e <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 8005784:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005786:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800578a:	d012      	beq.n	80057b2 <HAL_RCCEx_GetPeriphCLKFreq+0x6ba>
 800578c:	e05b      	b.n	8005846 <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800578e:	4b66      	ldr	r3, [pc, #408]	; (8005928 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005796:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800579a:	d107      	bne.n	80057ac <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800579c:	f107 0318 	add.w	r3, r7, #24
 80057a0:	4618      	mov	r0, r3
 80057a2:	f000 f991 	bl	8005ac8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80057a6:	69bb      	ldr	r3, [r7, #24]
 80057a8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80057aa:	e16a      	b.n	8005a82 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80057ac:	2300      	movs	r3, #0
 80057ae:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80057b0:	e167      	b.n	8005a82 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80057b2:	4b5d      	ldr	r3, [pc, #372]	; (8005928 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80057ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80057be:	d107      	bne.n	80057d0 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80057c0:	f107 030c 	add.w	r3, r7, #12
 80057c4:	4618      	mov	r0, r3
 80057c6:	f000 fad3 	bl	8005d70 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80057ca:	697b      	ldr	r3, [r7, #20]
 80057cc:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80057ce:	e158      	b.n	8005a82 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80057d0:	2300      	movs	r3, #0
 80057d2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80057d4:	e155      	b.n	8005a82 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80057d6:	4b54      	ldr	r3, [pc, #336]	; (8005928 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80057d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057da:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80057de:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80057e0:	4b51      	ldr	r3, [pc, #324]	; (8005928 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f003 0304 	and.w	r3, r3, #4
 80057e8:	2b04      	cmp	r3, #4
 80057ea:	d10c      	bne.n	8005806 <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
 80057ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d109      	bne.n	8005806 <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80057f2:	4b4d      	ldr	r3, [pc, #308]	; (8005928 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	08db      	lsrs	r3, r3, #3
 80057f8:	f003 0303 	and.w	r3, r3, #3
 80057fc:	4a4b      	ldr	r2, [pc, #300]	; (800592c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80057fe:	fa22 f303 	lsr.w	r3, r2, r3
 8005802:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005804:	e01e      	b.n	8005844 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005806:	4b48      	ldr	r3, [pc, #288]	; (8005928 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800580e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005812:	d106      	bne.n	8005822 <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
 8005814:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005816:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800581a:	d102      	bne.n	8005822 <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800581c:	4b44      	ldr	r3, [pc, #272]	; (8005930 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 800581e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005820:	e010      	b.n	8005844 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005822:	4b41      	ldr	r3, [pc, #260]	; (8005928 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800582a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800582e:	d106      	bne.n	800583e <HAL_RCCEx_GetPeriphCLKFreq+0x746>
 8005830:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005832:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005836:	d102      	bne.n	800583e <HAL_RCCEx_GetPeriphCLKFreq+0x746>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8005838:	4b3e      	ldr	r3, [pc, #248]	; (8005934 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800583a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800583c:	e002      	b.n	8005844 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800583e:	2300      	movs	r3, #0
 8005840:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8005842:	e11e      	b.n	8005a82 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8005844:	e11d      	b.n	8005a82 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 8005846:	2300      	movs	r3, #0
 8005848:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800584a:	e11a      	b.n	8005a82 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005852:	d133      	bne.n	80058bc <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8005854:	4b34      	ldr	r3, [pc, #208]	; (8005928 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005856:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005858:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800585c:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800585e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005860:	2b00      	cmp	r3, #0
 8005862:	d004      	beq.n	800586e <HAL_RCCEx_GetPeriphCLKFreq+0x776>
 8005864:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005866:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800586a:	d012      	beq.n	8005892 <HAL_RCCEx_GetPeriphCLKFreq+0x79a>
 800586c:	e023      	b.n	80058b6 <HAL_RCCEx_GetPeriphCLKFreq+0x7be>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800586e:	4b2e      	ldr	r3, [pc, #184]	; (8005928 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005876:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800587a:	d107      	bne.n	800588c <HAL_RCCEx_GetPeriphCLKFreq+0x794>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800587c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005880:	4618      	mov	r0, r3
 8005882:	f000 fbc9 	bl	8006018 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005886:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005888:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800588a:	e0fa      	b.n	8005a82 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800588c:	2300      	movs	r3, #0
 800588e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005890:	e0f7      	b.n	8005a82 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005892:	4b25      	ldr	r3, [pc, #148]	; (8005928 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800589a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800589e:	d107      	bne.n	80058b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80058a0:	f107 0318 	add.w	r3, r7, #24
 80058a4:	4618      	mov	r0, r3
 80058a6:	f000 f90f 	bl	8005ac8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80058aa:	6a3b      	ldr	r3, [r7, #32]
 80058ac:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80058ae:	e0e8      	b.n	8005a82 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80058b0:	2300      	movs	r3, #0
 80058b2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80058b4:	e0e5      	b.n	8005a82 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 80058b6:	2300      	movs	r3, #0
 80058b8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80058ba:	e0e2      	b.n	8005a82 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80058c2:	f040 808f 	bne.w	80059e4 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 80058c6:	4b18      	ldr	r3, [pc, #96]	; (8005928 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80058c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058ca:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 80058ce:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80058d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058d2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80058d6:	d075      	beq.n	80059c4 <HAL_RCCEx_GetPeriphCLKFreq+0x8cc>
 80058d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058da:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80058de:	d87e      	bhi.n	80059de <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 80058e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058e6:	d060      	beq.n	80059aa <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
 80058e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058ee:	d876      	bhi.n	80059de <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 80058f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058f2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80058f6:	d045      	beq.n	8005984 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>
 80058f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058fa:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80058fe:	d86e      	bhi.n	80059de <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8005900:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005902:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005906:	d02b      	beq.n	8005960 <HAL_RCCEx_GetPeriphCLKFreq+0x868>
 8005908:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800590a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800590e:	d866      	bhi.n	80059de <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8005910:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005912:	2b00      	cmp	r3, #0
 8005914:	d004      	beq.n	8005920 <HAL_RCCEx_GetPeriphCLKFreq+0x828>
 8005916:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005918:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800591c:	d00e      	beq.n	800593c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 800591e:	e05e      	b.n	80059de <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8005920:	f000 f8bc 	bl	8005a9c <HAL_RCCEx_GetD3PCLK1Freq>
 8005924:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 8005926:	e0ac      	b.n	8005a82 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8005928:	58024400 	.word	0x58024400
 800592c:	03d09000 	.word	0x03d09000
 8005930:	003d0900 	.word	0x003d0900
 8005934:	017d7840 	.word	0x017d7840
 8005938:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800593c:	4b53      	ldr	r3, [pc, #332]	; (8005a8c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005944:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005948:	d107      	bne.n	800595a <HAL_RCCEx_GetPeriphCLKFreq+0x862>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800594a:	f107 0318 	add.w	r3, r7, #24
 800594e:	4618      	mov	r0, r3
 8005950:	f000 f8ba 	bl	8005ac8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005954:	69fb      	ldr	r3, [r7, #28]
 8005956:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005958:	e093      	b.n	8005a82 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800595a:	2300      	movs	r3, #0
 800595c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800595e:	e090      	b.n	8005a82 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005960:	4b4a      	ldr	r3, [pc, #296]	; (8005a8c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005968:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800596c:	d107      	bne.n	800597e <HAL_RCCEx_GetPeriphCLKFreq+0x886>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800596e:	f107 030c 	add.w	r3, r7, #12
 8005972:	4618      	mov	r0, r3
 8005974:	f000 f9fc 	bl	8005d70 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8005978:	693b      	ldr	r3, [r7, #16]
 800597a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800597c:	e081      	b.n	8005a82 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800597e:	2300      	movs	r3, #0
 8005980:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005982:	e07e      	b.n	8005a82 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005984:	4b41      	ldr	r3, [pc, #260]	; (8005a8c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f003 0304 	and.w	r3, r3, #4
 800598c:	2b04      	cmp	r3, #4
 800598e:	d109      	bne.n	80059a4 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005990:	4b3e      	ldr	r3, [pc, #248]	; (8005a8c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	08db      	lsrs	r3, r3, #3
 8005996:	f003 0303 	and.w	r3, r3, #3
 800599a:	4a3d      	ldr	r2, [pc, #244]	; (8005a90 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 800599c:	fa22 f303 	lsr.w	r3, r2, r3
 80059a0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80059a2:	e06e      	b.n	8005a82 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80059a4:	2300      	movs	r3, #0
 80059a6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80059a8:	e06b      	b.n	8005a82 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80059aa:	4b38      	ldr	r3, [pc, #224]	; (8005a8c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80059b6:	d102      	bne.n	80059be <HAL_RCCEx_GetPeriphCLKFreq+0x8c6>
         {
          frequency = CSI_VALUE;
 80059b8:	4b36      	ldr	r3, [pc, #216]	; (8005a94 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 80059ba:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80059bc:	e061      	b.n	8005a82 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80059be:	2300      	movs	r3, #0
 80059c0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80059c2:	e05e      	b.n	8005a82 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80059c4:	4b31      	ldr	r3, [pc, #196]	; (8005a8c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059cc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80059d0:	d102      	bne.n	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x8e0>
         {
          frequency = HSE_VALUE;
 80059d2:	4b31      	ldr	r3, [pc, #196]	; (8005a98 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 80059d4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80059d6:	e054      	b.n	8005a82 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80059d8:	2300      	movs	r3, #0
 80059da:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80059dc:	e051      	b.n	8005a82 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 80059de:	2300      	movs	r3, #0
 80059e0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80059e2:	e04e      	b.n	8005a82 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80059ea:	d148      	bne.n	8005a7e <HAL_RCCEx_GetPeriphCLKFreq+0x986>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 80059ec:	4b27      	ldr	r3, [pc, #156]	; (8005a8c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80059ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059f0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80059f4:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80059f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80059fc:	d02a      	beq.n	8005a54 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 80059fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a00:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005a04:	d838      	bhi.n	8005a78 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 8005a06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d004      	beq.n	8005a16 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 8005a0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a0e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005a12:	d00d      	beq.n	8005a30 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 8005a14:	e030      	b.n	8005a78 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005a16:	4b1d      	ldr	r3, [pc, #116]	; (8005a8c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a1e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005a22:	d102      	bne.n	8005a2a <HAL_RCCEx_GetPeriphCLKFreq+0x932>
         {
          frequency = HSE_VALUE;
 8005a24:	4b1c      	ldr	r3, [pc, #112]	; (8005a98 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8005a26:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005a28:	e02b      	b.n	8005a82 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005a2a:	2300      	movs	r3, #0
 8005a2c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005a2e:	e028      	b.n	8005a82 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005a30:	4b16      	ldr	r3, [pc, #88]	; (8005a8c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a38:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005a3c:	d107      	bne.n	8005a4e <HAL_RCCEx_GetPeriphCLKFreq+0x956>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005a3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005a42:	4618      	mov	r0, r3
 8005a44:	f000 fae8 	bl	8006018 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005a48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a4a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005a4c:	e019      	b.n	8005a82 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005a4e:	2300      	movs	r3, #0
 8005a50:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005a52:	e016      	b.n	8005a82 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005a54:	4b0d      	ldr	r3, [pc, #52]	; (8005a8c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005a5c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005a60:	d107      	bne.n	8005a72 <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005a62:	f107 0318 	add.w	r3, r7, #24
 8005a66:	4618      	mov	r0, r3
 8005a68:	f000 f82e 	bl	8005ac8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005a6c:	69fb      	ldr	r3, [r7, #28]
 8005a6e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005a70:	e007      	b.n	8005a82 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005a72:	2300      	movs	r3, #0
 8005a74:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005a76:	e004      	b.n	8005a82 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 8005a78:	2300      	movs	r3, #0
 8005a7a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005a7c:	e001      	b.n	8005a82 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else
    {
      frequency = 0;
 8005a7e:	2300      	movs	r3, #0
 8005a80:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 8005a82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8005a84:	4618      	mov	r0, r3
 8005a86:	3740      	adds	r7, #64	; 0x40
 8005a88:	46bd      	mov	sp, r7
 8005a8a:	bd80      	pop	{r7, pc}
 8005a8c:	58024400 	.word	0x58024400
 8005a90:	03d09000 	.word	0x03d09000
 8005a94:	003d0900 	.word	0x003d0900
 8005a98:	017d7840 	.word	0x017d7840

08005a9c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8005a9c:	b580      	push	{r7, lr}
 8005a9e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8005aa0:	f7fe fbba 	bl	8004218 <HAL_RCC_GetHCLKFreq>
 8005aa4:	4602      	mov	r2, r0
 8005aa6:	4b06      	ldr	r3, [pc, #24]	; (8005ac0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8005aa8:	6a1b      	ldr	r3, [r3, #32]
 8005aaa:	091b      	lsrs	r3, r3, #4
 8005aac:	f003 0307 	and.w	r3, r3, #7
 8005ab0:	4904      	ldr	r1, [pc, #16]	; (8005ac4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8005ab2:	5ccb      	ldrb	r3, [r1, r3]
 8005ab4:	f003 031f 	and.w	r3, r3, #31
 8005ab8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8005abc:	4618      	mov	r0, r3
 8005abe:	bd80      	pop	{r7, pc}
 8005ac0:	58024400 	.word	0x58024400
 8005ac4:	08006e9c 	.word	0x08006e9c

08005ac8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8005ac8:	b480      	push	{r7}
 8005aca:	b089      	sub	sp, #36	; 0x24
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005ad0:	4ba1      	ldr	r3, [pc, #644]	; (8005d58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005ad2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ad4:	f003 0303 	and.w	r3, r3, #3
 8005ad8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8005ada:	4b9f      	ldr	r3, [pc, #636]	; (8005d58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005adc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ade:	0b1b      	lsrs	r3, r3, #12
 8005ae0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005ae4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8005ae6:	4b9c      	ldr	r3, [pc, #624]	; (8005d58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005ae8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005aea:	091b      	lsrs	r3, r3, #4
 8005aec:	f003 0301 	and.w	r3, r3, #1
 8005af0:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8005af2:	4b99      	ldr	r3, [pc, #612]	; (8005d58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005af4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005af6:	08db      	lsrs	r3, r3, #3
 8005af8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005afc:	693a      	ldr	r2, [r7, #16]
 8005afe:	fb02 f303 	mul.w	r3, r2, r3
 8005b02:	ee07 3a90 	vmov	s15, r3
 8005b06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b0a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8005b0e:	697b      	ldr	r3, [r7, #20]
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	f000 8111 	beq.w	8005d38 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8005b16:	69bb      	ldr	r3, [r7, #24]
 8005b18:	2b02      	cmp	r3, #2
 8005b1a:	f000 8083 	beq.w	8005c24 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8005b1e:	69bb      	ldr	r3, [r7, #24]
 8005b20:	2b02      	cmp	r3, #2
 8005b22:	f200 80a1 	bhi.w	8005c68 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8005b26:	69bb      	ldr	r3, [r7, #24]
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d003      	beq.n	8005b34 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8005b2c:	69bb      	ldr	r3, [r7, #24]
 8005b2e:	2b01      	cmp	r3, #1
 8005b30:	d056      	beq.n	8005be0 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8005b32:	e099      	b.n	8005c68 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005b34:	4b88      	ldr	r3, [pc, #544]	; (8005d58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f003 0320 	and.w	r3, r3, #32
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d02d      	beq.n	8005b9c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005b40:	4b85      	ldr	r3, [pc, #532]	; (8005d58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	08db      	lsrs	r3, r3, #3
 8005b46:	f003 0303 	and.w	r3, r3, #3
 8005b4a:	4a84      	ldr	r2, [pc, #528]	; (8005d5c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8005b4c:	fa22 f303 	lsr.w	r3, r2, r3
 8005b50:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005b52:	68bb      	ldr	r3, [r7, #8]
 8005b54:	ee07 3a90 	vmov	s15, r3
 8005b58:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b5c:	697b      	ldr	r3, [r7, #20]
 8005b5e:	ee07 3a90 	vmov	s15, r3
 8005b62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005b6a:	4b7b      	ldr	r3, [pc, #492]	; (8005d58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005b6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b72:	ee07 3a90 	vmov	s15, r3
 8005b76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b7a:	ed97 6a03 	vldr	s12, [r7, #12]
 8005b7e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005d60 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005b82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005b86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005b8a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005b8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005b92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b96:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8005b9a:	e087      	b.n	8005cac <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005b9c:	697b      	ldr	r3, [r7, #20]
 8005b9e:	ee07 3a90 	vmov	s15, r3
 8005ba2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ba6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005d64 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8005baa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005bae:	4b6a      	ldr	r3, [pc, #424]	; (8005d58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005bb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005bb6:	ee07 3a90 	vmov	s15, r3
 8005bba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005bbe:	ed97 6a03 	vldr	s12, [r7, #12]
 8005bc2:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005d60 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005bc6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005bca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005bce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005bd2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005bd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005bda:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005bde:	e065      	b.n	8005cac <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005be0:	697b      	ldr	r3, [r7, #20]
 8005be2:	ee07 3a90 	vmov	s15, r3
 8005be6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005bea:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005d68 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005bee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005bf2:	4b59      	ldr	r3, [pc, #356]	; (8005d58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005bf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bf6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005bfa:	ee07 3a90 	vmov	s15, r3
 8005bfe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c02:	ed97 6a03 	vldr	s12, [r7, #12]
 8005c06:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005d60 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005c0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005c0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005c12:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005c16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005c1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c1e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005c22:	e043      	b.n	8005cac <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005c24:	697b      	ldr	r3, [r7, #20]
 8005c26:	ee07 3a90 	vmov	s15, r3
 8005c2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c2e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005d6c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8005c32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c36:	4b48      	ldr	r3, [pc, #288]	; (8005d58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005c38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c3e:	ee07 3a90 	vmov	s15, r3
 8005c42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c46:	ed97 6a03 	vldr	s12, [r7, #12]
 8005c4a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005d60 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005c4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005c52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005c56:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005c5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005c5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c62:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005c66:	e021      	b.n	8005cac <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005c68:	697b      	ldr	r3, [r7, #20]
 8005c6a:	ee07 3a90 	vmov	s15, r3
 8005c6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c72:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005d68 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005c76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c7a:	4b37      	ldr	r3, [pc, #220]	; (8005d58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005c7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c82:	ee07 3a90 	vmov	s15, r3
 8005c86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c8a:	ed97 6a03 	vldr	s12, [r7, #12]
 8005c8e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005d60 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005c92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005c96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005c9a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005c9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005ca2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ca6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005caa:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8005cac:	4b2a      	ldr	r3, [pc, #168]	; (8005d58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005cae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cb0:	0a5b      	lsrs	r3, r3, #9
 8005cb2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005cb6:	ee07 3a90 	vmov	s15, r3
 8005cba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005cbe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005cc2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005cc6:	edd7 6a07 	vldr	s13, [r7, #28]
 8005cca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005cce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005cd2:	ee17 2a90 	vmov	r2, s15
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8005cda:	4b1f      	ldr	r3, [pc, #124]	; (8005d58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005cdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cde:	0c1b      	lsrs	r3, r3, #16
 8005ce0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005ce4:	ee07 3a90 	vmov	s15, r3
 8005ce8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005cec:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005cf0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005cf4:	edd7 6a07 	vldr	s13, [r7, #28]
 8005cf8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005cfc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005d00:	ee17 2a90 	vmov	r2, s15
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8005d08:	4b13      	ldr	r3, [pc, #76]	; (8005d58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005d0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d0c:	0e1b      	lsrs	r3, r3, #24
 8005d0e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005d12:	ee07 3a90 	vmov	s15, r3
 8005d16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d1a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005d1e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005d22:	edd7 6a07 	vldr	s13, [r7, #28]
 8005d26:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005d2a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005d2e:	ee17 2a90 	vmov	r2, s15
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005d36:	e008      	b.n	8005d4a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	2200      	movs	r2, #0
 8005d3c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	2200      	movs	r2, #0
 8005d42:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	2200      	movs	r2, #0
 8005d48:	609a      	str	r2, [r3, #8]
}
 8005d4a:	bf00      	nop
 8005d4c:	3724      	adds	r7, #36	; 0x24
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d54:	4770      	bx	lr
 8005d56:	bf00      	nop
 8005d58:	58024400 	.word	0x58024400
 8005d5c:	03d09000 	.word	0x03d09000
 8005d60:	46000000 	.word	0x46000000
 8005d64:	4c742400 	.word	0x4c742400
 8005d68:	4a742400 	.word	0x4a742400
 8005d6c:	4bbebc20 	.word	0x4bbebc20

08005d70 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8005d70:	b480      	push	{r7}
 8005d72:	b089      	sub	sp, #36	; 0x24
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005d78:	4ba1      	ldr	r3, [pc, #644]	; (8006000 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005d7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d7c:	f003 0303 	and.w	r3, r3, #3
 8005d80:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8005d82:	4b9f      	ldr	r3, [pc, #636]	; (8006000 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005d84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d86:	0d1b      	lsrs	r3, r3, #20
 8005d88:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005d8c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8005d8e:	4b9c      	ldr	r3, [pc, #624]	; (8006000 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005d90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d92:	0a1b      	lsrs	r3, r3, #8
 8005d94:	f003 0301 	and.w	r3, r3, #1
 8005d98:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8005d9a:	4b99      	ldr	r3, [pc, #612]	; (8006000 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005d9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d9e:	08db      	lsrs	r3, r3, #3
 8005da0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005da4:	693a      	ldr	r2, [r7, #16]
 8005da6:	fb02 f303 	mul.w	r3, r2, r3
 8005daa:	ee07 3a90 	vmov	s15, r3
 8005dae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005db2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8005db6:	697b      	ldr	r3, [r7, #20]
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	f000 8111 	beq.w	8005fe0 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8005dbe:	69bb      	ldr	r3, [r7, #24]
 8005dc0:	2b02      	cmp	r3, #2
 8005dc2:	f000 8083 	beq.w	8005ecc <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8005dc6:	69bb      	ldr	r3, [r7, #24]
 8005dc8:	2b02      	cmp	r3, #2
 8005dca:	f200 80a1 	bhi.w	8005f10 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8005dce:	69bb      	ldr	r3, [r7, #24]
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d003      	beq.n	8005ddc <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8005dd4:	69bb      	ldr	r3, [r7, #24]
 8005dd6:	2b01      	cmp	r3, #1
 8005dd8:	d056      	beq.n	8005e88 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8005dda:	e099      	b.n	8005f10 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005ddc:	4b88      	ldr	r3, [pc, #544]	; (8006000 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	f003 0320 	and.w	r3, r3, #32
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d02d      	beq.n	8005e44 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005de8:	4b85      	ldr	r3, [pc, #532]	; (8006000 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	08db      	lsrs	r3, r3, #3
 8005dee:	f003 0303 	and.w	r3, r3, #3
 8005df2:	4a84      	ldr	r2, [pc, #528]	; (8006004 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8005df4:	fa22 f303 	lsr.w	r3, r2, r3
 8005df8:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005dfa:	68bb      	ldr	r3, [r7, #8]
 8005dfc:	ee07 3a90 	vmov	s15, r3
 8005e00:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e04:	697b      	ldr	r3, [r7, #20]
 8005e06:	ee07 3a90 	vmov	s15, r3
 8005e0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e12:	4b7b      	ldr	r3, [pc, #492]	; (8006000 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e1a:	ee07 3a90 	vmov	s15, r3
 8005e1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e22:	ed97 6a03 	vldr	s12, [r7, #12]
 8005e26:	eddf 5a78 	vldr	s11, [pc, #480]	; 8006008 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005e2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e32:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005e36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e3e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8005e42:	e087      	b.n	8005f54 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005e44:	697b      	ldr	r3, [r7, #20]
 8005e46:	ee07 3a90 	vmov	s15, r3
 8005e4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e4e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800600c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8005e52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e56:	4b6a      	ldr	r3, [pc, #424]	; (8006000 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e5e:	ee07 3a90 	vmov	s15, r3
 8005e62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e66:	ed97 6a03 	vldr	s12, [r7, #12]
 8005e6a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8006008 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005e6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e76:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005e7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e82:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005e86:	e065      	b.n	8005f54 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005e88:	697b      	ldr	r3, [r7, #20]
 8005e8a:	ee07 3a90 	vmov	s15, r3
 8005e8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e92:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8006010 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005e96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e9a:	4b59      	ldr	r3, [pc, #356]	; (8006000 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ea2:	ee07 3a90 	vmov	s15, r3
 8005ea6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005eaa:	ed97 6a03 	vldr	s12, [r7, #12]
 8005eae:	eddf 5a56 	vldr	s11, [pc, #344]	; 8006008 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005eb2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005eb6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005eba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005ebe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005ec2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ec6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005eca:	e043      	b.n	8005f54 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005ecc:	697b      	ldr	r3, [r7, #20]
 8005ece:	ee07 3a90 	vmov	s15, r3
 8005ed2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ed6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8006014 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8005eda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ede:	4b48      	ldr	r3, [pc, #288]	; (8006000 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ee2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ee6:	ee07 3a90 	vmov	s15, r3
 8005eea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005eee:	ed97 6a03 	vldr	s12, [r7, #12]
 8005ef2:	eddf 5a45 	vldr	s11, [pc, #276]	; 8006008 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005ef6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005efa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005efe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005f02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f0a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005f0e:	e021      	b.n	8005f54 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005f10:	697b      	ldr	r3, [r7, #20]
 8005f12:	ee07 3a90 	vmov	s15, r3
 8005f16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f1a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8006010 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005f1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f22:	4b37      	ldr	r3, [pc, #220]	; (8006000 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f2a:	ee07 3a90 	vmov	s15, r3
 8005f2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f32:	ed97 6a03 	vldr	s12, [r7, #12]
 8005f36:	eddf 5a34 	vldr	s11, [pc, #208]	; 8006008 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005f3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f42:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005f46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f4e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005f52:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8005f54:	4b2a      	ldr	r3, [pc, #168]	; (8006000 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005f56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f58:	0a5b      	lsrs	r3, r3, #9
 8005f5a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005f5e:	ee07 3a90 	vmov	s15, r3
 8005f62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f66:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005f6a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005f6e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005f72:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005f76:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005f7a:	ee17 2a90 	vmov	r2, s15
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8005f82:	4b1f      	ldr	r3, [pc, #124]	; (8006000 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f86:	0c1b      	lsrs	r3, r3, #16
 8005f88:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005f8c:	ee07 3a90 	vmov	s15, r3
 8005f90:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f94:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005f98:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005f9c:	edd7 6a07 	vldr	s13, [r7, #28]
 8005fa0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005fa4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005fa8:	ee17 2a90 	vmov	r2, s15
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8005fb0:	4b13      	ldr	r3, [pc, #76]	; (8006000 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005fb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fb4:	0e1b      	lsrs	r3, r3, #24
 8005fb6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005fba:	ee07 3a90 	vmov	s15, r3
 8005fbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fc2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005fc6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005fca:	edd7 6a07 	vldr	s13, [r7, #28]
 8005fce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005fd2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005fd6:	ee17 2a90 	vmov	r2, s15
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8005fde:	e008      	b.n	8005ff2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	2200      	movs	r2, #0
 8005fe4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	2200      	movs	r2, #0
 8005fea:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	2200      	movs	r2, #0
 8005ff0:	609a      	str	r2, [r3, #8]
}
 8005ff2:	bf00      	nop
 8005ff4:	3724      	adds	r7, #36	; 0x24
 8005ff6:	46bd      	mov	sp, r7
 8005ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffc:	4770      	bx	lr
 8005ffe:	bf00      	nop
 8006000:	58024400 	.word	0x58024400
 8006004:	03d09000 	.word	0x03d09000
 8006008:	46000000 	.word	0x46000000
 800600c:	4c742400 	.word	0x4c742400
 8006010:	4a742400 	.word	0x4a742400
 8006014:	4bbebc20 	.word	0x4bbebc20

08006018 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 8006018:	b480      	push	{r7}
 800601a:	b089      	sub	sp, #36	; 0x24
 800601c:	af00      	add	r7, sp, #0
 800601e:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006020:	4ba0      	ldr	r3, [pc, #640]	; (80062a4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006022:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006024:	f003 0303 	and.w	r3, r3, #3
 8006028:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 800602a:	4b9e      	ldr	r3, [pc, #632]	; (80062a4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800602c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800602e:	091b      	lsrs	r3, r3, #4
 8006030:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006034:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8006036:	4b9b      	ldr	r3, [pc, #620]	; (80062a4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006038:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800603a:	f003 0301 	and.w	r3, r3, #1
 800603e:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8006040:	4b98      	ldr	r3, [pc, #608]	; (80062a4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006042:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006044:	08db      	lsrs	r3, r3, #3
 8006046:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800604a:	693a      	ldr	r2, [r7, #16]
 800604c:	fb02 f303 	mul.w	r3, r2, r3
 8006050:	ee07 3a90 	vmov	s15, r3
 8006054:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006058:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800605c:	697b      	ldr	r3, [r7, #20]
 800605e:	2b00      	cmp	r3, #0
 8006060:	f000 8111 	beq.w	8006286 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8006064:	69bb      	ldr	r3, [r7, #24]
 8006066:	2b02      	cmp	r3, #2
 8006068:	f000 8083 	beq.w	8006172 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800606c:	69bb      	ldr	r3, [r7, #24]
 800606e:	2b02      	cmp	r3, #2
 8006070:	f200 80a1 	bhi.w	80061b6 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8006074:	69bb      	ldr	r3, [r7, #24]
 8006076:	2b00      	cmp	r3, #0
 8006078:	d003      	beq.n	8006082 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800607a:	69bb      	ldr	r3, [r7, #24]
 800607c:	2b01      	cmp	r3, #1
 800607e:	d056      	beq.n	800612e <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8006080:	e099      	b.n	80061b6 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006082:	4b88      	ldr	r3, [pc, #544]	; (80062a4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	f003 0320 	and.w	r3, r3, #32
 800608a:	2b00      	cmp	r3, #0
 800608c:	d02d      	beq.n	80060ea <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800608e:	4b85      	ldr	r3, [pc, #532]	; (80062a4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	08db      	lsrs	r3, r3, #3
 8006094:	f003 0303 	and.w	r3, r3, #3
 8006098:	4a83      	ldr	r2, [pc, #524]	; (80062a8 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800609a:	fa22 f303 	lsr.w	r3, r2, r3
 800609e:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80060a0:	68bb      	ldr	r3, [r7, #8]
 80060a2:	ee07 3a90 	vmov	s15, r3
 80060a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80060aa:	697b      	ldr	r3, [r7, #20]
 80060ac:	ee07 3a90 	vmov	s15, r3
 80060b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060b4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80060b8:	4b7a      	ldr	r3, [pc, #488]	; (80062a4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80060ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80060c0:	ee07 3a90 	vmov	s15, r3
 80060c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80060c8:	ed97 6a03 	vldr	s12, [r7, #12]
 80060cc:	eddf 5a77 	vldr	s11, [pc, #476]	; 80062ac <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80060d0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80060d4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80060d8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80060dc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80060e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80060e4:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80060e8:	e087      	b.n	80061fa <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80060ea:	697b      	ldr	r3, [r7, #20]
 80060ec:	ee07 3a90 	vmov	s15, r3
 80060f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060f4:	eddf 6a6e 	vldr	s13, [pc, #440]	; 80062b0 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80060f8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80060fc:	4b69      	ldr	r3, [pc, #420]	; (80062a4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80060fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006100:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006104:	ee07 3a90 	vmov	s15, r3
 8006108:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800610c:	ed97 6a03 	vldr	s12, [r7, #12]
 8006110:	eddf 5a66 	vldr	s11, [pc, #408]	; 80062ac <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006114:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006118:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800611c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006120:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006124:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006128:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800612c:	e065      	b.n	80061fa <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800612e:	697b      	ldr	r3, [r7, #20]
 8006130:	ee07 3a90 	vmov	s15, r3
 8006134:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006138:	eddf 6a5e 	vldr	s13, [pc, #376]	; 80062b4 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800613c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006140:	4b58      	ldr	r3, [pc, #352]	; (80062a4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006142:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006144:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006148:	ee07 3a90 	vmov	s15, r3
 800614c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006150:	ed97 6a03 	vldr	s12, [r7, #12]
 8006154:	eddf 5a55 	vldr	s11, [pc, #340]	; 80062ac <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006158:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800615c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006160:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006164:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006168:	ee67 7a27 	vmul.f32	s15, s14, s15
 800616c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006170:	e043      	b.n	80061fa <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006172:	697b      	ldr	r3, [r7, #20]
 8006174:	ee07 3a90 	vmov	s15, r3
 8006178:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800617c:	eddf 6a4e 	vldr	s13, [pc, #312]	; 80062b8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8006180:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006184:	4b47      	ldr	r3, [pc, #284]	; (80062a4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006186:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006188:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800618c:	ee07 3a90 	vmov	s15, r3
 8006190:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006194:	ed97 6a03 	vldr	s12, [r7, #12]
 8006198:	eddf 5a44 	vldr	s11, [pc, #272]	; 80062ac <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800619c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80061a0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80061a4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80061a8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80061ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80061b0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80061b4:	e021      	b.n	80061fa <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80061b6:	697b      	ldr	r3, [r7, #20]
 80061b8:	ee07 3a90 	vmov	s15, r3
 80061bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061c0:	eddf 6a3b 	vldr	s13, [pc, #236]	; 80062b0 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80061c4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80061c8:	4b36      	ldr	r3, [pc, #216]	; (80062a4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80061ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80061d0:	ee07 3a90 	vmov	s15, r3
 80061d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80061d8:	ed97 6a03 	vldr	s12, [r7, #12]
 80061dc:	eddf 5a33 	vldr	s11, [pc, #204]	; 80062ac <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80061e0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80061e4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80061e8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80061ec:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80061f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80061f4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80061f8:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 80061fa:	4b2a      	ldr	r3, [pc, #168]	; (80062a4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80061fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061fe:	0a5b      	lsrs	r3, r3, #9
 8006200:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006204:	ee07 3a90 	vmov	s15, r3
 8006208:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800620c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006210:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006214:	edd7 6a07 	vldr	s13, [r7, #28]
 8006218:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800621c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006220:	ee17 2a90 	vmov	r2, s15
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8006228:	4b1e      	ldr	r3, [pc, #120]	; (80062a4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800622a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800622c:	0c1b      	lsrs	r3, r3, #16
 800622e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006232:	ee07 3a90 	vmov	s15, r3
 8006236:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800623a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800623e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006242:	edd7 6a07 	vldr	s13, [r7, #28]
 8006246:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800624a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800624e:	ee17 2a90 	vmov	r2, s15
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 8006256:	4b13      	ldr	r3, [pc, #76]	; (80062a4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800625a:	0e1b      	lsrs	r3, r3, #24
 800625c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006260:	ee07 3a90 	vmov	s15, r3
 8006264:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006268:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800626c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006270:	edd7 6a07 	vldr	s13, [r7, #28]
 8006274:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006278:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800627c:	ee17 2a90 	vmov	r2, s15
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8006284:	e008      	b.n	8006298 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	2200      	movs	r2, #0
 800628a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	2200      	movs	r2, #0
 8006290:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	2200      	movs	r2, #0
 8006296:	609a      	str	r2, [r3, #8]
}
 8006298:	bf00      	nop
 800629a:	3724      	adds	r7, #36	; 0x24
 800629c:	46bd      	mov	sp, r7
 800629e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a2:	4770      	bx	lr
 80062a4:	58024400 	.word	0x58024400
 80062a8:	03d09000 	.word	0x03d09000
 80062ac:	46000000 	.word	0x46000000
 80062b0:	4c742400 	.word	0x4c742400
 80062b4:	4a742400 	.word	0x4a742400
 80062b8:	4bbebc20 	.word	0x4bbebc20

080062bc <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80062bc:	b580      	push	{r7, lr}
 80062be:	b084      	sub	sp, #16
 80062c0:	af00      	add	r7, sp, #0
 80062c2:	6078      	str	r0, [r7, #4]
 80062c4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80062c6:	2300      	movs	r3, #0
 80062c8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80062ca:	4b53      	ldr	r3, [pc, #332]	; (8006418 <RCCEx_PLL2_Config+0x15c>)
 80062cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062ce:	f003 0303 	and.w	r3, r3, #3
 80062d2:	2b03      	cmp	r3, #3
 80062d4:	d101      	bne.n	80062da <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80062d6:	2301      	movs	r3, #1
 80062d8:	e099      	b.n	800640e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80062da:	4b4f      	ldr	r3, [pc, #316]	; (8006418 <RCCEx_PLL2_Config+0x15c>)
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	4a4e      	ldr	r2, [pc, #312]	; (8006418 <RCCEx_PLL2_Config+0x15c>)
 80062e0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80062e4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80062e6:	f7fa fe39 	bl	8000f5c <HAL_GetTick>
 80062ea:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80062ec:	e008      	b.n	8006300 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80062ee:	f7fa fe35 	bl	8000f5c <HAL_GetTick>
 80062f2:	4602      	mov	r2, r0
 80062f4:	68bb      	ldr	r3, [r7, #8]
 80062f6:	1ad3      	subs	r3, r2, r3
 80062f8:	2b02      	cmp	r3, #2
 80062fa:	d901      	bls.n	8006300 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80062fc:	2303      	movs	r3, #3
 80062fe:	e086      	b.n	800640e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006300:	4b45      	ldr	r3, [pc, #276]	; (8006418 <RCCEx_PLL2_Config+0x15c>)
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006308:	2b00      	cmp	r3, #0
 800630a:	d1f0      	bne.n	80062ee <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800630c:	4b42      	ldr	r3, [pc, #264]	; (8006418 <RCCEx_PLL2_Config+0x15c>)
 800630e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006310:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	031b      	lsls	r3, r3, #12
 800631a:	493f      	ldr	r1, [pc, #252]	; (8006418 <RCCEx_PLL2_Config+0x15c>)
 800631c:	4313      	orrs	r3, r2
 800631e:	628b      	str	r3, [r1, #40]	; 0x28
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	685b      	ldr	r3, [r3, #4]
 8006324:	3b01      	subs	r3, #1
 8006326:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	689b      	ldr	r3, [r3, #8]
 800632e:	3b01      	subs	r3, #1
 8006330:	025b      	lsls	r3, r3, #9
 8006332:	b29b      	uxth	r3, r3
 8006334:	431a      	orrs	r2, r3
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	68db      	ldr	r3, [r3, #12]
 800633a:	3b01      	subs	r3, #1
 800633c:	041b      	lsls	r3, r3, #16
 800633e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006342:	431a      	orrs	r2, r3
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	691b      	ldr	r3, [r3, #16]
 8006348:	3b01      	subs	r3, #1
 800634a:	061b      	lsls	r3, r3, #24
 800634c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006350:	4931      	ldr	r1, [pc, #196]	; (8006418 <RCCEx_PLL2_Config+0x15c>)
 8006352:	4313      	orrs	r3, r2
 8006354:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8006356:	4b30      	ldr	r3, [pc, #192]	; (8006418 <RCCEx_PLL2_Config+0x15c>)
 8006358:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800635a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	695b      	ldr	r3, [r3, #20]
 8006362:	492d      	ldr	r1, [pc, #180]	; (8006418 <RCCEx_PLL2_Config+0x15c>)
 8006364:	4313      	orrs	r3, r2
 8006366:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8006368:	4b2b      	ldr	r3, [pc, #172]	; (8006418 <RCCEx_PLL2_Config+0x15c>)
 800636a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800636c:	f023 0220 	bic.w	r2, r3, #32
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	699b      	ldr	r3, [r3, #24]
 8006374:	4928      	ldr	r1, [pc, #160]	; (8006418 <RCCEx_PLL2_Config+0x15c>)
 8006376:	4313      	orrs	r3, r2
 8006378:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800637a:	4b27      	ldr	r3, [pc, #156]	; (8006418 <RCCEx_PLL2_Config+0x15c>)
 800637c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800637e:	4a26      	ldr	r2, [pc, #152]	; (8006418 <RCCEx_PLL2_Config+0x15c>)
 8006380:	f023 0310 	bic.w	r3, r3, #16
 8006384:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8006386:	4b24      	ldr	r3, [pc, #144]	; (8006418 <RCCEx_PLL2_Config+0x15c>)
 8006388:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800638a:	4b24      	ldr	r3, [pc, #144]	; (800641c <RCCEx_PLL2_Config+0x160>)
 800638c:	4013      	ands	r3, r2
 800638e:	687a      	ldr	r2, [r7, #4]
 8006390:	69d2      	ldr	r2, [r2, #28]
 8006392:	00d2      	lsls	r2, r2, #3
 8006394:	4920      	ldr	r1, [pc, #128]	; (8006418 <RCCEx_PLL2_Config+0x15c>)
 8006396:	4313      	orrs	r3, r2
 8006398:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800639a:	4b1f      	ldr	r3, [pc, #124]	; (8006418 <RCCEx_PLL2_Config+0x15c>)
 800639c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800639e:	4a1e      	ldr	r2, [pc, #120]	; (8006418 <RCCEx_PLL2_Config+0x15c>)
 80063a0:	f043 0310 	orr.w	r3, r3, #16
 80063a4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80063a6:	683b      	ldr	r3, [r7, #0]
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d106      	bne.n	80063ba <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80063ac:	4b1a      	ldr	r3, [pc, #104]	; (8006418 <RCCEx_PLL2_Config+0x15c>)
 80063ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063b0:	4a19      	ldr	r2, [pc, #100]	; (8006418 <RCCEx_PLL2_Config+0x15c>)
 80063b2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80063b6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80063b8:	e00f      	b.n	80063da <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80063ba:	683b      	ldr	r3, [r7, #0]
 80063bc:	2b01      	cmp	r3, #1
 80063be:	d106      	bne.n	80063ce <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80063c0:	4b15      	ldr	r3, [pc, #84]	; (8006418 <RCCEx_PLL2_Config+0x15c>)
 80063c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063c4:	4a14      	ldr	r2, [pc, #80]	; (8006418 <RCCEx_PLL2_Config+0x15c>)
 80063c6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80063ca:	62d3      	str	r3, [r2, #44]	; 0x2c
 80063cc:	e005      	b.n	80063da <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80063ce:	4b12      	ldr	r3, [pc, #72]	; (8006418 <RCCEx_PLL2_Config+0x15c>)
 80063d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063d2:	4a11      	ldr	r2, [pc, #68]	; (8006418 <RCCEx_PLL2_Config+0x15c>)
 80063d4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80063d8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80063da:	4b0f      	ldr	r3, [pc, #60]	; (8006418 <RCCEx_PLL2_Config+0x15c>)
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	4a0e      	ldr	r2, [pc, #56]	; (8006418 <RCCEx_PLL2_Config+0x15c>)
 80063e0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80063e4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80063e6:	f7fa fdb9 	bl	8000f5c <HAL_GetTick>
 80063ea:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80063ec:	e008      	b.n	8006400 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80063ee:	f7fa fdb5 	bl	8000f5c <HAL_GetTick>
 80063f2:	4602      	mov	r2, r0
 80063f4:	68bb      	ldr	r3, [r7, #8]
 80063f6:	1ad3      	subs	r3, r2, r3
 80063f8:	2b02      	cmp	r3, #2
 80063fa:	d901      	bls.n	8006400 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80063fc:	2303      	movs	r3, #3
 80063fe:	e006      	b.n	800640e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006400:	4b05      	ldr	r3, [pc, #20]	; (8006418 <RCCEx_PLL2_Config+0x15c>)
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006408:	2b00      	cmp	r3, #0
 800640a:	d0f0      	beq.n	80063ee <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800640c:	7bfb      	ldrb	r3, [r7, #15]
}
 800640e:	4618      	mov	r0, r3
 8006410:	3710      	adds	r7, #16
 8006412:	46bd      	mov	sp, r7
 8006414:	bd80      	pop	{r7, pc}
 8006416:	bf00      	nop
 8006418:	58024400 	.word	0x58024400
 800641c:	ffff0007 	.word	0xffff0007

08006420 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8006420:	b580      	push	{r7, lr}
 8006422:	b084      	sub	sp, #16
 8006424:	af00      	add	r7, sp, #0
 8006426:	6078      	str	r0, [r7, #4]
 8006428:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800642a:	2300      	movs	r3, #0
 800642c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800642e:	4b53      	ldr	r3, [pc, #332]	; (800657c <RCCEx_PLL3_Config+0x15c>)
 8006430:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006432:	f003 0303 	and.w	r3, r3, #3
 8006436:	2b03      	cmp	r3, #3
 8006438:	d101      	bne.n	800643e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800643a:	2301      	movs	r3, #1
 800643c:	e099      	b.n	8006572 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800643e:	4b4f      	ldr	r3, [pc, #316]	; (800657c <RCCEx_PLL3_Config+0x15c>)
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	4a4e      	ldr	r2, [pc, #312]	; (800657c <RCCEx_PLL3_Config+0x15c>)
 8006444:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006448:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800644a:	f7fa fd87 	bl	8000f5c <HAL_GetTick>
 800644e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006450:	e008      	b.n	8006464 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8006452:	f7fa fd83 	bl	8000f5c <HAL_GetTick>
 8006456:	4602      	mov	r2, r0
 8006458:	68bb      	ldr	r3, [r7, #8]
 800645a:	1ad3      	subs	r3, r2, r3
 800645c:	2b02      	cmp	r3, #2
 800645e:	d901      	bls.n	8006464 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006460:	2303      	movs	r3, #3
 8006462:	e086      	b.n	8006572 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006464:	4b45      	ldr	r3, [pc, #276]	; (800657c <RCCEx_PLL3_Config+0x15c>)
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800646c:	2b00      	cmp	r3, #0
 800646e:	d1f0      	bne.n	8006452 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8006470:	4b42      	ldr	r3, [pc, #264]	; (800657c <RCCEx_PLL3_Config+0x15c>)
 8006472:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006474:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	051b      	lsls	r3, r3, #20
 800647e:	493f      	ldr	r1, [pc, #252]	; (800657c <RCCEx_PLL3_Config+0x15c>)
 8006480:	4313      	orrs	r3, r2
 8006482:	628b      	str	r3, [r1, #40]	; 0x28
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	685b      	ldr	r3, [r3, #4]
 8006488:	3b01      	subs	r3, #1
 800648a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	689b      	ldr	r3, [r3, #8]
 8006492:	3b01      	subs	r3, #1
 8006494:	025b      	lsls	r3, r3, #9
 8006496:	b29b      	uxth	r3, r3
 8006498:	431a      	orrs	r2, r3
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	68db      	ldr	r3, [r3, #12]
 800649e:	3b01      	subs	r3, #1
 80064a0:	041b      	lsls	r3, r3, #16
 80064a2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80064a6:	431a      	orrs	r2, r3
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	691b      	ldr	r3, [r3, #16]
 80064ac:	3b01      	subs	r3, #1
 80064ae:	061b      	lsls	r3, r3, #24
 80064b0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80064b4:	4931      	ldr	r1, [pc, #196]	; (800657c <RCCEx_PLL3_Config+0x15c>)
 80064b6:	4313      	orrs	r3, r2
 80064b8:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80064ba:	4b30      	ldr	r3, [pc, #192]	; (800657c <RCCEx_PLL3_Config+0x15c>)
 80064bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064be:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	695b      	ldr	r3, [r3, #20]
 80064c6:	492d      	ldr	r1, [pc, #180]	; (800657c <RCCEx_PLL3_Config+0x15c>)
 80064c8:	4313      	orrs	r3, r2
 80064ca:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80064cc:	4b2b      	ldr	r3, [pc, #172]	; (800657c <RCCEx_PLL3_Config+0x15c>)
 80064ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064d0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	699b      	ldr	r3, [r3, #24]
 80064d8:	4928      	ldr	r1, [pc, #160]	; (800657c <RCCEx_PLL3_Config+0x15c>)
 80064da:	4313      	orrs	r3, r2
 80064dc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80064de:	4b27      	ldr	r3, [pc, #156]	; (800657c <RCCEx_PLL3_Config+0x15c>)
 80064e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064e2:	4a26      	ldr	r2, [pc, #152]	; (800657c <RCCEx_PLL3_Config+0x15c>)
 80064e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80064e8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80064ea:	4b24      	ldr	r3, [pc, #144]	; (800657c <RCCEx_PLL3_Config+0x15c>)
 80064ec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80064ee:	4b24      	ldr	r3, [pc, #144]	; (8006580 <RCCEx_PLL3_Config+0x160>)
 80064f0:	4013      	ands	r3, r2
 80064f2:	687a      	ldr	r2, [r7, #4]
 80064f4:	69d2      	ldr	r2, [r2, #28]
 80064f6:	00d2      	lsls	r2, r2, #3
 80064f8:	4920      	ldr	r1, [pc, #128]	; (800657c <RCCEx_PLL3_Config+0x15c>)
 80064fa:	4313      	orrs	r3, r2
 80064fc:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80064fe:	4b1f      	ldr	r3, [pc, #124]	; (800657c <RCCEx_PLL3_Config+0x15c>)
 8006500:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006502:	4a1e      	ldr	r2, [pc, #120]	; (800657c <RCCEx_PLL3_Config+0x15c>)
 8006504:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006508:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800650a:	683b      	ldr	r3, [r7, #0]
 800650c:	2b00      	cmp	r3, #0
 800650e:	d106      	bne.n	800651e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8006510:	4b1a      	ldr	r3, [pc, #104]	; (800657c <RCCEx_PLL3_Config+0x15c>)
 8006512:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006514:	4a19      	ldr	r2, [pc, #100]	; (800657c <RCCEx_PLL3_Config+0x15c>)
 8006516:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800651a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800651c:	e00f      	b.n	800653e <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800651e:	683b      	ldr	r3, [r7, #0]
 8006520:	2b01      	cmp	r3, #1
 8006522:	d106      	bne.n	8006532 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8006524:	4b15      	ldr	r3, [pc, #84]	; (800657c <RCCEx_PLL3_Config+0x15c>)
 8006526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006528:	4a14      	ldr	r2, [pc, #80]	; (800657c <RCCEx_PLL3_Config+0x15c>)
 800652a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800652e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006530:	e005      	b.n	800653e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8006532:	4b12      	ldr	r3, [pc, #72]	; (800657c <RCCEx_PLL3_Config+0x15c>)
 8006534:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006536:	4a11      	ldr	r2, [pc, #68]	; (800657c <RCCEx_PLL3_Config+0x15c>)
 8006538:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800653c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800653e:	4b0f      	ldr	r3, [pc, #60]	; (800657c <RCCEx_PLL3_Config+0x15c>)
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	4a0e      	ldr	r2, [pc, #56]	; (800657c <RCCEx_PLL3_Config+0x15c>)
 8006544:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006548:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800654a:	f7fa fd07 	bl	8000f5c <HAL_GetTick>
 800654e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006550:	e008      	b.n	8006564 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8006552:	f7fa fd03 	bl	8000f5c <HAL_GetTick>
 8006556:	4602      	mov	r2, r0
 8006558:	68bb      	ldr	r3, [r7, #8]
 800655a:	1ad3      	subs	r3, r2, r3
 800655c:	2b02      	cmp	r3, #2
 800655e:	d901      	bls.n	8006564 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006560:	2303      	movs	r3, #3
 8006562:	e006      	b.n	8006572 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006564:	4b05      	ldr	r3, [pc, #20]	; (800657c <RCCEx_PLL3_Config+0x15c>)
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800656c:	2b00      	cmp	r3, #0
 800656e:	d0f0      	beq.n	8006552 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8006570:	7bfb      	ldrb	r3, [r7, #15]
}
 8006572:	4618      	mov	r0, r3
 8006574:	3710      	adds	r7, #16
 8006576:	46bd      	mov	sp, r7
 8006578:	bd80      	pop	{r7, pc}
 800657a:	bf00      	nop
 800657c:	58024400 	.word	0x58024400
 8006580:	ffff0007 	.word	0xffff0007

08006584 <__errno>:
 8006584:	4b01      	ldr	r3, [pc, #4]	; (800658c <__errno+0x8>)
 8006586:	6818      	ldr	r0, [r3, #0]
 8006588:	4770      	bx	lr
 800658a:	bf00      	nop
 800658c:	24000010 	.word	0x24000010

08006590 <__libc_init_array>:
 8006590:	b570      	push	{r4, r5, r6, lr}
 8006592:	4d0d      	ldr	r5, [pc, #52]	; (80065c8 <__libc_init_array+0x38>)
 8006594:	4c0d      	ldr	r4, [pc, #52]	; (80065cc <__libc_init_array+0x3c>)
 8006596:	1b64      	subs	r4, r4, r5
 8006598:	10a4      	asrs	r4, r4, #2
 800659a:	2600      	movs	r6, #0
 800659c:	42a6      	cmp	r6, r4
 800659e:	d109      	bne.n	80065b4 <__libc_init_array+0x24>
 80065a0:	4d0b      	ldr	r5, [pc, #44]	; (80065d0 <__libc_init_array+0x40>)
 80065a2:	4c0c      	ldr	r4, [pc, #48]	; (80065d4 <__libc_init_array+0x44>)
 80065a4:	f000 fc62 	bl	8006e6c <_init>
 80065a8:	1b64      	subs	r4, r4, r5
 80065aa:	10a4      	asrs	r4, r4, #2
 80065ac:	2600      	movs	r6, #0
 80065ae:	42a6      	cmp	r6, r4
 80065b0:	d105      	bne.n	80065be <__libc_init_array+0x2e>
 80065b2:	bd70      	pop	{r4, r5, r6, pc}
 80065b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80065b8:	4798      	blx	r3
 80065ba:	3601      	adds	r6, #1
 80065bc:	e7ee      	b.n	800659c <__libc_init_array+0xc>
 80065be:	f855 3b04 	ldr.w	r3, [r5], #4
 80065c2:	4798      	blx	r3
 80065c4:	3601      	adds	r6, #1
 80065c6:	e7f2      	b.n	80065ae <__libc_init_array+0x1e>
 80065c8:	08006ee0 	.word	0x08006ee0
 80065cc:	08006ee0 	.word	0x08006ee0
 80065d0:	08006ee0 	.word	0x08006ee0
 80065d4:	08006ee4 	.word	0x08006ee4

080065d8 <memset>:
 80065d8:	4402      	add	r2, r0
 80065da:	4603      	mov	r3, r0
 80065dc:	4293      	cmp	r3, r2
 80065de:	d100      	bne.n	80065e2 <memset+0xa>
 80065e0:	4770      	bx	lr
 80065e2:	f803 1b01 	strb.w	r1, [r3], #1
 80065e6:	e7f9      	b.n	80065dc <memset+0x4>

080065e8 <sniprintf>:
 80065e8:	b40c      	push	{r2, r3}
 80065ea:	b530      	push	{r4, r5, lr}
 80065ec:	4b17      	ldr	r3, [pc, #92]	; (800664c <sniprintf+0x64>)
 80065ee:	1e0c      	subs	r4, r1, #0
 80065f0:	681d      	ldr	r5, [r3, #0]
 80065f2:	b09d      	sub	sp, #116	; 0x74
 80065f4:	da08      	bge.n	8006608 <sniprintf+0x20>
 80065f6:	238b      	movs	r3, #139	; 0x8b
 80065f8:	602b      	str	r3, [r5, #0]
 80065fa:	f04f 30ff 	mov.w	r0, #4294967295
 80065fe:	b01d      	add	sp, #116	; 0x74
 8006600:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006604:	b002      	add	sp, #8
 8006606:	4770      	bx	lr
 8006608:	f44f 7302 	mov.w	r3, #520	; 0x208
 800660c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8006610:	bf14      	ite	ne
 8006612:	f104 33ff 	addne.w	r3, r4, #4294967295
 8006616:	4623      	moveq	r3, r4
 8006618:	9304      	str	r3, [sp, #16]
 800661a:	9307      	str	r3, [sp, #28]
 800661c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006620:	9002      	str	r0, [sp, #8]
 8006622:	9006      	str	r0, [sp, #24]
 8006624:	f8ad 3016 	strh.w	r3, [sp, #22]
 8006628:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800662a:	ab21      	add	r3, sp, #132	; 0x84
 800662c:	a902      	add	r1, sp, #8
 800662e:	4628      	mov	r0, r5
 8006630:	9301      	str	r3, [sp, #4]
 8006632:	f000 f869 	bl	8006708 <_svfiprintf_r>
 8006636:	1c43      	adds	r3, r0, #1
 8006638:	bfbc      	itt	lt
 800663a:	238b      	movlt	r3, #139	; 0x8b
 800663c:	602b      	strlt	r3, [r5, #0]
 800663e:	2c00      	cmp	r4, #0
 8006640:	d0dd      	beq.n	80065fe <sniprintf+0x16>
 8006642:	9b02      	ldr	r3, [sp, #8]
 8006644:	2200      	movs	r2, #0
 8006646:	701a      	strb	r2, [r3, #0]
 8006648:	e7d9      	b.n	80065fe <sniprintf+0x16>
 800664a:	bf00      	nop
 800664c:	24000010 	.word	0x24000010

08006650 <__ssputs_r>:
 8006650:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006654:	688e      	ldr	r6, [r1, #8]
 8006656:	429e      	cmp	r6, r3
 8006658:	4682      	mov	sl, r0
 800665a:	460c      	mov	r4, r1
 800665c:	4690      	mov	r8, r2
 800665e:	461f      	mov	r7, r3
 8006660:	d838      	bhi.n	80066d4 <__ssputs_r+0x84>
 8006662:	898a      	ldrh	r2, [r1, #12]
 8006664:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006668:	d032      	beq.n	80066d0 <__ssputs_r+0x80>
 800666a:	6825      	ldr	r5, [r4, #0]
 800666c:	6909      	ldr	r1, [r1, #16]
 800666e:	eba5 0901 	sub.w	r9, r5, r1
 8006672:	6965      	ldr	r5, [r4, #20]
 8006674:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006678:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800667c:	3301      	adds	r3, #1
 800667e:	444b      	add	r3, r9
 8006680:	106d      	asrs	r5, r5, #1
 8006682:	429d      	cmp	r5, r3
 8006684:	bf38      	it	cc
 8006686:	461d      	movcc	r5, r3
 8006688:	0553      	lsls	r3, r2, #21
 800668a:	d531      	bpl.n	80066f0 <__ssputs_r+0xa0>
 800668c:	4629      	mov	r1, r5
 800668e:	f000 fb47 	bl	8006d20 <_malloc_r>
 8006692:	4606      	mov	r6, r0
 8006694:	b950      	cbnz	r0, 80066ac <__ssputs_r+0x5c>
 8006696:	230c      	movs	r3, #12
 8006698:	f8ca 3000 	str.w	r3, [sl]
 800669c:	89a3      	ldrh	r3, [r4, #12]
 800669e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80066a2:	81a3      	strh	r3, [r4, #12]
 80066a4:	f04f 30ff 	mov.w	r0, #4294967295
 80066a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80066ac:	6921      	ldr	r1, [r4, #16]
 80066ae:	464a      	mov	r2, r9
 80066b0:	f000 fabe 	bl	8006c30 <memcpy>
 80066b4:	89a3      	ldrh	r3, [r4, #12]
 80066b6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80066ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80066be:	81a3      	strh	r3, [r4, #12]
 80066c0:	6126      	str	r6, [r4, #16]
 80066c2:	6165      	str	r5, [r4, #20]
 80066c4:	444e      	add	r6, r9
 80066c6:	eba5 0509 	sub.w	r5, r5, r9
 80066ca:	6026      	str	r6, [r4, #0]
 80066cc:	60a5      	str	r5, [r4, #8]
 80066ce:	463e      	mov	r6, r7
 80066d0:	42be      	cmp	r6, r7
 80066d2:	d900      	bls.n	80066d6 <__ssputs_r+0x86>
 80066d4:	463e      	mov	r6, r7
 80066d6:	4632      	mov	r2, r6
 80066d8:	6820      	ldr	r0, [r4, #0]
 80066da:	4641      	mov	r1, r8
 80066dc:	f000 fab6 	bl	8006c4c <memmove>
 80066e0:	68a3      	ldr	r3, [r4, #8]
 80066e2:	6822      	ldr	r2, [r4, #0]
 80066e4:	1b9b      	subs	r3, r3, r6
 80066e6:	4432      	add	r2, r6
 80066e8:	60a3      	str	r3, [r4, #8]
 80066ea:	6022      	str	r2, [r4, #0]
 80066ec:	2000      	movs	r0, #0
 80066ee:	e7db      	b.n	80066a8 <__ssputs_r+0x58>
 80066f0:	462a      	mov	r2, r5
 80066f2:	f000 fb6f 	bl	8006dd4 <_realloc_r>
 80066f6:	4606      	mov	r6, r0
 80066f8:	2800      	cmp	r0, #0
 80066fa:	d1e1      	bne.n	80066c0 <__ssputs_r+0x70>
 80066fc:	6921      	ldr	r1, [r4, #16]
 80066fe:	4650      	mov	r0, sl
 8006700:	f000 fabe 	bl	8006c80 <_free_r>
 8006704:	e7c7      	b.n	8006696 <__ssputs_r+0x46>
	...

08006708 <_svfiprintf_r>:
 8006708:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800670c:	4698      	mov	r8, r3
 800670e:	898b      	ldrh	r3, [r1, #12]
 8006710:	061b      	lsls	r3, r3, #24
 8006712:	b09d      	sub	sp, #116	; 0x74
 8006714:	4607      	mov	r7, r0
 8006716:	460d      	mov	r5, r1
 8006718:	4614      	mov	r4, r2
 800671a:	d50e      	bpl.n	800673a <_svfiprintf_r+0x32>
 800671c:	690b      	ldr	r3, [r1, #16]
 800671e:	b963      	cbnz	r3, 800673a <_svfiprintf_r+0x32>
 8006720:	2140      	movs	r1, #64	; 0x40
 8006722:	f000 fafd 	bl	8006d20 <_malloc_r>
 8006726:	6028      	str	r0, [r5, #0]
 8006728:	6128      	str	r0, [r5, #16]
 800672a:	b920      	cbnz	r0, 8006736 <_svfiprintf_r+0x2e>
 800672c:	230c      	movs	r3, #12
 800672e:	603b      	str	r3, [r7, #0]
 8006730:	f04f 30ff 	mov.w	r0, #4294967295
 8006734:	e0d1      	b.n	80068da <_svfiprintf_r+0x1d2>
 8006736:	2340      	movs	r3, #64	; 0x40
 8006738:	616b      	str	r3, [r5, #20]
 800673a:	2300      	movs	r3, #0
 800673c:	9309      	str	r3, [sp, #36]	; 0x24
 800673e:	2320      	movs	r3, #32
 8006740:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006744:	f8cd 800c 	str.w	r8, [sp, #12]
 8006748:	2330      	movs	r3, #48	; 0x30
 800674a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80068f4 <_svfiprintf_r+0x1ec>
 800674e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006752:	f04f 0901 	mov.w	r9, #1
 8006756:	4623      	mov	r3, r4
 8006758:	469a      	mov	sl, r3
 800675a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800675e:	b10a      	cbz	r2, 8006764 <_svfiprintf_r+0x5c>
 8006760:	2a25      	cmp	r2, #37	; 0x25
 8006762:	d1f9      	bne.n	8006758 <_svfiprintf_r+0x50>
 8006764:	ebba 0b04 	subs.w	fp, sl, r4
 8006768:	d00b      	beq.n	8006782 <_svfiprintf_r+0x7a>
 800676a:	465b      	mov	r3, fp
 800676c:	4622      	mov	r2, r4
 800676e:	4629      	mov	r1, r5
 8006770:	4638      	mov	r0, r7
 8006772:	f7ff ff6d 	bl	8006650 <__ssputs_r>
 8006776:	3001      	adds	r0, #1
 8006778:	f000 80aa 	beq.w	80068d0 <_svfiprintf_r+0x1c8>
 800677c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800677e:	445a      	add	r2, fp
 8006780:	9209      	str	r2, [sp, #36]	; 0x24
 8006782:	f89a 3000 	ldrb.w	r3, [sl]
 8006786:	2b00      	cmp	r3, #0
 8006788:	f000 80a2 	beq.w	80068d0 <_svfiprintf_r+0x1c8>
 800678c:	2300      	movs	r3, #0
 800678e:	f04f 32ff 	mov.w	r2, #4294967295
 8006792:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006796:	f10a 0a01 	add.w	sl, sl, #1
 800679a:	9304      	str	r3, [sp, #16]
 800679c:	9307      	str	r3, [sp, #28]
 800679e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80067a2:	931a      	str	r3, [sp, #104]	; 0x68
 80067a4:	4654      	mov	r4, sl
 80067a6:	2205      	movs	r2, #5
 80067a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80067ac:	4851      	ldr	r0, [pc, #324]	; (80068f4 <_svfiprintf_r+0x1ec>)
 80067ae:	f7f9 fd97 	bl	80002e0 <memchr>
 80067b2:	9a04      	ldr	r2, [sp, #16]
 80067b4:	b9d8      	cbnz	r0, 80067ee <_svfiprintf_r+0xe6>
 80067b6:	06d0      	lsls	r0, r2, #27
 80067b8:	bf44      	itt	mi
 80067ba:	2320      	movmi	r3, #32
 80067bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80067c0:	0711      	lsls	r1, r2, #28
 80067c2:	bf44      	itt	mi
 80067c4:	232b      	movmi	r3, #43	; 0x2b
 80067c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80067ca:	f89a 3000 	ldrb.w	r3, [sl]
 80067ce:	2b2a      	cmp	r3, #42	; 0x2a
 80067d0:	d015      	beq.n	80067fe <_svfiprintf_r+0xf6>
 80067d2:	9a07      	ldr	r2, [sp, #28]
 80067d4:	4654      	mov	r4, sl
 80067d6:	2000      	movs	r0, #0
 80067d8:	f04f 0c0a 	mov.w	ip, #10
 80067dc:	4621      	mov	r1, r4
 80067de:	f811 3b01 	ldrb.w	r3, [r1], #1
 80067e2:	3b30      	subs	r3, #48	; 0x30
 80067e4:	2b09      	cmp	r3, #9
 80067e6:	d94e      	bls.n	8006886 <_svfiprintf_r+0x17e>
 80067e8:	b1b0      	cbz	r0, 8006818 <_svfiprintf_r+0x110>
 80067ea:	9207      	str	r2, [sp, #28]
 80067ec:	e014      	b.n	8006818 <_svfiprintf_r+0x110>
 80067ee:	eba0 0308 	sub.w	r3, r0, r8
 80067f2:	fa09 f303 	lsl.w	r3, r9, r3
 80067f6:	4313      	orrs	r3, r2
 80067f8:	9304      	str	r3, [sp, #16]
 80067fa:	46a2      	mov	sl, r4
 80067fc:	e7d2      	b.n	80067a4 <_svfiprintf_r+0x9c>
 80067fe:	9b03      	ldr	r3, [sp, #12]
 8006800:	1d19      	adds	r1, r3, #4
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	9103      	str	r1, [sp, #12]
 8006806:	2b00      	cmp	r3, #0
 8006808:	bfbb      	ittet	lt
 800680a:	425b      	neglt	r3, r3
 800680c:	f042 0202 	orrlt.w	r2, r2, #2
 8006810:	9307      	strge	r3, [sp, #28]
 8006812:	9307      	strlt	r3, [sp, #28]
 8006814:	bfb8      	it	lt
 8006816:	9204      	strlt	r2, [sp, #16]
 8006818:	7823      	ldrb	r3, [r4, #0]
 800681a:	2b2e      	cmp	r3, #46	; 0x2e
 800681c:	d10c      	bne.n	8006838 <_svfiprintf_r+0x130>
 800681e:	7863      	ldrb	r3, [r4, #1]
 8006820:	2b2a      	cmp	r3, #42	; 0x2a
 8006822:	d135      	bne.n	8006890 <_svfiprintf_r+0x188>
 8006824:	9b03      	ldr	r3, [sp, #12]
 8006826:	1d1a      	adds	r2, r3, #4
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	9203      	str	r2, [sp, #12]
 800682c:	2b00      	cmp	r3, #0
 800682e:	bfb8      	it	lt
 8006830:	f04f 33ff 	movlt.w	r3, #4294967295
 8006834:	3402      	adds	r4, #2
 8006836:	9305      	str	r3, [sp, #20]
 8006838:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006904 <_svfiprintf_r+0x1fc>
 800683c:	7821      	ldrb	r1, [r4, #0]
 800683e:	2203      	movs	r2, #3
 8006840:	4650      	mov	r0, sl
 8006842:	f7f9 fd4d 	bl	80002e0 <memchr>
 8006846:	b140      	cbz	r0, 800685a <_svfiprintf_r+0x152>
 8006848:	2340      	movs	r3, #64	; 0x40
 800684a:	eba0 000a 	sub.w	r0, r0, sl
 800684e:	fa03 f000 	lsl.w	r0, r3, r0
 8006852:	9b04      	ldr	r3, [sp, #16]
 8006854:	4303      	orrs	r3, r0
 8006856:	3401      	adds	r4, #1
 8006858:	9304      	str	r3, [sp, #16]
 800685a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800685e:	4826      	ldr	r0, [pc, #152]	; (80068f8 <_svfiprintf_r+0x1f0>)
 8006860:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006864:	2206      	movs	r2, #6
 8006866:	f7f9 fd3b 	bl	80002e0 <memchr>
 800686a:	2800      	cmp	r0, #0
 800686c:	d038      	beq.n	80068e0 <_svfiprintf_r+0x1d8>
 800686e:	4b23      	ldr	r3, [pc, #140]	; (80068fc <_svfiprintf_r+0x1f4>)
 8006870:	bb1b      	cbnz	r3, 80068ba <_svfiprintf_r+0x1b2>
 8006872:	9b03      	ldr	r3, [sp, #12]
 8006874:	3307      	adds	r3, #7
 8006876:	f023 0307 	bic.w	r3, r3, #7
 800687a:	3308      	adds	r3, #8
 800687c:	9303      	str	r3, [sp, #12]
 800687e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006880:	4433      	add	r3, r6
 8006882:	9309      	str	r3, [sp, #36]	; 0x24
 8006884:	e767      	b.n	8006756 <_svfiprintf_r+0x4e>
 8006886:	fb0c 3202 	mla	r2, ip, r2, r3
 800688a:	460c      	mov	r4, r1
 800688c:	2001      	movs	r0, #1
 800688e:	e7a5      	b.n	80067dc <_svfiprintf_r+0xd4>
 8006890:	2300      	movs	r3, #0
 8006892:	3401      	adds	r4, #1
 8006894:	9305      	str	r3, [sp, #20]
 8006896:	4619      	mov	r1, r3
 8006898:	f04f 0c0a 	mov.w	ip, #10
 800689c:	4620      	mov	r0, r4
 800689e:	f810 2b01 	ldrb.w	r2, [r0], #1
 80068a2:	3a30      	subs	r2, #48	; 0x30
 80068a4:	2a09      	cmp	r2, #9
 80068a6:	d903      	bls.n	80068b0 <_svfiprintf_r+0x1a8>
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d0c5      	beq.n	8006838 <_svfiprintf_r+0x130>
 80068ac:	9105      	str	r1, [sp, #20]
 80068ae:	e7c3      	b.n	8006838 <_svfiprintf_r+0x130>
 80068b0:	fb0c 2101 	mla	r1, ip, r1, r2
 80068b4:	4604      	mov	r4, r0
 80068b6:	2301      	movs	r3, #1
 80068b8:	e7f0      	b.n	800689c <_svfiprintf_r+0x194>
 80068ba:	ab03      	add	r3, sp, #12
 80068bc:	9300      	str	r3, [sp, #0]
 80068be:	462a      	mov	r2, r5
 80068c0:	4b0f      	ldr	r3, [pc, #60]	; (8006900 <_svfiprintf_r+0x1f8>)
 80068c2:	a904      	add	r1, sp, #16
 80068c4:	4638      	mov	r0, r7
 80068c6:	f3af 8000 	nop.w
 80068ca:	1c42      	adds	r2, r0, #1
 80068cc:	4606      	mov	r6, r0
 80068ce:	d1d6      	bne.n	800687e <_svfiprintf_r+0x176>
 80068d0:	89ab      	ldrh	r3, [r5, #12]
 80068d2:	065b      	lsls	r3, r3, #25
 80068d4:	f53f af2c 	bmi.w	8006730 <_svfiprintf_r+0x28>
 80068d8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80068da:	b01d      	add	sp, #116	; 0x74
 80068dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068e0:	ab03      	add	r3, sp, #12
 80068e2:	9300      	str	r3, [sp, #0]
 80068e4:	462a      	mov	r2, r5
 80068e6:	4b06      	ldr	r3, [pc, #24]	; (8006900 <_svfiprintf_r+0x1f8>)
 80068e8:	a904      	add	r1, sp, #16
 80068ea:	4638      	mov	r0, r7
 80068ec:	f000 f87a 	bl	80069e4 <_printf_i>
 80068f0:	e7eb      	b.n	80068ca <_svfiprintf_r+0x1c2>
 80068f2:	bf00      	nop
 80068f4:	08006eac 	.word	0x08006eac
 80068f8:	08006eb6 	.word	0x08006eb6
 80068fc:	00000000 	.word	0x00000000
 8006900:	08006651 	.word	0x08006651
 8006904:	08006eb2 	.word	0x08006eb2

08006908 <_printf_common>:
 8006908:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800690c:	4616      	mov	r6, r2
 800690e:	4699      	mov	r9, r3
 8006910:	688a      	ldr	r2, [r1, #8]
 8006912:	690b      	ldr	r3, [r1, #16]
 8006914:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006918:	4293      	cmp	r3, r2
 800691a:	bfb8      	it	lt
 800691c:	4613      	movlt	r3, r2
 800691e:	6033      	str	r3, [r6, #0]
 8006920:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006924:	4607      	mov	r7, r0
 8006926:	460c      	mov	r4, r1
 8006928:	b10a      	cbz	r2, 800692e <_printf_common+0x26>
 800692a:	3301      	adds	r3, #1
 800692c:	6033      	str	r3, [r6, #0]
 800692e:	6823      	ldr	r3, [r4, #0]
 8006930:	0699      	lsls	r1, r3, #26
 8006932:	bf42      	ittt	mi
 8006934:	6833      	ldrmi	r3, [r6, #0]
 8006936:	3302      	addmi	r3, #2
 8006938:	6033      	strmi	r3, [r6, #0]
 800693a:	6825      	ldr	r5, [r4, #0]
 800693c:	f015 0506 	ands.w	r5, r5, #6
 8006940:	d106      	bne.n	8006950 <_printf_common+0x48>
 8006942:	f104 0a19 	add.w	sl, r4, #25
 8006946:	68e3      	ldr	r3, [r4, #12]
 8006948:	6832      	ldr	r2, [r6, #0]
 800694a:	1a9b      	subs	r3, r3, r2
 800694c:	42ab      	cmp	r3, r5
 800694e:	dc26      	bgt.n	800699e <_printf_common+0x96>
 8006950:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006954:	1e13      	subs	r3, r2, #0
 8006956:	6822      	ldr	r2, [r4, #0]
 8006958:	bf18      	it	ne
 800695a:	2301      	movne	r3, #1
 800695c:	0692      	lsls	r2, r2, #26
 800695e:	d42b      	bmi.n	80069b8 <_printf_common+0xb0>
 8006960:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006964:	4649      	mov	r1, r9
 8006966:	4638      	mov	r0, r7
 8006968:	47c0      	blx	r8
 800696a:	3001      	adds	r0, #1
 800696c:	d01e      	beq.n	80069ac <_printf_common+0xa4>
 800696e:	6823      	ldr	r3, [r4, #0]
 8006970:	68e5      	ldr	r5, [r4, #12]
 8006972:	6832      	ldr	r2, [r6, #0]
 8006974:	f003 0306 	and.w	r3, r3, #6
 8006978:	2b04      	cmp	r3, #4
 800697a:	bf08      	it	eq
 800697c:	1aad      	subeq	r5, r5, r2
 800697e:	68a3      	ldr	r3, [r4, #8]
 8006980:	6922      	ldr	r2, [r4, #16]
 8006982:	bf0c      	ite	eq
 8006984:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006988:	2500      	movne	r5, #0
 800698a:	4293      	cmp	r3, r2
 800698c:	bfc4      	itt	gt
 800698e:	1a9b      	subgt	r3, r3, r2
 8006990:	18ed      	addgt	r5, r5, r3
 8006992:	2600      	movs	r6, #0
 8006994:	341a      	adds	r4, #26
 8006996:	42b5      	cmp	r5, r6
 8006998:	d11a      	bne.n	80069d0 <_printf_common+0xc8>
 800699a:	2000      	movs	r0, #0
 800699c:	e008      	b.n	80069b0 <_printf_common+0xa8>
 800699e:	2301      	movs	r3, #1
 80069a0:	4652      	mov	r2, sl
 80069a2:	4649      	mov	r1, r9
 80069a4:	4638      	mov	r0, r7
 80069a6:	47c0      	blx	r8
 80069a8:	3001      	adds	r0, #1
 80069aa:	d103      	bne.n	80069b4 <_printf_common+0xac>
 80069ac:	f04f 30ff 	mov.w	r0, #4294967295
 80069b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80069b4:	3501      	adds	r5, #1
 80069b6:	e7c6      	b.n	8006946 <_printf_common+0x3e>
 80069b8:	18e1      	adds	r1, r4, r3
 80069ba:	1c5a      	adds	r2, r3, #1
 80069bc:	2030      	movs	r0, #48	; 0x30
 80069be:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80069c2:	4422      	add	r2, r4
 80069c4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80069c8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80069cc:	3302      	adds	r3, #2
 80069ce:	e7c7      	b.n	8006960 <_printf_common+0x58>
 80069d0:	2301      	movs	r3, #1
 80069d2:	4622      	mov	r2, r4
 80069d4:	4649      	mov	r1, r9
 80069d6:	4638      	mov	r0, r7
 80069d8:	47c0      	blx	r8
 80069da:	3001      	adds	r0, #1
 80069dc:	d0e6      	beq.n	80069ac <_printf_common+0xa4>
 80069de:	3601      	adds	r6, #1
 80069e0:	e7d9      	b.n	8006996 <_printf_common+0x8e>
	...

080069e4 <_printf_i>:
 80069e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80069e8:	460c      	mov	r4, r1
 80069ea:	4691      	mov	r9, r2
 80069ec:	7e27      	ldrb	r7, [r4, #24]
 80069ee:	990c      	ldr	r1, [sp, #48]	; 0x30
 80069f0:	2f78      	cmp	r7, #120	; 0x78
 80069f2:	4680      	mov	r8, r0
 80069f4:	469a      	mov	sl, r3
 80069f6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80069fa:	d807      	bhi.n	8006a0c <_printf_i+0x28>
 80069fc:	2f62      	cmp	r7, #98	; 0x62
 80069fe:	d80a      	bhi.n	8006a16 <_printf_i+0x32>
 8006a00:	2f00      	cmp	r7, #0
 8006a02:	f000 80d8 	beq.w	8006bb6 <_printf_i+0x1d2>
 8006a06:	2f58      	cmp	r7, #88	; 0x58
 8006a08:	f000 80a3 	beq.w	8006b52 <_printf_i+0x16e>
 8006a0c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006a10:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006a14:	e03a      	b.n	8006a8c <_printf_i+0xa8>
 8006a16:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006a1a:	2b15      	cmp	r3, #21
 8006a1c:	d8f6      	bhi.n	8006a0c <_printf_i+0x28>
 8006a1e:	a001      	add	r0, pc, #4	; (adr r0, 8006a24 <_printf_i+0x40>)
 8006a20:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8006a24:	08006a7d 	.word	0x08006a7d
 8006a28:	08006a91 	.word	0x08006a91
 8006a2c:	08006a0d 	.word	0x08006a0d
 8006a30:	08006a0d 	.word	0x08006a0d
 8006a34:	08006a0d 	.word	0x08006a0d
 8006a38:	08006a0d 	.word	0x08006a0d
 8006a3c:	08006a91 	.word	0x08006a91
 8006a40:	08006a0d 	.word	0x08006a0d
 8006a44:	08006a0d 	.word	0x08006a0d
 8006a48:	08006a0d 	.word	0x08006a0d
 8006a4c:	08006a0d 	.word	0x08006a0d
 8006a50:	08006b9d 	.word	0x08006b9d
 8006a54:	08006ac1 	.word	0x08006ac1
 8006a58:	08006b7f 	.word	0x08006b7f
 8006a5c:	08006a0d 	.word	0x08006a0d
 8006a60:	08006a0d 	.word	0x08006a0d
 8006a64:	08006bbf 	.word	0x08006bbf
 8006a68:	08006a0d 	.word	0x08006a0d
 8006a6c:	08006ac1 	.word	0x08006ac1
 8006a70:	08006a0d 	.word	0x08006a0d
 8006a74:	08006a0d 	.word	0x08006a0d
 8006a78:	08006b87 	.word	0x08006b87
 8006a7c:	680b      	ldr	r3, [r1, #0]
 8006a7e:	1d1a      	adds	r2, r3, #4
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	600a      	str	r2, [r1, #0]
 8006a84:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006a88:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006a8c:	2301      	movs	r3, #1
 8006a8e:	e0a3      	b.n	8006bd8 <_printf_i+0x1f4>
 8006a90:	6825      	ldr	r5, [r4, #0]
 8006a92:	6808      	ldr	r0, [r1, #0]
 8006a94:	062e      	lsls	r6, r5, #24
 8006a96:	f100 0304 	add.w	r3, r0, #4
 8006a9a:	d50a      	bpl.n	8006ab2 <_printf_i+0xce>
 8006a9c:	6805      	ldr	r5, [r0, #0]
 8006a9e:	600b      	str	r3, [r1, #0]
 8006aa0:	2d00      	cmp	r5, #0
 8006aa2:	da03      	bge.n	8006aac <_printf_i+0xc8>
 8006aa4:	232d      	movs	r3, #45	; 0x2d
 8006aa6:	426d      	negs	r5, r5
 8006aa8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006aac:	485e      	ldr	r0, [pc, #376]	; (8006c28 <_printf_i+0x244>)
 8006aae:	230a      	movs	r3, #10
 8006ab0:	e019      	b.n	8006ae6 <_printf_i+0x102>
 8006ab2:	f015 0f40 	tst.w	r5, #64	; 0x40
 8006ab6:	6805      	ldr	r5, [r0, #0]
 8006ab8:	600b      	str	r3, [r1, #0]
 8006aba:	bf18      	it	ne
 8006abc:	b22d      	sxthne	r5, r5
 8006abe:	e7ef      	b.n	8006aa0 <_printf_i+0xbc>
 8006ac0:	680b      	ldr	r3, [r1, #0]
 8006ac2:	6825      	ldr	r5, [r4, #0]
 8006ac4:	1d18      	adds	r0, r3, #4
 8006ac6:	6008      	str	r0, [r1, #0]
 8006ac8:	0628      	lsls	r0, r5, #24
 8006aca:	d501      	bpl.n	8006ad0 <_printf_i+0xec>
 8006acc:	681d      	ldr	r5, [r3, #0]
 8006ace:	e002      	b.n	8006ad6 <_printf_i+0xf2>
 8006ad0:	0669      	lsls	r1, r5, #25
 8006ad2:	d5fb      	bpl.n	8006acc <_printf_i+0xe8>
 8006ad4:	881d      	ldrh	r5, [r3, #0]
 8006ad6:	4854      	ldr	r0, [pc, #336]	; (8006c28 <_printf_i+0x244>)
 8006ad8:	2f6f      	cmp	r7, #111	; 0x6f
 8006ada:	bf0c      	ite	eq
 8006adc:	2308      	moveq	r3, #8
 8006ade:	230a      	movne	r3, #10
 8006ae0:	2100      	movs	r1, #0
 8006ae2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006ae6:	6866      	ldr	r6, [r4, #4]
 8006ae8:	60a6      	str	r6, [r4, #8]
 8006aea:	2e00      	cmp	r6, #0
 8006aec:	bfa2      	ittt	ge
 8006aee:	6821      	ldrge	r1, [r4, #0]
 8006af0:	f021 0104 	bicge.w	r1, r1, #4
 8006af4:	6021      	strge	r1, [r4, #0]
 8006af6:	b90d      	cbnz	r5, 8006afc <_printf_i+0x118>
 8006af8:	2e00      	cmp	r6, #0
 8006afa:	d04d      	beq.n	8006b98 <_printf_i+0x1b4>
 8006afc:	4616      	mov	r6, r2
 8006afe:	fbb5 f1f3 	udiv	r1, r5, r3
 8006b02:	fb03 5711 	mls	r7, r3, r1, r5
 8006b06:	5dc7      	ldrb	r7, [r0, r7]
 8006b08:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006b0c:	462f      	mov	r7, r5
 8006b0e:	42bb      	cmp	r3, r7
 8006b10:	460d      	mov	r5, r1
 8006b12:	d9f4      	bls.n	8006afe <_printf_i+0x11a>
 8006b14:	2b08      	cmp	r3, #8
 8006b16:	d10b      	bne.n	8006b30 <_printf_i+0x14c>
 8006b18:	6823      	ldr	r3, [r4, #0]
 8006b1a:	07df      	lsls	r7, r3, #31
 8006b1c:	d508      	bpl.n	8006b30 <_printf_i+0x14c>
 8006b1e:	6923      	ldr	r3, [r4, #16]
 8006b20:	6861      	ldr	r1, [r4, #4]
 8006b22:	4299      	cmp	r1, r3
 8006b24:	bfde      	ittt	le
 8006b26:	2330      	movle	r3, #48	; 0x30
 8006b28:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006b2c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006b30:	1b92      	subs	r2, r2, r6
 8006b32:	6122      	str	r2, [r4, #16]
 8006b34:	f8cd a000 	str.w	sl, [sp]
 8006b38:	464b      	mov	r3, r9
 8006b3a:	aa03      	add	r2, sp, #12
 8006b3c:	4621      	mov	r1, r4
 8006b3e:	4640      	mov	r0, r8
 8006b40:	f7ff fee2 	bl	8006908 <_printf_common>
 8006b44:	3001      	adds	r0, #1
 8006b46:	d14c      	bne.n	8006be2 <_printf_i+0x1fe>
 8006b48:	f04f 30ff 	mov.w	r0, #4294967295
 8006b4c:	b004      	add	sp, #16
 8006b4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b52:	4835      	ldr	r0, [pc, #212]	; (8006c28 <_printf_i+0x244>)
 8006b54:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006b58:	6823      	ldr	r3, [r4, #0]
 8006b5a:	680e      	ldr	r6, [r1, #0]
 8006b5c:	061f      	lsls	r7, r3, #24
 8006b5e:	f856 5b04 	ldr.w	r5, [r6], #4
 8006b62:	600e      	str	r6, [r1, #0]
 8006b64:	d514      	bpl.n	8006b90 <_printf_i+0x1ac>
 8006b66:	07d9      	lsls	r1, r3, #31
 8006b68:	bf44      	itt	mi
 8006b6a:	f043 0320 	orrmi.w	r3, r3, #32
 8006b6e:	6023      	strmi	r3, [r4, #0]
 8006b70:	b91d      	cbnz	r5, 8006b7a <_printf_i+0x196>
 8006b72:	6823      	ldr	r3, [r4, #0]
 8006b74:	f023 0320 	bic.w	r3, r3, #32
 8006b78:	6023      	str	r3, [r4, #0]
 8006b7a:	2310      	movs	r3, #16
 8006b7c:	e7b0      	b.n	8006ae0 <_printf_i+0xfc>
 8006b7e:	6823      	ldr	r3, [r4, #0]
 8006b80:	f043 0320 	orr.w	r3, r3, #32
 8006b84:	6023      	str	r3, [r4, #0]
 8006b86:	2378      	movs	r3, #120	; 0x78
 8006b88:	4828      	ldr	r0, [pc, #160]	; (8006c2c <_printf_i+0x248>)
 8006b8a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006b8e:	e7e3      	b.n	8006b58 <_printf_i+0x174>
 8006b90:	065e      	lsls	r6, r3, #25
 8006b92:	bf48      	it	mi
 8006b94:	b2ad      	uxthmi	r5, r5
 8006b96:	e7e6      	b.n	8006b66 <_printf_i+0x182>
 8006b98:	4616      	mov	r6, r2
 8006b9a:	e7bb      	b.n	8006b14 <_printf_i+0x130>
 8006b9c:	680b      	ldr	r3, [r1, #0]
 8006b9e:	6826      	ldr	r6, [r4, #0]
 8006ba0:	6960      	ldr	r0, [r4, #20]
 8006ba2:	1d1d      	adds	r5, r3, #4
 8006ba4:	600d      	str	r5, [r1, #0]
 8006ba6:	0635      	lsls	r5, r6, #24
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	d501      	bpl.n	8006bb0 <_printf_i+0x1cc>
 8006bac:	6018      	str	r0, [r3, #0]
 8006bae:	e002      	b.n	8006bb6 <_printf_i+0x1d2>
 8006bb0:	0671      	lsls	r1, r6, #25
 8006bb2:	d5fb      	bpl.n	8006bac <_printf_i+0x1c8>
 8006bb4:	8018      	strh	r0, [r3, #0]
 8006bb6:	2300      	movs	r3, #0
 8006bb8:	6123      	str	r3, [r4, #16]
 8006bba:	4616      	mov	r6, r2
 8006bbc:	e7ba      	b.n	8006b34 <_printf_i+0x150>
 8006bbe:	680b      	ldr	r3, [r1, #0]
 8006bc0:	1d1a      	adds	r2, r3, #4
 8006bc2:	600a      	str	r2, [r1, #0]
 8006bc4:	681e      	ldr	r6, [r3, #0]
 8006bc6:	6862      	ldr	r2, [r4, #4]
 8006bc8:	2100      	movs	r1, #0
 8006bca:	4630      	mov	r0, r6
 8006bcc:	f7f9 fb88 	bl	80002e0 <memchr>
 8006bd0:	b108      	cbz	r0, 8006bd6 <_printf_i+0x1f2>
 8006bd2:	1b80      	subs	r0, r0, r6
 8006bd4:	6060      	str	r0, [r4, #4]
 8006bd6:	6863      	ldr	r3, [r4, #4]
 8006bd8:	6123      	str	r3, [r4, #16]
 8006bda:	2300      	movs	r3, #0
 8006bdc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006be0:	e7a8      	b.n	8006b34 <_printf_i+0x150>
 8006be2:	6923      	ldr	r3, [r4, #16]
 8006be4:	4632      	mov	r2, r6
 8006be6:	4649      	mov	r1, r9
 8006be8:	4640      	mov	r0, r8
 8006bea:	47d0      	blx	sl
 8006bec:	3001      	adds	r0, #1
 8006bee:	d0ab      	beq.n	8006b48 <_printf_i+0x164>
 8006bf0:	6823      	ldr	r3, [r4, #0]
 8006bf2:	079b      	lsls	r3, r3, #30
 8006bf4:	d413      	bmi.n	8006c1e <_printf_i+0x23a>
 8006bf6:	68e0      	ldr	r0, [r4, #12]
 8006bf8:	9b03      	ldr	r3, [sp, #12]
 8006bfa:	4298      	cmp	r0, r3
 8006bfc:	bfb8      	it	lt
 8006bfe:	4618      	movlt	r0, r3
 8006c00:	e7a4      	b.n	8006b4c <_printf_i+0x168>
 8006c02:	2301      	movs	r3, #1
 8006c04:	4632      	mov	r2, r6
 8006c06:	4649      	mov	r1, r9
 8006c08:	4640      	mov	r0, r8
 8006c0a:	47d0      	blx	sl
 8006c0c:	3001      	adds	r0, #1
 8006c0e:	d09b      	beq.n	8006b48 <_printf_i+0x164>
 8006c10:	3501      	adds	r5, #1
 8006c12:	68e3      	ldr	r3, [r4, #12]
 8006c14:	9903      	ldr	r1, [sp, #12]
 8006c16:	1a5b      	subs	r3, r3, r1
 8006c18:	42ab      	cmp	r3, r5
 8006c1a:	dcf2      	bgt.n	8006c02 <_printf_i+0x21e>
 8006c1c:	e7eb      	b.n	8006bf6 <_printf_i+0x212>
 8006c1e:	2500      	movs	r5, #0
 8006c20:	f104 0619 	add.w	r6, r4, #25
 8006c24:	e7f5      	b.n	8006c12 <_printf_i+0x22e>
 8006c26:	bf00      	nop
 8006c28:	08006ebd 	.word	0x08006ebd
 8006c2c:	08006ece 	.word	0x08006ece

08006c30 <memcpy>:
 8006c30:	440a      	add	r2, r1
 8006c32:	4291      	cmp	r1, r2
 8006c34:	f100 33ff 	add.w	r3, r0, #4294967295
 8006c38:	d100      	bne.n	8006c3c <memcpy+0xc>
 8006c3a:	4770      	bx	lr
 8006c3c:	b510      	push	{r4, lr}
 8006c3e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006c42:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006c46:	4291      	cmp	r1, r2
 8006c48:	d1f9      	bne.n	8006c3e <memcpy+0xe>
 8006c4a:	bd10      	pop	{r4, pc}

08006c4c <memmove>:
 8006c4c:	4288      	cmp	r0, r1
 8006c4e:	b510      	push	{r4, lr}
 8006c50:	eb01 0402 	add.w	r4, r1, r2
 8006c54:	d902      	bls.n	8006c5c <memmove+0x10>
 8006c56:	4284      	cmp	r4, r0
 8006c58:	4623      	mov	r3, r4
 8006c5a:	d807      	bhi.n	8006c6c <memmove+0x20>
 8006c5c:	1e43      	subs	r3, r0, #1
 8006c5e:	42a1      	cmp	r1, r4
 8006c60:	d008      	beq.n	8006c74 <memmove+0x28>
 8006c62:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006c66:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006c6a:	e7f8      	b.n	8006c5e <memmove+0x12>
 8006c6c:	4402      	add	r2, r0
 8006c6e:	4601      	mov	r1, r0
 8006c70:	428a      	cmp	r2, r1
 8006c72:	d100      	bne.n	8006c76 <memmove+0x2a>
 8006c74:	bd10      	pop	{r4, pc}
 8006c76:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006c7a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006c7e:	e7f7      	b.n	8006c70 <memmove+0x24>

08006c80 <_free_r>:
 8006c80:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006c82:	2900      	cmp	r1, #0
 8006c84:	d048      	beq.n	8006d18 <_free_r+0x98>
 8006c86:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006c8a:	9001      	str	r0, [sp, #4]
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	f1a1 0404 	sub.w	r4, r1, #4
 8006c92:	bfb8      	it	lt
 8006c94:	18e4      	addlt	r4, r4, r3
 8006c96:	f000 f8d3 	bl	8006e40 <__malloc_lock>
 8006c9a:	4a20      	ldr	r2, [pc, #128]	; (8006d1c <_free_r+0x9c>)
 8006c9c:	9801      	ldr	r0, [sp, #4]
 8006c9e:	6813      	ldr	r3, [r2, #0]
 8006ca0:	4615      	mov	r5, r2
 8006ca2:	b933      	cbnz	r3, 8006cb2 <_free_r+0x32>
 8006ca4:	6063      	str	r3, [r4, #4]
 8006ca6:	6014      	str	r4, [r2, #0]
 8006ca8:	b003      	add	sp, #12
 8006caa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006cae:	f000 b8cd 	b.w	8006e4c <__malloc_unlock>
 8006cb2:	42a3      	cmp	r3, r4
 8006cb4:	d90b      	bls.n	8006cce <_free_r+0x4e>
 8006cb6:	6821      	ldr	r1, [r4, #0]
 8006cb8:	1862      	adds	r2, r4, r1
 8006cba:	4293      	cmp	r3, r2
 8006cbc:	bf04      	itt	eq
 8006cbe:	681a      	ldreq	r2, [r3, #0]
 8006cc0:	685b      	ldreq	r3, [r3, #4]
 8006cc2:	6063      	str	r3, [r4, #4]
 8006cc4:	bf04      	itt	eq
 8006cc6:	1852      	addeq	r2, r2, r1
 8006cc8:	6022      	streq	r2, [r4, #0]
 8006cca:	602c      	str	r4, [r5, #0]
 8006ccc:	e7ec      	b.n	8006ca8 <_free_r+0x28>
 8006cce:	461a      	mov	r2, r3
 8006cd0:	685b      	ldr	r3, [r3, #4]
 8006cd2:	b10b      	cbz	r3, 8006cd8 <_free_r+0x58>
 8006cd4:	42a3      	cmp	r3, r4
 8006cd6:	d9fa      	bls.n	8006cce <_free_r+0x4e>
 8006cd8:	6811      	ldr	r1, [r2, #0]
 8006cda:	1855      	adds	r5, r2, r1
 8006cdc:	42a5      	cmp	r5, r4
 8006cde:	d10b      	bne.n	8006cf8 <_free_r+0x78>
 8006ce0:	6824      	ldr	r4, [r4, #0]
 8006ce2:	4421      	add	r1, r4
 8006ce4:	1854      	adds	r4, r2, r1
 8006ce6:	42a3      	cmp	r3, r4
 8006ce8:	6011      	str	r1, [r2, #0]
 8006cea:	d1dd      	bne.n	8006ca8 <_free_r+0x28>
 8006cec:	681c      	ldr	r4, [r3, #0]
 8006cee:	685b      	ldr	r3, [r3, #4]
 8006cf0:	6053      	str	r3, [r2, #4]
 8006cf2:	4421      	add	r1, r4
 8006cf4:	6011      	str	r1, [r2, #0]
 8006cf6:	e7d7      	b.n	8006ca8 <_free_r+0x28>
 8006cf8:	d902      	bls.n	8006d00 <_free_r+0x80>
 8006cfa:	230c      	movs	r3, #12
 8006cfc:	6003      	str	r3, [r0, #0]
 8006cfe:	e7d3      	b.n	8006ca8 <_free_r+0x28>
 8006d00:	6825      	ldr	r5, [r4, #0]
 8006d02:	1961      	adds	r1, r4, r5
 8006d04:	428b      	cmp	r3, r1
 8006d06:	bf04      	itt	eq
 8006d08:	6819      	ldreq	r1, [r3, #0]
 8006d0a:	685b      	ldreq	r3, [r3, #4]
 8006d0c:	6063      	str	r3, [r4, #4]
 8006d0e:	bf04      	itt	eq
 8006d10:	1949      	addeq	r1, r1, r5
 8006d12:	6021      	streq	r1, [r4, #0]
 8006d14:	6054      	str	r4, [r2, #4]
 8006d16:	e7c7      	b.n	8006ca8 <_free_r+0x28>
 8006d18:	b003      	add	sp, #12
 8006d1a:	bd30      	pop	{r4, r5, pc}
 8006d1c:	24000094 	.word	0x24000094

08006d20 <_malloc_r>:
 8006d20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d22:	1ccd      	adds	r5, r1, #3
 8006d24:	f025 0503 	bic.w	r5, r5, #3
 8006d28:	3508      	adds	r5, #8
 8006d2a:	2d0c      	cmp	r5, #12
 8006d2c:	bf38      	it	cc
 8006d2e:	250c      	movcc	r5, #12
 8006d30:	2d00      	cmp	r5, #0
 8006d32:	4606      	mov	r6, r0
 8006d34:	db01      	blt.n	8006d3a <_malloc_r+0x1a>
 8006d36:	42a9      	cmp	r1, r5
 8006d38:	d903      	bls.n	8006d42 <_malloc_r+0x22>
 8006d3a:	230c      	movs	r3, #12
 8006d3c:	6033      	str	r3, [r6, #0]
 8006d3e:	2000      	movs	r0, #0
 8006d40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006d42:	f000 f87d 	bl	8006e40 <__malloc_lock>
 8006d46:	4921      	ldr	r1, [pc, #132]	; (8006dcc <_malloc_r+0xac>)
 8006d48:	680a      	ldr	r2, [r1, #0]
 8006d4a:	4614      	mov	r4, r2
 8006d4c:	b99c      	cbnz	r4, 8006d76 <_malloc_r+0x56>
 8006d4e:	4f20      	ldr	r7, [pc, #128]	; (8006dd0 <_malloc_r+0xb0>)
 8006d50:	683b      	ldr	r3, [r7, #0]
 8006d52:	b923      	cbnz	r3, 8006d5e <_malloc_r+0x3e>
 8006d54:	4621      	mov	r1, r4
 8006d56:	4630      	mov	r0, r6
 8006d58:	f000 f862 	bl	8006e20 <_sbrk_r>
 8006d5c:	6038      	str	r0, [r7, #0]
 8006d5e:	4629      	mov	r1, r5
 8006d60:	4630      	mov	r0, r6
 8006d62:	f000 f85d 	bl	8006e20 <_sbrk_r>
 8006d66:	1c43      	adds	r3, r0, #1
 8006d68:	d123      	bne.n	8006db2 <_malloc_r+0x92>
 8006d6a:	230c      	movs	r3, #12
 8006d6c:	6033      	str	r3, [r6, #0]
 8006d6e:	4630      	mov	r0, r6
 8006d70:	f000 f86c 	bl	8006e4c <__malloc_unlock>
 8006d74:	e7e3      	b.n	8006d3e <_malloc_r+0x1e>
 8006d76:	6823      	ldr	r3, [r4, #0]
 8006d78:	1b5b      	subs	r3, r3, r5
 8006d7a:	d417      	bmi.n	8006dac <_malloc_r+0x8c>
 8006d7c:	2b0b      	cmp	r3, #11
 8006d7e:	d903      	bls.n	8006d88 <_malloc_r+0x68>
 8006d80:	6023      	str	r3, [r4, #0]
 8006d82:	441c      	add	r4, r3
 8006d84:	6025      	str	r5, [r4, #0]
 8006d86:	e004      	b.n	8006d92 <_malloc_r+0x72>
 8006d88:	6863      	ldr	r3, [r4, #4]
 8006d8a:	42a2      	cmp	r2, r4
 8006d8c:	bf0c      	ite	eq
 8006d8e:	600b      	streq	r3, [r1, #0]
 8006d90:	6053      	strne	r3, [r2, #4]
 8006d92:	4630      	mov	r0, r6
 8006d94:	f000 f85a 	bl	8006e4c <__malloc_unlock>
 8006d98:	f104 000b 	add.w	r0, r4, #11
 8006d9c:	1d23      	adds	r3, r4, #4
 8006d9e:	f020 0007 	bic.w	r0, r0, #7
 8006da2:	1ac2      	subs	r2, r0, r3
 8006da4:	d0cc      	beq.n	8006d40 <_malloc_r+0x20>
 8006da6:	1a1b      	subs	r3, r3, r0
 8006da8:	50a3      	str	r3, [r4, r2]
 8006daa:	e7c9      	b.n	8006d40 <_malloc_r+0x20>
 8006dac:	4622      	mov	r2, r4
 8006dae:	6864      	ldr	r4, [r4, #4]
 8006db0:	e7cc      	b.n	8006d4c <_malloc_r+0x2c>
 8006db2:	1cc4      	adds	r4, r0, #3
 8006db4:	f024 0403 	bic.w	r4, r4, #3
 8006db8:	42a0      	cmp	r0, r4
 8006dba:	d0e3      	beq.n	8006d84 <_malloc_r+0x64>
 8006dbc:	1a21      	subs	r1, r4, r0
 8006dbe:	4630      	mov	r0, r6
 8006dc0:	f000 f82e 	bl	8006e20 <_sbrk_r>
 8006dc4:	3001      	adds	r0, #1
 8006dc6:	d1dd      	bne.n	8006d84 <_malloc_r+0x64>
 8006dc8:	e7cf      	b.n	8006d6a <_malloc_r+0x4a>
 8006dca:	bf00      	nop
 8006dcc:	24000094 	.word	0x24000094
 8006dd0:	24000098 	.word	0x24000098

08006dd4 <_realloc_r>:
 8006dd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006dd6:	4607      	mov	r7, r0
 8006dd8:	4614      	mov	r4, r2
 8006dda:	460e      	mov	r6, r1
 8006ddc:	b921      	cbnz	r1, 8006de8 <_realloc_r+0x14>
 8006dde:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006de2:	4611      	mov	r1, r2
 8006de4:	f7ff bf9c 	b.w	8006d20 <_malloc_r>
 8006de8:	b922      	cbnz	r2, 8006df4 <_realloc_r+0x20>
 8006dea:	f7ff ff49 	bl	8006c80 <_free_r>
 8006dee:	4625      	mov	r5, r4
 8006df0:	4628      	mov	r0, r5
 8006df2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006df4:	f000 f830 	bl	8006e58 <_malloc_usable_size_r>
 8006df8:	42a0      	cmp	r0, r4
 8006dfa:	d20f      	bcs.n	8006e1c <_realloc_r+0x48>
 8006dfc:	4621      	mov	r1, r4
 8006dfe:	4638      	mov	r0, r7
 8006e00:	f7ff ff8e 	bl	8006d20 <_malloc_r>
 8006e04:	4605      	mov	r5, r0
 8006e06:	2800      	cmp	r0, #0
 8006e08:	d0f2      	beq.n	8006df0 <_realloc_r+0x1c>
 8006e0a:	4631      	mov	r1, r6
 8006e0c:	4622      	mov	r2, r4
 8006e0e:	f7ff ff0f 	bl	8006c30 <memcpy>
 8006e12:	4631      	mov	r1, r6
 8006e14:	4638      	mov	r0, r7
 8006e16:	f7ff ff33 	bl	8006c80 <_free_r>
 8006e1a:	e7e9      	b.n	8006df0 <_realloc_r+0x1c>
 8006e1c:	4635      	mov	r5, r6
 8006e1e:	e7e7      	b.n	8006df0 <_realloc_r+0x1c>

08006e20 <_sbrk_r>:
 8006e20:	b538      	push	{r3, r4, r5, lr}
 8006e22:	4d06      	ldr	r5, [pc, #24]	; (8006e3c <_sbrk_r+0x1c>)
 8006e24:	2300      	movs	r3, #0
 8006e26:	4604      	mov	r4, r0
 8006e28:	4608      	mov	r0, r1
 8006e2a:	602b      	str	r3, [r5, #0]
 8006e2c:	f7f9 ffb0 	bl	8000d90 <_sbrk>
 8006e30:	1c43      	adds	r3, r0, #1
 8006e32:	d102      	bne.n	8006e3a <_sbrk_r+0x1a>
 8006e34:	682b      	ldr	r3, [r5, #0]
 8006e36:	b103      	cbz	r3, 8006e3a <_sbrk_r+0x1a>
 8006e38:	6023      	str	r3, [r4, #0]
 8006e3a:	bd38      	pop	{r3, r4, r5, pc}
 8006e3c:	24000150 	.word	0x24000150

08006e40 <__malloc_lock>:
 8006e40:	4801      	ldr	r0, [pc, #4]	; (8006e48 <__malloc_lock+0x8>)
 8006e42:	f000 b811 	b.w	8006e68 <__retarget_lock_acquire_recursive>
 8006e46:	bf00      	nop
 8006e48:	24000158 	.word	0x24000158

08006e4c <__malloc_unlock>:
 8006e4c:	4801      	ldr	r0, [pc, #4]	; (8006e54 <__malloc_unlock+0x8>)
 8006e4e:	f000 b80c 	b.w	8006e6a <__retarget_lock_release_recursive>
 8006e52:	bf00      	nop
 8006e54:	24000158 	.word	0x24000158

08006e58 <_malloc_usable_size_r>:
 8006e58:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006e5c:	1f18      	subs	r0, r3, #4
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	bfbc      	itt	lt
 8006e62:	580b      	ldrlt	r3, [r1, r0]
 8006e64:	18c0      	addlt	r0, r0, r3
 8006e66:	4770      	bx	lr

08006e68 <__retarget_lock_acquire_recursive>:
 8006e68:	4770      	bx	lr

08006e6a <__retarget_lock_release_recursive>:
 8006e6a:	4770      	bx	lr

08006e6c <_init>:
 8006e6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e6e:	bf00      	nop
 8006e70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e72:	bc08      	pop	{r3}
 8006e74:	469e      	mov	lr, r3
 8006e76:	4770      	bx	lr

08006e78 <_fini>:
 8006e78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e7a:	bf00      	nop
 8006e7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e7e:	bc08      	pop	{r3}
 8006e80:	469e      	mov	lr, r3
 8006e82:	4770      	bx	lr
